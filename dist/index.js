import { createRequire } from "module";
import process$1 from "node:process";
import { access, readFile } from "node:fs/promises";
import { basename, join } from "node:path";
import { URL as URL$1, URLSearchParams as URLSearchParams$1 } from "node:url";

//#region rolldown:runtime
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function() {
	return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from$2, except, desc$1) => {
	if (from$2 && typeof from$2 === "object" || typeof from$2 === "function") for (var keys$2 = __getOwnPropNames(from$2), i = 0, n = keys$2.length, key$1; i < n; i++) {
		key$1 = keys$2[i];
		if (!__hasOwnProp.call(to, key$1) && key$1 !== except) __defProp(to, key$1, {
			get: ((k) => from$2[k]).bind(null, key$1),
			enumerable: !(desc$1 = __getOwnPropDesc(from$2, key$1)) || desc$1.enumerable
		});
	}
	return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", {
	value: mod,
	enumerable: true
}) : target, mod));
var __require = /* @__PURE__ */ createRequire(import.meta.url);

//#endregion
//#region node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/utils.js
var require_utils$1 = __commonJS({ "node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/utils.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.toCommandProperties = exports.toCommandValue = void 0;
	/**
	* Sanitizes an input into a string so it can be passed into issueCommand safely
	* @param input input to sanitize into a string
	*/
	function toCommandValue(input) {
		if (input === null || input === void 0) return "";
		else if (typeof input === "string" || input instanceof String) return input;
		return JSON.stringify(input);
	}
	exports.toCommandValue = toCommandValue;
	/**
	*
	* @param annotationProperties
	* @returns The command properties to send with the actual annotation command
	* See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646
	*/
	function toCommandProperties(annotationProperties) {
		if (!Object.keys(annotationProperties).length) return {};
		return {
			title: annotationProperties.title,
			file: annotationProperties.file,
			line: annotationProperties.startLine,
			endLine: annotationProperties.endLine,
			col: annotationProperties.startColumn,
			endColumn: annotationProperties.endColumn
		};
	}
	exports.toCommandProperties = toCommandProperties;
} });

//#endregion
//#region node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/command.js
var require_command = __commonJS({ "node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/command.js"(exports) {
	var __createBinding$23 = exports && exports.__createBinding || (Object.create ? function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc$1 = Object.getOwnPropertyDescriptor(m$1, k);
		if (!desc$1 || ("get" in desc$1 ? !m$1.__esModule : desc$1.writable || desc$1.configurable)) desc$1 = {
			enumerable: true,
			get: function() {
				return m$1[k];
			}
		};
		Object.defineProperty(o, k2, desc$1);
	} : function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		o[k2] = m$1[k];
	});
	var __setModuleDefault$12 = exports && exports.__setModuleDefault || (Object.create ? function(o, v$1) {
		Object.defineProperty(o, "default", {
			enumerable: true,
			value: v$1
		});
	} : function(o, v$1) {
		o["default"] = v$1;
	});
	var __importStar$12 = exports && exports.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$23(result, mod, k);
		}
		__setModuleDefault$12(result, mod);
		return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.issue = exports.issueCommand = void 0;
	const os$10 = __importStar$12(__require("os"));
	const utils_1$3 = require_utils$1();
	/**
	* Commands
	*
	* Command Format:
	*   ::name key=value,key=value::message
	*
	* Examples:
	*   ::warning::This is the message
	*   ::set-env name=MY_VAR::some value
	*/
	function issueCommand(command, properties, message) {
		const cmd = new Command(command, properties, message);
		process.stdout.write(cmd.toString() + os$10.EOL);
	}
	exports.issueCommand = issueCommand;
	function issue(name$2, message = "") {
		issueCommand(name$2, {}, message);
	}
	exports.issue = issue;
	const CMD_STRING = "::";
	var Command = class {
		constructor(command, properties, message) {
			if (!command) command = "missing.command";
			this.command = command;
			this.properties = properties;
			this.message = message;
		}
		toString() {
			let cmdStr = CMD_STRING + this.command;
			if (this.properties && Object.keys(this.properties).length > 0) {
				cmdStr += " ";
				let first$1 = true;
				for (const key$1 in this.properties) if (this.properties.hasOwnProperty(key$1)) {
					const val = this.properties[key$1];
					if (val) {
						if (first$1) first$1 = false;
						else cmdStr += ",";
						cmdStr += `${key$1}=${escapeProperty(val)}`;
					}
				}
			}
			cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
			return cmdStr;
		}
	};
	function escapeData(s$1) {
		return (0, utils_1$3.toCommandValue)(s$1).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A");
	}
	function escapeProperty(s$1) {
		return (0, utils_1$3.toCommandValue)(s$1).replace(/%/g, "%25").replace(/\r/g, "%0D").replace(/\n/g, "%0A").replace(/:/g, "%3A").replace(/,/g, "%2C");
	}
} });

//#endregion
//#region node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/file-command.js
var require_file_command = __commonJS({ "node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/file-command.js"(exports) {
	var __createBinding$22 = exports && exports.__createBinding || (Object.create ? function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc$1 = Object.getOwnPropertyDescriptor(m$1, k);
		if (!desc$1 || ("get" in desc$1 ? !m$1.__esModule : desc$1.writable || desc$1.configurable)) desc$1 = {
			enumerable: true,
			get: function() {
				return m$1[k];
			}
		};
		Object.defineProperty(o, k2, desc$1);
	} : function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		o[k2] = m$1[k];
	});
	var __setModuleDefault$11 = exports && exports.__setModuleDefault || (Object.create ? function(o, v$1) {
		Object.defineProperty(o, "default", {
			enumerable: true,
			value: v$1
		});
	} : function(o, v$1) {
		o["default"] = v$1;
	});
	var __importStar$11 = exports && exports.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$22(result, mod, k);
		}
		__setModuleDefault$11(result, mod);
		return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.prepareKeyValueMessage = exports.issueFileCommand = void 0;
	const crypto$6 = __importStar$11(__require("crypto"));
	const fs$9 = __importStar$11(__require("fs"));
	const os$9 = __importStar$11(__require("os"));
	const utils_1$2 = require_utils$1();
	function issueFileCommand(command, message) {
		const filePath = process.env[`GITHUB_${command}`];
		if (!filePath) throw new Error(`Unable to find environment variable for file command ${command}`);
		if (!fs$9.existsSync(filePath)) throw new Error(`Missing file at path: ${filePath}`);
		fs$9.appendFileSync(filePath, `${(0, utils_1$2.toCommandValue)(message)}${os$9.EOL}`, { encoding: "utf8" });
	}
	exports.issueFileCommand = issueFileCommand;
	function prepareKeyValueMessage(key$1, value) {
		const delimiter = `ghadelimiter_${crypto$6.randomUUID()}`;
		const convertedValue = (0, utils_1$2.toCommandValue)(value);
		if (key$1.includes(delimiter)) throw new Error(`Unexpected input: name should not contain the delimiter "${delimiter}"`);
		if (convertedValue.includes(delimiter)) throw new Error(`Unexpected input: value should not contain the delimiter "${delimiter}"`);
		return `${key$1}<<${delimiter}${os$9.EOL}${convertedValue}${os$9.EOL}${delimiter}`;
	}
	exports.prepareKeyValueMessage = prepareKeyValueMessage;
} });

//#endregion
//#region node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/proxy.js
var require_proxy = __commonJS({ "node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/proxy.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.checkBypass = exports.getProxyUrl = void 0;
	function getProxyUrl$1(reqUrl) {
		const usingSsl = reqUrl.protocol === "https:";
		if (checkBypass(reqUrl)) return void 0;
		const proxyVar = (() => {
			if (usingSsl) return process.env["https_proxy"] || process.env["HTTPS_PROXY"];
			else return process.env["http_proxy"] || process.env["HTTP_PROXY"];
		})();
		if (proxyVar) try {
			return new DecodedURL(proxyVar);
		} catch (_a$1) {
			if (!proxyVar.startsWith("http://") && !proxyVar.startsWith("https://")) return new DecodedURL(`http://${proxyVar}`);
		}
		else return void 0;
	}
	exports.getProxyUrl = getProxyUrl$1;
	function checkBypass(reqUrl) {
		if (!reqUrl.hostname) return false;
		const reqHost = reqUrl.hostname;
		if (isLoopbackAddress(reqHost)) return true;
		const noProxy = process.env["no_proxy"] || process.env["NO_PROXY"] || "";
		if (!noProxy) return false;
		let reqPort;
		if (reqUrl.port) reqPort = Number(reqUrl.port);
		else if (reqUrl.protocol === "http:") reqPort = 80;
		else if (reqUrl.protocol === "https:") reqPort = 443;
		const upperReqHosts = [reqUrl.hostname.toUpperCase()];
		if (typeof reqPort === "number") upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
		for (const upperNoProxyItem of noProxy.split(",").map((x) => x.trim().toUpperCase()).filter((x) => x)) if (upperNoProxyItem === "*" || upperReqHosts.some((x) => x === upperNoProxyItem || x.endsWith(`.${upperNoProxyItem}`) || upperNoProxyItem.startsWith(".") && x.endsWith(`${upperNoProxyItem}`))) return true;
		return false;
	}
	exports.checkBypass = checkBypass;
	function isLoopbackAddress(host) {
		const hostLower = host.toLowerCase();
		return hostLower === "localhost" || hostLower.startsWith("127.") || hostLower.startsWith("[::1]") || hostLower.startsWith("[0:0:0:0:0:0:0:1]");
	}
	var DecodedURL = class extends URL {
		constructor(url$3, base) {
			super(url$3, base);
			this._decodedUsername = decodeURIComponent(super.username);
			this._decodedPassword = decodeURIComponent(super.password);
		}
		get username() {
			return this._decodedUsername;
		}
		get password() {
			return this._decodedPassword;
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/tunnel@0.0.6/node_modules/tunnel/lib/tunnel.js
var require_tunnel$1 = __commonJS({ "node_modules/.pnpm/tunnel@0.0.6/node_modules/tunnel/lib/tunnel.js"(exports) {
	var net$3 = __require("net");
	var tls$1 = __require("tls");
	var http$8 = __require("http");
	var https$7 = __require("https");
	var events$3 = __require("events");
	var assert$27 = __require("assert");
	var util$33 = __require("util");
	exports.httpOverHttp = httpOverHttp;
	exports.httpsOverHttp = httpsOverHttp;
	exports.httpOverHttps = httpOverHttps;
	exports.httpsOverHttps = httpsOverHttps;
	function httpOverHttp(options) {
		var agent = new TunnelingAgent(options);
		agent.request = http$8.request;
		return agent;
	}
	function httpsOverHttp(options) {
		var agent = new TunnelingAgent(options);
		agent.request = http$8.request;
		agent.createSocket = createSecureSocket;
		agent.defaultPort = 443;
		return agent;
	}
	function httpOverHttps(options) {
		var agent = new TunnelingAgent(options);
		agent.request = https$7.request;
		return agent;
	}
	function httpsOverHttps(options) {
		var agent = new TunnelingAgent(options);
		agent.request = https$7.request;
		agent.createSocket = createSecureSocket;
		agent.defaultPort = 443;
		return agent;
	}
	function TunnelingAgent(options) {
		var self$1 = this;
		self$1.options = options || {};
		self$1.proxyOptions = self$1.options.proxy || {};
		self$1.maxSockets = self$1.options.maxSockets || http$8.Agent.defaultMaxSockets;
		self$1.requests = [];
		self$1.sockets = [];
		self$1.on("free", function onFree(socket, host, port, localAddress) {
			var options$1 = toOptions(host, port, localAddress);
			for (var i = 0, len = self$1.requests.length; i < len; ++i) {
				var pending = self$1.requests[i];
				if (pending.host === options$1.host && pending.port === options$1.port) {
					self$1.requests.splice(i, 1);
					pending.request.onSocket(socket);
					return;
				}
			}
			socket.destroy();
			self$1.removeSocket(socket);
		});
	}
	util$33.inherits(TunnelingAgent, events$3.EventEmitter);
	TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
		var self$1 = this;
		var options = mergeOptions({ request: req }, self$1.options, toOptions(host, port, localAddress));
		if (self$1.sockets.length >= this.maxSockets) {
			self$1.requests.push(options);
			return;
		}
		self$1.createSocket(options, function(socket) {
			socket.on("free", onFree);
			socket.on("close", onCloseOrRemove);
			socket.on("agentRemove", onCloseOrRemove);
			req.onSocket(socket);
			function onFree() {
				self$1.emit("free", socket, options);
			}
			function onCloseOrRemove(err) {
				self$1.removeSocket(socket);
				socket.removeListener("free", onFree);
				socket.removeListener("close", onCloseOrRemove);
				socket.removeListener("agentRemove", onCloseOrRemove);
			}
		});
	};
	TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
		var self$1 = this;
		var placeholder = {};
		self$1.sockets.push(placeholder);
		var connectOptions = mergeOptions({}, self$1.proxyOptions, {
			method: "CONNECT",
			path: options.host + ":" + options.port,
			agent: false,
			headers: { host: options.host + ":" + options.port }
		});
		if (options.localAddress) connectOptions.localAddress = options.localAddress;
		if (connectOptions.proxyAuth) {
			connectOptions.headers = connectOptions.headers || {};
			connectOptions.headers["Proxy-Authorization"] = "Basic " + new Buffer(connectOptions.proxyAuth).toString("base64");
		}
		debug$20("making CONNECT request");
		var connectReq = self$1.request(connectOptions);
		connectReq.useChunkedEncodingByDefault = false;
		connectReq.once("response", onResponse);
		connectReq.once("upgrade", onUpgrade);
		connectReq.once("connect", onConnect);
		connectReq.once("error", onError$1);
		connectReq.end();
		function onResponse(res) {
			res.upgrade = true;
		}
		function onUpgrade(res, socket, head) {
			process.nextTick(function() {
				onConnect(res, socket, head);
			});
		}
		function onConnect(res, socket, head) {
			connectReq.removeAllListeners();
			socket.removeAllListeners();
			if (res.statusCode !== 200) {
				debug$20("tunneling socket could not be established, statusCode=%d", res.statusCode);
				socket.destroy();
				var error$1 = new Error("tunneling socket could not be established, statusCode=" + res.statusCode);
				error$1.code = "ECONNRESET";
				options.request.emit("error", error$1);
				self$1.removeSocket(placeholder);
				return;
			}
			if (head.length > 0) {
				debug$20("got illegal response body from proxy");
				socket.destroy();
				var error$1 = new Error("got illegal response body from proxy");
				error$1.code = "ECONNRESET";
				options.request.emit("error", error$1);
				self$1.removeSocket(placeholder);
				return;
			}
			debug$20("tunneling connection has established");
			self$1.sockets[self$1.sockets.indexOf(placeholder)] = socket;
			return cb(socket);
		}
		function onError$1(cause) {
			connectReq.removeAllListeners();
			debug$20("tunneling socket could not be established, cause=%s\n", cause.message, cause.stack);
			var error$1 = new Error("tunneling socket could not be established, cause=" + cause.message);
			error$1.code = "ECONNRESET";
			options.request.emit("error", error$1);
			self$1.removeSocket(placeholder);
		}
	};
	TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
		var pos = this.sockets.indexOf(socket);
		if (pos === -1) return;
		this.sockets.splice(pos, 1);
		var pending = this.requests.shift();
		if (pending) this.createSocket(pending, function(socket$1) {
			pending.request.onSocket(socket$1);
		});
	};
	function createSecureSocket(options, cb) {
		var self$1 = this;
		TunnelingAgent.prototype.createSocket.call(self$1, options, function(socket) {
			var hostHeader = options.request.getHeader("host");
			var tlsOptions = mergeOptions({}, self$1.options, {
				socket,
				servername: hostHeader ? hostHeader.replace(/:.*$/, "") : options.host
			});
			var secureSocket = tls$1.connect(0, tlsOptions);
			self$1.sockets[self$1.sockets.indexOf(socket)] = secureSocket;
			cb(secureSocket);
		});
	}
	function toOptions(host, port, localAddress) {
		if (typeof host === "string") return {
			host,
			port,
			localAddress
		};
		return host;
	}
	function mergeOptions(target) {
		for (var i = 1, len = arguments.length; i < len; ++i) {
			var overrides = arguments[i];
			if (typeof overrides === "object") {
				var keys$2 = Object.keys(overrides);
				for (var j = 0, keyLen = keys$2.length; j < keyLen; ++j) {
					var k = keys$2[j];
					if (overrides[k] !== void 0) target[k] = overrides[k];
				}
			}
		}
		return target;
	}
	var debug$20;
	if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) debug$20 = function() {
		var args = Array.prototype.slice.call(arguments);
		if (typeof args[0] === "string") args[0] = "TUNNEL: " + args[0];
		else args.unshift("TUNNEL:");
		console.error.apply(console, args);
	};
	else debug$20 = function() {};
	exports.debug = debug$20;
} });

//#endregion
//#region node_modules/.pnpm/tunnel@0.0.6/node_modules/tunnel/index.js
var require_tunnel = __commonJS({ "node_modules/.pnpm/tunnel@0.0.6/node_modules/tunnel/index.js"(exports, module) {
	module.exports = require_tunnel$1();
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/core/symbols.js
var require_symbols$4 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/core/symbols.js"(exports, module) {
	module.exports = {
		kClose: Symbol("close"),
		kDestroy: Symbol("destroy"),
		kDispatch: Symbol("dispatch"),
		kUrl: Symbol("url"),
		kWriting: Symbol("writing"),
		kResuming: Symbol("resuming"),
		kQueue: Symbol("queue"),
		kConnect: Symbol("connect"),
		kConnecting: Symbol("connecting"),
		kHeadersList: Symbol("headers list"),
		kKeepAliveDefaultTimeout: Symbol("default keep alive timeout"),
		kKeepAliveMaxTimeout: Symbol("max keep alive timeout"),
		kKeepAliveTimeoutThreshold: Symbol("keep alive timeout threshold"),
		kKeepAliveTimeoutValue: Symbol("keep alive timeout"),
		kKeepAlive: Symbol("keep alive"),
		kHeadersTimeout: Symbol("headers timeout"),
		kBodyTimeout: Symbol("body timeout"),
		kServerName: Symbol("server name"),
		kLocalAddress: Symbol("local address"),
		kHost: Symbol("host"),
		kNoRef: Symbol("no ref"),
		kBodyUsed: Symbol("used"),
		kRunning: Symbol("running"),
		kBlocking: Symbol("blocking"),
		kPending: Symbol("pending"),
		kSize: Symbol("size"),
		kBusy: Symbol("busy"),
		kQueued: Symbol("queued"),
		kFree: Symbol("free"),
		kConnected: Symbol("connected"),
		kClosed: Symbol("closed"),
		kNeedDrain: Symbol("need drain"),
		kReset: Symbol("reset"),
		kDestroyed: Symbol.for("nodejs.stream.destroyed"),
		kMaxHeadersSize: Symbol("max headers size"),
		kRunningIdx: Symbol("running index"),
		kPendingIdx: Symbol("pending index"),
		kError: Symbol("error"),
		kClients: Symbol("clients"),
		kClient: Symbol("client"),
		kParser: Symbol("parser"),
		kOnDestroyed: Symbol("destroy callbacks"),
		kPipelining: Symbol("pipelining"),
		kSocket: Symbol("socket"),
		kHostHeader: Symbol("host header"),
		kConnector: Symbol("connector"),
		kStrictContentLength: Symbol("strict content length"),
		kMaxRedirections: Symbol("maxRedirections"),
		kMaxRequests: Symbol("maxRequestsPerClient"),
		kProxy: Symbol("proxy agent options"),
		kCounter: Symbol("socket request counter"),
		kInterceptors: Symbol("dispatch interceptors"),
		kMaxResponseSize: Symbol("max response size"),
		kHTTP2Session: Symbol("http2Session"),
		kHTTP2SessionState: Symbol("http2Session state"),
		kHTTP2BuildRequest: Symbol("http2 build request"),
		kHTTP1BuildRequest: Symbol("http1 build request"),
		kHTTP2CopyHeaders: Symbol("http2 copy headers"),
		kHTTPConnVersion: Symbol("http connection version"),
		kRetryHandlerDefaultRetry: Symbol("retry agent default retry"),
		kConstruct: Symbol("constructable")
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/core/errors.js
var require_errors$2 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/core/errors.js"(exports, module) {
	var UndiciError$2 = class extends Error {
		constructor(message) {
			super(message);
			this.name = "UndiciError";
			this.code = "UND_ERR";
		}
	};
	var ConnectTimeoutError$1 = class ConnectTimeoutError$1 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, ConnectTimeoutError$1);
			this.name = "ConnectTimeoutError";
			this.message = message || "Connect Timeout Error";
			this.code = "UND_ERR_CONNECT_TIMEOUT";
		}
	};
	var HeadersTimeoutError$1 = class HeadersTimeoutError$1 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, HeadersTimeoutError$1);
			this.name = "HeadersTimeoutError";
			this.message = message || "Headers Timeout Error";
			this.code = "UND_ERR_HEADERS_TIMEOUT";
		}
	};
	var HeadersOverflowError$1 = class HeadersOverflowError$1 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, HeadersOverflowError$1);
			this.name = "HeadersOverflowError";
			this.message = message || "Headers Overflow Error";
			this.code = "UND_ERR_HEADERS_OVERFLOW";
		}
	};
	var BodyTimeoutError$1 = class BodyTimeoutError$1 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, BodyTimeoutError$1);
			this.name = "BodyTimeoutError";
			this.message = message || "Body Timeout Error";
			this.code = "UND_ERR_BODY_TIMEOUT";
		}
	};
	var ResponseStatusCodeError$1 = class ResponseStatusCodeError$1 extends UndiciError$2 {
		constructor(message, statusCode, headers, body) {
			super(message);
			Error.captureStackTrace(this, ResponseStatusCodeError$1);
			this.name = "ResponseStatusCodeError";
			this.message = message || "Response Status Code Error";
			this.code = "UND_ERR_RESPONSE_STATUS_CODE";
			this.body = body;
			this.status = statusCode;
			this.statusCode = statusCode;
			this.headers = headers;
		}
	};
	var InvalidArgumentError$22 = class InvalidArgumentError$22 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, InvalidArgumentError$22);
			this.name = "InvalidArgumentError";
			this.message = message || "Invalid Argument Error";
			this.code = "UND_ERR_INVALID_ARG";
		}
	};
	var InvalidReturnValueError$2 = class InvalidReturnValueError$2 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, InvalidReturnValueError$2);
			this.name = "InvalidReturnValueError";
			this.message = message || "Invalid Return Value Error";
			this.code = "UND_ERR_INVALID_RETURN_VALUE";
		}
	};
	var RequestAbortedError$9 = class RequestAbortedError$9 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, RequestAbortedError$9);
			this.name = "AbortError";
			this.message = message || "Request aborted";
			this.code = "UND_ERR_ABORTED";
		}
	};
	var InformationalError$1 = class InformationalError$1 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, InformationalError$1);
			this.name = "InformationalError";
			this.message = message || "Request information";
			this.code = "UND_ERR_INFO";
		}
	};
	var RequestContentLengthMismatchError$1 = class RequestContentLengthMismatchError$1 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, RequestContentLengthMismatchError$1);
			this.name = "RequestContentLengthMismatchError";
			this.message = message || "Request body length does not match content-length header";
			this.code = "UND_ERR_REQ_CONTENT_LENGTH_MISMATCH";
		}
	};
	var ResponseContentLengthMismatchError$1 = class ResponseContentLengthMismatchError$1 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, ResponseContentLengthMismatchError$1);
			this.name = "ResponseContentLengthMismatchError";
			this.message = message || "Response body length does not match content-length header";
			this.code = "UND_ERR_RES_CONTENT_LENGTH_MISMATCH";
		}
	};
	var ClientDestroyedError$2 = class ClientDestroyedError$2 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, ClientDestroyedError$2);
			this.name = "ClientDestroyedError";
			this.message = message || "The client is destroyed";
			this.code = "UND_ERR_DESTROYED";
		}
	};
	var ClientClosedError$1 = class ClientClosedError$1 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, ClientClosedError$1);
			this.name = "ClientClosedError";
			this.message = message || "The client is closed";
			this.code = "UND_ERR_CLOSED";
		}
	};
	var SocketError$3 = class SocketError$3 extends UndiciError$2 {
		constructor(message, socket) {
			super(message);
			Error.captureStackTrace(this, SocketError$3);
			this.name = "SocketError";
			this.message = message || "Socket error";
			this.code = "UND_ERR_SOCKET";
			this.socket = socket;
		}
	};
	var NotSupportedError$2 = class NotSupportedError$2 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, NotSupportedError$2);
			this.name = "NotSupportedError";
			this.message = message || "Not supported error";
			this.code = "UND_ERR_NOT_SUPPORTED";
		}
	};
	var BalancedPoolMissingUpstreamError$1 = class extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, NotSupportedError$2);
			this.name = "MissingUpstreamError";
			this.message = message || "No upstream has been added to the BalancedPool";
			this.code = "UND_ERR_BPL_MISSING_UPSTREAM";
		}
	};
	var HTTPParserError$1 = class HTTPParserError$1 extends Error {
		constructor(message, code, data) {
			super(message);
			Error.captureStackTrace(this, HTTPParserError$1);
			this.name = "HTTPParserError";
			this.code = code ? `HPE_${code}` : void 0;
			this.data = data ? data.toString() : void 0;
		}
	};
	var ResponseExceededMaxSizeError$1 = class ResponseExceededMaxSizeError$1 extends UndiciError$2 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, ResponseExceededMaxSizeError$1);
			this.name = "ResponseExceededMaxSizeError";
			this.message = message || "Response content exceeded max size";
			this.code = "UND_ERR_RES_EXCEEDED_MAX_SIZE";
		}
	};
	var RequestRetryError$1 = class RequestRetryError$1 extends UndiciError$2 {
		constructor(message, code, { headers, data }) {
			super(message);
			Error.captureStackTrace(this, RequestRetryError$1);
			this.name = "RequestRetryError";
			this.message = message || "Request retry error";
			this.code = "UND_ERR_REQ_RETRY";
			this.statusCode = code;
			this.data = data;
			this.headers = headers;
		}
	};
	module.exports = {
		HTTPParserError: HTTPParserError$1,
		UndiciError: UndiciError$2,
		HeadersTimeoutError: HeadersTimeoutError$1,
		HeadersOverflowError: HeadersOverflowError$1,
		BodyTimeoutError: BodyTimeoutError$1,
		RequestContentLengthMismatchError: RequestContentLengthMismatchError$1,
		ConnectTimeoutError: ConnectTimeoutError$1,
		ResponseStatusCodeError: ResponseStatusCodeError$1,
		InvalidArgumentError: InvalidArgumentError$22,
		InvalidReturnValueError: InvalidReturnValueError$2,
		RequestAbortedError: RequestAbortedError$9,
		ClientDestroyedError: ClientDestroyedError$2,
		ClientClosedError: ClientClosedError$1,
		InformationalError: InformationalError$1,
		SocketError: SocketError$3,
		NotSupportedError: NotSupportedError$2,
		ResponseContentLengthMismatchError: ResponseContentLengthMismatchError$1,
		BalancedPoolMissingUpstreamError: BalancedPoolMissingUpstreamError$1,
		ResponseExceededMaxSizeError: ResponseExceededMaxSizeError$1,
		RequestRetryError: RequestRetryError$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/core/constants.js
var require_constants$6 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/core/constants.js"(exports, module) {
	/** @type {Record<string, string | undefined>} */
	const headerNameLowerCasedRecord$1 = {};
	const wellknownHeaderNames = [
		"Accept",
		"Accept-Encoding",
		"Accept-Language",
		"Accept-Ranges",
		"Access-Control-Allow-Credentials",
		"Access-Control-Allow-Headers",
		"Access-Control-Allow-Methods",
		"Access-Control-Allow-Origin",
		"Access-Control-Expose-Headers",
		"Access-Control-Max-Age",
		"Access-Control-Request-Headers",
		"Access-Control-Request-Method",
		"Age",
		"Allow",
		"Alt-Svc",
		"Alt-Used",
		"Authorization",
		"Cache-Control",
		"Clear-Site-Data",
		"Connection",
		"Content-Disposition",
		"Content-Encoding",
		"Content-Language",
		"Content-Length",
		"Content-Location",
		"Content-Range",
		"Content-Security-Policy",
		"Content-Security-Policy-Report-Only",
		"Content-Type",
		"Cookie",
		"Cross-Origin-Embedder-Policy",
		"Cross-Origin-Opener-Policy",
		"Cross-Origin-Resource-Policy",
		"Date",
		"Device-Memory",
		"Downlink",
		"ECT",
		"ETag",
		"Expect",
		"Expect-CT",
		"Expires",
		"Forwarded",
		"From",
		"Host",
		"If-Match",
		"If-Modified-Since",
		"If-None-Match",
		"If-Range",
		"If-Unmodified-Since",
		"Keep-Alive",
		"Last-Modified",
		"Link",
		"Location",
		"Max-Forwards",
		"Origin",
		"Permissions-Policy",
		"Pragma",
		"Proxy-Authenticate",
		"Proxy-Authorization",
		"RTT",
		"Range",
		"Referer",
		"Referrer-Policy",
		"Refresh",
		"Retry-After",
		"Sec-WebSocket-Accept",
		"Sec-WebSocket-Extensions",
		"Sec-WebSocket-Key",
		"Sec-WebSocket-Protocol",
		"Sec-WebSocket-Version",
		"Server",
		"Server-Timing",
		"Service-Worker-Allowed",
		"Service-Worker-Navigation-Preload",
		"Set-Cookie",
		"SourceMap",
		"Strict-Transport-Security",
		"Supports-Loading-Mode",
		"TE",
		"Timing-Allow-Origin",
		"Trailer",
		"Transfer-Encoding",
		"Upgrade",
		"Upgrade-Insecure-Requests",
		"User-Agent",
		"Vary",
		"Via",
		"WWW-Authenticate",
		"X-Content-Type-Options",
		"X-DNS-Prefetch-Control",
		"X-Frame-Options",
		"X-Permitted-Cross-Domain-Policies",
		"X-Powered-By",
		"X-Requested-With",
		"X-XSS-Protection"
	];
	for (let i = 0; i < wellknownHeaderNames.length; ++i) {
		const key$1 = wellknownHeaderNames[i];
		const lowerCasedKey = key$1.toLowerCase();
		headerNameLowerCasedRecord$1[key$1] = headerNameLowerCasedRecord$1[lowerCasedKey] = lowerCasedKey;
	}
	Object.setPrototypeOf(headerNameLowerCasedRecord$1, null);
	module.exports = {
		wellknownHeaderNames,
		headerNameLowerCasedRecord: headerNameLowerCasedRecord$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/core/util.js
var require_util$9 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/core/util.js"(exports, module) {
	const assert$26 = __require("assert");
	const { kDestroyed: kDestroyed$1, kBodyUsed: kBodyUsed$2 } = require_symbols$4();
	const { IncomingMessage } = __require("http");
	const stream$2 = __require("stream");
	const net$2 = __require("net");
	const { InvalidArgumentError: InvalidArgumentError$21 } = require_errors$2();
	const { Blob: Blob$5 } = __require("buffer");
	const nodeUtil = __require("util");
	const { stringify: stringify$4 } = __require("querystring");
	const { headerNameLowerCasedRecord } = require_constants$6();
	const [nodeMajor$1, nodeMinor$1] = process.versions.node.split(".").map((v$1) => Number(v$1));
	function nop$2() {}
	function isStream$4(obj) {
		return obj && typeof obj === "object" && typeof obj.pipe === "function" && typeof obj.on === "function";
	}
	function isBlobLike$7(object) {
		return Blob$5 && object instanceof Blob$5 || object && typeof object === "object" && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && /^(Blob|File)$/.test(object[Symbol.toStringTag]);
	}
	function buildURL$3(url$3, queryParams) {
		if (url$3.includes("?") || url$3.includes("#")) throw new Error("Query params cannot be passed when url already contains \"?\" or \"#\".");
		const stringified = stringify$4(queryParams);
		if (stringified) url$3 += "?" + stringified;
		return url$3;
	}
	function parseURL(url$3) {
		if (typeof url$3 === "string") {
			url$3 = new URL(url$3);
			if (!/^https?:/.test(url$3.origin || url$3.protocol)) throw new InvalidArgumentError$21("Invalid URL protocol: the URL must start with `http:` or `https:`.");
			return url$3;
		}
		if (!url$3 || typeof url$3 !== "object") throw new InvalidArgumentError$21("Invalid URL: The URL argument must be a non-null object.");
		if (!/^https?:/.test(url$3.origin || url$3.protocol)) throw new InvalidArgumentError$21("Invalid URL protocol: the URL must start with `http:` or `https:`.");
		if (!(url$3 instanceof URL)) {
			if (url$3.port != null && url$3.port !== "" && !Number.isFinite(parseInt(url$3.port))) throw new InvalidArgumentError$21("Invalid URL: port must be a valid integer or a string representation of an integer.");
			if (url$3.path != null && typeof url$3.path !== "string") throw new InvalidArgumentError$21("Invalid URL path: the path must be a string or null/undefined.");
			if (url$3.pathname != null && typeof url$3.pathname !== "string") throw new InvalidArgumentError$21("Invalid URL pathname: the pathname must be a string or null/undefined.");
			if (url$3.hostname != null && typeof url$3.hostname !== "string") throw new InvalidArgumentError$21("Invalid URL hostname: the hostname must be a string or null/undefined.");
			if (url$3.origin != null && typeof url$3.origin !== "string") throw new InvalidArgumentError$21("Invalid URL origin: the origin must be a string or null/undefined.");
			const port = url$3.port != null ? url$3.port : url$3.protocol === "https:" ? 443 : 80;
			let origin$1 = url$3.origin != null ? url$3.origin : `${url$3.protocol}//${url$3.hostname}:${port}`;
			let path$10 = url$3.path != null ? url$3.path : `${url$3.pathname || ""}${url$3.search || ""}`;
			if (origin$1.endsWith("/")) origin$1 = origin$1.substring(0, origin$1.length - 1);
			if (path$10 && !path$10.startsWith("/")) path$10 = `/${path$10}`;
			url$3 = new URL(origin$1 + path$10);
		}
		return url$3;
	}
	function parseOrigin$1(url$3) {
		url$3 = parseURL(url$3);
		if (url$3.pathname !== "/" || url$3.search || url$3.hash) throw new InvalidArgumentError$21("invalid url");
		return url$3;
	}
	function getHostname(host) {
		if (host[0] === "[") {
			const idx$1 = host.indexOf("]");
			assert$26(idx$1 !== -1);
			return host.substring(1, idx$1);
		}
		const idx = host.indexOf(":");
		if (idx === -1) return host;
		return host.substring(0, idx);
	}
	function getServerName(host) {
		if (!host) return null;
		assert$26.strictEqual(typeof host, "string");
		const servername = getHostname(host);
		if (net$2.isIP(servername)) return "";
		return servername;
	}
	function deepClone(obj) {
		return JSON.parse(JSON.stringify(obj));
	}
	function isAsyncIterable$1(obj) {
		return !!(obj != null && typeof obj[Symbol.asyncIterator] === "function");
	}
	function isIterable$1(obj) {
		return !!(obj != null && (typeof obj[Symbol.iterator] === "function" || typeof obj[Symbol.asyncIterator] === "function"));
	}
	function bodyLength(body) {
		if (body == null) return 0;
		else if (isStream$4(body)) {
			const state$1 = body._readableState;
			return state$1 && state$1.objectMode === false && state$1.ended === true && Number.isFinite(state$1.length) ? state$1.length : null;
		} else if (isBlobLike$7(body)) return body.size != null ? body.size : null;
		else if (isBuffer$2(body)) return body.byteLength;
		return null;
	}
	function isDestroyed(stream$3) {
		return !stream$3 || !!(stream$3.destroyed || stream$3[kDestroyed$1]);
	}
	function isReadableAborted(stream$3) {
		const state$1 = stream$3 && stream$3._readableState;
		return isDestroyed(stream$3) && state$1 && !state$1.endEmitted;
	}
	function destroy$2(stream$3, err) {
		if (stream$3 == null || !isStream$4(stream$3) || isDestroyed(stream$3)) return;
		if (typeof stream$3.destroy === "function") {
			if (Object.getPrototypeOf(stream$3).constructor === IncomingMessage) stream$3.socket = null;
			stream$3.destroy(err);
		} else if (err) process.nextTick((stream$4, err$1) => {
			stream$4.emit("error", err$1);
		}, stream$3, err);
		if (stream$3.destroyed !== true) stream$3[kDestroyed$1] = true;
	}
	const KEEPALIVE_TIMEOUT_EXPR = /timeout=(\d+)/;
	function parseKeepAliveTimeout(val) {
		const m$1 = val.toString().match(KEEPALIVE_TIMEOUT_EXPR);
		return m$1 ? parseInt(m$1[1], 10) * 1e3 : null;
	}
	/**
	* Retrieves a header name and returns its lowercase value.
	* @param {string | Buffer} value Header name
	* @returns {string}
	*/
	function headerNameToString(value) {
		return headerNameLowerCasedRecord[value] || value.toLowerCase();
	}
	function parseHeaders$2(headers, obj = {}) {
		if (!Array.isArray(headers)) return headers;
		for (let i = 0; i < headers.length; i += 2) {
			const key$1 = headers[i].toString().toLowerCase();
			let val = obj[key$1];
			if (!val) if (Array.isArray(headers[i + 1])) obj[key$1] = headers[i + 1].map((x) => x.toString("utf8"));
			else obj[key$1] = headers[i + 1].toString("utf8");
			else {
				if (!Array.isArray(val)) {
					val = [val];
					obj[key$1] = val;
				}
				val.push(headers[i + 1].toString("utf8"));
			}
		}
		if ("content-length" in obj && "content-disposition" in obj) obj["content-disposition"] = Buffer.from(obj["content-disposition"]).toString("latin1");
		return obj;
	}
	function parseRawHeaders(headers) {
		const ret = [];
		let hasContentLength = false;
		let contentDispositionIdx = -1;
		for (let n = 0; n < headers.length; n += 2) {
			const key$1 = headers[n + 0].toString();
			const val = headers[n + 1].toString("utf8");
			if (key$1.length === 14 && (key$1 === "content-length" || key$1.toLowerCase() === "content-length")) {
				ret.push(key$1, val);
				hasContentLength = true;
			} else if (key$1.length === 19 && (key$1 === "content-disposition" || key$1.toLowerCase() === "content-disposition")) contentDispositionIdx = ret.push(key$1, val) - 1;
			else ret.push(key$1, val);
		}
		if (hasContentLength && contentDispositionIdx !== -1) ret[contentDispositionIdx] = Buffer.from(ret[contentDispositionIdx]).toString("latin1");
		return ret;
	}
	function isBuffer$2(buffer$1) {
		return buffer$1 instanceof Uint8Array || Buffer.isBuffer(buffer$1);
	}
	function validateHandler(handler, method$1, upgrade$1) {
		if (!handler || typeof handler !== "object") throw new InvalidArgumentError$21("handler must be an object");
		if (typeof handler.onConnect !== "function") throw new InvalidArgumentError$21("invalid onConnect method");
		if (typeof handler.onError !== "function") throw new InvalidArgumentError$21("invalid onError method");
		if (typeof handler.onBodySent !== "function" && handler.onBodySent !== void 0) throw new InvalidArgumentError$21("invalid onBodySent method");
		if (upgrade$1 || method$1 === "CONNECT") {
			if (typeof handler.onUpgrade !== "function") throw new InvalidArgumentError$21("invalid onUpgrade method");
		} else {
			if (typeof handler.onHeaders !== "function") throw new InvalidArgumentError$21("invalid onHeaders method");
			if (typeof handler.onData !== "function") throw new InvalidArgumentError$21("invalid onData method");
			if (typeof handler.onComplete !== "function") throw new InvalidArgumentError$21("invalid onComplete method");
		}
	}
	function isDisturbed$2(body) {
		return !!(body && (stream$2.isDisturbed ? stream$2.isDisturbed(body) || body[kBodyUsed$2] : body[kBodyUsed$2] || body.readableDidRead || body._readableState && body._readableState.dataEmitted || isReadableAborted(body)));
	}
	function isErrored$2(body) {
		return !!(body && (stream$2.isErrored ? stream$2.isErrored(body) : /state: 'errored'/.test(nodeUtil.inspect(body))));
	}
	function isReadable$1(body) {
		return !!(body && (stream$2.isReadable ? stream$2.isReadable(body) : /state: 'readable'/.test(nodeUtil.inspect(body))));
	}
	function getSocketInfo(socket) {
		return {
			localAddress: socket.localAddress,
			localPort: socket.localPort,
			remoteAddress: socket.remoteAddress,
			remotePort: socket.remotePort,
			remoteFamily: socket.remoteFamily,
			timeout: socket.timeout,
			bytesWritten: socket.bytesWritten,
			bytesRead: socket.bytesRead
		};
	}
	async function* convertIterableToBuffer(iterable) {
		for await (const chunk of iterable) yield Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk);
	}
	let ReadableStream$6;
	function ReadableStreamFrom$3(iterable) {
		if (!ReadableStream$6) ReadableStream$6 = __require("stream/web").ReadableStream;
		if (ReadableStream$6.from) return ReadableStream$6.from(convertIterableToBuffer(iterable));
		let iterator$1;
		return new ReadableStream$6({
			async start() {
				iterator$1 = iterable[Symbol.asyncIterator]();
			},
			async pull(controller) {
				const { done: done$1, value } = await iterator$1.next();
				if (done$1) queueMicrotask(() => {
					controller.close();
				});
				else {
					const buf = Buffer.isBuffer(value) ? value : Buffer.from(value);
					controller.enqueue(new Uint8Array(buf));
				}
				return controller.desiredSize > 0;
			},
			async cancel(reason) {
				await iterator$1.return();
			}
		}, 0);
	}
	function isFormDataLike(object) {
		return object && typeof object === "object" && typeof object.append === "function" && typeof object.delete === "function" && typeof object.get === "function" && typeof object.getAll === "function" && typeof object.has === "function" && typeof object.set === "function" && object[Symbol.toStringTag] === "FormData";
	}
	function throwIfAborted$1(signal) {
		if (!signal) return;
		if (typeof signal.throwIfAborted === "function") signal.throwIfAborted();
		else if (signal.aborted) {
			const err = new Error("The operation was aborted");
			err.name = "AbortError";
			throw err;
		}
	}
	function addAbortListener$2(signal, listener) {
		if ("addEventListener" in signal) {
			signal.addEventListener("abort", listener, { once: true });
			return () => signal.removeEventListener("abort", listener);
		}
		signal.addListener("abort", listener);
		return () => signal.removeListener("abort", listener);
	}
	const hasToWellFormed = !!String.prototype.toWellFormed;
	/**
	* @param {string} val
	*/
	function toUSVString$5(val) {
		if (hasToWellFormed) return `${val}`.toWellFormed();
		else if (nodeUtil.toUSVString) return nodeUtil.toUSVString(val);
		return `${val}`;
	}
	function parseRangeHeader$1(range) {
		if (range == null || range === "") return {
			start: 0,
			end: null,
			size: null
		};
		const m$1 = range ? range.match(/^bytes (\d+)-(\d+)\/(\d+)?$/) : null;
		return m$1 ? {
			start: parseInt(m$1[1]),
			end: m$1[2] ? parseInt(m$1[2]) : null,
			size: m$1[3] ? parseInt(m$1[3]) : null
		} : null;
	}
	const kEnumerableProperty$9 = Object.create(null);
	kEnumerableProperty$9.enumerable = true;
	module.exports = {
		kEnumerableProperty: kEnumerableProperty$9,
		nop: nop$2,
		isDisturbed: isDisturbed$2,
		isErrored: isErrored$2,
		isReadable: isReadable$1,
		toUSVString: toUSVString$5,
		isReadableAborted,
		isBlobLike: isBlobLike$7,
		parseOrigin: parseOrigin$1,
		parseURL,
		getServerName,
		isStream: isStream$4,
		isIterable: isIterable$1,
		isAsyncIterable: isAsyncIterable$1,
		isDestroyed,
		headerNameToString,
		parseRawHeaders,
		parseHeaders: parseHeaders$2,
		parseKeepAliveTimeout,
		destroy: destroy$2,
		bodyLength,
		deepClone,
		ReadableStreamFrom: ReadableStreamFrom$3,
		isBuffer: isBuffer$2,
		validateHandler,
		getSocketInfo,
		isFormDataLike,
		buildURL: buildURL$3,
		throwIfAborted: throwIfAborted$1,
		addAbortListener: addAbortListener$2,
		parseRangeHeader: parseRangeHeader$1,
		nodeMajor: nodeMajor$1,
		nodeMinor: nodeMinor$1,
		nodeHasAutoSelectFamily: nodeMajor$1 > 18 || nodeMajor$1 === 18 && nodeMinor$1 >= 13,
		safeHTTPMethods: [
			"GET",
			"HEAD",
			"OPTIONS",
			"TRACE"
		]
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/timers.js
var require_timers = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/timers.js"(exports, module) {
	let fastNow = Date.now();
	let fastNowTimeout;
	const fastTimers = [];
	function onTimeout() {
		fastNow = Date.now();
		let len = fastTimers.length;
		let idx = 0;
		while (idx < len) {
			const timer = fastTimers[idx];
			if (timer.state === 0) timer.state = fastNow + timer.delay;
			else if (timer.state > 0 && fastNow >= timer.state) {
				timer.state = -1;
				timer.callback(timer.opaque);
			}
			if (timer.state === -1) {
				timer.state = -2;
				if (idx !== len - 1) fastTimers[idx] = fastTimers.pop();
				else fastTimers.pop();
				len -= 1;
			} else idx += 1;
		}
		if (fastTimers.length > 0) refreshTimeout();
	}
	function refreshTimeout() {
		if (fastNowTimeout && fastNowTimeout.refresh) fastNowTimeout.refresh();
		else {
			clearTimeout(fastNowTimeout);
			fastNowTimeout = setTimeout(onTimeout, 1e3);
			if (fastNowTimeout.unref) fastNowTimeout.unref();
		}
	}
	var Timeout = class {
		constructor(callback, delay, opaque) {
			this.callback = callback;
			this.delay = delay;
			this.opaque = opaque;
			this.state = -2;
			this.refresh();
		}
		refresh() {
			if (this.state === -2) {
				fastTimers.push(this);
				if (!fastNowTimeout || fastTimers.length === 1) refreshTimeout();
			}
			this.state = 0;
		}
		clear() {
			this.state = -1;
		}
	};
	module.exports = {
		setTimeout(callback, delay, opaque) {
			return delay < 1e3 ? setTimeout(callback, delay, opaque) : new Timeout(callback, delay, opaque);
		},
		clearTimeout(timeout$1) {
			if (timeout$1 instanceof Timeout) timeout$1.clear();
			else clearTimeout(timeout$1);
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/streamsearch/sbmh.js
var require_sbmh = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/streamsearch/sbmh.js"(exports, module) {
	/**
	* Copyright Brian White. All rights reserved.
	*
	* @see https://github.com/mscdex/streamsearch
	*
	* Permission is hereby granted, free of charge, to any person obtaining a copy
	* of this software and associated documentation files (the "Software"), to
	* deal in the Software without restriction, including without limitation the
	* rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	* sell copies of the Software, and to permit persons to whom the Software is
	* furnished to do so, subject to the following conditions:
	*
	* The above copyright notice and this permission notice shall be included in
	* all copies or substantial portions of the Software.
	*
	* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
	* IN THE SOFTWARE.
	*
	* Based heavily on the Streaming Boyer-Moore-Horspool C++ implementation
	* by Hongli Lai at: https://github.com/FooBarWidget/boyer-moore-horspool
	*/
	const EventEmitter$4 = __require("node:events").EventEmitter;
	const inherits$6 = __require("node:util").inherits;
	function SBMH(needle) {
		if (typeof needle === "string") needle = Buffer.from(needle);
		if (!Buffer.isBuffer(needle)) throw new TypeError("The needle has to be a String or a Buffer.");
		const needleLength = needle.length;
		if (needleLength === 0) throw new Error("The needle cannot be an empty String/Buffer.");
		if (needleLength > 256) throw new Error("The needle cannot have a length bigger than 256.");
		this.maxMatches = Infinity;
		this.matches = 0;
		this._occ = new Array(256).fill(needleLength);
		this._lookbehind_size = 0;
		this._needle = needle;
		this._bufpos = 0;
		this._lookbehind = Buffer.alloc(needleLength);
		for (var i = 0; i < needleLength - 1; ++i) this._occ[needle[i]] = needleLength - 1 - i;
	}
	inherits$6(SBMH, EventEmitter$4);
	SBMH.prototype.reset = function() {
		this._lookbehind_size = 0;
		this.matches = 0;
		this._bufpos = 0;
	};
	SBMH.prototype.push = function(chunk, pos) {
		if (!Buffer.isBuffer(chunk)) chunk = Buffer.from(chunk, "binary");
		const chlen = chunk.length;
		this._bufpos = pos || 0;
		let r;
		while (r !== chlen && this.matches < this.maxMatches) r = this._sbmh_feed(chunk);
		return r;
	};
	SBMH.prototype._sbmh_feed = function(data) {
		const len = data.length;
		const needle = this._needle;
		const needleLength = needle.length;
		const lastNeedleChar = needle[needleLength - 1];
		let pos = -this._lookbehind_size;
		let ch;
		if (pos < 0) {
			while (pos < 0 && pos <= len - needleLength) {
				ch = this._sbmh_lookup_char(data, pos + needleLength - 1);
				if (ch === lastNeedleChar && this._sbmh_memcmp(data, pos, needleLength - 1)) {
					this._lookbehind_size = 0;
					++this.matches;
					this.emit("info", true);
					return this._bufpos = pos + needleLength;
				}
				pos += this._occ[ch];
			}
			if (pos < 0) while (pos < 0 && !this._sbmh_memcmp(data, pos, len - pos)) ++pos;
			if (pos >= 0) {
				this.emit("info", false, this._lookbehind, 0, this._lookbehind_size);
				this._lookbehind_size = 0;
			} else {
				const bytesToCutOff = this._lookbehind_size + pos;
				if (bytesToCutOff > 0) this.emit("info", false, this._lookbehind, 0, bytesToCutOff);
				this._lookbehind.copy(this._lookbehind, 0, bytesToCutOff, this._lookbehind_size - bytesToCutOff);
				this._lookbehind_size -= bytesToCutOff;
				data.copy(this._lookbehind, this._lookbehind_size);
				this._lookbehind_size += len;
				this._bufpos = len;
				return len;
			}
		}
		pos += (pos >= 0) * this._bufpos;
		if (data.indexOf(needle, pos) !== -1) {
			pos = data.indexOf(needle, pos);
			++this.matches;
			if (pos > 0) this.emit("info", true, data, this._bufpos, pos);
			else this.emit("info", true);
			return this._bufpos = pos + needleLength;
		} else pos = len - needleLength;
		while (pos < len && (data[pos] !== needle[0] || Buffer.compare(data.subarray(pos, pos + len - pos), needle.subarray(0, len - pos)) !== 0)) ++pos;
		if (pos < len) {
			data.copy(this._lookbehind, 0, pos, pos + (len - pos));
			this._lookbehind_size = len - pos;
		}
		if (pos > 0) this.emit("info", false, data, this._bufpos, pos < len ? pos : len);
		this._bufpos = len;
		return len;
	};
	SBMH.prototype._sbmh_lookup_char = function(data, pos) {
		return pos < 0 ? this._lookbehind[this._lookbehind_size + pos] : data[pos];
	};
	SBMH.prototype._sbmh_memcmp = function(data, pos, len) {
		for (var i = 0; i < len; ++i) if (this._sbmh_lookup_char(data, pos + i) !== this._needle[i]) return false;
		return true;
	};
	module.exports = SBMH;
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/PartStream.js
var require_PartStream = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/PartStream.js"(exports, module) {
	const inherits$5 = __require("node:util").inherits;
	const ReadableStream$5 = __require("node:stream").Readable;
	function PartStream$1(opts) {
		ReadableStream$5.call(this, opts);
	}
	inherits$5(PartStream$1, ReadableStream$5);
	PartStream$1.prototype._read = function(n) {};
	module.exports = PartStream$1;
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/getLimit.js
var require_getLimit = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/getLimit.js"(exports, module) {
	module.exports = function getLimit$3(limits, name$2, defaultLimit) {
		if (!limits || limits[name$2] === void 0 || limits[name$2] === null) return defaultLimit;
		if (typeof limits[name$2] !== "number" || isNaN(limits[name$2])) throw new TypeError("Limit " + name$2 + " is not a valid number");
		return limits[name$2];
	};
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/HeaderParser.js
var require_HeaderParser = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/HeaderParser.js"(exports, module) {
	const EventEmitter$3 = __require("node:events").EventEmitter;
	const inherits$4 = __require("node:util").inherits;
	const getLimit$2 = require_getLimit();
	const StreamSearch$1 = require_sbmh();
	const B_DCRLF = Buffer.from("\r\n\r\n");
	const RE_CRLF = /\r\n/g;
	const RE_HDR = /^([^:]+):[ \t]?([\x00-\xFF]+)?$/;
	function HeaderParser$1(cfg) {
		EventEmitter$3.call(this);
		cfg = cfg || {};
		const self$1 = this;
		this.nread = 0;
		this.maxed = false;
		this.npairs = 0;
		this.maxHeaderPairs = getLimit$2(cfg, "maxHeaderPairs", 2e3);
		this.maxHeaderSize = getLimit$2(cfg, "maxHeaderSize", 80 * 1024);
		this.buffer = "";
		this.header = {};
		this.finished = false;
		this.ss = new StreamSearch$1(B_DCRLF);
		this.ss.on("info", function(isMatch, data, start, end) {
			if (data && !self$1.maxed) {
				if (self$1.nread + end - start >= self$1.maxHeaderSize) {
					end = self$1.maxHeaderSize - self$1.nread + start;
					self$1.nread = self$1.maxHeaderSize;
					self$1.maxed = true;
				} else self$1.nread += end - start;
				self$1.buffer += data.toString("binary", start, end);
			}
			if (isMatch) self$1._finish();
		});
	}
	inherits$4(HeaderParser$1, EventEmitter$3);
	HeaderParser$1.prototype.push = function(data) {
		const r = this.ss.push(data);
		if (this.finished) return r;
	};
	HeaderParser$1.prototype.reset = function() {
		this.finished = false;
		this.buffer = "";
		this.header = {};
		this.ss.reset();
	};
	HeaderParser$1.prototype._finish = function() {
		if (this.buffer) this._parseHeader();
		this.ss.matches = this.ss.maxMatches;
		const header = this.header;
		this.header = {};
		this.buffer = "";
		this.finished = true;
		this.nread = this.npairs = 0;
		this.maxed = false;
		this.emit("header", header);
	};
	HeaderParser$1.prototype._parseHeader = function() {
		if (this.npairs === this.maxHeaderPairs) return;
		const lines = this.buffer.split(RE_CRLF);
		const len = lines.length;
		let m$1, h$1;
		for (var i = 0; i < len; ++i) {
			if (lines[i].length === 0) continue;
			if (lines[i][0] === "	" || lines[i][0] === " ") {
				if (h$1) {
					this.header[h$1][this.header[h$1].length - 1] += lines[i];
					continue;
				}
			}
			const posColon = lines[i].indexOf(":");
			if (posColon === -1 || posColon === 0) return;
			m$1 = RE_HDR.exec(lines[i]);
			h$1 = m$1[1].toLowerCase();
			this.header[h$1] = this.header[h$1] || [];
			this.header[h$1].push(m$1[2] || "");
			if (++this.npairs === this.maxHeaderPairs) break;
		}
	};
	module.exports = HeaderParser$1;
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/Dicer.js
var require_Dicer = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/Dicer.js"(exports, module) {
	const WritableStream$1 = __require("node:stream").Writable;
	const inherits$3 = __require("node:util").inherits;
	const StreamSearch = require_sbmh();
	const PartStream = require_PartStream();
	const HeaderParser = require_HeaderParser();
	const DASH = 45;
	const B_ONEDASH = Buffer.from("-");
	const B_CRLF = Buffer.from("\r\n");
	const EMPTY_FN = function() {};
	function Dicer$2(cfg) {
		if (!(this instanceof Dicer$2)) return new Dicer$2(cfg);
		WritableStream$1.call(this, cfg);
		if (!cfg || !cfg.headerFirst && typeof cfg.boundary !== "string") throw new TypeError("Boundary required");
		if (typeof cfg.boundary === "string") this.setBoundary(cfg.boundary);
		else this._bparser = void 0;
		this._headerFirst = cfg.headerFirst;
		this._dashes = 0;
		this._parts = 0;
		this._finished = false;
		this._realFinish = false;
		this._isPreamble = true;
		this._justMatched = false;
		this._firstWrite = true;
		this._inHeader = true;
		this._part = void 0;
		this._cb = void 0;
		this._ignoreData = false;
		this._partOpts = { highWaterMark: cfg.partHwm };
		this._pause = false;
		const self$1 = this;
		this._hparser = new HeaderParser(cfg);
		this._hparser.on("header", function(header) {
			self$1._inHeader = false;
			self$1._part.emit("header", header);
		});
	}
	inherits$3(Dicer$2, WritableStream$1);
	Dicer$2.prototype.emit = function(ev) {
		if (ev === "finish" && !this._realFinish) {
			if (!this._finished) {
				const self$1 = this;
				process.nextTick(function() {
					self$1.emit("error", new Error("Unexpected end of multipart data"));
					if (self$1._part && !self$1._ignoreData) {
						const type = self$1._isPreamble ? "Preamble" : "Part";
						self$1._part.emit("error", new Error(type + " terminated early due to unexpected end of multipart data"));
						self$1._part.push(null);
						process.nextTick(function() {
							self$1._realFinish = true;
							self$1.emit("finish");
							self$1._realFinish = false;
						});
						return;
					}
					self$1._realFinish = true;
					self$1.emit("finish");
					self$1._realFinish = false;
				});
			}
		} else WritableStream$1.prototype.emit.apply(this, arguments);
	};
	Dicer$2.prototype._write = function(data, encoding, cb) {
		if (!this._hparser && !this._bparser) return cb();
		if (this._headerFirst && this._isPreamble) {
			if (!this._part) {
				this._part = new PartStream(this._partOpts);
				if (this.listenerCount("preamble") !== 0) this.emit("preamble", this._part);
				else this._ignore();
			}
			const r = this._hparser.push(data);
			if (!this._inHeader && r !== void 0 && r < data.length) data = data.slice(r);
			else return cb();
		}
		if (this._firstWrite) {
			this._bparser.push(B_CRLF);
			this._firstWrite = false;
		}
		this._bparser.push(data);
		if (this._pause) this._cb = cb;
		else cb();
	};
	Dicer$2.prototype.reset = function() {
		this._part = void 0;
		this._bparser = void 0;
		this._hparser = void 0;
	};
	Dicer$2.prototype.setBoundary = function(boundary) {
		const self$1 = this;
		this._bparser = new StreamSearch("\r\n--" + boundary);
		this._bparser.on("info", function(isMatch, data, start, end) {
			self$1._oninfo(isMatch, data, start, end);
		});
	};
	Dicer$2.prototype._ignore = function() {
		if (this._part && !this._ignoreData) {
			this._ignoreData = true;
			this._part.on("error", EMPTY_FN);
			this._part.resume();
		}
	};
	Dicer$2.prototype._oninfo = function(isMatch, data, start, end) {
		let buf;
		const self$1 = this;
		let i = 0;
		let r;
		let shouldWriteMore = true;
		if (!this._part && this._justMatched && data) {
			while (this._dashes < 2 && start + i < end) if (data[start + i] === DASH) {
				++i;
				++this._dashes;
			} else {
				if (this._dashes) buf = B_ONEDASH;
				this._dashes = 0;
				break;
			}
			if (this._dashes === 2) {
				if (start + i < end && this.listenerCount("trailer") !== 0) this.emit("trailer", data.slice(start + i, end));
				this.reset();
				this._finished = true;
				if (self$1._parts === 0) {
					self$1._realFinish = true;
					self$1.emit("finish");
					self$1._realFinish = false;
				}
			}
			if (this._dashes) return;
		}
		if (this._justMatched) this._justMatched = false;
		if (!this._part) {
			this._part = new PartStream(this._partOpts);
			this._part._read = function(n) {
				self$1._unpause();
			};
			if (this._isPreamble && this.listenerCount("preamble") !== 0) this.emit("preamble", this._part);
			else if (this._isPreamble !== true && this.listenerCount("part") !== 0) this.emit("part", this._part);
			else this._ignore();
			if (!this._isPreamble) this._inHeader = true;
		}
		if (data && start < end && !this._ignoreData) {
			if (this._isPreamble || !this._inHeader) {
				if (buf) shouldWriteMore = this._part.push(buf);
				shouldWriteMore = this._part.push(data.slice(start, end));
				if (!shouldWriteMore) this._pause = true;
			} else if (!this._isPreamble && this._inHeader) {
				if (buf) this._hparser.push(buf);
				r = this._hparser.push(data.slice(start, end));
				if (!this._inHeader && r !== void 0 && r < end) this._oninfo(false, data, start + r, end);
			}
		}
		if (isMatch) {
			this._hparser.reset();
			if (this._isPreamble) this._isPreamble = false;
			else if (start !== end) {
				++this._parts;
				this._part.on("end", function() {
					if (--self$1._parts === 0) if (self$1._finished) {
						self$1._realFinish = true;
						self$1.emit("finish");
						self$1._realFinish = false;
					} else self$1._unpause();
				});
			}
			this._part.push(null);
			this._part = void 0;
			this._ignoreData = false;
			this._justMatched = true;
			this._dashes = 0;
		}
	};
	Dicer$2.prototype._unpause = function() {
		if (!this._pause) return;
		this._pause = false;
		if (this._cb) {
			const cb = this._cb;
			this._cb = void 0;
			cb();
		}
	};
	module.exports = Dicer$2;
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/decodeText.js
var require_decodeText = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/decodeText.js"(exports, module) {
	const utf8Decoder = new TextDecoder("utf-8");
	const textDecoders = new Map([["utf-8", utf8Decoder], ["utf8", utf8Decoder]]);
	function getDecoder(charset$1) {
		let lc;
		while (true) switch (charset$1) {
			case "utf-8":
			case "utf8": return decoders.utf8;
			case "latin1":
			case "ascii":
			case "us-ascii":
			case "iso-8859-1":
			case "iso8859-1":
			case "iso88591":
			case "iso_8859-1":
			case "windows-1252":
			case "iso_8859-1:1987":
			case "cp1252":
			case "x-cp1252": return decoders.latin1;
			case "utf16le":
			case "utf-16le":
			case "ucs2":
			case "ucs-2": return decoders.utf16le;
			case "base64": return decoders.base64;
			default:
				if (lc === void 0) {
					lc = true;
					charset$1 = charset$1.toLowerCase();
					continue;
				}
				return decoders.other.bind(charset$1);
		}
	}
	const decoders = {
		utf8: (data, sourceEncoding) => {
			if (data.length === 0) return "";
			if (typeof data === "string") data = Buffer.from(data, sourceEncoding);
			return data.utf8Slice(0, data.length);
		},
		latin1: (data, sourceEncoding) => {
			if (data.length === 0) return "";
			if (typeof data === "string") return data;
			return data.latin1Slice(0, data.length);
		},
		utf16le: (data, sourceEncoding) => {
			if (data.length === 0) return "";
			if (typeof data === "string") data = Buffer.from(data, sourceEncoding);
			return data.ucs2Slice(0, data.length);
		},
		base64: (data, sourceEncoding) => {
			if (data.length === 0) return "";
			if (typeof data === "string") data = Buffer.from(data, sourceEncoding);
			return data.base64Slice(0, data.length);
		},
		other: (data, sourceEncoding) => {
			if (data.length === 0) return "";
			if (typeof data === "string") data = Buffer.from(data, sourceEncoding);
			if (textDecoders.has(exports.toString())) try {
				return textDecoders.get(exports).decode(data);
			} catch {}
			return typeof data === "string" ? data : data.toString();
		}
	};
	function decodeText$3(text, sourceEncoding, destEncoding) {
		if (text) return getDecoder(destEncoding)(text, sourceEncoding);
		return text;
	}
	module.exports = decodeText$3;
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/parseParams.js
var require_parseParams = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/parseParams.js"(exports, module) {
	const decodeText$2 = require_decodeText();
	const RE_ENCODED = /%[a-fA-F0-9][a-fA-F0-9]/g;
	const EncodedLookup = {
		"%00": "\0",
		"%01": "",
		"%02": "",
		"%03": "",
		"%04": "",
		"%05": "",
		"%06": "",
		"%07": "\x07",
		"%08": "\b",
		"%09": "	",
		"%0a": "\n",
		"%0A": "\n",
		"%0b": "\v",
		"%0B": "\v",
		"%0c": "\f",
		"%0C": "\f",
		"%0d": "\r",
		"%0D": "\r",
		"%0e": "",
		"%0E": "",
		"%0f": "",
		"%0F": "",
		"%10": "",
		"%11": "",
		"%12": "",
		"%13": "",
		"%14": "",
		"%15": "",
		"%16": "",
		"%17": "",
		"%18": "",
		"%19": "",
		"%1a": "",
		"%1A": "",
		"%1b": "\x1B",
		"%1B": "\x1B",
		"%1c": "",
		"%1C": "",
		"%1d": "",
		"%1D": "",
		"%1e": "",
		"%1E": "",
		"%1f": "",
		"%1F": "",
		"%20": " ",
		"%21": "!",
		"%22": "\"",
		"%23": "#",
		"%24": "$",
		"%25": "%",
		"%26": "&",
		"%27": "'",
		"%28": "(",
		"%29": ")",
		"%2a": "*",
		"%2A": "*",
		"%2b": "+",
		"%2B": "+",
		"%2c": ",",
		"%2C": ",",
		"%2d": "-",
		"%2D": "-",
		"%2e": ".",
		"%2E": ".",
		"%2f": "/",
		"%2F": "/",
		"%30": "0",
		"%31": "1",
		"%32": "2",
		"%33": "3",
		"%34": "4",
		"%35": "5",
		"%36": "6",
		"%37": "7",
		"%38": "8",
		"%39": "9",
		"%3a": ":",
		"%3A": ":",
		"%3b": ";",
		"%3B": ";",
		"%3c": "<",
		"%3C": "<",
		"%3d": "=",
		"%3D": "=",
		"%3e": ">",
		"%3E": ">",
		"%3f": "?",
		"%3F": "?",
		"%40": "@",
		"%41": "A",
		"%42": "B",
		"%43": "C",
		"%44": "D",
		"%45": "E",
		"%46": "F",
		"%47": "G",
		"%48": "H",
		"%49": "I",
		"%4a": "J",
		"%4A": "J",
		"%4b": "K",
		"%4B": "K",
		"%4c": "L",
		"%4C": "L",
		"%4d": "M",
		"%4D": "M",
		"%4e": "N",
		"%4E": "N",
		"%4f": "O",
		"%4F": "O",
		"%50": "P",
		"%51": "Q",
		"%52": "R",
		"%53": "S",
		"%54": "T",
		"%55": "U",
		"%56": "V",
		"%57": "W",
		"%58": "X",
		"%59": "Y",
		"%5a": "Z",
		"%5A": "Z",
		"%5b": "[",
		"%5B": "[",
		"%5c": "\\",
		"%5C": "\\",
		"%5d": "]",
		"%5D": "]",
		"%5e": "^",
		"%5E": "^",
		"%5f": "_",
		"%5F": "_",
		"%60": "`",
		"%61": "a",
		"%62": "b",
		"%63": "c",
		"%64": "d",
		"%65": "e",
		"%66": "f",
		"%67": "g",
		"%68": "h",
		"%69": "i",
		"%6a": "j",
		"%6A": "j",
		"%6b": "k",
		"%6B": "k",
		"%6c": "l",
		"%6C": "l",
		"%6d": "m",
		"%6D": "m",
		"%6e": "n",
		"%6E": "n",
		"%6f": "o",
		"%6F": "o",
		"%70": "p",
		"%71": "q",
		"%72": "r",
		"%73": "s",
		"%74": "t",
		"%75": "u",
		"%76": "v",
		"%77": "w",
		"%78": "x",
		"%79": "y",
		"%7a": "z",
		"%7A": "z",
		"%7b": "{",
		"%7B": "{",
		"%7c": "|",
		"%7C": "|",
		"%7d": "}",
		"%7D": "}",
		"%7e": "~",
		"%7E": "~",
		"%7f": "",
		"%7F": "",
		"%80": "",
		"%81": "",
		"%82": "",
		"%83": "",
		"%84": "",
		"%85": "",
		"%86": "",
		"%87": "",
		"%88": "",
		"%89": "",
		"%8a": "",
		"%8A": "",
		"%8b": "",
		"%8B": "",
		"%8c": "",
		"%8C": "",
		"%8d": "",
		"%8D": "",
		"%8e": "",
		"%8E": "",
		"%8f": "",
		"%8F": "",
		"%90": "",
		"%91": "",
		"%92": "",
		"%93": "",
		"%94": "",
		"%95": "",
		"%96": "",
		"%97": "",
		"%98": "",
		"%99": "",
		"%9a": "",
		"%9A": "",
		"%9b": "",
		"%9B": "",
		"%9c": "",
		"%9C": "",
		"%9d": "",
		"%9D": "",
		"%9e": "",
		"%9E": "",
		"%9f": "",
		"%9F": "",
		"%a0": "\xA0",
		"%A0": "\xA0",
		"%a1": "¡",
		"%A1": "¡",
		"%a2": "¢",
		"%A2": "¢",
		"%a3": "£",
		"%A3": "£",
		"%a4": "¤",
		"%A4": "¤",
		"%a5": "¥",
		"%A5": "¥",
		"%a6": "¦",
		"%A6": "¦",
		"%a7": "§",
		"%A7": "§",
		"%a8": "¨",
		"%A8": "¨",
		"%a9": "©",
		"%A9": "©",
		"%aa": "ª",
		"%Aa": "ª",
		"%aA": "ª",
		"%AA": "ª",
		"%ab": "«",
		"%Ab": "«",
		"%aB": "«",
		"%AB": "«",
		"%ac": "¬",
		"%Ac": "¬",
		"%aC": "¬",
		"%AC": "¬",
		"%ad": "­",
		"%Ad": "­",
		"%aD": "­",
		"%AD": "­",
		"%ae": "®",
		"%Ae": "®",
		"%aE": "®",
		"%AE": "®",
		"%af": "¯",
		"%Af": "¯",
		"%aF": "¯",
		"%AF": "¯",
		"%b0": "°",
		"%B0": "°",
		"%b1": "±",
		"%B1": "±",
		"%b2": "²",
		"%B2": "²",
		"%b3": "³",
		"%B3": "³",
		"%b4": "´",
		"%B4": "´",
		"%b5": "µ",
		"%B5": "µ",
		"%b6": "¶",
		"%B6": "¶",
		"%b7": "·",
		"%B7": "·",
		"%b8": "¸",
		"%B8": "¸",
		"%b9": "¹",
		"%B9": "¹",
		"%ba": "º",
		"%Ba": "º",
		"%bA": "º",
		"%BA": "º",
		"%bb": "»",
		"%Bb": "»",
		"%bB": "»",
		"%BB": "»",
		"%bc": "¼",
		"%Bc": "¼",
		"%bC": "¼",
		"%BC": "¼",
		"%bd": "½",
		"%Bd": "½",
		"%bD": "½",
		"%BD": "½",
		"%be": "¾",
		"%Be": "¾",
		"%bE": "¾",
		"%BE": "¾",
		"%bf": "¿",
		"%Bf": "¿",
		"%bF": "¿",
		"%BF": "¿",
		"%c0": "À",
		"%C0": "À",
		"%c1": "Á",
		"%C1": "Á",
		"%c2": "Â",
		"%C2": "Â",
		"%c3": "Ã",
		"%C3": "Ã",
		"%c4": "Ä",
		"%C4": "Ä",
		"%c5": "Å",
		"%C5": "Å",
		"%c6": "Æ",
		"%C6": "Æ",
		"%c7": "Ç",
		"%C7": "Ç",
		"%c8": "È",
		"%C8": "È",
		"%c9": "É",
		"%C9": "É",
		"%ca": "Ê",
		"%Ca": "Ê",
		"%cA": "Ê",
		"%CA": "Ê",
		"%cb": "Ë",
		"%Cb": "Ë",
		"%cB": "Ë",
		"%CB": "Ë",
		"%cc": "Ì",
		"%Cc": "Ì",
		"%cC": "Ì",
		"%CC": "Ì",
		"%cd": "Í",
		"%Cd": "Í",
		"%cD": "Í",
		"%CD": "Í",
		"%ce": "Î",
		"%Ce": "Î",
		"%cE": "Î",
		"%CE": "Î",
		"%cf": "Ï",
		"%Cf": "Ï",
		"%cF": "Ï",
		"%CF": "Ï",
		"%d0": "Ð",
		"%D0": "Ð",
		"%d1": "Ñ",
		"%D1": "Ñ",
		"%d2": "Ò",
		"%D2": "Ò",
		"%d3": "Ó",
		"%D3": "Ó",
		"%d4": "Ô",
		"%D4": "Ô",
		"%d5": "Õ",
		"%D5": "Õ",
		"%d6": "Ö",
		"%D6": "Ö",
		"%d7": "×",
		"%D7": "×",
		"%d8": "Ø",
		"%D8": "Ø",
		"%d9": "Ù",
		"%D9": "Ù",
		"%da": "Ú",
		"%Da": "Ú",
		"%dA": "Ú",
		"%DA": "Ú",
		"%db": "Û",
		"%Db": "Û",
		"%dB": "Û",
		"%DB": "Û",
		"%dc": "Ü",
		"%Dc": "Ü",
		"%dC": "Ü",
		"%DC": "Ü",
		"%dd": "Ý",
		"%Dd": "Ý",
		"%dD": "Ý",
		"%DD": "Ý",
		"%de": "Þ",
		"%De": "Þ",
		"%dE": "Þ",
		"%DE": "Þ",
		"%df": "ß",
		"%Df": "ß",
		"%dF": "ß",
		"%DF": "ß",
		"%e0": "à",
		"%E0": "à",
		"%e1": "á",
		"%E1": "á",
		"%e2": "â",
		"%E2": "â",
		"%e3": "ã",
		"%E3": "ã",
		"%e4": "ä",
		"%E4": "ä",
		"%e5": "å",
		"%E5": "å",
		"%e6": "æ",
		"%E6": "æ",
		"%e7": "ç",
		"%E7": "ç",
		"%e8": "è",
		"%E8": "è",
		"%e9": "é",
		"%E9": "é",
		"%ea": "ê",
		"%Ea": "ê",
		"%eA": "ê",
		"%EA": "ê",
		"%eb": "ë",
		"%Eb": "ë",
		"%eB": "ë",
		"%EB": "ë",
		"%ec": "ì",
		"%Ec": "ì",
		"%eC": "ì",
		"%EC": "ì",
		"%ed": "í",
		"%Ed": "í",
		"%eD": "í",
		"%ED": "í",
		"%ee": "î",
		"%Ee": "î",
		"%eE": "î",
		"%EE": "î",
		"%ef": "ï",
		"%Ef": "ï",
		"%eF": "ï",
		"%EF": "ï",
		"%f0": "ð",
		"%F0": "ð",
		"%f1": "ñ",
		"%F1": "ñ",
		"%f2": "ò",
		"%F2": "ò",
		"%f3": "ó",
		"%F3": "ó",
		"%f4": "ô",
		"%F4": "ô",
		"%f5": "õ",
		"%F5": "õ",
		"%f6": "ö",
		"%F6": "ö",
		"%f7": "÷",
		"%F7": "÷",
		"%f8": "ø",
		"%F8": "ø",
		"%f9": "ù",
		"%F9": "ù",
		"%fa": "ú",
		"%Fa": "ú",
		"%fA": "ú",
		"%FA": "ú",
		"%fb": "û",
		"%Fb": "û",
		"%fB": "û",
		"%FB": "û",
		"%fc": "ü",
		"%Fc": "ü",
		"%fC": "ü",
		"%FC": "ü",
		"%fd": "ý",
		"%Fd": "ý",
		"%fD": "ý",
		"%FD": "ý",
		"%fe": "þ",
		"%Fe": "þ",
		"%fE": "þ",
		"%FE": "þ",
		"%ff": "ÿ",
		"%Ff": "ÿ",
		"%fF": "ÿ",
		"%FF": "ÿ"
	};
	function encodedReplacer(match) {
		return EncodedLookup[match];
	}
	const STATE_KEY = 0;
	const STATE_VALUE = 1;
	const STATE_CHARSET = 2;
	const STATE_LANG = 3;
	function parseParams$2(str) {
		const res = [];
		let state$1 = STATE_KEY;
		let charset$1 = "";
		let inquote = false;
		let escaping = false;
		let p = 0;
		let tmp = "";
		const len = str.length;
		for (var i = 0; i < len; ++i) {
			const char = str[i];
			if (char === "\\" && inquote) if (escaping) escaping = false;
			else {
				escaping = true;
				continue;
			}
			else if (char === "\"") if (!escaping) {
				if (inquote) {
					inquote = false;
					state$1 = STATE_KEY;
				} else inquote = true;
				continue;
			} else escaping = false;
			else {
				if (escaping && inquote) tmp += "\\";
				escaping = false;
				if ((state$1 === STATE_CHARSET || state$1 === STATE_LANG) && char === "'") {
					if (state$1 === STATE_CHARSET) {
						state$1 = STATE_LANG;
						charset$1 = tmp.substring(1);
					} else state$1 = STATE_VALUE;
					tmp = "";
					continue;
				} else if (state$1 === STATE_KEY && (char === "*" || char === "=") && res.length) {
					state$1 = char === "*" ? STATE_CHARSET : STATE_VALUE;
					res[p] = [tmp, void 0];
					tmp = "";
					continue;
				} else if (!inquote && char === ";") {
					state$1 = STATE_KEY;
					if (charset$1) {
						if (tmp.length) tmp = decodeText$2(tmp.replace(RE_ENCODED, encodedReplacer), "binary", charset$1);
						charset$1 = "";
					} else if (tmp.length) tmp = decodeText$2(tmp, "binary", "utf8");
					if (res[p] === void 0) res[p] = tmp;
					else res[p][1] = tmp;
					tmp = "";
					++p;
					continue;
				} else if (!inquote && (char === " " || char === "	")) continue;
			}
			tmp += char;
		}
		if (charset$1 && tmp.length) tmp = decodeText$2(tmp.replace(RE_ENCODED, encodedReplacer), "binary", charset$1);
		else if (tmp) tmp = decodeText$2(tmp, "binary", "utf8");
		if (res[p] === void 0) {
			if (tmp) res[p] = tmp;
		} else res[p][1] = tmp;
		return res;
	}
	module.exports = parseParams$2;
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/basename.js
var require_basename = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/basename.js"(exports, module) {
	module.exports = function basename$2(path$10) {
		if (typeof path$10 !== "string") return "";
		for (var i = path$10.length - 1; i >= 0; --i) switch (path$10.charCodeAt(i)) {
			case 47:
			case 92:
				path$10 = path$10.slice(i + 1);
				return path$10 === ".." || path$10 === "." ? "" : path$10;
		}
		return path$10 === ".." || path$10 === "." ? "" : path$10;
	};
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/types/multipart.js
var require_multipart = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/types/multipart.js"(exports, module) {
	const { Readable: Readable$6 } = __require("node:stream");
	const { inherits: inherits$2 } = __require("node:util");
	const Dicer$1 = require_Dicer();
	const parseParams$1 = require_parseParams();
	const decodeText$1 = require_decodeText();
	const basename$1 = require_basename();
	const getLimit$1 = require_getLimit();
	const RE_BOUNDARY = /^boundary$/i;
	const RE_FIELD = /^form-data$/i;
	const RE_CHARSET$1 = /^charset$/i;
	const RE_FILENAME = /^filename$/i;
	const RE_NAME = /^name$/i;
	Multipart.detect = /^multipart\/form-data/i;
	function Multipart(boy, cfg) {
		let i;
		let len;
		const self$1 = this;
		let boundary;
		const limits = cfg.limits;
		const isPartAFile = cfg.isPartAFile || ((fieldName, contentType$1, fileName) => contentType$1 === "application/octet-stream" || fileName !== void 0);
		const parsedConType = cfg.parsedConType || [];
		const defCharset = cfg.defCharset || "utf8";
		const preservePath = cfg.preservePath;
		const fileOpts = { highWaterMark: cfg.fileHwm };
		for (i = 0, len = parsedConType.length; i < len; ++i) if (Array.isArray(parsedConType[i]) && RE_BOUNDARY.test(parsedConType[i][0])) {
			boundary = parsedConType[i][1];
			break;
		}
		function checkFinished() {
			if (nends === 0 && finished$2 && !boy._done) {
				finished$2 = false;
				self$1.end();
			}
		}
		if (typeof boundary !== "string") throw new Error("Multipart: Boundary not found");
		const fieldSizeLimit = getLimit$1(limits, "fieldSize", 1 * 1024 * 1024);
		const fileSizeLimit = getLimit$1(limits, "fileSize", Infinity);
		const filesLimit = getLimit$1(limits, "files", Infinity);
		const fieldsLimit = getLimit$1(limits, "fields", Infinity);
		const partsLimit = getLimit$1(limits, "parts", Infinity);
		const headerPairsLimit = getLimit$1(limits, "headerPairs", 2e3);
		const headerSizeLimit = getLimit$1(limits, "headerSize", 80 * 1024);
		let nfiles = 0;
		let nfields = 0;
		let nends = 0;
		let curFile;
		let curField;
		let finished$2 = false;
		this._needDrain = false;
		this._pause = false;
		this._cb = void 0;
		this._nparts = 0;
		this._boy = boy;
		const parserCfg = {
			boundary,
			maxHeaderPairs: headerPairsLimit,
			maxHeaderSize: headerSizeLimit,
			partHwm: fileOpts.highWaterMark,
			highWaterMark: cfg.highWaterMark
		};
		this.parser = new Dicer$1(parserCfg);
		this.parser.on("drain", function() {
			self$1._needDrain = false;
			if (self$1._cb && !self$1._pause) {
				const cb = self$1._cb;
				self$1._cb = void 0;
				cb();
			}
		}).on("part", function onPart(part) {
			if (++self$1._nparts > partsLimit) {
				self$1.parser.removeListener("part", onPart);
				self$1.parser.on("part", skipPart);
				boy.hitPartsLimit = true;
				boy.emit("partsLimit");
				return skipPart(part);
			}
			if (curField) {
				const field = curField;
				field.emit("end");
				field.removeAllListeners("end");
			}
			part.on("header", function(header) {
				let contype;
				let fieldname;
				let parsed;
				let charset$1;
				let encoding;
				let filename;
				let nsize = 0;
				if (header["content-type"]) {
					parsed = parseParams$1(header["content-type"][0]);
					if (parsed[0]) {
						contype = parsed[0].toLowerCase();
						for (i = 0, len = parsed.length; i < len; ++i) if (RE_CHARSET$1.test(parsed[i][0])) {
							charset$1 = parsed[i][1].toLowerCase();
							break;
						}
					}
				}
				if (contype === void 0) contype = "text/plain";
				if (charset$1 === void 0) charset$1 = defCharset;
				if (header["content-disposition"]) {
					parsed = parseParams$1(header["content-disposition"][0]);
					if (!RE_FIELD.test(parsed[0])) return skipPart(part);
					for (i = 0, len = parsed.length; i < len; ++i) if (RE_NAME.test(parsed[i][0])) fieldname = parsed[i][1];
					else if (RE_FILENAME.test(parsed[i][0])) {
						filename = parsed[i][1];
						if (!preservePath) filename = basename$1(filename);
					}
				} else return skipPart(part);
				if (header["content-transfer-encoding"]) encoding = header["content-transfer-encoding"][0].toLowerCase();
				else encoding = "7bit";
				let onData, onEnd;
				if (isPartAFile(fieldname, contype, filename)) {
					if (nfiles === filesLimit) {
						if (!boy.hitFilesLimit) {
							boy.hitFilesLimit = true;
							boy.emit("filesLimit");
						}
						return skipPart(part);
					}
					++nfiles;
					if (boy.listenerCount("file") === 0) {
						self$1.parser._ignore();
						return;
					}
					++nends;
					const file = new FileStream(fileOpts);
					curFile = file;
					file.on("end", function() {
						--nends;
						self$1._pause = false;
						checkFinished();
						if (self$1._cb && !self$1._needDrain) {
							const cb = self$1._cb;
							self$1._cb = void 0;
							cb();
						}
					});
					file._read = function(n) {
						if (!self$1._pause) return;
						self$1._pause = false;
						if (self$1._cb && !self$1._needDrain) {
							const cb = self$1._cb;
							self$1._cb = void 0;
							cb();
						}
					};
					boy.emit("file", fieldname, file, filename, encoding, contype);
					onData = function(data) {
						if ((nsize += data.length) > fileSizeLimit) {
							const extralen = fileSizeLimit - nsize + data.length;
							if (extralen > 0) file.push(data.slice(0, extralen));
							file.truncated = true;
							file.bytesRead = fileSizeLimit;
							part.removeAllListeners("data");
							file.emit("limit");
							return;
						} else if (!file.push(data)) self$1._pause = true;
						file.bytesRead = nsize;
					};
					onEnd = function() {
						curFile = void 0;
						file.push(null);
					};
				} else {
					if (nfields === fieldsLimit) {
						if (!boy.hitFieldsLimit) {
							boy.hitFieldsLimit = true;
							boy.emit("fieldsLimit");
						}
						return skipPart(part);
					}
					++nfields;
					++nends;
					let buffer$1 = "";
					let truncated = false;
					curField = part;
					onData = function(data) {
						if ((nsize += data.length) > fieldSizeLimit) {
							const extralen = fieldSizeLimit - (nsize - data.length);
							buffer$1 += data.toString("binary", 0, extralen);
							truncated = true;
							part.removeAllListeners("data");
						} else buffer$1 += data.toString("binary");
					};
					onEnd = function() {
						curField = void 0;
						if (buffer$1.length) buffer$1 = decodeText$1(buffer$1, "binary", charset$1);
						boy.emit("field", fieldname, buffer$1, false, truncated, encoding, contype);
						--nends;
						checkFinished();
					};
				}
				part._readableState.sync = false;
				part.on("data", onData);
				part.on("end", onEnd);
			}).on("error", function(err) {
				if (curFile) curFile.emit("error", err);
			});
		}).on("error", function(err) {
			boy.emit("error", err);
		}).on("finish", function() {
			finished$2 = true;
			checkFinished();
		});
	}
	Multipart.prototype.write = function(chunk, cb) {
		const r = this.parser.write(chunk);
		if (r && !this._pause) cb();
		else {
			this._needDrain = !r;
			this._cb = cb;
		}
	};
	Multipart.prototype.end = function() {
		const self$1 = this;
		if (self$1.parser.writable) self$1.parser.end();
		else if (!self$1._boy._done) process.nextTick(function() {
			self$1._boy._done = true;
			self$1._boy.emit("finish");
		});
	};
	function skipPart(part) {
		part.resume();
	}
	function FileStream(opts) {
		Readable$6.call(this, opts);
		this.bytesRead = 0;
		this.truncated = false;
	}
	inherits$2(FileStream, Readable$6);
	FileStream.prototype._read = function(n) {};
	module.exports = Multipart;
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/Decoder.js
var require_Decoder = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/Decoder.js"(exports, module) {
	const RE_PLUS = /\+/g;
	const HEX = [
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		1,
		1,
		1,
		1,
		1,
		1,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0,
		0
	];
	function Decoder$1() {
		this.buffer = void 0;
	}
	Decoder$1.prototype.write = function(str) {
		str = str.replace(RE_PLUS, " ");
		let res = "";
		let i = 0;
		let p = 0;
		const len = str.length;
		for (; i < len; ++i) if (this.buffer !== void 0) if (!HEX[str.charCodeAt(i)]) {
			res += "%" + this.buffer;
			this.buffer = void 0;
			--i;
		} else {
			this.buffer += str[i];
			++p;
			if (this.buffer.length === 2) {
				res += String.fromCharCode(parseInt(this.buffer, 16));
				this.buffer = void 0;
			}
		}
		else if (str[i] === "%") {
			if (i > p) {
				res += str.substring(p, i);
				p = i;
			}
			this.buffer = "";
			++p;
		}
		if (p < len && this.buffer === void 0) res += str.substring(p);
		return res;
	};
	Decoder$1.prototype.reset = function() {
		this.buffer = void 0;
	};
	module.exports = Decoder$1;
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/types/urlencoded.js
var require_urlencoded = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/types/urlencoded.js"(exports, module) {
	const Decoder = require_Decoder();
	const decodeText = require_decodeText();
	const getLimit = require_getLimit();
	const RE_CHARSET = /^charset$/i;
	UrlEncoded.detect = /^application\/x-www-form-urlencoded/i;
	function UrlEncoded(boy, cfg) {
		const limits = cfg.limits;
		const parsedConType = cfg.parsedConType;
		this.boy = boy;
		this.fieldSizeLimit = getLimit(limits, "fieldSize", 1 * 1024 * 1024);
		this.fieldNameSizeLimit = getLimit(limits, "fieldNameSize", 100);
		this.fieldsLimit = getLimit(limits, "fields", Infinity);
		let charset$1;
		for (var i = 0, len = parsedConType.length; i < len; ++i) if (Array.isArray(parsedConType[i]) && RE_CHARSET.test(parsedConType[i][0])) {
			charset$1 = parsedConType[i][1].toLowerCase();
			break;
		}
		if (charset$1 === void 0) charset$1 = cfg.defCharset || "utf8";
		this.decoder = new Decoder();
		this.charset = charset$1;
		this._fields = 0;
		this._state = "key";
		this._checkingBytes = true;
		this._bytesKey = 0;
		this._bytesVal = 0;
		this._key = "";
		this._val = "";
		this._keyTrunc = false;
		this._valTrunc = false;
		this._hitLimit = false;
	}
	UrlEncoded.prototype.write = function(data, cb) {
		if (this._fields === this.fieldsLimit) {
			if (!this.boy.hitFieldsLimit) {
				this.boy.hitFieldsLimit = true;
				this.boy.emit("fieldsLimit");
			}
			return cb();
		}
		let idxeq;
		let idxamp;
		let i;
		let p = 0;
		const len = data.length;
		while (p < len) if (this._state === "key") {
			idxeq = idxamp = void 0;
			for (i = p; i < len; ++i) {
				if (!this._checkingBytes) ++p;
				if (data[i] === 61) {
					idxeq = i;
					break;
				} else if (data[i] === 38) {
					idxamp = i;
					break;
				}
				if (this._checkingBytes && this._bytesKey === this.fieldNameSizeLimit) {
					this._hitLimit = true;
					break;
				} else if (this._checkingBytes) ++this._bytesKey;
			}
			if (idxeq !== void 0) {
				if (idxeq > p) this._key += this.decoder.write(data.toString("binary", p, idxeq));
				this._state = "val";
				this._hitLimit = false;
				this._checkingBytes = true;
				this._val = "";
				this._bytesVal = 0;
				this._valTrunc = false;
				this.decoder.reset();
				p = idxeq + 1;
			} else if (idxamp !== void 0) {
				++this._fields;
				let key$1;
				const keyTrunc = this._keyTrunc;
				if (idxamp > p) key$1 = this._key += this.decoder.write(data.toString("binary", p, idxamp));
				else key$1 = this._key;
				this._hitLimit = false;
				this._checkingBytes = true;
				this._key = "";
				this._bytesKey = 0;
				this._keyTrunc = false;
				this.decoder.reset();
				if (key$1.length) this.boy.emit("field", decodeText(key$1, "binary", this.charset), "", keyTrunc, false);
				p = idxamp + 1;
				if (this._fields === this.fieldsLimit) return cb();
			} else if (this._hitLimit) {
				if (i > p) this._key += this.decoder.write(data.toString("binary", p, i));
				p = i;
				if ((this._bytesKey = this._key.length) === this.fieldNameSizeLimit) {
					this._checkingBytes = false;
					this._keyTrunc = true;
				}
			} else {
				if (p < len) this._key += this.decoder.write(data.toString("binary", p));
				p = len;
			}
		} else {
			idxamp = void 0;
			for (i = p; i < len; ++i) {
				if (!this._checkingBytes) ++p;
				if (data[i] === 38) {
					idxamp = i;
					break;
				}
				if (this._checkingBytes && this._bytesVal === this.fieldSizeLimit) {
					this._hitLimit = true;
					break;
				} else if (this._checkingBytes) ++this._bytesVal;
			}
			if (idxamp !== void 0) {
				++this._fields;
				if (idxamp > p) this._val += this.decoder.write(data.toString("binary", p, idxamp));
				this.boy.emit("field", decodeText(this._key, "binary", this.charset), decodeText(this._val, "binary", this.charset), this._keyTrunc, this._valTrunc);
				this._state = "key";
				this._hitLimit = false;
				this._checkingBytes = true;
				this._key = "";
				this._bytesKey = 0;
				this._keyTrunc = false;
				this.decoder.reset();
				p = idxamp + 1;
				if (this._fields === this.fieldsLimit) return cb();
			} else if (this._hitLimit) {
				if (i > p) this._val += this.decoder.write(data.toString("binary", p, i));
				p = i;
				if (this._val === "" && this.fieldSizeLimit === 0 || (this._bytesVal = this._val.length) === this.fieldSizeLimit) {
					this._checkingBytes = false;
					this._valTrunc = true;
				}
			} else {
				if (p < len) this._val += this.decoder.write(data.toString("binary", p));
				p = len;
			}
		}
		cb();
	};
	UrlEncoded.prototype.end = function() {
		if (this.boy._done) return;
		if (this._state === "key" && this._key.length > 0) this.boy.emit("field", decodeText(this._key, "binary", this.charset), "", this._keyTrunc, false);
		else if (this._state === "val") this.boy.emit("field", decodeText(this._key, "binary", this.charset), decodeText(this._val, "binary", this.charset), this._keyTrunc, this._valTrunc);
		this.boy._done = true;
		this.boy.emit("finish");
	};
	module.exports = UrlEncoded;
} });

//#endregion
//#region node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/main.js
var require_main = __commonJS({ "node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/main.js"(exports, module) {
	const WritableStream = __require("node:stream").Writable;
	const { inherits: inherits$1 } = __require("node:util");
	const Dicer = require_Dicer();
	const MultipartParser = require_multipart();
	const UrlencodedParser = require_urlencoded();
	const parseParams = require_parseParams();
	function Busboy$1(opts) {
		if (!(this instanceof Busboy$1)) return new Busboy$1(opts);
		if (typeof opts !== "object") throw new TypeError("Busboy expected an options-Object.");
		if (typeof opts.headers !== "object") throw new TypeError("Busboy expected an options-Object with headers-attribute.");
		if (typeof opts.headers["content-type"] !== "string") throw new TypeError("Missing Content-Type-header.");
		const { headers,...streamOptions } = opts;
		this.opts = {
			autoDestroy: false,
			...streamOptions
		};
		WritableStream.call(this, this.opts);
		this._done = false;
		this._parser = this.getParserByHeaders(headers);
		this._finished = false;
	}
	inherits$1(Busboy$1, WritableStream);
	Busboy$1.prototype.emit = function(ev) {
		if (ev === "finish") {
			if (!this._done) {
				this._parser?.end();
				return;
			} else if (this._finished) return;
			this._finished = true;
		}
		WritableStream.prototype.emit.apply(this, arguments);
	};
	Busboy$1.prototype.getParserByHeaders = function(headers) {
		const parsed = parseParams(headers["content-type"]);
		const cfg = {
			defCharset: this.opts.defCharset,
			fileHwm: this.opts.fileHwm,
			headers,
			highWaterMark: this.opts.highWaterMark,
			isPartAFile: this.opts.isPartAFile,
			limits: this.opts.limits,
			parsedConType: parsed,
			preservePath: this.opts.preservePath
		};
		if (MultipartParser.detect.test(parsed[0])) return new MultipartParser(this, cfg);
		if (UrlencodedParser.detect.test(parsed[0])) return new UrlencodedParser(this, cfg);
		throw new Error("Unsupported Content-Type.");
	};
	Busboy$1.prototype._write = function(chunk, encoding, cb) {
		this._parser.write(chunk, cb);
	};
	module.exports = Busboy$1;
	module.exports.default = Busboy$1;
	module.exports.Busboy = Busboy$1;
	module.exports.Dicer = Dicer;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/constants.js
var require_constants$5 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/constants.js"(exports, module) {
	const { MessageChannel, receiveMessageOnPort } = __require("worker_threads");
	const corsSafeListedMethods = [
		"GET",
		"HEAD",
		"POST"
	];
	const corsSafeListedMethodsSet$1 = new Set(corsSafeListedMethods);
	const nullBodyStatus$2 = [
		101,
		204,
		205,
		304
	];
	const redirectStatus = [
		301,
		302,
		303,
		307,
		308
	];
	const redirectStatusSet$3 = new Set(redirectStatus);
	const badPorts = [
		"1",
		"7",
		"9",
		"11",
		"13",
		"15",
		"17",
		"19",
		"20",
		"21",
		"22",
		"23",
		"25",
		"37",
		"42",
		"43",
		"53",
		"69",
		"77",
		"79",
		"87",
		"95",
		"101",
		"102",
		"103",
		"104",
		"109",
		"110",
		"111",
		"113",
		"115",
		"117",
		"119",
		"123",
		"135",
		"137",
		"139",
		"143",
		"161",
		"179",
		"389",
		"427",
		"465",
		"512",
		"513",
		"514",
		"515",
		"526",
		"530",
		"531",
		"532",
		"540",
		"548",
		"554",
		"556",
		"563",
		"587",
		"601",
		"636",
		"989",
		"990",
		"993",
		"995",
		"1719",
		"1720",
		"1723",
		"2049",
		"3659",
		"4045",
		"5060",
		"5061",
		"6000",
		"6566",
		"6665",
		"6666",
		"6667",
		"6668",
		"6669",
		"6697",
		"10080"
	];
	const badPortsSet$1 = new Set(badPorts);
	const referrerPolicy$1 = [
		"",
		"no-referrer",
		"no-referrer-when-downgrade",
		"same-origin",
		"origin",
		"strict-origin",
		"origin-when-cross-origin",
		"strict-origin-when-cross-origin",
		"unsafe-url"
	];
	const referrerPolicySet = new Set(referrerPolicy$1);
	const requestRedirect$1 = [
		"follow",
		"manual",
		"error"
	];
	const safeMethods = [
		"GET",
		"HEAD",
		"OPTIONS",
		"TRACE"
	];
	const safeMethodsSet$1 = new Set(safeMethods);
	const requestMode$1 = [
		"navigate",
		"same-origin",
		"no-cors",
		"cors"
	];
	const requestCredentials$1 = [
		"omit",
		"same-origin",
		"include"
	];
	const requestCache$1 = [
		"default",
		"no-store",
		"reload",
		"no-cache",
		"force-cache",
		"only-if-cached"
	];
	const requestBodyHeader$1 = [
		"content-encoding",
		"content-language",
		"content-location",
		"content-type",
		"content-length"
	];
	const requestDuplex$1 = ["half"];
	const forbiddenMethods = [
		"CONNECT",
		"TRACE",
		"TRACK"
	];
	const forbiddenMethodsSet$1 = new Set(forbiddenMethods);
	const subresource = [
		"audio",
		"audioworklet",
		"font",
		"image",
		"manifest",
		"paintworklet",
		"script",
		"style",
		"track",
		"video",
		"xslt",
		""
	];
	const subresourceSet$1 = new Set(subresource);
	/** @type {globalThis['DOMException']} */
	const DOMException$6 = globalThis.DOMException ?? (() => {
		try {
			atob("~");
		} catch (err) {
			return Object.getPrototypeOf(err).constructor;
		}
	})();
	let channel;
	/** @type {globalThis['structuredClone']} */
	const structuredClone$1 = globalThis.structuredClone ?? function structuredClone$2(value, options = void 0) {
		if (arguments.length === 0) throw new TypeError("missing argument");
		if (!channel) channel = new MessageChannel();
		channel.port1.unref();
		channel.port2.unref();
		channel.port1.postMessage(value, options?.transfer);
		return receiveMessageOnPort(channel.port2).message;
	};
	module.exports = {
		DOMException: DOMException$6,
		structuredClone: structuredClone$1,
		subresource,
		forbiddenMethods,
		requestBodyHeader: requestBodyHeader$1,
		referrerPolicy: referrerPolicy$1,
		requestRedirect: requestRedirect$1,
		requestMode: requestMode$1,
		requestCredentials: requestCredentials$1,
		requestCache: requestCache$1,
		redirectStatus,
		corsSafeListedMethods,
		nullBodyStatus: nullBodyStatus$2,
		safeMethods,
		badPorts,
		requestDuplex: requestDuplex$1,
		subresourceSet: subresourceSet$1,
		badPortsSet: badPortsSet$1,
		redirectStatusSet: redirectStatusSet$3,
		corsSafeListedMethodsSet: corsSafeListedMethodsSet$1,
		safeMethodsSet: safeMethodsSet$1,
		forbiddenMethodsSet: forbiddenMethodsSet$1,
		referrerPolicySet
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/global.js
var require_global$1 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/global.js"(exports, module) {
	const globalOrigin = Symbol.for("undici.globalOrigin.1");
	function getGlobalOrigin$4() {
		return globalThis[globalOrigin];
	}
	function setGlobalOrigin(newOrigin) {
		if (newOrigin === void 0) {
			Object.defineProperty(globalThis, globalOrigin, {
				value: void 0,
				writable: true,
				enumerable: false,
				configurable: false
			});
			return;
		}
		const parsedURL = new URL(newOrigin);
		if (parsedURL.protocol !== "http:" && parsedURL.protocol !== "https:") throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`);
		Object.defineProperty(globalThis, globalOrigin, {
			value: parsedURL,
			writable: true,
			enumerable: false,
			configurable: false
		});
	}
	module.exports = {
		getGlobalOrigin: getGlobalOrigin$4,
		setGlobalOrigin
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/util.js
var require_util$8 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/util.js"(exports, module) {
	const { redirectStatusSet: redirectStatusSet$2, referrerPolicySet: referrerPolicyTokens, badPortsSet } = require_constants$5();
	const { getGlobalOrigin: getGlobalOrigin$3 } = require_global$1();
	const { performance: performance$1 } = __require("perf_hooks");
	const { isBlobLike: isBlobLike$6, toUSVString: toUSVString$4, ReadableStreamFrom: ReadableStreamFrom$2 } = require_util$9();
	const assert$25 = __require("assert");
	const { isUint8Array: isUint8Array$1 } = __require("util/types");
	let supportedHashes = [];
	/** @type {import('crypto')|undefined} */
	let crypto$5;
	try {
		crypto$5 = __require("crypto");
		const possibleRelevantHashes = [
			"sha256",
			"sha384",
			"sha512"
		];
		supportedHashes = crypto$5.getHashes().filter((hash) => possibleRelevantHashes.includes(hash));
	} catch {}
	function responseURL(response) {
		const urlList = response.urlList;
		const length = urlList.length;
		return length === 0 ? null : urlList[length - 1].toString();
	}
	function responseLocationURL$1(response, requestFragment) {
		if (!redirectStatusSet$2.has(response.status)) return null;
		let location = response.headersList.get("location");
		if (location !== null && isValidHeaderValue$1(location)) location = new URL(location, responseURL(response));
		if (location && !location.hash) location.hash = requestFragment;
		return location;
	}
	/** @returns {URL} */
	function requestCurrentURL$1(request$1) {
		return request$1.urlList[request$1.urlList.length - 1];
	}
	function requestBadPort$1(request$1) {
		const url$3 = requestCurrentURL$1(request$1);
		if (urlIsHttpHttpsScheme$2(url$3) && badPortsSet.has(url$3.port)) return "blocked";
		return "allowed";
	}
	function isErrorLike$2(object) {
		return object instanceof Error || object?.constructor?.name === "Error" || object?.constructor?.name === "DOMException";
	}
	function isValidReasonPhrase$1(statusText) {
		for (let i = 0; i < statusText.length; ++i) {
			const c = statusText.charCodeAt(i);
			if (!(c === 9 || c >= 32 && c <= 126 || c >= 128 && c <= 255)) return false;
		}
		return true;
	}
	/**
	* @see https://tools.ietf.org/html/rfc7230#section-3.2.6
	* @param {number} c
	*/
	function isTokenCharCode(c) {
		switch (c) {
			case 34:
			case 40:
			case 41:
			case 44:
			case 47:
			case 58:
			case 59:
			case 60:
			case 61:
			case 62:
			case 63:
			case 64:
			case 91:
			case 92:
			case 93:
			case 123:
			case 125: return false;
			default: return c >= 33 && c <= 126;
		}
	}
	/**
	* @param {string} characters
	*/
	function isValidHTTPToken$1(characters) {
		if (characters.length === 0) return false;
		for (let i = 0; i < characters.length; ++i) if (!isTokenCharCode(characters.charCodeAt(i))) return false;
		return true;
	}
	/**
	* @see https://fetch.spec.whatwg.org/#header-name
	* @param {string} potentialValue
	*/
	function isValidHeaderName$3(potentialValue) {
		return isValidHTTPToken$1(potentialValue);
	}
	/**
	* @see https://fetch.spec.whatwg.org/#header-value
	* @param {string} potentialValue
	*/
	function isValidHeaderValue$1(potentialValue) {
		if (potentialValue.startsWith("	") || potentialValue.startsWith(" ") || potentialValue.endsWith("	") || potentialValue.endsWith(" ")) return false;
		if (potentialValue.includes("\0") || potentialValue.includes("\r") || potentialValue.includes("\n")) return false;
		return true;
	}
	function setRequestReferrerPolicyOnRedirect$1(request$1, actualResponse) {
		const { headersList } = actualResponse;
		const policyHeader = (headersList.get("referrer-policy") ?? "").split(",");
		let policy = "";
		if (policyHeader.length > 0) for (let i = policyHeader.length; i !== 0; i--) {
			const token = policyHeader[i - 1].trim();
			if (referrerPolicyTokens.has(token)) {
				policy = token;
				break;
			}
		}
		if (policy !== "") request$1.referrerPolicy = policy;
	}
	function crossOriginResourcePolicyCheck$1() {
		return "allowed";
	}
	function corsCheck$1() {
		return "success";
	}
	function TAOCheck$1() {
		return "success";
	}
	function appendFetchMetadata$1(httpRequest) {
		let header = null;
		header = httpRequest.mode;
		httpRequest.headersList.set("sec-fetch-mode", header);
	}
	function appendRequestOriginHeader$1(request$1) {
		let serializedOrigin = request$1.origin;
		if (request$1.responseTainting === "cors" || request$1.mode === "websocket") {
			if (serializedOrigin) request$1.headersList.append("origin", serializedOrigin);
		} else if (request$1.method !== "GET" && request$1.method !== "HEAD") {
			switch (request$1.referrerPolicy) {
				case "no-referrer":
					serializedOrigin = null;
					break;
				case "no-referrer-when-downgrade":
				case "strict-origin":
				case "strict-origin-when-cross-origin":
					if (request$1.origin && urlHasHttpsScheme$1(request$1.origin) && !urlHasHttpsScheme$1(requestCurrentURL$1(request$1))) serializedOrigin = null;
					break;
				case "same-origin":
					if (!sameOrigin$2(request$1, requestCurrentURL$1(request$1))) serializedOrigin = null;
					break;
				default:
			}
			if (serializedOrigin) request$1.headersList.append("origin", serializedOrigin);
		}
	}
	function coarsenedSharedCurrentTime$1(crossOriginIsolatedCapability) {
		return performance$1.now();
	}
	function createOpaqueTimingInfo$1(timingInfo) {
		return {
			startTime: timingInfo.startTime ?? 0,
			redirectStartTime: 0,
			redirectEndTime: 0,
			postRedirectStartTime: timingInfo.startTime ?? 0,
			finalServiceWorkerStartTime: 0,
			finalNetworkResponseStartTime: 0,
			finalNetworkRequestStartTime: 0,
			endTime: 0,
			encodedBodySize: 0,
			decodedBodySize: 0,
			finalConnectionTimingInfo: null
		};
	}
	function makePolicyContainer$2() {
		return { referrerPolicy: "strict-origin-when-cross-origin" };
	}
	function clonePolicyContainer$1(policyContainer) {
		return { referrerPolicy: policyContainer.referrerPolicy };
	}
	function determineRequestsReferrer$1(request$1) {
		const policy = request$1.referrerPolicy;
		assert$25(policy);
		let referrerSource = null;
		if (request$1.referrer === "client") {
			const globalOrigin$1 = getGlobalOrigin$3();
			if (!globalOrigin$1 || globalOrigin$1.origin === "null") return "no-referrer";
			referrerSource = new URL(globalOrigin$1);
		} else if (request$1.referrer instanceof URL) referrerSource = request$1.referrer;
		let referrerURL = stripURLForReferrer(referrerSource);
		const referrerOrigin = stripURLForReferrer(referrerSource, true);
		if (referrerURL.toString().length > 4096) referrerURL = referrerOrigin;
		const areSameOrigin = sameOrigin$2(request$1, referrerURL);
		const isNonPotentiallyTrustWorthy = isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(request$1.url);
		switch (policy) {
			case "origin": return referrerOrigin != null ? referrerOrigin : stripURLForReferrer(referrerSource, true);
			case "unsafe-url": return referrerURL;
			case "same-origin": return areSameOrigin ? referrerOrigin : "no-referrer";
			case "origin-when-cross-origin": return areSameOrigin ? referrerURL : referrerOrigin;
			case "strict-origin-when-cross-origin": {
				const currentURL = requestCurrentURL$1(request$1);
				if (sameOrigin$2(referrerURL, currentURL)) return referrerURL;
				if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) return "no-referrer";
				return referrerOrigin;
			}
			case "strict-origin":
			case "no-referrer-when-downgrade":
			default: return isNonPotentiallyTrustWorthy ? "no-referrer" : referrerOrigin;
		}
	}
	/**
	* @see https://w3c.github.io/webappsec-referrer-policy/#strip-url
	* @param {URL} url
	* @param {boolean|undefined} originOnly
	*/
	function stripURLForReferrer(url$3, originOnly) {
		assert$25(url$3 instanceof URL);
		if (url$3.protocol === "file:" || url$3.protocol === "about:" || url$3.protocol === "blank:") return "no-referrer";
		url$3.username = "";
		url$3.password = "";
		url$3.hash = "";
		if (originOnly) {
			url$3.pathname = "";
			url$3.search = "";
		}
		return url$3;
	}
	function isURLPotentiallyTrustworthy(url$3) {
		if (!(url$3 instanceof URL)) return false;
		if (url$3.href === "about:blank" || url$3.href === "about:srcdoc") return true;
		if (url$3.protocol === "data:") return true;
		if (url$3.protocol === "file:") return true;
		return isOriginPotentiallyTrustworthy(url$3.origin);
		function isOriginPotentiallyTrustworthy(origin$1) {
			if (origin$1 == null || origin$1 === "null") return false;
			const originAsURL = new URL(origin$1);
			if (originAsURL.protocol === "https:" || originAsURL.protocol === "wss:") return true;
			if (/^127(?:\.[0-9]+){0,2}\.[0-9]+$|^\[(?:0*:)*?:?0*1\]$/.test(originAsURL.hostname) || originAsURL.hostname === "localhost" || originAsURL.hostname.includes("localhost.") || originAsURL.hostname.endsWith(".localhost")) return true;
			return false;
		}
	}
	/**
	* @see https://w3c.github.io/webappsec-subresource-integrity/#does-response-match-metadatalist
	* @param {Uint8Array} bytes
	* @param {string} metadataList
	*/
	function bytesMatch$1(bytes, metadataList) {
		/* istanbul ignore if: only if node is built with --without-ssl */
		if (crypto$5 === void 0) return true;
		const parsedMetadata = parseMetadata(metadataList);
		if (parsedMetadata === "no metadata") return true;
		if (parsedMetadata.length === 0) return true;
		const strongest = getStrongestMetadata(parsedMetadata);
		const metadata = filterMetadataListByAlgorithm(parsedMetadata, strongest);
		for (const item of metadata) {
			const algorithm = item.algo;
			const expectedValue = item.hash;
			let actualValue = crypto$5.createHash(algorithm).update(bytes).digest("base64");
			if (actualValue[actualValue.length - 1] === "=") if (actualValue[actualValue.length - 2] === "=") actualValue = actualValue.slice(0, -2);
			else actualValue = actualValue.slice(0, -1);
			if (compareBase64Mixed(actualValue, expectedValue)) return true;
		}
		return false;
	}
	const parseHashWithOptions = /(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\s|$)( +[!-~]*)?)?/i;
	/**
	* @see https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata
	* @param {string} metadata
	*/
	function parseMetadata(metadata) {
		/** @type {{ algo: string, hash: string }[]} */
		const result = [];
		let empty = true;
		for (const token of metadata.split(" ")) {
			empty = false;
			const parsedToken = parseHashWithOptions.exec(token);
			if (parsedToken === null || parsedToken.groups === void 0 || parsedToken.groups.algo === void 0) continue;
			const algorithm = parsedToken.groups.algo.toLowerCase();
			if (supportedHashes.includes(algorithm)) result.push(parsedToken.groups);
		}
		if (empty === true) return "no metadata";
		return result;
	}
	/**
	* @param {{ algo: 'sha256' | 'sha384' | 'sha512' }[]} metadataList
	*/
	function getStrongestMetadata(metadataList) {
		let algorithm = metadataList[0].algo;
		if (algorithm[3] === "5") return algorithm;
		for (let i = 1; i < metadataList.length; ++i) {
			const metadata = metadataList[i];
			if (metadata.algo[3] === "5") {
				algorithm = "sha512";
				break;
			} else if (algorithm[3] === "3") continue;
			else if (metadata.algo[3] === "3") algorithm = "sha384";
		}
		return algorithm;
	}
	function filterMetadataListByAlgorithm(metadataList, algorithm) {
		if (metadataList.length === 1) return metadataList;
		let pos = 0;
		for (let i = 0; i < metadataList.length; ++i) if (metadataList[i].algo === algorithm) metadataList[pos++] = metadataList[i];
		metadataList.length = pos;
		return metadataList;
	}
	/**
	* Compares two base64 strings, allowing for base64url
	* in the second string.
	*
	* @param {string} actualValue always base64
	* @param {string} expectedValue base64 or base64url
	* @returns {boolean}
	*/
	function compareBase64Mixed(actualValue, expectedValue) {
		if (actualValue.length !== expectedValue.length) return false;
		for (let i = 0; i < actualValue.length; ++i) if (actualValue[i] !== expectedValue[i]) {
			if (actualValue[i] === "+" && expectedValue[i] === "-" || actualValue[i] === "/" && expectedValue[i] === "_") continue;
			return false;
		}
		return true;
	}
	function tryUpgradeRequestToAPotentiallyTrustworthyURL$1(request$1) {}
	/**
	* @link {https://html.spec.whatwg.org/multipage/origin.html#same-origin}
	* @param {URL} A
	* @param {URL} B
	*/
	function sameOrigin$2(A, B) {
		if (A.origin === B.origin && A.origin === "null") return true;
		if (A.protocol === B.protocol && A.hostname === B.hostname && A.port === B.port) return true;
		return false;
	}
	function createDeferredPromise$3() {
		let res;
		let rej;
		const promise = new Promise((resolve, reject) => {
			res = resolve;
			rej = reject;
		});
		return {
			promise,
			resolve: res,
			reject: rej
		};
	}
	function isAborted$2(fetchParams) {
		return fetchParams.controller.state === "aborted";
	}
	function isCancelled$2(fetchParams) {
		return fetchParams.controller.state === "aborted" || fetchParams.controller.state === "terminated";
	}
	const normalizeMethodRecord$1 = {
		delete: "DELETE",
		DELETE: "DELETE",
		get: "GET",
		GET: "GET",
		head: "HEAD",
		HEAD: "HEAD",
		options: "OPTIONS",
		OPTIONS: "OPTIONS",
		post: "POST",
		POST: "POST",
		put: "PUT",
		PUT: "PUT"
	};
	Object.setPrototypeOf(normalizeMethodRecord$1, null);
	/**
	* @see https://fetch.spec.whatwg.org/#concept-method-normalize
	* @param {string} method
	*/
	function normalizeMethod$1(method$1) {
		return normalizeMethodRecord$1[method$1.toLowerCase()] ?? method$1;
	}
	function serializeJavascriptValueToJSONString$1(value) {
		const result = JSON.stringify(value);
		if (result === void 0) throw new TypeError("Value is not JSON serializable");
		assert$25(typeof result === "string");
		return result;
	}
	const esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
	/**
	* @see https://webidl.spec.whatwg.org/#dfn-iterator-prototype-object
	* @param {() => unknown[]} iterator
	* @param {string} name name of the instance
	* @param {'key'|'value'|'key+value'} kind
	*/
	function makeIterator$2(iterator$1, name$2, kind) {
		const object = {
			index: 0,
			kind,
			target: iterator$1
		};
		const i = {
			next() {
				if (Object.getPrototypeOf(this) !== i) throw new TypeError(`'next' called on an object that does not implement interface ${name$2} Iterator.`);
				const { index, kind: kind$1, target } = object;
				const values$1 = target();
				const len = values$1.length;
				if (index >= len) return {
					value: void 0,
					done: true
				};
				const pair = values$1[index];
				object.index = index + 1;
				return iteratorResult(pair, kind$1);
			},
			[Symbol.toStringTag]: `${name$2} Iterator`
		};
		Object.setPrototypeOf(i, esIteratorPrototype);
		return Object.setPrototypeOf({}, i);
	}
	function iteratorResult(pair, kind) {
		let result;
		switch (kind) {
			case "key": {
				result = pair[0];
				break;
			}
			case "value": {
				result = pair[1];
				break;
			}
			case "key+value": {
				result = pair;
				break;
			}
		}
		return {
			value: result,
			done: false
		};
	}
	/**
	* @see https://fetch.spec.whatwg.org/#body-fully-read
	*/
	async function fullyReadBody$2(body, processBody, processBodyError) {
		const successSteps = processBody;
		const errorSteps = processBodyError;
		let reader;
		try {
			reader = body.stream.getReader();
		} catch (e) {
			errorSteps(e);
			return;
		}
		try {
			const result = await readAllBytes$1(reader);
			successSteps(result);
		} catch (e) {
			errorSteps(e);
		}
	}
	/** @type {ReadableStream} */
	let ReadableStream$4 = globalThis.ReadableStream;
	function isReadableStreamLike$1(stream$3) {
		if (!ReadableStream$4) ReadableStream$4 = __require("stream/web").ReadableStream;
		return stream$3 instanceof ReadableStream$4 || stream$3[Symbol.toStringTag] === "ReadableStream" && typeof stream$3.tee === "function";
	}
	const MAXIMUM_ARGUMENT_LENGTH = 65535;
	/**
	* @see https://infra.spec.whatwg.org/#isomorphic-decode
	* @param {number[]|Uint8Array} input
	*/
	function isomorphicDecode$1(input) {
		if (input.length < MAXIMUM_ARGUMENT_LENGTH) return String.fromCharCode(...input);
		return input.reduce((previous, current) => previous + String.fromCharCode(current), "");
	}
	/**
	* @param {ReadableStreamController<Uint8Array>} controller
	*/
	function readableStreamClose$2(controller) {
		try {
			controller.close();
		} catch (err) {
			if (!err.message.includes("Controller is already closed")) throw err;
		}
	}
	/**
	* @see https://infra.spec.whatwg.org/#isomorphic-encode
	* @param {string} input
	*/
	function isomorphicEncode$2(input) {
		for (let i = 0; i < input.length; i++) assert$25(input.charCodeAt(i) <= 255);
		return input;
	}
	/**
	* @see https://streams.spec.whatwg.org/#readablestreamdefaultreader-read-all-bytes
	* @see https://streams.spec.whatwg.org/#read-loop
	* @param {ReadableStreamDefaultReader} reader
	*/
	async function readAllBytes$1(reader) {
		const bytes = [];
		let byteLength = 0;
		while (true) {
			const { done: done$1, value: chunk } = await reader.read();
			if (done$1) return Buffer.concat(bytes, byteLength);
			if (!isUint8Array$1(chunk)) throw new TypeError("Received non-Uint8Array chunk");
			bytes.push(chunk);
			byteLength += chunk.length;
		}
	}
	/**
	* @see https://fetch.spec.whatwg.org/#is-local
	* @param {URL} url
	*/
	function urlIsLocal$1(url$3) {
		assert$25("protocol" in url$3);
		const protocol = url$3.protocol;
		return protocol === "about:" || protocol === "blob:" || protocol === "data:";
	}
	/**
	* @param {string|URL} url
	*/
	function urlHasHttpsScheme$1(url$3) {
		if (typeof url$3 === "string") return url$3.startsWith("https:");
		return url$3.protocol === "https:";
	}
	/**
	* @see https://fetch.spec.whatwg.org/#http-scheme
	* @param {URL} url
	*/
	function urlIsHttpHttpsScheme$2(url$3) {
		assert$25("protocol" in url$3);
		const protocol = url$3.protocol;
		return protocol === "http:" || protocol === "https:";
	}
	/**
	* Fetch supports node >= 16.8.0, but Object.hasOwn was added in v16.9.0.
	*/
	const hasOwn$3 = Object.hasOwn || ((dict, key$1) => Object.prototype.hasOwnProperty.call(dict, key$1));
	module.exports = {
		isAborted: isAborted$2,
		isCancelled: isCancelled$2,
		createDeferredPromise: createDeferredPromise$3,
		ReadableStreamFrom: ReadableStreamFrom$2,
		toUSVString: toUSVString$4,
		tryUpgradeRequestToAPotentiallyTrustworthyURL: tryUpgradeRequestToAPotentiallyTrustworthyURL$1,
		coarsenedSharedCurrentTime: coarsenedSharedCurrentTime$1,
		determineRequestsReferrer: determineRequestsReferrer$1,
		makePolicyContainer: makePolicyContainer$2,
		clonePolicyContainer: clonePolicyContainer$1,
		appendFetchMetadata: appendFetchMetadata$1,
		appendRequestOriginHeader: appendRequestOriginHeader$1,
		TAOCheck: TAOCheck$1,
		corsCheck: corsCheck$1,
		crossOriginResourcePolicyCheck: crossOriginResourcePolicyCheck$1,
		createOpaqueTimingInfo: createOpaqueTimingInfo$1,
		setRequestReferrerPolicyOnRedirect: setRequestReferrerPolicyOnRedirect$1,
		isValidHTTPToken: isValidHTTPToken$1,
		requestBadPort: requestBadPort$1,
		requestCurrentURL: requestCurrentURL$1,
		responseURL,
		responseLocationURL: responseLocationURL$1,
		isBlobLike: isBlobLike$6,
		isURLPotentiallyTrustworthy,
		isValidReasonPhrase: isValidReasonPhrase$1,
		sameOrigin: sameOrigin$2,
		normalizeMethod: normalizeMethod$1,
		serializeJavascriptValueToJSONString: serializeJavascriptValueToJSONString$1,
		makeIterator: makeIterator$2,
		isValidHeaderName: isValidHeaderName$3,
		isValidHeaderValue: isValidHeaderValue$1,
		hasOwn: hasOwn$3,
		isErrorLike: isErrorLike$2,
		fullyReadBody: fullyReadBody$2,
		bytesMatch: bytesMatch$1,
		isReadableStreamLike: isReadableStreamLike$1,
		readableStreamClose: readableStreamClose$2,
		isomorphicEncode: isomorphicEncode$2,
		isomorphicDecode: isomorphicDecode$1,
		urlIsLocal: urlIsLocal$1,
		urlHasHttpsScheme: urlHasHttpsScheme$1,
		urlIsHttpHttpsScheme: urlIsHttpHttpsScheme$2,
		readAllBytes: readAllBytes$1,
		normalizeMethodRecord: normalizeMethodRecord$1,
		parseMetadata
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/symbols.js
var require_symbols$3 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/symbols.js"(exports, module) {
	module.exports = {
		kUrl: Symbol("url"),
		kHeaders: Symbol("headers"),
		kSignal: Symbol("signal"),
		kState: Symbol("state"),
		kGuard: Symbol("guard"),
		kRealm: Symbol("realm")
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/webidl.js
var require_webidl = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/webidl.js"(exports, module) {
	const { types: types$5 } = __require("util");
	const { hasOwn: hasOwn$2, toUSVString: toUSVString$3 } = require_util$8();
	/** @type {import('../../types/webidl').Webidl} */
	const webidl$14 = {};
	webidl$14.converters = {};
	webidl$14.util = {};
	webidl$14.errors = {};
	webidl$14.errors.exception = function(message) {
		return new TypeError(`${message.header}: ${message.message}`);
	};
	webidl$14.errors.conversionFailed = function(context) {
		const plural$1 = context.types.length === 1 ? "" : " one of";
		const message = `${context.argument} could not be converted to${plural$1}: ${context.types.join(", ")}.`;
		return webidl$14.errors.exception({
			header: context.prefix,
			message
		});
	};
	webidl$14.errors.invalidArgument = function(context) {
		return webidl$14.errors.exception({
			header: context.prefix,
			message: `"${context.value}" is an invalid ${context.type}.`
		});
	};
	webidl$14.brandCheck = function(V, I, opts = void 0) {
		if (opts?.strict !== false && !(V instanceof I)) throw new TypeError("Illegal invocation");
		else return V?.[Symbol.toStringTag] === I.prototype[Symbol.toStringTag];
	};
	webidl$14.argumentLengthCheck = function({ length }, min$1, ctx) {
		if (length < min$1) throw webidl$14.errors.exception({
			message: `${min$1} argument${min$1 !== 1 ? "s" : ""} required, but${length ? " only" : ""} ${length} found.`,
			...ctx
		});
	};
	webidl$14.illegalConstructor = function() {
		throw webidl$14.errors.exception({
			header: "TypeError",
			message: "Illegal constructor"
		});
	};
	webidl$14.util.Type = function(V) {
		switch (typeof V) {
			case "undefined": return "Undefined";
			case "boolean": return "Boolean";
			case "string": return "String";
			case "symbol": return "Symbol";
			case "number": return "Number";
			case "bigint": return "BigInt";
			case "function":
			case "object": {
				if (V === null) return "Null";
				return "Object";
			}
		}
	};
	webidl$14.util.ConvertToInt = function(V, bitLength, signedness, opts = {}) {
		let upperBound;
		let lowerBound;
		if (bitLength === 64) {
			upperBound = Math.pow(2, 53) - 1;
			if (signedness === "unsigned") lowerBound = 0;
			else lowerBound = Math.pow(-2, 53) + 1;
		} else if (signedness === "unsigned") {
			lowerBound = 0;
			upperBound = Math.pow(2, bitLength) - 1;
		} else {
			lowerBound = Math.pow(-2, bitLength) - 1;
			upperBound = Math.pow(2, bitLength - 1) - 1;
		}
		let x = Number(V);
		if (x === 0) x = 0;
		if (opts.enforceRange === true) {
			if (Number.isNaN(x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) throw webidl$14.errors.exception({
				header: "Integer conversion",
				message: `Could not convert ${V} to an integer.`
			});
			x = webidl$14.util.IntegerPart(x);
			if (x < lowerBound || x > upperBound) throw webidl$14.errors.exception({
				header: "Integer conversion",
				message: `Value must be between ${lowerBound}-${upperBound}, got ${x}.`
			});
			return x;
		}
		if (!Number.isNaN(x) && opts.clamp === true) {
			x = Math.min(Math.max(x, lowerBound), upperBound);
			if (Math.floor(x) % 2 === 0) x = Math.floor(x);
			else x = Math.ceil(x);
			return x;
		}
		if (Number.isNaN(x) || x === 0 && Object.is(0, x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) return 0;
		x = webidl$14.util.IntegerPart(x);
		x = x % Math.pow(2, bitLength);
		if (signedness === "signed" && x >= Math.pow(2, bitLength) - 1) return x - Math.pow(2, bitLength);
		return x;
	};
	webidl$14.util.IntegerPart = function(n) {
		const r = Math.floor(Math.abs(n));
		if (n < 0) return -1 * r;
		return r;
	};
	webidl$14.sequenceConverter = function(converter) {
		return (V) => {
			if (webidl$14.util.Type(V) !== "Object") throw webidl$14.errors.exception({
				header: "Sequence",
				message: `Value of type ${webidl$14.util.Type(V)} is not an Object.`
			});
			/** @type {Generator} */
			const method$1 = V?.[Symbol.iterator]?.();
			const seq = [];
			if (method$1 === void 0 || typeof method$1.next !== "function") throw webidl$14.errors.exception({
				header: "Sequence",
				message: "Object is not an iterator."
			});
			while (true) {
				const { done: done$1, value } = method$1.next();
				if (done$1) break;
				seq.push(converter(value));
			}
			return seq;
		};
	};
	webidl$14.recordConverter = function(keyConverter, valueConverter) {
		return (O) => {
			if (webidl$14.util.Type(O) !== "Object") throw webidl$14.errors.exception({
				header: "Record",
				message: `Value of type ${webidl$14.util.Type(O)} is not an Object.`
			});
			const result = {};
			if (!types$5.isProxy(O)) {
				const keys$3 = Object.keys(O);
				for (const key$1 of keys$3) {
					const typedKey = keyConverter(key$1);
					const typedValue = valueConverter(O[key$1]);
					result[typedKey] = typedValue;
				}
				return result;
			}
			const keys$2 = Reflect.ownKeys(O);
			for (const key$1 of keys$2) {
				const desc$1 = Reflect.getOwnPropertyDescriptor(O, key$1);
				if (desc$1?.enumerable) {
					const typedKey = keyConverter(key$1);
					const typedValue = valueConverter(O[key$1]);
					result[typedKey] = typedValue;
				}
			}
			return result;
		};
	};
	webidl$14.interfaceConverter = function(i) {
		return (V, opts = {}) => {
			if (opts.strict !== false && !(V instanceof i)) throw webidl$14.errors.exception({
				header: i.name,
				message: `Expected ${V} to be an instance of ${i.name}.`
			});
			return V;
		};
	};
	webidl$14.dictionaryConverter = function(converters) {
		return (dictionary) => {
			const type = webidl$14.util.Type(dictionary);
			const dict = {};
			if (type === "Null" || type === "Undefined") return dict;
			else if (type !== "Object") throw webidl$14.errors.exception({
				header: "Dictionary",
				message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`
			});
			for (const options of converters) {
				const { key: key$1, defaultValue, required, converter } = options;
				if (required === true) {
					if (!hasOwn$2(dictionary, key$1)) throw webidl$14.errors.exception({
						header: "Dictionary",
						message: `Missing required key "${key$1}".`
					});
				}
				let value = dictionary[key$1];
				const hasDefault = hasOwn$2(options, "defaultValue");
				if (hasDefault && value !== null) value = value ?? defaultValue;
				if (required || hasDefault || value !== void 0) {
					value = converter(value);
					if (options.allowedValues && !options.allowedValues.includes(value)) throw webidl$14.errors.exception({
						header: "Dictionary",
						message: `${value} is not an accepted type. Expected one of ${options.allowedValues.join(", ")}.`
					});
					dict[key$1] = value;
				}
			}
			return dict;
		};
	};
	webidl$14.nullableConverter = function(converter) {
		return (V) => {
			if (V === null) return V;
			return converter(V);
		};
	};
	webidl$14.converters.DOMString = function(V, opts = {}) {
		if (V === null && opts.legacyNullToEmptyString) return "";
		if (typeof V === "symbol") throw new TypeError("Could not convert argument of type symbol to string.");
		return String(V);
	};
	webidl$14.converters.ByteString = function(V) {
		const x = webidl$14.converters.DOMString(V);
		for (let index = 0; index < x.length; index++) if (x.charCodeAt(index) > 255) throw new TypeError(`Cannot convert argument to a ByteString because the character at index ${index} has a value of ${x.charCodeAt(index)} which is greater than 255.`);
		return x;
	};
	webidl$14.converters.USVString = toUSVString$3;
	webidl$14.converters.boolean = function(V) {
		const x = Boolean(V);
		return x;
	};
	webidl$14.converters.any = function(V) {
		return V;
	};
	webidl$14.converters["long long"] = function(V) {
		const x = webidl$14.util.ConvertToInt(V, 64, "signed");
		return x;
	};
	webidl$14.converters["unsigned long long"] = function(V) {
		const x = webidl$14.util.ConvertToInt(V, 64, "unsigned");
		return x;
	};
	webidl$14.converters["unsigned long"] = function(V) {
		const x = webidl$14.util.ConvertToInt(V, 32, "unsigned");
		return x;
	};
	webidl$14.converters["unsigned short"] = function(V, opts) {
		const x = webidl$14.util.ConvertToInt(V, 16, "unsigned", opts);
		return x;
	};
	webidl$14.converters.ArrayBuffer = function(V, opts = {}) {
		if (webidl$14.util.Type(V) !== "Object" || !types$5.isAnyArrayBuffer(V)) throw webidl$14.errors.conversionFailed({
			prefix: `${V}`,
			argument: `${V}`,
			types: ["ArrayBuffer"]
		});
		if (opts.allowShared === false && types$5.isSharedArrayBuffer(V)) throw webidl$14.errors.exception({
			header: "ArrayBuffer",
			message: "SharedArrayBuffer is not allowed."
		});
		return V;
	};
	webidl$14.converters.TypedArray = function(V, T, opts = {}) {
		if (webidl$14.util.Type(V) !== "Object" || !types$5.isTypedArray(V) || V.constructor.name !== T.name) throw webidl$14.errors.conversionFailed({
			prefix: `${T.name}`,
			argument: `${V}`,
			types: [T.name]
		});
		if (opts.allowShared === false && types$5.isSharedArrayBuffer(V.buffer)) throw webidl$14.errors.exception({
			header: "ArrayBuffer",
			message: "SharedArrayBuffer is not allowed."
		});
		return V;
	};
	webidl$14.converters.DataView = function(V, opts = {}) {
		if (webidl$14.util.Type(V) !== "Object" || !types$5.isDataView(V)) throw webidl$14.errors.exception({
			header: "DataView",
			message: "Object is not a DataView."
		});
		if (opts.allowShared === false && types$5.isSharedArrayBuffer(V.buffer)) throw webidl$14.errors.exception({
			header: "ArrayBuffer",
			message: "SharedArrayBuffer is not allowed."
		});
		return V;
	};
	webidl$14.converters.BufferSource = function(V, opts = {}) {
		if (types$5.isAnyArrayBuffer(V)) return webidl$14.converters.ArrayBuffer(V, opts);
		if (types$5.isTypedArray(V)) return webidl$14.converters.TypedArray(V, V.constructor);
		if (types$5.isDataView(V)) return webidl$14.converters.DataView(V, opts);
		throw new TypeError(`Could not convert ${V} to a BufferSource.`);
	};
	webidl$14.converters["sequence<ByteString>"] = webidl$14.sequenceConverter(webidl$14.converters.ByteString);
	webidl$14.converters["sequence<sequence<ByteString>>"] = webidl$14.sequenceConverter(webidl$14.converters["sequence<ByteString>"]);
	webidl$14.converters["record<ByteString, ByteString>"] = webidl$14.recordConverter(webidl$14.converters.ByteString, webidl$14.converters.ByteString);
	module.exports = { webidl: webidl$14 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/dataURL.js
var require_dataURL = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/dataURL.js"(exports, module) {
	const assert$24 = __require("assert");
	const { atob: atob$1 } = __require("buffer");
	const { isomorphicDecode } = require_util$8();
	const encoder$1 = new TextEncoder();
	/**
	* @see https://mimesniff.spec.whatwg.org/#http-token-code-point
	*/
	const HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+-.^_|~A-Za-z0-9]+$/;
	const HTTP_WHITESPACE_REGEX = /(\u000A|\u000D|\u0009|\u0020)/;
	/**
	* @see https://mimesniff.spec.whatwg.org/#http-quoted-string-token-code-point
	*/
	const HTTP_QUOTED_STRING_TOKENS = /[\u0009|\u0020-\u007E|\u0080-\u00FF]/;
	/** @param {URL} dataURL */
	function dataURLProcessor$1(dataURL) {
		assert$24(dataURL.protocol === "data:");
		let input = URLSerializer$4(dataURL, true);
		input = input.slice(5);
		const position = { position: 0 };
		let mimeType = collectASequenceOfCodePointsFast$1(",", input, position);
		const mimeTypeLength = mimeType.length;
		mimeType = removeASCIIWhitespace(mimeType, true, true);
		if (position.position >= input.length) return "failure";
		position.position++;
		const encodedBody = input.slice(mimeTypeLength + 1);
		let body = stringPercentDecode(encodedBody);
		if (/;(\u0020){0,}base64$/i.test(mimeType)) {
			const stringBody = isomorphicDecode(body);
			body = forgivingBase64(stringBody);
			if (body === "failure") return "failure";
			mimeType = mimeType.slice(0, -6);
			mimeType = mimeType.replace(/(\u0020)+$/, "");
			mimeType = mimeType.slice(0, -1);
		}
		if (mimeType.startsWith(";")) mimeType = "text/plain" + mimeType;
		let mimeTypeRecord = parseMIMEType$3(mimeType);
		if (mimeTypeRecord === "failure") mimeTypeRecord = parseMIMEType$3("text/plain;charset=US-ASCII");
		return {
			mimeType: mimeTypeRecord,
			body
		};
	}
	/**
	* @param {URL} url
	* @param {boolean} excludeFragment
	*/
	function URLSerializer$4(url$3, excludeFragment = false) {
		if (!excludeFragment) return url$3.href;
		const href = url$3.href;
		const hashLength = url$3.hash.length;
		return hashLength === 0 ? href : href.substring(0, href.length - hashLength);
	}
	/**
	* @param {(char: string) => boolean} condition
	* @param {string} input
	* @param {{ position: number }} position
	*/
	function collectASequenceOfCodePoints(condition, input, position) {
		let result = "";
		while (position.position < input.length && condition(input[position.position])) {
			result += input[position.position];
			position.position++;
		}
		return result;
	}
	/**
	* A faster collectASequenceOfCodePoints that only works when comparing a single character.
	* @param {string} char
	* @param {string} input
	* @param {{ position: number }} position
	*/
	function collectASequenceOfCodePointsFast$1(char, input, position) {
		const idx = input.indexOf(char, position.position);
		const start = position.position;
		if (idx === -1) {
			position.position = input.length;
			return input.slice(start);
		}
		position.position = idx;
		return input.slice(start, position.position);
	}
	/** @param {string} input */
	function stringPercentDecode(input) {
		const bytes = encoder$1.encode(input);
		return percentDecode(bytes);
	}
	/** @param {Uint8Array} input */
	function percentDecode(input) {
		/** @type {number[]} */
		const output = [];
		for (let i = 0; i < input.length; i++) {
			const byte = input[i];
			if (byte !== 37) output.push(byte);
			else if (byte === 37 && !/^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(input[i + 1], input[i + 2]))) output.push(37);
			else {
				const nextTwoBytes = String.fromCharCode(input[i + 1], input[i + 2]);
				const bytePoint = Number.parseInt(nextTwoBytes, 16);
				output.push(bytePoint);
				i += 2;
			}
		}
		return Uint8Array.from(output);
	}
	/** @param {string} input */
	function parseMIMEType$3(input) {
		input = removeHTTPWhitespace(input, true, true);
		const position = { position: 0 };
		const type = collectASequenceOfCodePointsFast$1("/", input, position);
		if (type.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(type)) return "failure";
		if (position.position > input.length) return "failure";
		position.position++;
		let subtype = collectASequenceOfCodePointsFast$1(";", input, position);
		subtype = removeHTTPWhitespace(subtype, false, true);
		if (subtype.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(subtype)) return "failure";
		const typeLowercase = type.toLowerCase();
		const subtypeLowercase = subtype.toLowerCase();
		const mimeType = {
			type: typeLowercase,
			subtype: subtypeLowercase,
			parameters: new Map(),
			essence: `${typeLowercase}/${subtypeLowercase}`
		};
		while (position.position < input.length) {
			position.position++;
			collectASequenceOfCodePoints(
				// https://fetch.spec.whatwg.org/#http-whitespace
				(char) => HTTP_WHITESPACE_REGEX.test(char),
				input,
				position
);
			let parameterName = collectASequenceOfCodePoints((char) => char !== ";" && char !== "=", input, position);
			parameterName = parameterName.toLowerCase();
			if (position.position < input.length) {
				if (input[position.position] === ";") continue;
				position.position++;
			}
			if (position.position > input.length) break;
			let parameterValue = null;
			if (input[position.position] === "\"") {
				parameterValue = collectAnHTTPQuotedString(input, position, true);
				collectASequenceOfCodePointsFast$1(";", input, position);
			} else {
				parameterValue = collectASequenceOfCodePointsFast$1(";", input, position);
				parameterValue = removeHTTPWhitespace(parameterValue, false, true);
				if (parameterValue.length === 0) continue;
			}
			if (parameterName.length !== 0 && HTTP_TOKEN_CODEPOINTS.test(parameterName) && (parameterValue.length === 0 || HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) && !mimeType.parameters.has(parameterName)) mimeType.parameters.set(parameterName, parameterValue);
		}
		return mimeType;
	}
	/** @param {string} data */
	function forgivingBase64(data) {
		data = data.replace(/[\u0009\u000A\u000C\u000D\u0020]/g, "");
		if (data.length % 4 === 0) data = data.replace(/=?=$/, "");
		if (data.length % 4 === 1) return "failure";
		if (/[^+/0-9A-Za-z]/.test(data)) return "failure";
		const binary = atob$1(data);
		const bytes = new Uint8Array(binary.length);
		for (let byte = 0; byte < binary.length; byte++) bytes[byte] = binary.charCodeAt(byte);
		return bytes;
	}
	/**
	* @param {string} input
	* @param {{ position: number }} position
	* @param {boolean?} extractValue
	*/
	function collectAnHTTPQuotedString(input, position, extractValue) {
		const positionStart = position.position;
		let value = "";
		assert$24(input[position.position] === "\"");
		position.position++;
		while (true) {
			value += collectASequenceOfCodePoints((char) => char !== "\"" && char !== "\\", input, position);
			if (position.position >= input.length) break;
			const quoteOrBackslash = input[position.position];
			position.position++;
			if (quoteOrBackslash === "\\") {
				if (position.position >= input.length) {
					value += "\\";
					break;
				}
				value += input[position.position];
				position.position++;
			} else {
				assert$24(quoteOrBackslash === "\"");
				break;
			}
		}
		if (extractValue) return value;
		return input.slice(positionStart, position.position);
	}
	/**
	* @see https://mimesniff.spec.whatwg.org/#serialize-a-mime-type
	*/
	function serializeAMimeType$4(mimeType) {
		assert$24(mimeType !== "failure");
		const { parameters, essence } = mimeType;
		let serialization = essence;
		for (let [name$2, value] of parameters.entries()) {
			serialization += ";";
			serialization += name$2;
			serialization += "=";
			if (!HTTP_TOKEN_CODEPOINTS.test(value)) {
				value = value.replace(/(\\|")/g, "\\$1");
				value = "\"" + value;
				value += "\"";
			}
			serialization += value;
		}
		return serialization;
	}
	/**
	* @see https://fetch.spec.whatwg.org/#http-whitespace
	* @param {string} char
	*/
	function isHTTPWhiteSpace(char) {
		return char === "\r" || char === "\n" || char === "	" || char === " ";
	}
	/**
	* @see https://fetch.spec.whatwg.org/#http-whitespace
	* @param {string} str
	*/
	function removeHTTPWhitespace(str, leading = true, trailing = true) {
		let lead = 0;
		let trail = str.length - 1;
		if (leading) for (; lead < str.length && isHTTPWhiteSpace(str[lead]); lead++);
		if (trailing) for (; trail > 0 && isHTTPWhiteSpace(str[trail]); trail--);
		return str.slice(lead, trail + 1);
	}
	/**
	* @see https://infra.spec.whatwg.org/#ascii-whitespace
	* @param {string} char
	*/
	function isASCIIWhitespace(char) {
		return char === "\r" || char === "\n" || char === "	" || char === "\f" || char === " ";
	}
	/**
	* @see https://infra.spec.whatwg.org/#strip-leading-and-trailing-ascii-whitespace
	*/
	function removeASCIIWhitespace(str, leading = true, trailing = true) {
		let lead = 0;
		let trail = str.length - 1;
		if (leading) for (; lead < str.length && isASCIIWhitespace(str[lead]); lead++);
		if (trailing) for (; trail > 0 && isASCIIWhitespace(str[trail]); trail--);
		return str.slice(lead, trail + 1);
	}
	module.exports = {
		dataURLProcessor: dataURLProcessor$1,
		URLSerializer: URLSerializer$4,
		collectASequenceOfCodePoints,
		collectASequenceOfCodePointsFast: collectASequenceOfCodePointsFast$1,
		stringPercentDecode,
		parseMIMEType: parseMIMEType$3,
		collectAnHTTPQuotedString,
		serializeAMimeType: serializeAMimeType$4
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/file.js
var require_file$1 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/file.js"(exports, module) {
	const { Blob: Blob$4, File: NativeFile$2 } = __require("buffer");
	const { types: types$4 } = __require("util");
	const { kState: kState$9 } = require_symbols$3();
	const { isBlobLike: isBlobLike$5 } = require_util$8();
	const { webidl: webidl$13 } = require_webidl();
	const { parseMIMEType: parseMIMEType$2, serializeAMimeType: serializeAMimeType$3 } = require_dataURL();
	const { kEnumerableProperty: kEnumerableProperty$8 } = require_util$9();
	const encoder = new TextEncoder();
	var File$2 = class File$2 extends Blob$4 {
		constructor(fileBits, fileName, options = {}) {
			webidl$13.argumentLengthCheck(arguments, 2, { header: "File constructor" });
			fileBits = webidl$13.converters["sequence<BlobPart>"](fileBits);
			fileName = webidl$13.converters.USVString(fileName);
			options = webidl$13.converters.FilePropertyBag(options);
			const n = fileName;
			let t$5 = options.type;
			let d$1;
			substep: {
				if (t$5) {
					t$5 = parseMIMEType$2(t$5);
					if (t$5 === "failure") {
						t$5 = "";
						break substep;
					}
					t$5 = serializeAMimeType$3(t$5).toLowerCase();
				}
				d$1 = options.lastModified;
			}
			super(processBlobParts(fileBits, options), { type: t$5 });
			this[kState$9] = {
				name: n,
				lastModified: d$1,
				type: t$5
			};
		}
		get name() {
			webidl$13.brandCheck(this, File$2);
			return this[kState$9].name;
		}
		get lastModified() {
			webidl$13.brandCheck(this, File$2);
			return this[kState$9].lastModified;
		}
		get type() {
			webidl$13.brandCheck(this, File$2);
			return this[kState$9].type;
		}
	};
	var FileLike$1 = class FileLike$1 {
		constructor(blobLike, fileName, options = {}) {
			const n = fileName;
			const t$5 = options.type;
			const d$1 = options.lastModified ?? Date.now();
			this[kState$9] = {
				blobLike,
				name: n,
				type: t$5,
				lastModified: d$1
			};
		}
		stream(...args) {
			webidl$13.brandCheck(this, FileLike$1);
			return this[kState$9].blobLike.stream(...args);
		}
		arrayBuffer(...args) {
			webidl$13.brandCheck(this, FileLike$1);
			return this[kState$9].blobLike.arrayBuffer(...args);
		}
		slice(...args) {
			webidl$13.brandCheck(this, FileLike$1);
			return this[kState$9].blobLike.slice(...args);
		}
		text(...args) {
			webidl$13.brandCheck(this, FileLike$1);
			return this[kState$9].blobLike.text(...args);
		}
		get size() {
			webidl$13.brandCheck(this, FileLike$1);
			return this[kState$9].blobLike.size;
		}
		get type() {
			webidl$13.brandCheck(this, FileLike$1);
			return this[kState$9].blobLike.type;
		}
		get name() {
			webidl$13.brandCheck(this, FileLike$1);
			return this[kState$9].name;
		}
		get lastModified() {
			webidl$13.brandCheck(this, FileLike$1);
			return this[kState$9].lastModified;
		}
		get [Symbol.toStringTag]() {
			return "File";
		}
	};
	Object.defineProperties(File$2.prototype, {
		[Symbol.toStringTag]: {
			value: "File",
			configurable: true
		},
		name: kEnumerableProperty$8,
		lastModified: kEnumerableProperty$8
	});
	webidl$13.converters.Blob = webidl$13.interfaceConverter(Blob$4);
	webidl$13.converters.BlobPart = function(V, opts) {
		if (webidl$13.util.Type(V) === "Object") {
			if (isBlobLike$5(V)) return webidl$13.converters.Blob(V, { strict: false });
			if (ArrayBuffer.isView(V) || types$4.isAnyArrayBuffer(V)) return webidl$13.converters.BufferSource(V, opts);
		}
		return webidl$13.converters.USVString(V, opts);
	};
	webidl$13.converters["sequence<BlobPart>"] = webidl$13.sequenceConverter(webidl$13.converters.BlobPart);
	webidl$13.converters.FilePropertyBag = webidl$13.dictionaryConverter([
		{
			key: "lastModified",
			converter: webidl$13.converters["long long"],
			get defaultValue() {
				return Date.now();
			}
		},
		{
			key: "type",
			converter: webidl$13.converters.DOMString,
			defaultValue: ""
		},
		{
			key: "endings",
			converter: (value) => {
				value = webidl$13.converters.DOMString(value);
				value = value.toLowerCase();
				if (value !== "native") value = "transparent";
				return value;
			},
			defaultValue: "transparent"
		}
	]);
	/**
	* @see https://www.w3.org/TR/FileAPI/#process-blob-parts
	* @param {(NodeJS.TypedArray|Blob|string)[]} parts
	* @param {{ type: string, endings: string }} options
	*/
	function processBlobParts(parts, options) {
		/** @type {NodeJS.TypedArray[]} */
		const bytes = [];
		for (const element of parts) if (typeof element === "string") {
			let s$1 = element;
			if (options.endings === "native") s$1 = convertLineEndingsNative(s$1);
			bytes.push(encoder.encode(s$1));
		} else if (types$4.isAnyArrayBuffer(element) || types$4.isTypedArray(element)) if (!element.buffer) bytes.push(new Uint8Array(element));
		else bytes.push(new Uint8Array(element.buffer, element.byteOffset, element.byteLength));
		else if (isBlobLike$5(element)) bytes.push(element);
		return bytes;
	}
	/**
	* @see https://www.w3.org/TR/FileAPI/#convert-line-endings-to-native
	* @param {string} s
	*/
	function convertLineEndingsNative(s$1) {
		let nativeLineEnding = "\n";
		if (process.platform === "win32") nativeLineEnding = "\r\n";
		return s$1.replace(/\r?\n/g, nativeLineEnding);
	}
	function isFileLike$1(object) {
		return NativeFile$2 && object instanceof NativeFile$2 || object instanceof File$2 || object && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && object[Symbol.toStringTag] === "File";
	}
	module.exports = {
		File: File$2,
		FileLike: FileLike$1,
		isFileLike: isFileLike$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/formdata.js
var require_formdata = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/formdata.js"(exports, module) {
	const { isBlobLike: isBlobLike$4, toUSVString: toUSVString$2, makeIterator: makeIterator$1 } = require_util$8();
	const { kState: kState$8 } = require_symbols$3();
	const { File: UndiciFile$1, FileLike, isFileLike } = require_file$1();
	const { webidl: webidl$12 } = require_webidl();
	const { Blob: Blob$3, File: NativeFile$1 } = __require("buffer");
	/** @type {globalThis['File']} */
	const File$1 = NativeFile$1 ?? UndiciFile$1;
	var FormData$5 = class FormData$5 {
		constructor(form) {
			if (form !== void 0) throw webidl$12.errors.conversionFailed({
				prefix: "FormData constructor",
				argument: "Argument 1",
				types: ["undefined"]
			});
			this[kState$8] = [];
		}
		append(name$2, value, filename = void 0) {
			webidl$12.brandCheck(this, FormData$5);
			webidl$12.argumentLengthCheck(arguments, 2, { header: "FormData.append" });
			if (arguments.length === 3 && !isBlobLike$4(value)) throw new TypeError("Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'");
			name$2 = webidl$12.converters.USVString(name$2);
			value = isBlobLike$4(value) ? webidl$12.converters.Blob(value, { strict: false }) : webidl$12.converters.USVString(value);
			filename = arguments.length === 3 ? webidl$12.converters.USVString(filename) : void 0;
			const entry = makeEntry(name$2, value, filename);
			this[kState$8].push(entry);
		}
		delete(name$2) {
			webidl$12.brandCheck(this, FormData$5);
			webidl$12.argumentLengthCheck(arguments, 1, { header: "FormData.delete" });
			name$2 = webidl$12.converters.USVString(name$2);
			this[kState$8] = this[kState$8].filter((entry) => entry.name !== name$2);
		}
		get(name$2) {
			webidl$12.brandCheck(this, FormData$5);
			webidl$12.argumentLengthCheck(arguments, 1, { header: "FormData.get" });
			name$2 = webidl$12.converters.USVString(name$2);
			const idx = this[kState$8].findIndex((entry) => entry.name === name$2);
			if (idx === -1) return null;
			return this[kState$8][idx].value;
		}
		getAll(name$2) {
			webidl$12.brandCheck(this, FormData$5);
			webidl$12.argumentLengthCheck(arguments, 1, { header: "FormData.getAll" });
			name$2 = webidl$12.converters.USVString(name$2);
			return this[kState$8].filter((entry) => entry.name === name$2).map((entry) => entry.value);
		}
		has(name$2) {
			webidl$12.brandCheck(this, FormData$5);
			webidl$12.argumentLengthCheck(arguments, 1, { header: "FormData.has" });
			name$2 = webidl$12.converters.USVString(name$2);
			return this[kState$8].findIndex((entry) => entry.name === name$2) !== -1;
		}
		set(name$2, value, filename = void 0) {
			webidl$12.brandCheck(this, FormData$5);
			webidl$12.argumentLengthCheck(arguments, 2, { header: "FormData.set" });
			if (arguments.length === 3 && !isBlobLike$4(value)) throw new TypeError("Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'");
			name$2 = webidl$12.converters.USVString(name$2);
			value = isBlobLike$4(value) ? webidl$12.converters.Blob(value, { strict: false }) : webidl$12.converters.USVString(value);
			filename = arguments.length === 3 ? toUSVString$2(filename) : void 0;
			const entry = makeEntry(name$2, value, filename);
			const idx = this[kState$8].findIndex((entry$1) => entry$1.name === name$2);
			if (idx !== -1) this[kState$8] = [
				...this[kState$8].slice(0, idx),
				entry,
				...this[kState$8].slice(idx + 1).filter((entry$1) => entry$1.name !== name$2)
			];
			else this[kState$8].push(entry);
		}
		entries() {
			webidl$12.brandCheck(this, FormData$5);
			return makeIterator$1(() => this[kState$8].map((pair) => [pair.name, pair.value]), "FormData", "key+value");
		}
		keys() {
			webidl$12.brandCheck(this, FormData$5);
			return makeIterator$1(() => this[kState$8].map((pair) => [pair.name, pair.value]), "FormData", "key");
		}
		values() {
			webidl$12.brandCheck(this, FormData$5);
			return makeIterator$1(() => this[kState$8].map((pair) => [pair.name, pair.value]), "FormData", "value");
		}
		/**
		* @param {(value: string, key: string, self: FormData) => void} callbackFn
		* @param {unknown} thisArg
		*/
		forEach(callbackFn, thisArg = globalThis) {
			webidl$12.brandCheck(this, FormData$5);
			webidl$12.argumentLengthCheck(arguments, 1, { header: "FormData.forEach" });
			if (typeof callbackFn !== "function") throw new TypeError("Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'.");
			for (const [key$1, value] of this) callbackFn.apply(thisArg, [
				value,
				key$1,
				this
			]);
		}
	};
	FormData$5.prototype[Symbol.iterator] = FormData$5.prototype.entries;
	Object.defineProperties(FormData$5.prototype, { [Symbol.toStringTag]: {
		value: "FormData",
		configurable: true
	} });
	/**
	* @see https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#create-an-entry
	* @param {string} name
	* @param {string|Blob} value
	* @param {?string} filename
	* @returns
	*/
	function makeEntry(name$2, value, filename) {
		name$2 = Buffer.from(name$2).toString("utf8");
		if (typeof value === "string") value = Buffer.from(value).toString("utf8");
		else {
			if (!isFileLike(value)) value = value instanceof Blob$3 ? new File$1([value], "blob", { type: value.type }) : new FileLike(value, "blob", { type: value.type });
			if (filename !== void 0) {
				/** @type {FilePropertyBag} */
				const options = {
					type: value.type,
					lastModified: value.lastModified
				};
				value = NativeFile$1 && value instanceof NativeFile$1 || value instanceof UndiciFile$1 ? new File$1([value], filename, options) : new FileLike(value, filename, options);
			}
		}
		return {
			name: name$2,
			value
		};
	}
	module.exports = { FormData: FormData$5 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/body.js
var require_body = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/body.js"(exports, module) {
	const Busboy = require_main();
	const util$32 = require_util$9();
	const { ReadableStreamFrom: ReadableStreamFrom$1, isBlobLike: isBlobLike$3, isReadableStreamLike, readableStreamClose: readableStreamClose$1, createDeferredPromise: createDeferredPromise$2, fullyReadBody: fullyReadBody$1 } = require_util$8();
	const { FormData: FormData$4 } = require_formdata();
	const { kState: kState$7 } = require_symbols$3();
	const { webidl: webidl$11 } = require_webidl();
	const { DOMException: DOMException$5, structuredClone } = require_constants$5();
	const { Blob: Blob$2, File: NativeFile } = __require("buffer");
	const { kBodyUsed: kBodyUsed$1 } = require_symbols$4();
	const assert$23 = __require("assert");
	const { isErrored: isErrored$1 } = require_util$9();
	const { isUint8Array, isArrayBuffer: isArrayBuffer$1 } = __require("util/types");
	const { File: UndiciFile } = require_file$1();
	const { parseMIMEType: parseMIMEType$1, serializeAMimeType: serializeAMimeType$2 } = require_dataURL();
	let random;
	try {
		const crypto$7 = __require("node:crypto");
		random = (max$2) => crypto$7.randomInt(0, max$2);
	} catch {
		random = (max$2) => Math.floor(Math.random(max$2));
	}
	let ReadableStream$3 = globalThis.ReadableStream;
	/** @type {globalThis['File']} */
	const File = NativeFile ?? UndiciFile;
	const textEncoder$2 = new TextEncoder();
	const textDecoder = new TextDecoder();
	function extractBody$3(object, keepalive = false) {
		if (!ReadableStream$3) ReadableStream$3 = __require("stream/web").ReadableStream;
		let stream$3 = null;
		if (object instanceof ReadableStream$3) stream$3 = object;
		else if (isBlobLike$3(object)) stream$3 = object.stream();
		else stream$3 = new ReadableStream$3({
			async pull(controller) {
				controller.enqueue(typeof source === "string" ? textEncoder$2.encode(source) : source);
				queueMicrotask(() => readableStreamClose$1(controller));
			},
			start() {},
			type: void 0
		});
		assert$23(isReadableStreamLike(stream$3));
		let action = null;
		let source = null;
		let length = null;
		let type = null;
		if (typeof object === "string") {
			source = object;
			type = "text/plain;charset=UTF-8";
		} else if (object instanceof URLSearchParams) {
			source = object.toString();
			type = "application/x-www-form-urlencoded;charset=UTF-8";
		} else if (isArrayBuffer$1(object)) source = new Uint8Array(object.slice());
		else if (ArrayBuffer.isView(object)) source = new Uint8Array(object.buffer.slice(object.byteOffset, object.byteOffset + object.byteLength));
		else if (util$32.isFormDataLike(object)) {
			const boundary = `----formdata-undici-0${`${random(1e11)}`.padStart(11, "0")}`;
			const prefix = `--${boundary}\r\nContent-Disposition: form-data`;
			/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
			const escape = (str) => str.replace(/\n/g, "%0A").replace(/\r/g, "%0D").replace(/"/g, "%22");
			const normalizeLinefeeds = (value) => value.replace(/\r?\n|\r/g, "\r\n");
			const blobParts = [];
			const rn = new Uint8Array([13, 10]);
			length = 0;
			let hasUnknownSizeValue = false;
			for (const [name$2, value] of object) if (typeof value === "string") {
				const chunk$1 = textEncoder$2.encode(prefix + `; name="${escape(normalizeLinefeeds(name$2))}"\r\n\r\n${normalizeLinefeeds(value)}\r\n`);
				blobParts.push(chunk$1);
				length += chunk$1.byteLength;
			} else {
				const chunk$1 = textEncoder$2.encode(`${prefix}; name="${escape(normalizeLinefeeds(name$2))}"` + (value.name ? `; filename="${escape(value.name)}"` : "") + `\r
Content-Type: ${value.type || "application/octet-stream"}\r\n\r\n`);
				blobParts.push(chunk$1, value, rn);
				if (typeof value.size === "number") length += chunk$1.byteLength + value.size + rn.byteLength;
				else hasUnknownSizeValue = true;
			}
			const chunk = textEncoder$2.encode(`--${boundary}--`);
			blobParts.push(chunk);
			length += chunk.byteLength;
			if (hasUnknownSizeValue) length = null;
			source = object;
			action = async function* () {
				for (const part of blobParts) if (part.stream) yield* part.stream();
				else yield part;
			};
			type = "multipart/form-data; boundary=" + boundary;
		} else if (isBlobLike$3(object)) {
			source = object;
			length = object.size;
			if (object.type) type = object.type;
		} else if (typeof object[Symbol.asyncIterator] === "function") {
			if (keepalive) throw new TypeError("keepalive");
			if (util$32.isDisturbed(object) || object.locked) throw new TypeError("Response body object should not be disturbed or locked");
			stream$3 = object instanceof ReadableStream$3 ? object : ReadableStreamFrom$1(object);
		}
		if (typeof source === "string" || util$32.isBuffer(source)) length = Buffer.byteLength(source);
		if (action != null) {
			let iterator$1;
			stream$3 = new ReadableStream$3({
				async start() {
					iterator$1 = action(object)[Symbol.asyncIterator]();
				},
				async pull(controller) {
					const { value, done: done$1 } = await iterator$1.next();
					if (done$1) queueMicrotask(() => {
						controller.close();
					});
					else if (!isErrored$1(stream$3)) controller.enqueue(new Uint8Array(value));
					return controller.desiredSize > 0;
				},
				async cancel(reason) {
					await iterator$1.return();
				},
				type: void 0
			});
		}
		const body = {
			stream: stream$3,
			source,
			length
		};
		return [body, type];
	}
	function safelyExtractBody$1(object, keepalive = false) {
		if (!ReadableStream$3)
 // istanbul ignore next
		ReadableStream$3 = __require("stream/web").ReadableStream;
		if (object instanceof ReadableStream$3) {
			// istanbul ignore next
			assert$23(!util$32.isDisturbed(object), "The body has already been consumed.");
			// istanbul ignore next
			assert$23(!object.locked, "The stream is locked.");
		}
		return extractBody$3(object, keepalive);
	}
	function cloneBody$2(body) {
		const [out1, out2] = body.stream.tee();
		const out2Clone = structuredClone(out2, { transfer: [out2] });
		const [, finalClone] = out2Clone.tee();
		body.stream = out1;
		return {
			stream: finalClone,
			length: body.length,
			source: body.source
		};
	}
	async function* consumeBody(body) {
		if (body) if (isUint8Array(body)) yield body;
		else {
			const stream$3 = body.stream;
			if (util$32.isDisturbed(stream$3)) throw new TypeError("The body has already been consumed.");
			if (stream$3.locked) throw new TypeError("The stream is locked.");
			stream$3[kBodyUsed$1] = true;
			yield* stream$3;
		}
	}
	function throwIfAborted(state$1) {
		if (state$1.aborted) throw new DOMException$5("The operation was aborted.", "AbortError");
	}
	function bodyMixinMethods(instance) {
		const methods = {
			blob() {
				return specConsumeBody(this, (bytes) => {
					let mimeType = bodyMimeType(this);
					if (mimeType === "failure") mimeType = "";
					else if (mimeType) mimeType = serializeAMimeType$2(mimeType);
					return new Blob$2([bytes], { type: mimeType });
				}, instance);
			},
			arrayBuffer() {
				return specConsumeBody(this, (bytes) => {
					return new Uint8Array(bytes).buffer;
				}, instance);
			},
			text() {
				return specConsumeBody(this, utf8DecodeBytes, instance);
			},
			json() {
				return specConsumeBody(this, parseJSONFromBytes, instance);
			},
			async formData() {
				webidl$11.brandCheck(this, instance);
				throwIfAborted(this[kState$7]);
				const contentType$1 = this.headers.get("Content-Type");
				if (/multipart\/form-data/.test(contentType$1)) {
					const headers = {};
					for (const [key$1, value] of this.headers) headers[key$1.toLowerCase()] = value;
					const responseFormData = new FormData$4();
					let busboy;
					try {
						busboy = new Busboy({
							headers,
							preservePath: true
						});
					} catch (err) {
						throw new DOMException$5(`${err}`, "AbortError");
					}
					busboy.on("field", (name$2, value) => {
						responseFormData.append(name$2, value);
					});
					busboy.on("file", (name$2, value, filename, encoding, mimeType) => {
						const chunks = [];
						if (encoding === "base64" || encoding.toLowerCase() === "base64") {
							let base64chunk = "";
							value.on("data", (chunk) => {
								base64chunk += chunk.toString().replace(/[\r\n]/gm, "");
								const end = base64chunk.length - base64chunk.length % 4;
								chunks.push(Buffer.from(base64chunk.slice(0, end), "base64"));
								base64chunk = base64chunk.slice(end);
							});
							value.on("end", () => {
								chunks.push(Buffer.from(base64chunk, "base64"));
								responseFormData.append(name$2, new File(chunks, filename, { type: mimeType }));
							});
						} else {
							value.on("data", (chunk) => {
								chunks.push(chunk);
							});
							value.on("end", () => {
								responseFormData.append(name$2, new File(chunks, filename, { type: mimeType }));
							});
						}
					});
					const busboyResolve = new Promise((resolve, reject) => {
						busboy.on("finish", resolve);
						busboy.on("error", (err) => reject(new TypeError(err)));
					});
					if (this.body !== null) for await (const chunk of consumeBody(this[kState$7].body)) busboy.write(chunk);
					busboy.end();
					await busboyResolve;
					return responseFormData;
				} else if (/application\/x-www-form-urlencoded/.test(contentType$1)) {
					let entries;
					try {
						let text = "";
						const streamingDecoder = new TextDecoder("utf-8", { ignoreBOM: true });
						for await (const chunk of consumeBody(this[kState$7].body)) {
							if (!isUint8Array(chunk)) throw new TypeError("Expected Uint8Array chunk");
							text += streamingDecoder.decode(chunk, { stream: true });
						}
						text += streamingDecoder.decode();
						entries = new URLSearchParams(text);
					} catch (err) {
						// istanbul ignore next: Unclear when new URLSearchParams can fail on a string.
						throw Object.assign(new TypeError(), { cause: err });
					}
					const formData = new FormData$4();
					for (const [name$2, value] of entries) formData.append(name$2, value);
					return formData;
				} else {
					await Promise.resolve();
					throwIfAborted(this[kState$7]);
					throw webidl$11.errors.exception({
						header: `${instance.name}.formData`,
						message: "Could not parse content as FormData."
					});
				}
			}
		};
		return methods;
	}
	function mixinBody$2(prototype$2) {
		Object.assign(prototype$2.prototype, bodyMixinMethods(prototype$2));
	}
	/**
	* @see https://fetch.spec.whatwg.org/#concept-body-consume-body
	* @param {Response|Request} object
	* @param {(value: unknown) => unknown} convertBytesToJSValue
	* @param {Response|Request} instance
	*/
	async function specConsumeBody(object, convertBytesToJSValue, instance) {
		webidl$11.brandCheck(object, instance);
		throwIfAborted(object[kState$7]);
		if (bodyUnusable(object[kState$7].body)) throw new TypeError("Body is unusable");
		const promise = createDeferredPromise$2();
		const errorSteps = (error$1) => promise.reject(error$1);
		const successSteps = (data) => {
			try {
				promise.resolve(convertBytesToJSValue(data));
			} catch (e) {
				errorSteps(e);
			}
		};
		if (object[kState$7].body == null) {
			successSteps(new Uint8Array());
			return promise.promise;
		}
		await fullyReadBody$1(object[kState$7].body, successSteps, errorSteps);
		return promise.promise;
	}
	function bodyUnusable(body) {
		return body != null && (body.stream.locked || util$32.isDisturbed(body.stream));
	}
	/**
	* @see https://encoding.spec.whatwg.org/#utf-8-decode
	* @param {Buffer} buffer
	*/
	function utf8DecodeBytes(buffer$1) {
		if (buffer$1.length === 0) return "";
		if (buffer$1[0] === 239 && buffer$1[1] === 187 && buffer$1[2] === 191) buffer$1 = buffer$1.subarray(3);
		const output = textDecoder.decode(buffer$1);
		return output;
	}
	/**
	* @see https://infra.spec.whatwg.org/#parse-json-bytes-to-a-javascript-value
	* @param {Uint8Array} bytes
	*/
	function parseJSONFromBytes(bytes) {
		return JSON.parse(utf8DecodeBytes(bytes));
	}
	/**
	* @see https://fetch.spec.whatwg.org/#concept-body-mime-type
	* @param {import('./response').Response|import('./request').Request} object
	*/
	function bodyMimeType(object) {
		const { headersList } = object[kState$7];
		const contentType$1 = headersList.get("content-type");
		if (contentType$1 === null) return "failure";
		return parseMIMEType$1(contentType$1);
	}
	module.exports = {
		extractBody: extractBody$3,
		safelyExtractBody: safelyExtractBody$1,
		cloneBody: cloneBody$2,
		mixinBody: mixinBody$2
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/core/request.js
var require_request$1 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/core/request.js"(exports, module) {
	const { InvalidArgumentError: InvalidArgumentError$20, NotSupportedError: NotSupportedError$1 } = require_errors$2();
	const assert$22 = __require("assert");
	const { kHTTP2BuildRequest: kHTTP2BuildRequest$1, kHTTP2CopyHeaders: kHTTP2CopyHeaders$1, kHTTP1BuildRequest: kHTTP1BuildRequest$1 } = require_symbols$4();
	const util$31 = require_util$9();
	/**
	* Verifies that the given val is a valid HTTP token
	* per the rules defined in RFC 7230
	* See https://tools.ietf.org/html/rfc7230#section-3.2.6
	*/
	const tokenRegExp = /^[\^_`a-zA-Z\-0-9!#$%&'*+.|~]+$/;
	/**
	* Matches if val contains an invalid field-vchar
	*  field-value    = *( field-content / obs-fold )
	*  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]
	*  field-vchar    = VCHAR / obs-text
	*/
	const headerCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
	const invalidPathRegex = /[^\u0021-\u00ff]/;
	const kHandler = Symbol("handler");
	const channels$4 = {};
	let extractBody$2;
	try {
		const diagnosticsChannel$2 = __require("diagnostics_channel");
		channels$4.create = diagnosticsChannel$2.channel("undici:request:create");
		channels$4.bodySent = diagnosticsChannel$2.channel("undici:request:bodySent");
		channels$4.headers = diagnosticsChannel$2.channel("undici:request:headers");
		channels$4.trailers = diagnosticsChannel$2.channel("undici:request:trailers");
		channels$4.error = diagnosticsChannel$2.channel("undici:request:error");
	} catch {
		channels$4.create = { hasSubscribers: false };
		channels$4.bodySent = { hasSubscribers: false };
		channels$4.headers = { hasSubscribers: false };
		channels$4.trailers = { hasSubscribers: false };
		channels$4.error = { hasSubscribers: false };
	}
	var Request$5 = class Request$5 {
		constructor(origin$1, { path: path$10, method: method$1, body, headers, query, idempotent, blocking, upgrade: upgrade$1, headersTimeout, bodyTimeout, reset, throwOnError, expectContinue }, handler) {
			if (typeof path$10 !== "string") throw new InvalidArgumentError$20("path must be a string");
			else if (path$10[0] !== "/" && !(path$10.startsWith("http://") || path$10.startsWith("https://")) && method$1 !== "CONNECT") throw new InvalidArgumentError$20("path must be an absolute URL or start with a slash");
			else if (invalidPathRegex.exec(path$10) !== null) throw new InvalidArgumentError$20("invalid request path");
			if (typeof method$1 !== "string") throw new InvalidArgumentError$20("method must be a string");
			else if (tokenRegExp.exec(method$1) === null) throw new InvalidArgumentError$20("invalid request method");
			if (upgrade$1 && typeof upgrade$1 !== "string") throw new InvalidArgumentError$20("upgrade must be a string");
			if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) throw new InvalidArgumentError$20("invalid headersTimeout");
			if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) throw new InvalidArgumentError$20("invalid bodyTimeout");
			if (reset != null && typeof reset !== "boolean") throw new InvalidArgumentError$20("invalid reset");
			if (expectContinue != null && typeof expectContinue !== "boolean") throw new InvalidArgumentError$20("invalid expectContinue");
			this.headersTimeout = headersTimeout;
			this.bodyTimeout = bodyTimeout;
			this.throwOnError = throwOnError === true;
			this.method = method$1;
			this.abort = null;
			if (body == null) this.body = null;
			else if (util$31.isStream(body)) {
				this.body = body;
				const rState = this.body._readableState;
				if (!rState || !rState.autoDestroy) {
					this.endHandler = function autoDestroy() {
						util$31.destroy(this);
					};
					this.body.on("end", this.endHandler);
				}
				this.errorHandler = (err) => {
					if (this.abort) this.abort(err);
					else this.error = err;
				};
				this.body.on("error", this.errorHandler);
			} else if (util$31.isBuffer(body)) this.body = body.byteLength ? body : null;
			else if (ArrayBuffer.isView(body)) this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null;
			else if (body instanceof ArrayBuffer) this.body = body.byteLength ? Buffer.from(body) : null;
			else if (typeof body === "string") this.body = body.length ? Buffer.from(body) : null;
			else if (util$31.isFormDataLike(body) || util$31.isIterable(body) || util$31.isBlobLike(body)) this.body = body;
			else throw new InvalidArgumentError$20("body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable");
			this.completed = false;
			this.aborted = false;
			this.upgrade = upgrade$1 || null;
			this.path = query ? util$31.buildURL(path$10, query) : path$10;
			this.origin = origin$1;
			this.idempotent = idempotent == null ? method$1 === "HEAD" || method$1 === "GET" : idempotent;
			this.blocking = blocking == null ? false : blocking;
			this.reset = reset == null ? null : reset;
			this.host = null;
			this.contentLength = null;
			this.contentType = null;
			this.headers = "";
			this.expectContinue = expectContinue != null ? expectContinue : false;
			if (Array.isArray(headers)) {
				if (headers.length % 2 !== 0) throw new InvalidArgumentError$20("headers array must be even");
				for (let i = 0; i < headers.length; i += 2) processHeader(this, headers[i], headers[i + 1]);
			} else if (headers && typeof headers === "object") {
				const keys$2 = Object.keys(headers);
				for (let i = 0; i < keys$2.length; i++) {
					const key$1 = keys$2[i];
					processHeader(this, key$1, headers[key$1]);
				}
			} else if (headers != null) throw new InvalidArgumentError$20("headers must be an object or an array");
			if (util$31.isFormDataLike(this.body)) {
				if (util$31.nodeMajor < 16 || util$31.nodeMajor === 16 && util$31.nodeMinor < 8) throw new InvalidArgumentError$20("Form-Data bodies are only supported in node v16.8 and newer.");
				if (!extractBody$2) extractBody$2 = require_body().extractBody;
				const [bodyStream, contentType$1] = extractBody$2(body);
				if (this.contentType == null) {
					this.contentType = contentType$1;
					this.headers += `content-type: ${contentType$1}\r\n`;
				}
				this.body = bodyStream.stream;
				this.contentLength = bodyStream.length;
			} else if (util$31.isBlobLike(body) && this.contentType == null && body.type) {
				this.contentType = body.type;
				this.headers += `content-type: ${body.type}\r\n`;
			}
			util$31.validateHandler(handler, method$1, upgrade$1);
			this.servername = util$31.getServerName(this.host);
			this[kHandler] = handler;
			if (channels$4.create.hasSubscribers) channels$4.create.publish({ request: this });
		}
		onBodySent(chunk) {
			if (this[kHandler].onBodySent) try {
				return this[kHandler].onBodySent(chunk);
			} catch (err) {
				this.abort(err);
			}
		}
		onRequestSent() {
			if (channels$4.bodySent.hasSubscribers) channels$4.bodySent.publish({ request: this });
			if (this[kHandler].onRequestSent) try {
				return this[kHandler].onRequestSent();
			} catch (err) {
				this.abort(err);
			}
		}
		onConnect(abort$4) {
			assert$22(!this.aborted);
			assert$22(!this.completed);
			if (this.error) abort$4(this.error);
			else {
				this.abort = abort$4;
				return this[kHandler].onConnect(abort$4);
			}
		}
		onHeaders(statusCode, headers, resume$2, statusText) {
			assert$22(!this.aborted);
			assert$22(!this.completed);
			if (channels$4.headers.hasSubscribers) channels$4.headers.publish({
				request: this,
				response: {
					statusCode,
					headers,
					statusText
				}
			});
			try {
				return this[kHandler].onHeaders(statusCode, headers, resume$2, statusText);
			} catch (err) {
				this.abort(err);
			}
		}
		onData(chunk) {
			assert$22(!this.aborted);
			assert$22(!this.completed);
			try {
				return this[kHandler].onData(chunk);
			} catch (err) {
				this.abort(err);
				return false;
			}
		}
		onUpgrade(statusCode, headers, socket) {
			assert$22(!this.aborted);
			assert$22(!this.completed);
			return this[kHandler].onUpgrade(statusCode, headers, socket);
		}
		onComplete(trailers) {
			this.onFinally();
			assert$22(!this.aborted);
			this.completed = true;
			if (channels$4.trailers.hasSubscribers) channels$4.trailers.publish({
				request: this,
				trailers
			});
			try {
				return this[kHandler].onComplete(trailers);
			} catch (err) {
				this.onError(err);
			}
		}
		onError(error$1) {
			this.onFinally();
			if (channels$4.error.hasSubscribers) channels$4.error.publish({
				request: this,
				error: error$1
			});
			if (this.aborted) return;
			this.aborted = true;
			return this[kHandler].onError(error$1);
		}
		onFinally() {
			if (this.errorHandler) {
				this.body.off("error", this.errorHandler);
				this.errorHandler = null;
			}
			if (this.endHandler) {
				this.body.off("end", this.endHandler);
				this.endHandler = null;
			}
		}
		addHeader(key$1, value) {
			processHeader(this, key$1, value);
			return this;
		}
		static [kHTTP1BuildRequest$1](origin$1, opts, handler) {
			return new Request$5(origin$1, opts, handler);
		}
		static [kHTTP2BuildRequest$1](origin$1, opts, handler) {
			const headers = opts.headers;
			opts = {
				...opts,
				headers: null
			};
			const request$1 = new Request$5(origin$1, opts, handler);
			request$1.headers = {};
			if (Array.isArray(headers)) {
				if (headers.length % 2 !== 0) throw new InvalidArgumentError$20("headers array must be even");
				for (let i = 0; i < headers.length; i += 2) processHeader(request$1, headers[i], headers[i + 1], true);
			} else if (headers && typeof headers === "object") {
				const keys$2 = Object.keys(headers);
				for (let i = 0; i < keys$2.length; i++) {
					const key$1 = keys$2[i];
					processHeader(request$1, key$1, headers[key$1], true);
				}
			} else if (headers != null) throw new InvalidArgumentError$20("headers must be an object or an array");
			return request$1;
		}
		static [kHTTP2CopyHeaders$1](raw) {
			const rawHeaders = raw.split("\r\n");
			const headers = {};
			for (const header of rawHeaders) {
				const [key$1, value] = header.split(": ");
				if (value == null || value.length === 0) continue;
				if (headers[key$1]) headers[key$1] += `,${value}`;
				else headers[key$1] = value;
			}
			return headers;
		}
	};
	function processHeaderValue(key$1, val, skipAppend) {
		if (val && typeof val === "object") throw new InvalidArgumentError$20(`invalid ${key$1} header`);
		val = val != null ? `${val}` : "";
		if (headerCharRegex.exec(val) !== null) throw new InvalidArgumentError$20(`invalid ${key$1} header`);
		return skipAppend ? val : `${key$1}: ${val}\r\n`;
	}
	function processHeader(request$1, key$1, val, skipAppend = false) {
		if (val && typeof val === "object" && !Array.isArray(val)) throw new InvalidArgumentError$20(`invalid ${key$1} header`);
		else if (val === void 0) return;
		if (request$1.host === null && key$1.length === 4 && key$1.toLowerCase() === "host") {
			if (headerCharRegex.exec(val) !== null) throw new InvalidArgumentError$20(`invalid ${key$1} header`);
			request$1.host = val;
		} else if (request$1.contentLength === null && key$1.length === 14 && key$1.toLowerCase() === "content-length") {
			request$1.contentLength = parseInt(val, 10);
			if (!Number.isFinite(request$1.contentLength)) throw new InvalidArgumentError$20("invalid content-length header");
		} else if (request$1.contentType === null && key$1.length === 12 && key$1.toLowerCase() === "content-type") {
			request$1.contentType = val;
			if (skipAppend) request$1.headers[key$1] = processHeaderValue(key$1, val, skipAppend);
			else request$1.headers += processHeaderValue(key$1, val);
		} else if (key$1.length === 17 && key$1.toLowerCase() === "transfer-encoding") throw new InvalidArgumentError$20("invalid transfer-encoding header");
		else if (key$1.length === 10 && key$1.toLowerCase() === "connection") {
			const value = typeof val === "string" ? val.toLowerCase() : null;
			if (value !== "close" && value !== "keep-alive") throw new InvalidArgumentError$20("invalid connection header");
			else if (value === "close") request$1.reset = true;
		} else if (key$1.length === 10 && key$1.toLowerCase() === "keep-alive") throw new InvalidArgumentError$20("invalid keep-alive header");
		else if (key$1.length === 7 && key$1.toLowerCase() === "upgrade") throw new InvalidArgumentError$20("invalid upgrade header");
		else if (key$1.length === 6 && key$1.toLowerCase() === "expect") throw new NotSupportedError$1("expect header not supported");
		else if (tokenRegExp.exec(key$1) === null) throw new InvalidArgumentError$20("invalid header key");
		else if (Array.isArray(val)) for (let i = 0; i < val.length; i++) if (skipAppend) if (request$1.headers[key$1]) request$1.headers[key$1] += `,${processHeaderValue(key$1, val[i], skipAppend)}`;
		else request$1.headers[key$1] = processHeaderValue(key$1, val[i], skipAppend);
		else request$1.headers += processHeaderValue(key$1, val[i]);
		else if (skipAppend) request$1.headers[key$1] = processHeaderValue(key$1, val, skipAppend);
		else request$1.headers += processHeaderValue(key$1, val);
	}
	module.exports = Request$5;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/dispatcher.js
var require_dispatcher = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/dispatcher.js"(exports, module) {
	const EventEmitter$2 = __require("events");
	var Dispatcher$3 = class extends EventEmitter$2 {
		dispatch() {
			throw new Error("not implemented");
		}
		close() {
			throw new Error("not implemented");
		}
		destroy() {
			throw new Error("not implemented");
		}
	};
	module.exports = Dispatcher$3;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/dispatcher-base.js
var require_dispatcher_base = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/dispatcher-base.js"(exports, module) {
	const Dispatcher$2 = require_dispatcher();
	const { ClientDestroyedError: ClientDestroyedError$1, ClientClosedError, InvalidArgumentError: InvalidArgumentError$19 } = require_errors$2();
	const { kDestroy: kDestroy$4, kClose: kClose$6, kDispatch: kDispatch$3, kInterceptors: kInterceptors$5 } = require_symbols$4();
	const kDestroyed = Symbol("destroyed");
	const kClosed = Symbol("closed");
	const kOnDestroyed = Symbol("onDestroyed");
	const kOnClosed = Symbol("onClosed");
	const kInterceptedDispatch = Symbol("Intercepted Dispatch");
	var DispatcherBase$4 = class extends Dispatcher$2 {
		constructor() {
			super();
			this[kDestroyed] = false;
			this[kOnDestroyed] = null;
			this[kClosed] = false;
			this[kOnClosed] = [];
		}
		get destroyed() {
			return this[kDestroyed];
		}
		get closed() {
			return this[kClosed];
		}
		get interceptors() {
			return this[kInterceptors$5];
		}
		set interceptors(newInterceptors) {
			if (newInterceptors) for (let i = newInterceptors.length - 1; i >= 0; i--) {
				const interceptor = this[kInterceptors$5][i];
				if (typeof interceptor !== "function") throw new InvalidArgumentError$19("interceptor must be an function");
			}
			this[kInterceptors$5] = newInterceptors;
		}
		close(callback) {
			if (callback === void 0) return new Promise((resolve, reject) => {
				this.close((err, data) => {
					return err ? reject(err) : resolve(data);
				});
			});
			if (typeof callback !== "function") throw new InvalidArgumentError$19("invalid callback");
			if (this[kDestroyed]) {
				queueMicrotask(() => callback(new ClientDestroyedError$1(), null));
				return;
			}
			if (this[kClosed]) {
				if (this[kOnClosed]) this[kOnClosed].push(callback);
				else queueMicrotask(() => callback(null, null));
				return;
			}
			this[kClosed] = true;
			this[kOnClosed].push(callback);
			const onClosed = () => {
				const callbacks = this[kOnClosed];
				this[kOnClosed] = null;
				for (let i = 0; i < callbacks.length; i++) callbacks[i](null, null);
			};
			this[kClose$6]().then(() => this.destroy()).then(() => {
				queueMicrotask(onClosed);
			});
		}
		destroy(err, callback) {
			if (typeof err === "function") {
				callback = err;
				err = null;
			}
			if (callback === void 0) return new Promise((resolve, reject) => {
				this.destroy(err, (err$1, data) => {
					return err$1 ? reject(err$1) : resolve(data);
				});
			});
			if (typeof callback !== "function") throw new InvalidArgumentError$19("invalid callback");
			if (this[kDestroyed]) {
				if (this[kOnDestroyed]) this[kOnDestroyed].push(callback);
				else queueMicrotask(() => callback(null, null));
				return;
			}
			if (!err) err = new ClientDestroyedError$1();
			this[kDestroyed] = true;
			this[kOnDestroyed] = this[kOnDestroyed] || [];
			this[kOnDestroyed].push(callback);
			const onDestroyed = () => {
				const callbacks = this[kOnDestroyed];
				this[kOnDestroyed] = null;
				for (let i = 0; i < callbacks.length; i++) callbacks[i](null, null);
			};
			this[kDestroy$4](err).then(() => {
				queueMicrotask(onDestroyed);
			});
		}
		[kInterceptedDispatch](opts, handler) {
			if (!this[kInterceptors$5] || this[kInterceptors$5].length === 0) {
				this[kInterceptedDispatch] = this[kDispatch$3];
				return this[kDispatch$3](opts, handler);
			}
			let dispatch = this[kDispatch$3].bind(this);
			for (let i = this[kInterceptors$5].length - 1; i >= 0; i--) dispatch = this[kInterceptors$5][i](dispatch);
			this[kInterceptedDispatch] = dispatch;
			return dispatch(opts, handler);
		}
		dispatch(opts, handler) {
			if (!handler || typeof handler !== "object") throw new InvalidArgumentError$19("handler must be an object");
			try {
				if (!opts || typeof opts !== "object") throw new InvalidArgumentError$19("opts must be an object.");
				if (this[kDestroyed] || this[kOnDestroyed]) throw new ClientDestroyedError$1();
				if (this[kClosed]) throw new ClientClosedError();
				return this[kInterceptedDispatch](opts, handler);
			} catch (err) {
				if (typeof handler.onError !== "function") throw new InvalidArgumentError$19("invalid onError method");
				handler.onError(err);
				return false;
			}
		}
	};
	module.exports = DispatcherBase$4;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/core/connect.js
var require_connect = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/core/connect.js"(exports, module) {
	const net$1 = __require("net");
	const assert$21 = __require("assert");
	const util$30 = require_util$9();
	const { InvalidArgumentError: InvalidArgumentError$18, ConnectTimeoutError } = require_errors$2();
	let tls;
	let SessionCache;
	if (global.FinalizationRegistry && !process.env.NODE_V8_COVERAGE) SessionCache = class WeakSessionCache {
		constructor(maxCachedSessions) {
			this._maxCachedSessions = maxCachedSessions;
			this._sessionCache = new Map();
			this._sessionRegistry = new global.FinalizationRegistry((key$1) => {
				if (this._sessionCache.size < this._maxCachedSessions) return;
				const ref = this._sessionCache.get(key$1);
				if (ref !== void 0 && ref.deref() === void 0) this._sessionCache.delete(key$1);
			});
		}
		get(sessionKey) {
			const ref = this._sessionCache.get(sessionKey);
			return ref ? ref.deref() : null;
		}
		set(sessionKey, session) {
			if (this._maxCachedSessions === 0) return;
			this._sessionCache.set(sessionKey, new WeakRef(session));
			this._sessionRegistry.register(session, sessionKey);
		}
	};
	else SessionCache = class SimpleSessionCache {
		constructor(maxCachedSessions) {
			this._maxCachedSessions = maxCachedSessions;
			this._sessionCache = new Map();
		}
		get(sessionKey) {
			return this._sessionCache.get(sessionKey);
		}
		set(sessionKey, session) {
			if (this._maxCachedSessions === 0) return;
			if (this._sessionCache.size >= this._maxCachedSessions) {
				const { value: oldestKey } = this._sessionCache.keys().next();
				this._sessionCache.delete(oldestKey);
			}
			this._sessionCache.set(sessionKey, session);
		}
	};
	function buildConnector$4({ allowH2, maxCachedSessions, socketPath, timeout: timeout$1,...opts }) {
		if (maxCachedSessions != null && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) throw new InvalidArgumentError$18("maxCachedSessions must be a positive integer or zero");
		const options = {
			path: socketPath,
			...opts
		};
		const sessionCache = new SessionCache(maxCachedSessions == null ? 100 : maxCachedSessions);
		timeout$1 = timeout$1 == null ? 1e4 : timeout$1;
		allowH2 = allowH2 != null ? allowH2 : false;
		return function connect$2({ hostname, host, protocol, port, servername, localAddress, httpSocket }, callback) {
			let socket;
			if (protocol === "https:") {
				if (!tls) tls = __require("tls");
				servername = servername || options.servername || util$30.getServerName(host) || null;
				const sessionKey = servername || hostname;
				const session = sessionCache.get(sessionKey) || null;
				assert$21(sessionKey);
				socket = tls.connect({
					highWaterMark: 16384,
					...options,
					servername,
					session,
					localAddress,
					ALPNProtocols: allowH2 ? ["http/1.1", "h2"] : ["http/1.1"],
					socket: httpSocket,
					port: port || 443,
					host: hostname
				});
				socket.on("session", function(session$1) {
					sessionCache.set(sessionKey, session$1);
				});
			} else {
				assert$21(!httpSocket, "httpSocket can only be sent on TLS update");
				socket = net$1.connect({
					highWaterMark: 64 * 1024,
					...options,
					localAddress,
					port: port || 80,
					host: hostname
				});
			}
			if (options.keepAlive == null || options.keepAlive) {
				const keepAliveInitialDelay = options.keepAliveInitialDelay === void 0 ? 6e4 : options.keepAliveInitialDelay;
				socket.setKeepAlive(true, keepAliveInitialDelay);
			}
			const cancelTimeout = setupTimeout(() => onConnectTimeout(socket), timeout$1);
			socket.setNoDelay(true).once(protocol === "https:" ? "secureConnect" : "connect", function() {
				cancelTimeout();
				if (callback) {
					const cb = callback;
					callback = null;
					cb(null, this);
				}
			}).on("error", function(err) {
				cancelTimeout();
				if (callback) {
					const cb = callback;
					callback = null;
					cb(err);
				}
			});
			return socket;
		};
	}
	function setupTimeout(onConnectTimeout$1, timeout$1) {
		if (!timeout$1) return () => {};
		let s1 = null;
		let s2 = null;
		const timeoutId = setTimeout(() => {
			s1 = setImmediate(() => {
				if (process.platform === "win32") s2 = setImmediate(() => onConnectTimeout$1());
				else onConnectTimeout$1();
			});
		}, timeout$1);
		return () => {
			clearTimeout(timeoutId);
			clearImmediate(s1);
			clearImmediate(s2);
		};
	}
	function onConnectTimeout(socket) {
		util$30.destroy(socket, new ConnectTimeoutError());
	}
	module.exports = buildConnector$4;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/llhttp/utils.js
var require_utils = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/llhttp/utils.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.enumToMap = void 0;
	function enumToMap(obj) {
		const res = {};
		Object.keys(obj).forEach((key$1) => {
			const value = obj[key$1];
			if (typeof value === "number") res[key$1] = value;
		});
		return res;
	}
	exports.enumToMap = enumToMap;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/llhttp/constants.js
var require_constants$4 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/llhttp/constants.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.SPECIAL_HEADERS = exports.HEADER_STATE = exports.MINOR = exports.MAJOR = exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS = exports.TOKEN = exports.STRICT_TOKEN = exports.HEX = exports.URL_CHAR = exports.STRICT_URL_CHAR = exports.USERINFO_CHARS = exports.MARK = exports.ALPHANUM = exports.NUM = exports.HEX_MAP = exports.NUM_MAP = exports.ALPHA = exports.FINISH = exports.H_METHOD_MAP = exports.METHOD_MAP = exports.METHODS_RTSP = exports.METHODS_ICE = exports.METHODS_HTTP = exports.METHODS = exports.LENIENT_FLAGS = exports.FLAGS = exports.TYPE = exports.ERROR = void 0;
	const utils_1$1 = require_utils();
	var ERROR;
	(function(ERROR$1) {
		ERROR$1[ERROR$1["OK"] = 0] = "OK";
		ERROR$1[ERROR$1["INTERNAL"] = 1] = "INTERNAL";
		ERROR$1[ERROR$1["STRICT"] = 2] = "STRICT";
		ERROR$1[ERROR$1["LF_EXPECTED"] = 3] = "LF_EXPECTED";
		ERROR$1[ERROR$1["UNEXPECTED_CONTENT_LENGTH"] = 4] = "UNEXPECTED_CONTENT_LENGTH";
		ERROR$1[ERROR$1["CLOSED_CONNECTION"] = 5] = "CLOSED_CONNECTION";
		ERROR$1[ERROR$1["INVALID_METHOD"] = 6] = "INVALID_METHOD";
		ERROR$1[ERROR$1["INVALID_URL"] = 7] = "INVALID_URL";
		ERROR$1[ERROR$1["INVALID_CONSTANT"] = 8] = "INVALID_CONSTANT";
		ERROR$1[ERROR$1["INVALID_VERSION"] = 9] = "INVALID_VERSION";
		ERROR$1[ERROR$1["INVALID_HEADER_TOKEN"] = 10] = "INVALID_HEADER_TOKEN";
		ERROR$1[ERROR$1["INVALID_CONTENT_LENGTH"] = 11] = "INVALID_CONTENT_LENGTH";
		ERROR$1[ERROR$1["INVALID_CHUNK_SIZE"] = 12] = "INVALID_CHUNK_SIZE";
		ERROR$1[ERROR$1["INVALID_STATUS"] = 13] = "INVALID_STATUS";
		ERROR$1[ERROR$1["INVALID_EOF_STATE"] = 14] = "INVALID_EOF_STATE";
		ERROR$1[ERROR$1["INVALID_TRANSFER_ENCODING"] = 15] = "INVALID_TRANSFER_ENCODING";
		ERROR$1[ERROR$1["CB_MESSAGE_BEGIN"] = 16] = "CB_MESSAGE_BEGIN";
		ERROR$1[ERROR$1["CB_HEADERS_COMPLETE"] = 17] = "CB_HEADERS_COMPLETE";
		ERROR$1[ERROR$1["CB_MESSAGE_COMPLETE"] = 18] = "CB_MESSAGE_COMPLETE";
		ERROR$1[ERROR$1["CB_CHUNK_HEADER"] = 19] = "CB_CHUNK_HEADER";
		ERROR$1[ERROR$1["CB_CHUNK_COMPLETE"] = 20] = "CB_CHUNK_COMPLETE";
		ERROR$1[ERROR$1["PAUSED"] = 21] = "PAUSED";
		ERROR$1[ERROR$1["PAUSED_UPGRADE"] = 22] = "PAUSED_UPGRADE";
		ERROR$1[ERROR$1["PAUSED_H2_UPGRADE"] = 23] = "PAUSED_H2_UPGRADE";
		ERROR$1[ERROR$1["USER"] = 24] = "USER";
	})(ERROR = exports.ERROR || (exports.ERROR = {}));
	var TYPE;
	(function(TYPE$1) {
		TYPE$1[TYPE$1["BOTH"] = 0] = "BOTH";
		TYPE$1[TYPE$1["REQUEST"] = 1] = "REQUEST";
		TYPE$1[TYPE$1["RESPONSE"] = 2] = "RESPONSE";
	})(TYPE = exports.TYPE || (exports.TYPE = {}));
	var FLAGS;
	(function(FLAGS$1) {
		FLAGS$1[FLAGS$1["CONNECTION_KEEP_ALIVE"] = 1] = "CONNECTION_KEEP_ALIVE";
		FLAGS$1[FLAGS$1["CONNECTION_CLOSE"] = 2] = "CONNECTION_CLOSE";
		FLAGS$1[FLAGS$1["CONNECTION_UPGRADE"] = 4] = "CONNECTION_UPGRADE";
		FLAGS$1[FLAGS$1["CHUNKED"] = 8] = "CHUNKED";
		FLAGS$1[FLAGS$1["UPGRADE"] = 16] = "UPGRADE";
		FLAGS$1[FLAGS$1["CONTENT_LENGTH"] = 32] = "CONTENT_LENGTH";
		FLAGS$1[FLAGS$1["SKIPBODY"] = 64] = "SKIPBODY";
		FLAGS$1[FLAGS$1["TRAILING"] = 128] = "TRAILING";
		FLAGS$1[FLAGS$1["TRANSFER_ENCODING"] = 512] = "TRANSFER_ENCODING";
	})(FLAGS = exports.FLAGS || (exports.FLAGS = {}));
	var LENIENT_FLAGS;
	(function(LENIENT_FLAGS$1) {
		LENIENT_FLAGS$1[LENIENT_FLAGS$1["HEADERS"] = 1] = "HEADERS";
		LENIENT_FLAGS$1[LENIENT_FLAGS$1["CHUNKED_LENGTH"] = 2] = "CHUNKED_LENGTH";
		LENIENT_FLAGS$1[LENIENT_FLAGS$1["KEEP_ALIVE"] = 4] = "KEEP_ALIVE";
	})(LENIENT_FLAGS = exports.LENIENT_FLAGS || (exports.LENIENT_FLAGS = {}));
	var METHODS;
	(function(METHODS$1) {
		METHODS$1[METHODS$1["DELETE"] = 0] = "DELETE";
		METHODS$1[METHODS$1["GET"] = 1] = "GET";
		METHODS$1[METHODS$1["HEAD"] = 2] = "HEAD";
		METHODS$1[METHODS$1["POST"] = 3] = "POST";
		METHODS$1[METHODS$1["PUT"] = 4] = "PUT";
		METHODS$1[METHODS$1["CONNECT"] = 5] = "CONNECT";
		METHODS$1[METHODS$1["OPTIONS"] = 6] = "OPTIONS";
		METHODS$1[METHODS$1["TRACE"] = 7] = "TRACE";
		METHODS$1[METHODS$1["COPY"] = 8] = "COPY";
		METHODS$1[METHODS$1["LOCK"] = 9] = "LOCK";
		METHODS$1[METHODS$1["MKCOL"] = 10] = "MKCOL";
		METHODS$1[METHODS$1["MOVE"] = 11] = "MOVE";
		METHODS$1[METHODS$1["PROPFIND"] = 12] = "PROPFIND";
		METHODS$1[METHODS$1["PROPPATCH"] = 13] = "PROPPATCH";
		METHODS$1[METHODS$1["SEARCH"] = 14] = "SEARCH";
		METHODS$1[METHODS$1["UNLOCK"] = 15] = "UNLOCK";
		METHODS$1[METHODS$1["BIND"] = 16] = "BIND";
		METHODS$1[METHODS$1["REBIND"] = 17] = "REBIND";
		METHODS$1[METHODS$1["UNBIND"] = 18] = "UNBIND";
		METHODS$1[METHODS$1["ACL"] = 19] = "ACL";
		METHODS$1[METHODS$1["REPORT"] = 20] = "REPORT";
		METHODS$1[METHODS$1["MKACTIVITY"] = 21] = "MKACTIVITY";
		METHODS$1[METHODS$1["CHECKOUT"] = 22] = "CHECKOUT";
		METHODS$1[METHODS$1["MERGE"] = 23] = "MERGE";
		METHODS$1[METHODS$1["M-SEARCH"] = 24] = "M-SEARCH";
		METHODS$1[METHODS$1["NOTIFY"] = 25] = "NOTIFY";
		METHODS$1[METHODS$1["SUBSCRIBE"] = 26] = "SUBSCRIBE";
		METHODS$1[METHODS$1["UNSUBSCRIBE"] = 27] = "UNSUBSCRIBE";
		METHODS$1[METHODS$1["PATCH"] = 28] = "PATCH";
		METHODS$1[METHODS$1["PURGE"] = 29] = "PURGE";
		METHODS$1[METHODS$1["MKCALENDAR"] = 30] = "MKCALENDAR";
		METHODS$1[METHODS$1["LINK"] = 31] = "LINK";
		METHODS$1[METHODS$1["UNLINK"] = 32] = "UNLINK";
		METHODS$1[METHODS$1["SOURCE"] = 33] = "SOURCE";
		METHODS$1[METHODS$1["PRI"] = 34] = "PRI";
		METHODS$1[METHODS$1["DESCRIBE"] = 35] = "DESCRIBE";
		METHODS$1[METHODS$1["ANNOUNCE"] = 36] = "ANNOUNCE";
		METHODS$1[METHODS$1["SETUP"] = 37] = "SETUP";
		METHODS$1[METHODS$1["PLAY"] = 38] = "PLAY";
		METHODS$1[METHODS$1["PAUSE"] = 39] = "PAUSE";
		METHODS$1[METHODS$1["TEARDOWN"] = 40] = "TEARDOWN";
		METHODS$1[METHODS$1["GET_PARAMETER"] = 41] = "GET_PARAMETER";
		METHODS$1[METHODS$1["SET_PARAMETER"] = 42] = "SET_PARAMETER";
		METHODS$1[METHODS$1["REDIRECT"] = 43] = "REDIRECT";
		METHODS$1[METHODS$1["RECORD"] = 44] = "RECORD";
		METHODS$1[METHODS$1["FLUSH"] = 45] = "FLUSH";
	})(METHODS = exports.METHODS || (exports.METHODS = {}));
	exports.METHODS_HTTP = [
		METHODS.DELETE,
		METHODS.GET,
		METHODS.HEAD,
		METHODS.POST,
		METHODS.PUT,
		METHODS.CONNECT,
		METHODS.OPTIONS,
		METHODS.TRACE,
		METHODS.COPY,
		METHODS.LOCK,
		METHODS.MKCOL,
		METHODS.MOVE,
		METHODS.PROPFIND,
		METHODS.PROPPATCH,
		METHODS.SEARCH,
		METHODS.UNLOCK,
		METHODS.BIND,
		METHODS.REBIND,
		METHODS.UNBIND,
		METHODS.ACL,
		METHODS.REPORT,
		METHODS.MKACTIVITY,
		METHODS.CHECKOUT,
		METHODS.MERGE,
		METHODS["M-SEARCH"],
		METHODS.NOTIFY,
		METHODS.SUBSCRIBE,
		METHODS.UNSUBSCRIBE,
		METHODS.PATCH,
		METHODS.PURGE,
		METHODS.MKCALENDAR,
		METHODS.LINK,
		METHODS.UNLINK,
		METHODS.PRI,
		METHODS.SOURCE
	];
	exports.METHODS_ICE = [METHODS.SOURCE];
	exports.METHODS_RTSP = [
		METHODS.OPTIONS,
		METHODS.DESCRIBE,
		METHODS.ANNOUNCE,
		METHODS.SETUP,
		METHODS.PLAY,
		METHODS.PAUSE,
		METHODS.TEARDOWN,
		METHODS.GET_PARAMETER,
		METHODS.SET_PARAMETER,
		METHODS.REDIRECT,
		METHODS.RECORD,
		METHODS.FLUSH,
		METHODS.GET,
		METHODS.POST
	];
	exports.METHOD_MAP = utils_1$1.enumToMap(METHODS);
	exports.H_METHOD_MAP = {};
	Object.keys(exports.METHOD_MAP).forEach((key$1) => {
		if (/^H/.test(key$1)) exports.H_METHOD_MAP[key$1] = exports.METHOD_MAP[key$1];
	});
	var FINISH;
	(function(FINISH$1) {
		FINISH$1[FINISH$1["SAFE"] = 0] = "SAFE";
		FINISH$1[FINISH$1["SAFE_WITH_CB"] = 1] = "SAFE_WITH_CB";
		FINISH$1[FINISH$1["UNSAFE"] = 2] = "UNSAFE";
	})(FINISH = exports.FINISH || (exports.FINISH = {}));
	exports.ALPHA = [];
	for (let i = "A".charCodeAt(0); i <= "Z".charCodeAt(0); i++) {
		exports.ALPHA.push(String.fromCharCode(i));
		exports.ALPHA.push(String.fromCharCode(i + 32));
	}
	exports.NUM_MAP = {
		0: 0,
		1: 1,
		2: 2,
		3: 3,
		4: 4,
		5: 5,
		6: 6,
		7: 7,
		8: 8,
		9: 9
	};
	exports.HEX_MAP = {
		0: 0,
		1: 1,
		2: 2,
		3: 3,
		4: 4,
		5: 5,
		6: 6,
		7: 7,
		8: 8,
		9: 9,
		A: 10,
		B: 11,
		C: 12,
		D: 13,
		E: 14,
		F: 15,
		a: 10,
		b: 11,
		c: 12,
		d: 13,
		e: 14,
		f: 15
	};
	exports.NUM = [
		"0",
		"1",
		"2",
		"3",
		"4",
		"5",
		"6",
		"7",
		"8",
		"9"
	];
	exports.ALPHANUM = exports.ALPHA.concat(exports.NUM);
	exports.MARK = [
		"-",
		"_",
		".",
		"!",
		"~",
		"*",
		"'",
		"(",
		")"
	];
	exports.USERINFO_CHARS = exports.ALPHANUM.concat(exports.MARK).concat([
		"%",
		";",
		":",
		"&",
		"=",
		"+",
		"$",
		","
	]);
	exports.STRICT_URL_CHAR = [
		"!",
		"\"",
		"$",
		"%",
		"&",
		"'",
		"(",
		")",
		"*",
		"+",
		",",
		"-",
		".",
		"/",
		":",
		";",
		"<",
		"=",
		">",
		"@",
		"[",
		"\\",
		"]",
		"^",
		"_",
		"`",
		"{",
		"|",
		"}",
		"~"
	].concat(exports.ALPHANUM);
	exports.URL_CHAR = exports.STRICT_URL_CHAR.concat(["	", "\f"]);
	for (let i = 128; i <= 255; i++) exports.URL_CHAR.push(i);
	exports.HEX = exports.NUM.concat([
		"a",
		"b",
		"c",
		"d",
		"e",
		"f",
		"A",
		"B",
		"C",
		"D",
		"E",
		"F"
	]);
	exports.STRICT_TOKEN = [
		"!",
		"#",
		"$",
		"%",
		"&",
		"'",
		"*",
		"+",
		"-",
		".",
		"^",
		"_",
		"`",
		"|",
		"~"
	].concat(exports.ALPHANUM);
	exports.TOKEN = exports.STRICT_TOKEN.concat([" "]);
	exports.HEADER_CHARS = ["	"];
	for (let i = 32; i <= 255; i++) if (i !== 127) exports.HEADER_CHARS.push(i);
	exports.CONNECTION_TOKEN_CHARS = exports.HEADER_CHARS.filter((c) => c !== 44);
	exports.MAJOR = exports.NUM_MAP;
	exports.MINOR = exports.MAJOR;
	var HEADER_STATE;
	(function(HEADER_STATE$1) {
		HEADER_STATE$1[HEADER_STATE$1["GENERAL"] = 0] = "GENERAL";
		HEADER_STATE$1[HEADER_STATE$1["CONNECTION"] = 1] = "CONNECTION";
		HEADER_STATE$1[HEADER_STATE$1["CONTENT_LENGTH"] = 2] = "CONTENT_LENGTH";
		HEADER_STATE$1[HEADER_STATE$1["TRANSFER_ENCODING"] = 3] = "TRANSFER_ENCODING";
		HEADER_STATE$1[HEADER_STATE$1["UPGRADE"] = 4] = "UPGRADE";
		HEADER_STATE$1[HEADER_STATE$1["CONNECTION_KEEP_ALIVE"] = 5] = "CONNECTION_KEEP_ALIVE";
		HEADER_STATE$1[HEADER_STATE$1["CONNECTION_CLOSE"] = 6] = "CONNECTION_CLOSE";
		HEADER_STATE$1[HEADER_STATE$1["CONNECTION_UPGRADE"] = 7] = "CONNECTION_UPGRADE";
		HEADER_STATE$1[HEADER_STATE$1["TRANSFER_ENCODING_CHUNKED"] = 8] = "TRANSFER_ENCODING_CHUNKED";
	})(HEADER_STATE = exports.HEADER_STATE || (exports.HEADER_STATE = {}));
	exports.SPECIAL_HEADERS = {
		"connection": HEADER_STATE.CONNECTION,
		"content-length": HEADER_STATE.CONTENT_LENGTH,
		"proxy-connection": HEADER_STATE.CONNECTION,
		"transfer-encoding": HEADER_STATE.TRANSFER_ENCODING,
		"upgrade": HEADER_STATE.UPGRADE
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/handler/RedirectHandler.js
var require_RedirectHandler = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/handler/RedirectHandler.js"(exports, module) {
	const util$29 = require_util$9();
	const { kBodyUsed } = require_symbols$4();
	const assert$20 = __require("assert");
	const { InvalidArgumentError: InvalidArgumentError$17 } = require_errors$2();
	const EE$2 = __require("events");
	const redirectableStatusCodes = [
		300,
		301,
		302,
		303,
		307,
		308
	];
	const kBody$1 = Symbol("body");
	var BodyAsyncIterable = class {
		constructor(body) {
			this[kBody$1] = body;
			this[kBodyUsed] = false;
		}
		async *[Symbol.asyncIterator]() {
			assert$20(!this[kBodyUsed], "disturbed");
			this[kBodyUsed] = true;
			yield* this[kBody$1];
		}
	};
	var RedirectHandler$2 = class {
		constructor(dispatch, maxRedirections, opts, handler) {
			if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) throw new InvalidArgumentError$17("maxRedirections must be a positive number");
			util$29.validateHandler(handler, opts.method, opts.upgrade);
			this.dispatch = dispatch;
			this.location = null;
			this.abort = null;
			this.opts = {
				...opts,
				maxRedirections: 0
			};
			this.maxRedirections = maxRedirections;
			this.handler = handler;
			this.history = [];
			if (util$29.isStream(this.opts.body)) {
				if (util$29.bodyLength(this.opts.body) === 0) this.opts.body.on("data", function() {
					assert$20(false);
				});
				if (typeof this.opts.body.readableDidRead !== "boolean") {
					this.opts.body[kBodyUsed] = false;
					EE$2.prototype.on.call(this.opts.body, "data", function() {
						this[kBodyUsed] = true;
					});
				}
			} else if (this.opts.body && typeof this.opts.body.pipeTo === "function") this.opts.body = new BodyAsyncIterable(this.opts.body);
			else if (this.opts.body && typeof this.opts.body !== "string" && !ArrayBuffer.isView(this.opts.body) && util$29.isIterable(this.opts.body)) this.opts.body = new BodyAsyncIterable(this.opts.body);
		}
		onConnect(abort$4) {
			this.abort = abort$4;
			this.handler.onConnect(abort$4, { history: this.history });
		}
		onUpgrade(statusCode, headers, socket) {
			this.handler.onUpgrade(statusCode, headers, socket);
		}
		onError(error$1) {
			this.handler.onError(error$1);
		}
		onHeaders(statusCode, headers, resume$2, statusText) {
			this.location = this.history.length >= this.maxRedirections || util$29.isDisturbed(this.opts.body) ? null : parseLocation(statusCode, headers);
			if (this.opts.origin) this.history.push(new URL(this.opts.path, this.opts.origin));
			if (!this.location) return this.handler.onHeaders(statusCode, headers, resume$2, statusText);
			const { origin: origin$1, pathname, search } = util$29.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)));
			const path$10 = search ? `${pathname}${search}` : pathname;
			this.opts.headers = cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin$1);
			this.opts.path = path$10;
			this.opts.origin = origin$1;
			this.opts.maxRedirections = 0;
			this.opts.query = null;
			if (statusCode === 303 && this.opts.method !== "HEAD") {
				this.opts.method = "GET";
				this.opts.body = null;
			}
		}
		onData(chunk) {
			if (this.location) {} else return this.handler.onData(chunk);
		}
		onComplete(trailers) {
			if (this.location) {
				this.location = null;
				this.abort = null;
				this.dispatch(this.opts, this);
			} else this.handler.onComplete(trailers);
		}
		onBodySent(chunk) {
			if (this.handler.onBodySent) this.handler.onBodySent(chunk);
		}
	};
	function parseLocation(statusCode, headers) {
		if (redirectableStatusCodes.indexOf(statusCode) === -1) return null;
		for (let i = 0; i < headers.length; i += 2) if (headers[i].toString().toLowerCase() === "location") return headers[i + 1];
	}
	function shouldRemoveHeader(header, removeContent, unknownOrigin) {
		if (header.length === 4) return util$29.headerNameToString(header) === "host";
		if (removeContent && util$29.headerNameToString(header).startsWith("content-")) return true;
		if (unknownOrigin && (header.length === 13 || header.length === 6 || header.length === 19)) {
			const name$2 = util$29.headerNameToString(header);
			return name$2 === "authorization" || name$2 === "cookie" || name$2 === "proxy-authorization";
		}
		return false;
	}
	function cleanRequestHeaders(headers, removeContent, unknownOrigin) {
		const ret = [];
		if (Array.isArray(headers)) {
			for (let i = 0; i < headers.length; i += 2) if (!shouldRemoveHeader(headers[i], removeContent, unknownOrigin)) ret.push(headers[i], headers[i + 1]);
		} else if (headers && typeof headers === "object") {
			for (const key$1 of Object.keys(headers)) if (!shouldRemoveHeader(key$1, removeContent, unknownOrigin)) ret.push(key$1, headers[key$1]);
		} else assert$20(headers == null, "headers must be an object or an array");
		return ret;
	}
	module.exports = RedirectHandler$2;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/interceptor/redirectInterceptor.js
var require_redirectInterceptor = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/interceptor/redirectInterceptor.js"(exports, module) {
	const RedirectHandler$1 = require_RedirectHandler();
	function createRedirectInterceptor$3({ maxRedirections: defaultMaxRedirections }) {
		return (dispatch) => {
			return function Intercept(opts, handler) {
				const { maxRedirections = defaultMaxRedirections } = opts;
				if (!maxRedirections) return dispatch(opts, handler);
				const redirectHandler = new RedirectHandler$1(dispatch, maxRedirections, opts, handler);
				opts = {
					...opts,
					maxRedirections: 0
				};
				return dispatch(opts, redirectHandler);
			};
		};
	}
	module.exports = createRedirectInterceptor$3;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/llhttp/llhttp-wasm.js
var require_llhttp_wasm = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/llhttp/llhttp-wasm.js"(exports, module) {
	module.exports = "";
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/llhttp/llhttp_simd-wasm.js
var require_llhttp_simd_wasm = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/llhttp/llhttp_simd-wasm.js"(exports, module) {
	module.exports = "";
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/client.js
var require_client = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/client.js"(exports, module) {
	const assert$19 = __require("assert");
	const net = __require("net");
	const http$7 = __require("http");
	const { pipeline: pipeline$3 } = __require("stream");
	const util$28 = require_util$9();
	const timers = require_timers();
	const Request$4 = require_request$1();
	const DispatcherBase$3 = require_dispatcher_base();
	const { RequestContentLengthMismatchError, ResponseContentLengthMismatchError, InvalidArgumentError: InvalidArgumentError$16, RequestAbortedError: RequestAbortedError$8, HeadersTimeoutError, HeadersOverflowError, SocketError: SocketError$2, InformationalError, BodyTimeoutError, HTTPParserError, ResponseExceededMaxSizeError, ClientDestroyedError } = require_errors$2();
	const buildConnector$3 = require_connect();
	const { kUrl: kUrl$3, kReset, kServerName, kClient: kClient$1, kBusy: kBusy$1, kParser, kConnect, kBlocking, kResuming, kRunning: kRunning$3, kPending: kPending$2, kSize: kSize$4, kWriting, kQueue: kQueue$1, kConnected: kConnected$5, kConnecting, kNeedDrain: kNeedDrain$3, kNoRef, kKeepAliveDefaultTimeout, kHostHeader, kPendingIdx, kRunningIdx, kError: kError$3, kPipelining, kSocket, kKeepAliveTimeoutValue, kMaxHeadersSize, kKeepAliveMaxTimeout, kKeepAliveTimeoutThreshold, kHeadersTimeout, kBodyTimeout, kStrictContentLength, kConnector, kMaxRedirections: kMaxRedirections$1, kMaxRequests, kCounter, kClose: kClose$5, kDestroy: kDestroy$3, kDispatch: kDispatch$2, kInterceptors: kInterceptors$4, kLocalAddress, kMaxResponseSize, kHTTPConnVersion, kHost, kHTTP2Session, kHTTP2SessionState, kHTTP2BuildRequest, kHTTP2CopyHeaders, kHTTP1BuildRequest } = require_symbols$4();
	/** @type {import('http2')} */
	let http2;
	try {
		http2 = __require("http2");
	} catch {
		http2 = { constants: {} };
	}
	const { constants: { HTTP2_HEADER_AUTHORITY, HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH, HTTP2_HEADER_SCHEME, HTTP2_HEADER_CONTENT_LENGTH, HTTP2_HEADER_EXPECT, HTTP2_HEADER_STATUS } } = http2;
	let h2ExperimentalWarned = false;
	const FastBuffer = Buffer[Symbol.species];
	const kClosedResolve$1 = Symbol("kClosedResolve");
	const channels$3 = {};
	try {
		const diagnosticsChannel$2 = __require("diagnostics_channel");
		channels$3.sendHeaders = diagnosticsChannel$2.channel("undici:client:sendHeaders");
		channels$3.beforeConnect = diagnosticsChannel$2.channel("undici:client:beforeConnect");
		channels$3.connectError = diagnosticsChannel$2.channel("undici:client:connectError");
		channels$3.connected = diagnosticsChannel$2.channel("undici:client:connected");
	} catch {
		channels$3.sendHeaders = { hasSubscribers: false };
		channels$3.beforeConnect = { hasSubscribers: false };
		channels$3.connectError = { hasSubscribers: false };
		channels$3.connected = { hasSubscribers: false };
	}
	/**
	* @type {import('../types/client').default}
	*/
	var Client$4 = class extends DispatcherBase$3 {
		/**
		*
		* @param {string|URL} url
		* @param {import('../types/client').Client.Options} options
		*/
		constructor(url$3, { interceptors, maxHeaderSize, headersTimeout, socketTimeout, requestTimeout, connectTimeout, bodyTimeout, idleTimeout, keepAlive, keepAliveTimeout, maxKeepAliveTimeout, keepAliveMaxTimeout, keepAliveTimeoutThreshold, socketPath, pipelining, tls: tls$2, strictContentLength, maxCachedSessions, maxRedirections, connect: connect$2, maxRequestsPerClient, localAddress, maxResponseSize, autoSelectFamily, autoSelectFamilyAttemptTimeout, allowH2, maxConcurrentStreams } = {}) {
			super();
			if (keepAlive !== void 0) throw new InvalidArgumentError$16("unsupported keepAlive, use pipelining=0 instead");
			if (socketTimeout !== void 0) throw new InvalidArgumentError$16("unsupported socketTimeout, use headersTimeout & bodyTimeout instead");
			if (requestTimeout !== void 0) throw new InvalidArgumentError$16("unsupported requestTimeout, use headersTimeout & bodyTimeout instead");
			if (idleTimeout !== void 0) throw new InvalidArgumentError$16("unsupported idleTimeout, use keepAliveTimeout instead");
			if (maxKeepAliveTimeout !== void 0) throw new InvalidArgumentError$16("unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead");
			if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) throw new InvalidArgumentError$16("invalid maxHeaderSize");
			if (socketPath != null && typeof socketPath !== "string") throw new InvalidArgumentError$16("invalid socketPath");
			if (connectTimeout != null && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) throw new InvalidArgumentError$16("invalid connectTimeout");
			if (keepAliveTimeout != null && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) throw new InvalidArgumentError$16("invalid keepAliveTimeout");
			if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) throw new InvalidArgumentError$16("invalid keepAliveMaxTimeout");
			if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) throw new InvalidArgumentError$16("invalid keepAliveTimeoutThreshold");
			if (headersTimeout != null && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) throw new InvalidArgumentError$16("headersTimeout must be a positive integer or zero");
			if (bodyTimeout != null && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) throw new InvalidArgumentError$16("bodyTimeout must be a positive integer or zero");
			if (connect$2 != null && typeof connect$2 !== "function" && typeof connect$2 !== "object") throw new InvalidArgumentError$16("connect must be a function or an object");
			if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) throw new InvalidArgumentError$16("maxRedirections must be a positive number");
			if (maxRequestsPerClient != null && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) throw new InvalidArgumentError$16("maxRequestsPerClient must be a positive number");
			if (localAddress != null && (typeof localAddress !== "string" || net.isIP(localAddress) === 0)) throw new InvalidArgumentError$16("localAddress must be valid string IP address");
			if (maxResponseSize != null && (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)) throw new InvalidArgumentError$16("maxResponseSize must be a positive number");
			if (autoSelectFamilyAttemptTimeout != null && (!Number.isInteger(autoSelectFamilyAttemptTimeout) || autoSelectFamilyAttemptTimeout < -1)) throw new InvalidArgumentError$16("autoSelectFamilyAttemptTimeout must be a positive number");
			if (allowH2 != null && typeof allowH2 !== "boolean") throw new InvalidArgumentError$16("allowH2 must be a valid boolean value");
			if (maxConcurrentStreams != null && (typeof maxConcurrentStreams !== "number" || maxConcurrentStreams < 1)) throw new InvalidArgumentError$16("maxConcurrentStreams must be a possitive integer, greater than 0");
			if (typeof connect$2 !== "function") connect$2 = buildConnector$3({
				...tls$2,
				maxCachedSessions,
				allowH2,
				socketPath,
				timeout: connectTimeout,
				...util$28.nodeHasAutoSelectFamily && autoSelectFamily ? {
					autoSelectFamily,
					autoSelectFamilyAttemptTimeout
				} : void 0,
				...connect$2
			});
			this[kInterceptors$4] = interceptors && interceptors.Client && Array.isArray(interceptors.Client) ? interceptors.Client : [createRedirectInterceptor$2({ maxRedirections })];
			this[kUrl$3] = util$28.parseOrigin(url$3);
			this[kConnector] = connect$2;
			this[kSocket] = null;
			this[kPipelining] = pipelining != null ? pipelining : 1;
			this[kMaxHeadersSize] = maxHeaderSize || http$7.maxHeaderSize;
			this[kKeepAliveDefaultTimeout] = keepAliveTimeout == null ? 4e3 : keepAliveTimeout;
			this[kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 6e5 : keepAliveMaxTimeout;
			this[kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 1e3 : keepAliveTimeoutThreshold;
			this[kKeepAliveTimeoutValue] = this[kKeepAliveDefaultTimeout];
			this[kServerName] = null;
			this[kLocalAddress] = localAddress != null ? localAddress : null;
			this[kResuming] = 0;
			this[kNeedDrain$3] = 0;
			this[kHostHeader] = `host: ${this[kUrl$3].hostname}${this[kUrl$3].port ? `:${this[kUrl$3].port}` : ""}\r\n`;
			this[kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 3e5;
			this[kHeadersTimeout] = headersTimeout != null ? headersTimeout : 3e5;
			this[kStrictContentLength] = strictContentLength == null ? true : strictContentLength;
			this[kMaxRedirections$1] = maxRedirections;
			this[kMaxRequests] = maxRequestsPerClient;
			this[kClosedResolve$1] = null;
			this[kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1;
			this[kHTTPConnVersion] = "h1";
			this[kHTTP2Session] = null;
			this[kHTTP2SessionState] = !allowH2 ? null : {
				openStreams: 0,
				maxConcurrentStreams: maxConcurrentStreams != null ? maxConcurrentStreams : 100
			};
			this[kHost] = `${this[kUrl$3].hostname}${this[kUrl$3].port ? `:${this[kUrl$3].port}` : ""}`;
			this[kQueue$1] = [];
			this[kRunningIdx] = 0;
			this[kPendingIdx] = 0;
		}
		get pipelining() {
			return this[kPipelining];
		}
		set pipelining(value) {
			this[kPipelining] = value;
			resume$1(this, true);
		}
		get [kPending$2]() {
			return this[kQueue$1].length - this[kPendingIdx];
		}
		get [kRunning$3]() {
			return this[kPendingIdx] - this[kRunningIdx];
		}
		get [kSize$4]() {
			return this[kQueue$1].length - this[kRunningIdx];
		}
		get [kConnected$5]() {
			return !!this[kSocket] && !this[kConnecting] && !this[kSocket].destroyed;
		}
		get [kBusy$1]() {
			const socket = this[kSocket];
			return socket && (socket[kReset] || socket[kWriting] || socket[kBlocking]) || this[kSize$4] >= (this[kPipelining] || 1) || this[kPending$2] > 0;
		}
		/* istanbul ignore: only used for test */
		[kConnect](cb) {
			connect$1(this);
			this.once("connect", cb);
		}
		[kDispatch$2](opts, handler) {
			const origin$1 = opts.origin || this[kUrl$3].origin;
			const request$1 = this[kHTTPConnVersion] === "h2" ? Request$4[kHTTP2BuildRequest](origin$1, opts, handler) : Request$4[kHTTP1BuildRequest](origin$1, opts, handler);
			this[kQueue$1].push(request$1);
			if (this[kResuming]) {} else if (util$28.bodyLength(request$1.body) == null && util$28.isIterable(request$1.body)) {
				this[kResuming] = 1;
				process.nextTick(resume$1, this);
			} else resume$1(this, true);
			if (this[kResuming] && this[kNeedDrain$3] !== 2 && this[kBusy$1]) this[kNeedDrain$3] = 2;
			return this[kNeedDrain$3] < 2;
		}
		async [kClose$5]() {
			return new Promise((resolve) => {
				if (!this[kSize$4]) resolve(null);
				else this[kClosedResolve$1] = resolve;
			});
		}
		async [kDestroy$3](err) {
			return new Promise((resolve) => {
				const requests$1 = this[kQueue$1].splice(this[kPendingIdx]);
				for (let i = 0; i < requests$1.length; i++) {
					const request$1 = requests$1[i];
					errorRequest(this, request$1, err);
				}
				const callback = () => {
					if (this[kClosedResolve$1]) {
						this[kClosedResolve$1]();
						this[kClosedResolve$1] = null;
					}
					resolve();
				};
				if (this[kHTTP2Session] != null) {
					util$28.destroy(this[kHTTP2Session], err);
					this[kHTTP2Session] = null;
					this[kHTTP2SessionState] = null;
				}
				if (!this[kSocket]) queueMicrotask(callback);
				else util$28.destroy(this[kSocket].on("close", callback), err);
				resume$1(this);
			});
		}
	};
	function onHttp2SessionError(err) {
		assert$19(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
		this[kSocket][kError$3] = err;
		onError(this[kClient$1], err);
	}
	function onHttp2FrameError(type, code, id) {
		const err = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`);
		if (id === 0) {
			this[kSocket][kError$3] = err;
			onError(this[kClient$1], err);
		}
	}
	function onHttp2SessionEnd() {
		util$28.destroy(this, new SocketError$2("other side closed"));
		util$28.destroy(this[kSocket], new SocketError$2("other side closed"));
	}
	function onHTTP2GoAway(code) {
		const client = this[kClient$1];
		const err = new InformationalError(`HTTP/2: "GOAWAY" frame received with code ${code}`);
		client[kSocket] = null;
		client[kHTTP2Session] = null;
		if (client.destroyed) {
			assert$19(this[kPending$2] === 0);
			const requests$1 = client[kQueue$1].splice(client[kRunningIdx]);
			for (let i = 0; i < requests$1.length; i++) {
				const request$1 = requests$1[i];
				errorRequest(this, request$1, err);
			}
		} else if (client[kRunning$3] > 0) {
			const request$1 = client[kQueue$1][client[kRunningIdx]];
			client[kQueue$1][client[kRunningIdx]++] = null;
			errorRequest(client, request$1, err);
		}
		client[kPendingIdx] = client[kRunningIdx];
		assert$19(client[kRunning$3] === 0);
		client.emit("disconnect", client[kUrl$3], [client], err);
		resume$1(client);
	}
	const constants$3 = require_constants$4();
	const createRedirectInterceptor$2 = require_redirectInterceptor();
	const EMPTY_BUF = Buffer.alloc(0);
	async function lazyllhttp() {
		const llhttpWasmData = process.env.JEST_WORKER_ID ? require_llhttp_wasm() : void 0;
		let mod;
		try {
			mod = await WebAssembly.compile(Buffer.from(require_llhttp_simd_wasm(), "base64"));
		} catch (e) {
			/* istanbul ignore next */
			mod = await WebAssembly.compile(Buffer.from(llhttpWasmData || require_llhttp_wasm(), "base64"));
		}
		return await WebAssembly.instantiate(mod, { env: {
			wasm_on_url: (p, at, len) => {
				/* istanbul ignore next */
				return 0;
			},
			wasm_on_status: (p, at, len) => {
				assert$19.strictEqual(currentParser.ptr, p);
				const start = at - currentBufferPtr + currentBufferRef.byteOffset;
				return currentParser.onStatus(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
			},
			wasm_on_message_begin: (p) => {
				assert$19.strictEqual(currentParser.ptr, p);
				return currentParser.onMessageBegin() || 0;
			},
			wasm_on_header_field: (p, at, len) => {
				assert$19.strictEqual(currentParser.ptr, p);
				const start = at - currentBufferPtr + currentBufferRef.byteOffset;
				return currentParser.onHeaderField(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
			},
			wasm_on_header_value: (p, at, len) => {
				assert$19.strictEqual(currentParser.ptr, p);
				const start = at - currentBufferPtr + currentBufferRef.byteOffset;
				return currentParser.onHeaderValue(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
			},
			wasm_on_headers_complete: (p, statusCode, upgrade$1, shouldKeepAlive) => {
				assert$19.strictEqual(currentParser.ptr, p);
				return currentParser.onHeadersComplete(statusCode, Boolean(upgrade$1), Boolean(shouldKeepAlive)) || 0;
			},
			wasm_on_body: (p, at, len) => {
				assert$19.strictEqual(currentParser.ptr, p);
				const start = at - currentBufferPtr + currentBufferRef.byteOffset;
				return currentParser.onBody(new FastBuffer(currentBufferRef.buffer, start, len)) || 0;
			},
			wasm_on_message_complete: (p) => {
				assert$19.strictEqual(currentParser.ptr, p);
				return currentParser.onMessageComplete() || 0;
			}
		} });
	}
	let llhttpInstance = null;
	let llhttpPromise = lazyllhttp();
	llhttpPromise.catch();
	let currentParser = null;
	let currentBufferRef = null;
	let currentBufferSize = 0;
	let currentBufferPtr = null;
	const TIMEOUT_HEADERS = 1;
	const TIMEOUT_BODY = 2;
	const TIMEOUT_IDLE = 3;
	var Parser = class {
		constructor(client, socket, { exports: exports$1 }) {
			assert$19(Number.isFinite(client[kMaxHeadersSize]) && client[kMaxHeadersSize] > 0);
			this.llhttp = exports$1;
			this.ptr = this.llhttp.llhttp_alloc(constants$3.TYPE.RESPONSE);
			this.client = client;
			this.socket = socket;
			this.timeout = null;
			this.timeoutValue = null;
			this.timeoutType = null;
			this.statusCode = null;
			this.statusText = "";
			this.upgrade = false;
			this.headers = [];
			this.headersSize = 0;
			this.headersMaxSize = client[kMaxHeadersSize];
			this.shouldKeepAlive = false;
			this.paused = false;
			this.resume = this.resume.bind(this);
			this.bytesRead = 0;
			this.keepAlive = "";
			this.contentLength = "";
			this.connection = "";
			this.maxResponseSize = client[kMaxResponseSize];
		}
		setTimeout(value, type) {
			this.timeoutType = type;
			if (value !== this.timeoutValue) {
				timers.clearTimeout(this.timeout);
				if (value) {
					this.timeout = timers.setTimeout(onParserTimeout, value, this);
					// istanbul ignore else: only for jest
					if (this.timeout.unref) this.timeout.unref();
				} else this.timeout = null;
				this.timeoutValue = value;
			} else if (this.timeout) {
				// istanbul ignore else: only for jest
				if (this.timeout.refresh) this.timeout.refresh();
			}
		}
		resume() {
			if (this.socket.destroyed || !this.paused) return;
			assert$19(this.ptr != null);
			assert$19(currentParser == null);
			this.llhttp.llhttp_resume(this.ptr);
			assert$19(this.timeoutType === TIMEOUT_BODY);
			if (this.timeout) {
				// istanbul ignore else: only for jest
				if (this.timeout.refresh) this.timeout.refresh();
			}
			this.paused = false;
			this.execute(this.socket.read() || EMPTY_BUF);
			this.readMore();
		}
		readMore() {
			while (!this.paused && this.ptr) {
				const chunk = this.socket.read();
				if (chunk === null) break;
				this.execute(chunk);
			}
		}
		execute(data) {
			assert$19(this.ptr != null);
			assert$19(currentParser == null);
			assert$19(!this.paused);
			const { socket, llhttp } = this;
			if (data.length > currentBufferSize) {
				if (currentBufferPtr) llhttp.free(currentBufferPtr);
				currentBufferSize = Math.ceil(data.length / 4096) * 4096;
				currentBufferPtr = llhttp.malloc(currentBufferSize);
			}
			new Uint8Array(llhttp.memory.buffer, currentBufferPtr, currentBufferSize).set(data);
			try {
				let ret;
				try {
					currentBufferRef = data;
					currentParser = this;
					ret = llhttp.llhttp_execute(this.ptr, currentBufferPtr, data.length);
				} catch (err) {
					/* istanbul ignore next: difficult to make a test case for */
					throw err;
				} finally {
					currentParser = null;
					currentBufferRef = null;
				}
				const offset = llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr;
				if (ret === constants$3.ERROR.PAUSED_UPGRADE) this.onUpgrade(data.slice(offset));
				else if (ret === constants$3.ERROR.PAUSED) {
					this.paused = true;
					socket.unshift(data.slice(offset));
				} else if (ret !== constants$3.ERROR.OK) {
					const ptr = llhttp.llhttp_get_error_reason(this.ptr);
					let message = "";
					/* istanbul ignore else: difficult to make a test case for */
					if (ptr) {
						const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0);
						message = "Response does not match the HTTP/1.1 protocol (" + Buffer.from(llhttp.memory.buffer, ptr, len).toString() + ")";
					}
					throw new HTTPParserError(message, constants$3.ERROR[ret], data.slice(offset));
				}
			} catch (err) {
				util$28.destroy(socket, err);
			}
		}
		destroy() {
			assert$19(this.ptr != null);
			assert$19(currentParser == null);
			this.llhttp.llhttp_free(this.ptr);
			this.ptr = null;
			timers.clearTimeout(this.timeout);
			this.timeout = null;
			this.timeoutValue = null;
			this.timeoutType = null;
			this.paused = false;
		}
		onStatus(buf) {
			this.statusText = buf.toString();
		}
		onMessageBegin() {
			const { socket, client } = this;
			/* istanbul ignore next: difficult to make a test case for */
			if (socket.destroyed) return -1;
			const request$1 = client[kQueue$1][client[kRunningIdx]];
			if (!request$1) return -1;
		}
		onHeaderField(buf) {
			const len = this.headers.length;
			if ((len & 1) === 0) this.headers.push(buf);
			else this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
			this.trackHeader(buf.length);
		}
		onHeaderValue(buf) {
			let len = this.headers.length;
			if ((len & 1) === 1) {
				this.headers.push(buf);
				len += 1;
			} else this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
			const key$1 = this.headers[len - 2];
			if (key$1.length === 10 && key$1.toString().toLowerCase() === "keep-alive") this.keepAlive += buf.toString();
			else if (key$1.length === 10 && key$1.toString().toLowerCase() === "connection") this.connection += buf.toString();
			else if (key$1.length === 14 && key$1.toString().toLowerCase() === "content-length") this.contentLength += buf.toString();
			this.trackHeader(buf.length);
		}
		trackHeader(len) {
			this.headersSize += len;
			if (this.headersSize >= this.headersMaxSize) util$28.destroy(this.socket, new HeadersOverflowError());
		}
		onUpgrade(head) {
			const { upgrade: upgrade$1, client, socket, headers, statusCode } = this;
			assert$19(upgrade$1);
			const request$1 = client[kQueue$1][client[kRunningIdx]];
			assert$19(request$1);
			assert$19(!socket.destroyed);
			assert$19(socket === client[kSocket]);
			assert$19(!this.paused);
			assert$19(request$1.upgrade || request$1.method === "CONNECT");
			this.statusCode = null;
			this.statusText = "";
			this.shouldKeepAlive = null;
			assert$19(this.headers.length % 2 === 0);
			this.headers = [];
			this.headersSize = 0;
			socket.unshift(head);
			socket[kParser].destroy();
			socket[kParser] = null;
			socket[kClient$1] = null;
			socket[kError$3] = null;
			socket.removeListener("error", onSocketError$1).removeListener("readable", onSocketReadable).removeListener("end", onSocketEnd).removeListener("close", onSocketClose$1);
			client[kSocket] = null;
			client[kQueue$1][client[kRunningIdx]++] = null;
			client.emit("disconnect", client[kUrl$3], [client], new InformationalError("upgrade"));
			try {
				request$1.onUpgrade(statusCode, headers, socket);
			} catch (err) {
				util$28.destroy(socket, err);
			}
			resume$1(client);
		}
		onHeadersComplete(statusCode, upgrade$1, shouldKeepAlive) {
			const { client, socket, headers, statusText } = this;
			/* istanbul ignore next: difficult to make a test case for */
			if (socket.destroyed) return -1;
			const request$1 = client[kQueue$1][client[kRunningIdx]];
			/* istanbul ignore next: difficult to make a test case for */
			if (!request$1) return -1;
			assert$19(!this.upgrade);
			assert$19(this.statusCode < 200);
			if (statusCode === 100) {
				util$28.destroy(socket, new SocketError$2("bad response", util$28.getSocketInfo(socket)));
				return -1;
			}
			if (upgrade$1 && !request$1.upgrade) {
				util$28.destroy(socket, new SocketError$2("bad upgrade", util$28.getSocketInfo(socket)));
				return -1;
			}
			assert$19.strictEqual(this.timeoutType, TIMEOUT_HEADERS);
			this.statusCode = statusCode;
			this.shouldKeepAlive = shouldKeepAlive || request$1.method === "HEAD" && !socket[kReset] && this.connection.toLowerCase() === "keep-alive";
			if (this.statusCode >= 200) {
				const bodyTimeout = request$1.bodyTimeout != null ? request$1.bodyTimeout : client[kBodyTimeout];
				this.setTimeout(bodyTimeout, TIMEOUT_BODY);
			} else if (this.timeout) {
				// istanbul ignore else: only for jest
				if (this.timeout.refresh) this.timeout.refresh();
			}
			if (request$1.method === "CONNECT") {
				assert$19(client[kRunning$3] === 1);
				this.upgrade = true;
				return 2;
			}
			if (upgrade$1) {
				assert$19(client[kRunning$3] === 1);
				this.upgrade = true;
				return 2;
			}
			assert$19(this.headers.length % 2 === 0);
			this.headers = [];
			this.headersSize = 0;
			if (this.shouldKeepAlive && client[kPipelining]) {
				const keepAliveTimeout = this.keepAlive ? util$28.parseKeepAliveTimeout(this.keepAlive) : null;
				if (keepAliveTimeout != null) {
					const timeout$1 = Math.min(keepAliveTimeout - client[kKeepAliveTimeoutThreshold], client[kKeepAliveMaxTimeout]);
					if (timeout$1 <= 0) socket[kReset] = true;
					else client[kKeepAliveTimeoutValue] = timeout$1;
				} else client[kKeepAliveTimeoutValue] = client[kKeepAliveDefaultTimeout];
			} else socket[kReset] = true;
			const pause = request$1.onHeaders(statusCode, headers, this.resume, statusText) === false;
			if (request$1.aborted) return -1;
			if (request$1.method === "HEAD") return 1;
			if (statusCode < 200) return 1;
			if (socket[kBlocking]) {
				socket[kBlocking] = false;
				resume$1(client);
			}
			return pause ? constants$3.ERROR.PAUSED : 0;
		}
		onBody(buf) {
			const { client, socket, statusCode, maxResponseSize } = this;
			if (socket.destroyed) return -1;
			const request$1 = client[kQueue$1][client[kRunningIdx]];
			assert$19(request$1);
			assert$19.strictEqual(this.timeoutType, TIMEOUT_BODY);
			if (this.timeout) {
				// istanbul ignore else: only for jest
				if (this.timeout.refresh) this.timeout.refresh();
			}
			assert$19(statusCode >= 200);
			if (maxResponseSize > -1 && this.bytesRead + buf.length > maxResponseSize) {
				util$28.destroy(socket, new ResponseExceededMaxSizeError());
				return -1;
			}
			this.bytesRead += buf.length;
			if (request$1.onData(buf) === false) return constants$3.ERROR.PAUSED;
		}
		onMessageComplete() {
			const { client, socket, statusCode, upgrade: upgrade$1, headers, contentLength, bytesRead, shouldKeepAlive } = this;
			if (socket.destroyed && (!statusCode || shouldKeepAlive)) return -1;
			if (upgrade$1) return;
			const request$1 = client[kQueue$1][client[kRunningIdx]];
			assert$19(request$1);
			assert$19(statusCode >= 100);
			this.statusCode = null;
			this.statusText = "";
			this.bytesRead = 0;
			this.contentLength = "";
			this.keepAlive = "";
			this.connection = "";
			assert$19(this.headers.length % 2 === 0);
			this.headers = [];
			this.headersSize = 0;
			if (statusCode < 200) return;
			/* istanbul ignore next: should be handled by llhttp? */
			if (request$1.method !== "HEAD" && contentLength && bytesRead !== parseInt(contentLength, 10)) {
				util$28.destroy(socket, new ResponseContentLengthMismatchError());
				return -1;
			}
			request$1.onComplete(headers);
			client[kQueue$1][client[kRunningIdx]++] = null;
			if (socket[kWriting]) {
				assert$19.strictEqual(client[kRunning$3], 0);
				util$28.destroy(socket, new InformationalError("reset"));
				return constants$3.ERROR.PAUSED;
			} else if (!shouldKeepAlive) {
				util$28.destroy(socket, new InformationalError("reset"));
				return constants$3.ERROR.PAUSED;
			} else if (socket[kReset] && client[kRunning$3] === 0) {
				util$28.destroy(socket, new InformationalError("reset"));
				return constants$3.ERROR.PAUSED;
			} else if (client[kPipelining] === 1) setImmediate(resume$1, client);
			else resume$1(client);
		}
	};
	function onParserTimeout(parser) {
		const { socket, timeoutType, client } = parser;
		/* istanbul ignore else */
		if (timeoutType === TIMEOUT_HEADERS) {
			if (!socket[kWriting] || socket.writableNeedDrain || client[kRunning$3] > 1) {
				assert$19(!parser.paused, "cannot be paused while waiting for headers");
				util$28.destroy(socket, new HeadersTimeoutError());
			}
		} else if (timeoutType === TIMEOUT_BODY) {
			if (!parser.paused) util$28.destroy(socket, new BodyTimeoutError());
		} else if (timeoutType === TIMEOUT_IDLE) {
			assert$19(client[kRunning$3] === 0 && client[kKeepAliveTimeoutValue]);
			util$28.destroy(socket, new InformationalError("socket idle timeout"));
		}
	}
	function onSocketReadable() {
		const { [kParser]: parser } = this;
		if (parser) parser.readMore();
	}
	function onSocketError$1(err) {
		const { [kClient$1]: client, [kParser]: parser } = this;
		assert$19(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
		if (client[kHTTPConnVersion] !== "h2") {
			if (err.code === "ECONNRESET" && parser.statusCode && !parser.shouldKeepAlive) {
				parser.onMessageComplete();
				return;
			}
		}
		this[kError$3] = err;
		onError(this[kClient$1], err);
	}
	function onError(client, err) {
		if (client[kRunning$3] === 0 && err.code !== "UND_ERR_INFO" && err.code !== "UND_ERR_SOCKET") {
			assert$19(client[kPendingIdx] === client[kRunningIdx]);
			const requests$1 = client[kQueue$1].splice(client[kRunningIdx]);
			for (let i = 0; i < requests$1.length; i++) {
				const request$1 = requests$1[i];
				errorRequest(client, request$1, err);
			}
			assert$19(client[kSize$4] === 0);
		}
	}
	function onSocketEnd() {
		const { [kParser]: parser, [kClient$1]: client } = this;
		if (client[kHTTPConnVersion] !== "h2") {
			if (parser.statusCode && !parser.shouldKeepAlive) {
				parser.onMessageComplete();
				return;
			}
		}
		util$28.destroy(this, new SocketError$2("other side closed", util$28.getSocketInfo(this)));
	}
	function onSocketClose$1() {
		const { [kClient$1]: client, [kParser]: parser } = this;
		if (client[kHTTPConnVersion] === "h1" && parser) {
			if (!this[kError$3] && parser.statusCode && !parser.shouldKeepAlive) parser.onMessageComplete();
			this[kParser].destroy();
			this[kParser] = null;
		}
		const err = this[kError$3] || new SocketError$2("closed", util$28.getSocketInfo(this));
		client[kSocket] = null;
		if (client.destroyed) {
			assert$19(client[kPending$2] === 0);
			const requests$1 = client[kQueue$1].splice(client[kRunningIdx]);
			for (let i = 0; i < requests$1.length; i++) {
				const request$1 = requests$1[i];
				errorRequest(client, request$1, err);
			}
		} else if (client[kRunning$3] > 0 && err.code !== "UND_ERR_INFO") {
			const request$1 = client[kQueue$1][client[kRunningIdx]];
			client[kQueue$1][client[kRunningIdx]++] = null;
			errorRequest(client, request$1, err);
		}
		client[kPendingIdx] = client[kRunningIdx];
		assert$19(client[kRunning$3] === 0);
		client.emit("disconnect", client[kUrl$3], [client], err);
		resume$1(client);
	}
	async function connect$1(client) {
		assert$19(!client[kConnecting]);
		assert$19(!client[kSocket]);
		let { host, hostname, protocol, port } = client[kUrl$3];
		if (hostname[0] === "[") {
			const idx = hostname.indexOf("]");
			assert$19(idx !== -1);
			const ip = hostname.substring(1, idx);
			assert$19(net.isIP(ip));
			hostname = ip;
		}
		client[kConnecting] = true;
		if (channels$3.beforeConnect.hasSubscribers) channels$3.beforeConnect.publish({
			connectParams: {
				host,
				hostname,
				protocol,
				port,
				servername: client[kServerName],
				localAddress: client[kLocalAddress]
			},
			connector: client[kConnector]
		});
		try {
			const socket = await new Promise((resolve, reject) => {
				client[kConnector]({
					host,
					hostname,
					protocol,
					port,
					servername: client[kServerName],
					localAddress: client[kLocalAddress]
				}, (err, socket$1) => {
					if (err) reject(err);
					else resolve(socket$1);
				});
			});
			if (client.destroyed) {
				util$28.destroy(socket.on("error", () => {}), new ClientDestroyedError());
				return;
			}
			client[kConnecting] = false;
			assert$19(socket);
			const isH2 = socket.alpnProtocol === "h2";
			if (isH2) {
				if (!h2ExperimentalWarned) {
					h2ExperimentalWarned = true;
					process.emitWarning("H2 support is experimental, expect them to change at any time.", { code: "UNDICI-H2" });
				}
				const session = http2.connect(client[kUrl$3], {
					createConnection: () => socket,
					peerMaxConcurrentStreams: client[kHTTP2SessionState].maxConcurrentStreams
				});
				client[kHTTPConnVersion] = "h2";
				session[kClient$1] = client;
				session[kSocket] = socket;
				session.on("error", onHttp2SessionError);
				session.on("frameError", onHttp2FrameError);
				session.on("end", onHttp2SessionEnd);
				session.on("goaway", onHTTP2GoAway);
				session.on("close", onSocketClose$1);
				session.unref();
				client[kHTTP2Session] = session;
				socket[kHTTP2Session] = session;
			} else {
				if (!llhttpInstance) {
					llhttpInstance = await llhttpPromise;
					llhttpPromise = null;
				}
				socket[kNoRef] = false;
				socket[kWriting] = false;
				socket[kReset] = false;
				socket[kBlocking] = false;
				socket[kParser] = new Parser(client, socket, llhttpInstance);
			}
			socket[kCounter] = 0;
			socket[kMaxRequests] = client[kMaxRequests];
			socket[kClient$1] = client;
			socket[kError$3] = null;
			socket.on("error", onSocketError$1).on("readable", onSocketReadable).on("end", onSocketEnd).on("close", onSocketClose$1);
			client[kSocket] = socket;
			if (channels$3.connected.hasSubscribers) channels$3.connected.publish({
				connectParams: {
					host,
					hostname,
					protocol,
					port,
					servername: client[kServerName],
					localAddress: client[kLocalAddress]
				},
				connector: client[kConnector],
				socket
			});
			client.emit("connect", client[kUrl$3], [client]);
		} catch (err) {
			if (client.destroyed) return;
			client[kConnecting] = false;
			if (channels$3.connectError.hasSubscribers) channels$3.connectError.publish({
				connectParams: {
					host,
					hostname,
					protocol,
					port,
					servername: client[kServerName],
					localAddress: client[kLocalAddress]
				},
				connector: client[kConnector],
				error: err
			});
			if (err.code === "ERR_TLS_CERT_ALTNAME_INVALID") {
				assert$19(client[kRunning$3] === 0);
				while (client[kPending$2] > 0 && client[kQueue$1][client[kPendingIdx]].servername === client[kServerName]) {
					const request$1 = client[kQueue$1][client[kPendingIdx]++];
					errorRequest(client, request$1, err);
				}
			} else onError(client, err);
			client.emit("connectionError", client[kUrl$3], [client], err);
		}
		resume$1(client);
	}
	function emitDrain(client) {
		client[kNeedDrain$3] = 0;
		client.emit("drain", client[kUrl$3], [client]);
	}
	function resume$1(client, sync) {
		if (client[kResuming] === 2) return;
		client[kResuming] = 2;
		_resume(client, sync);
		client[kResuming] = 0;
		if (client[kRunningIdx] > 256) {
			client[kQueue$1].splice(0, client[kRunningIdx]);
			client[kPendingIdx] -= client[kRunningIdx];
			client[kRunningIdx] = 0;
		}
	}
	function _resume(client, sync) {
		while (true) {
			if (client.destroyed) {
				assert$19(client[kPending$2] === 0);
				return;
			}
			if (client[kClosedResolve$1] && !client[kSize$4]) {
				client[kClosedResolve$1]();
				client[kClosedResolve$1] = null;
				return;
			}
			const socket = client[kSocket];
			if (socket && !socket.destroyed && socket.alpnProtocol !== "h2") {
				if (client[kSize$4] === 0) {
					if (!socket[kNoRef] && socket.unref) {
						socket.unref();
						socket[kNoRef] = true;
					}
				} else if (socket[kNoRef] && socket.ref) {
					socket.ref();
					socket[kNoRef] = false;
				}
				if (client[kSize$4] === 0) {
					if (socket[kParser].timeoutType !== TIMEOUT_IDLE) socket[kParser].setTimeout(client[kKeepAliveTimeoutValue], TIMEOUT_IDLE);
				} else if (client[kRunning$3] > 0 && socket[kParser].statusCode < 200) {
					if (socket[kParser].timeoutType !== TIMEOUT_HEADERS) {
						const request$2 = client[kQueue$1][client[kRunningIdx]];
						const headersTimeout = request$2.headersTimeout != null ? request$2.headersTimeout : client[kHeadersTimeout];
						socket[kParser].setTimeout(headersTimeout, TIMEOUT_HEADERS);
					}
				}
			}
			if (client[kBusy$1]) client[kNeedDrain$3] = 2;
			else if (client[kNeedDrain$3] === 2) {
				if (sync) {
					client[kNeedDrain$3] = 1;
					process.nextTick(emitDrain, client);
				} else emitDrain(client);
				continue;
			}
			if (client[kPending$2] === 0) return;
			if (client[kRunning$3] >= (client[kPipelining] || 1)) return;
			const request$1 = client[kQueue$1][client[kPendingIdx]];
			if (client[kUrl$3].protocol === "https:" && client[kServerName] !== request$1.servername) {
				if (client[kRunning$3] > 0) return;
				client[kServerName] = request$1.servername;
				if (socket && socket.servername !== request$1.servername) {
					util$28.destroy(socket, new InformationalError("servername changed"));
					return;
				}
			}
			if (client[kConnecting]) return;
			if (!socket && !client[kHTTP2Session]) {
				connect$1(client);
				return;
			}
			if (socket.destroyed || socket[kWriting] || socket[kReset] || socket[kBlocking]) return;
			if (client[kRunning$3] > 0 && !request$1.idempotent) return;
			if (client[kRunning$3] > 0 && (request$1.upgrade || request$1.method === "CONNECT")) return;
			if (client[kRunning$3] > 0 && util$28.bodyLength(request$1.body) !== 0 && (util$28.isStream(request$1.body) || util$28.isAsyncIterable(request$1.body))) return;
			if (!request$1.aborted && write$1(client, request$1)) client[kPendingIdx]++;
			else client[kQueue$1].splice(client[kPendingIdx], 1);
		}
	}
	function shouldSendContentLength(method$1) {
		return method$1 !== "GET" && method$1 !== "HEAD" && method$1 !== "OPTIONS" && method$1 !== "TRACE" && method$1 !== "CONNECT";
	}
	function write$1(client, request$1) {
		if (client[kHTTPConnVersion] === "h2") {
			writeH2(client, client[kHTTP2Session], request$1);
			return;
		}
		const { body, method: method$1, path: path$10, host, upgrade: upgrade$1, headers, blocking, reset } = request$1;
		const expectsPayload = method$1 === "PUT" || method$1 === "POST" || method$1 === "PATCH";
		if (body && typeof body.read === "function") body.read(0);
		const bodyLength$1 = util$28.bodyLength(body);
		let contentLength = bodyLength$1;
		if (contentLength === null) contentLength = request$1.contentLength;
		if (contentLength === 0 && !expectsPayload) contentLength = null;
		if (shouldSendContentLength(method$1) && contentLength > 0 && request$1.contentLength !== null && request$1.contentLength !== contentLength) {
			if (client[kStrictContentLength]) {
				errorRequest(client, request$1, new RequestContentLengthMismatchError());
				return false;
			}
			process.emitWarning(new RequestContentLengthMismatchError());
		}
		const socket = client[kSocket];
		try {
			request$1.onConnect((err) => {
				if (request$1.aborted || request$1.completed) return;
				errorRequest(client, request$1, err || new RequestAbortedError$8());
				util$28.destroy(socket, new InformationalError("aborted"));
			});
		} catch (err) {
			errorRequest(client, request$1, err);
		}
		if (request$1.aborted) return false;
		if (method$1 === "HEAD") socket[kReset] = true;
		if (upgrade$1 || method$1 === "CONNECT") socket[kReset] = true;
		if (reset != null) socket[kReset] = reset;
		if (client[kMaxRequests] && socket[kCounter]++ >= client[kMaxRequests]) socket[kReset] = true;
		if (blocking) socket[kBlocking] = true;
		let header = `${method$1} ${path$10} HTTP/1.1\r\n`;
		if (typeof host === "string") header += `host: ${host}\r\n`;
		else header += client[kHostHeader];
		if (upgrade$1) header += `connection: upgrade\r\nupgrade: ${upgrade$1}\r\n`;
		else if (client[kPipelining] && !socket[kReset]) header += "connection: keep-alive\r\n";
		else header += "connection: close\r\n";
		if (headers) header += headers;
		if (channels$3.sendHeaders.hasSubscribers) channels$3.sendHeaders.publish({
			request: request$1,
			headers: header,
			socket
		});
		/* istanbul ignore else: assertion */
		if (!body || bodyLength$1 === 0) {
			if (contentLength === 0) socket.write(`${header}content-length: 0\r\n\r\n`, "latin1");
			else {
				assert$19(contentLength === null, "no body must not have content length");
				socket.write(`${header}\r\n`, "latin1");
			}
			request$1.onRequestSent();
		} else if (util$28.isBuffer(body)) {
			assert$19(contentLength === body.byteLength, "buffer body must have content length");
			socket.cork();
			socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, "latin1");
			socket.write(body);
			socket.uncork();
			request$1.onBodySent(body);
			request$1.onRequestSent();
			if (!expectsPayload) socket[kReset] = true;
		} else if (util$28.isBlobLike(body)) if (typeof body.stream === "function") writeIterable({
			body: body.stream(),
			client,
			request: request$1,
			socket,
			contentLength,
			header,
			expectsPayload
		});
		else writeBlob({
			body,
			client,
			request: request$1,
			socket,
			contentLength,
			header,
			expectsPayload
		});
		else if (util$28.isStream(body)) writeStream({
			body,
			client,
			request: request$1,
			socket,
			contentLength,
			header,
			expectsPayload
		});
		else if (util$28.isIterable(body)) writeIterable({
			body,
			client,
			request: request$1,
			socket,
			contentLength,
			header,
			expectsPayload
		});
		else assert$19(false);
		return true;
	}
	function writeH2(client, session, request$1) {
		const { body, method: method$1, path: path$10, host, upgrade: upgrade$1, expectContinue, signal, headers: reqHeaders } = request$1;
		let headers;
		if (typeof reqHeaders === "string") headers = Request$4[kHTTP2CopyHeaders](reqHeaders.trim());
		else headers = reqHeaders;
		if (upgrade$1) {
			errorRequest(client, request$1, new Error("Upgrade not supported for H2"));
			return false;
		}
		try {
			request$1.onConnect((err) => {
				if (request$1.aborted || request$1.completed) return;
				errorRequest(client, request$1, err || new RequestAbortedError$8());
			});
		} catch (err) {
			errorRequest(client, request$1, err);
		}
		if (request$1.aborted) return false;
		/** @type {import('node:http2').ClientHttp2Stream} */
		let stream$3;
		const h2State = client[kHTTP2SessionState];
		headers[HTTP2_HEADER_AUTHORITY] = host || client[kHost];
		headers[HTTP2_HEADER_METHOD] = method$1;
		if (method$1 === "CONNECT") {
			session.ref();
			stream$3 = session.request(headers, {
				endStream: false,
				signal
			});
			if (stream$3.id && !stream$3.pending) {
				request$1.onUpgrade(null, null, stream$3);
				++h2State.openStreams;
			} else stream$3.once("ready", () => {
				request$1.onUpgrade(null, null, stream$3);
				++h2State.openStreams;
			});
			stream$3.once("close", () => {
				h2State.openStreams -= 1;
				if (h2State.openStreams === 0) session.unref();
			});
			return true;
		}
		headers[HTTP2_HEADER_PATH] = path$10;
		headers[HTTP2_HEADER_SCHEME] = "https";
		const expectsPayload = method$1 === "PUT" || method$1 === "POST" || method$1 === "PATCH";
		if (body && typeof body.read === "function") body.read(0);
		let contentLength = util$28.bodyLength(body);
		if (contentLength == null) contentLength = request$1.contentLength;
		if (contentLength === 0 || !expectsPayload) contentLength = null;
		if (shouldSendContentLength(method$1) && contentLength > 0 && request$1.contentLength != null && request$1.contentLength !== contentLength) {
			if (client[kStrictContentLength]) {
				errorRequest(client, request$1, new RequestContentLengthMismatchError());
				return false;
			}
			process.emitWarning(new RequestContentLengthMismatchError());
		}
		if (contentLength != null) {
			assert$19(body, "no body must not have content length");
			headers[HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength}`;
		}
		session.ref();
		const shouldEndStream = method$1 === "GET" || method$1 === "HEAD";
		if (expectContinue) {
			headers[HTTP2_HEADER_EXPECT] = "100-continue";
			stream$3 = session.request(headers, {
				endStream: shouldEndStream,
				signal
			});
			stream$3.once("continue", writeBodyH2);
		} else {
			stream$3 = session.request(headers, {
				endStream: shouldEndStream,
				signal
			});
			writeBodyH2();
		}
		++h2State.openStreams;
		stream$3.once("response", (headers$1) => {
			const { [HTTP2_HEADER_STATUS]: statusCode,...realHeaders } = headers$1;
			if (request$1.onHeaders(Number(statusCode), realHeaders, stream$3.resume.bind(stream$3), "") === false) stream$3.pause();
		});
		stream$3.once("end", () => {
			request$1.onComplete([]);
		});
		stream$3.on("data", (chunk) => {
			if (request$1.onData(chunk) === false) stream$3.pause();
		});
		stream$3.once("close", () => {
			h2State.openStreams -= 1;
			if (h2State.openStreams === 0) session.unref();
		});
		stream$3.once("error", function(err) {
			if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
				h2State.streams -= 1;
				util$28.destroy(stream$3, err);
			}
		});
		stream$3.once("frameError", (type, code) => {
			const err = new InformationalError(`HTTP/2: "frameError" received - type ${type}, code ${code}`);
			errorRequest(client, request$1, err);
			if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {
				h2State.streams -= 1;
				util$28.destroy(stream$3, err);
			}
		});
		return true;
		function writeBodyH2() {
			/* istanbul ignore else: assertion */
			if (!body) request$1.onRequestSent();
			else if (util$28.isBuffer(body)) {
				assert$19(contentLength === body.byteLength, "buffer body must have content length");
				stream$3.cork();
				stream$3.write(body);
				stream$3.uncork();
				stream$3.end();
				request$1.onBodySent(body);
				request$1.onRequestSent();
			} else if (util$28.isBlobLike(body)) if (typeof body.stream === "function") writeIterable({
				client,
				request: request$1,
				contentLength,
				h2stream: stream$3,
				expectsPayload,
				body: body.stream(),
				socket: client[kSocket],
				header: ""
			});
			else writeBlob({
				body,
				client,
				request: request$1,
				contentLength,
				expectsPayload,
				h2stream: stream$3,
				header: "",
				socket: client[kSocket]
			});
			else if (util$28.isStream(body)) writeStream({
				body,
				client,
				request: request$1,
				contentLength,
				expectsPayload,
				socket: client[kSocket],
				h2stream: stream$3,
				header: ""
			});
			else if (util$28.isIterable(body)) writeIterable({
				body,
				client,
				request: request$1,
				contentLength,
				expectsPayload,
				header: "",
				h2stream: stream$3,
				socket: client[kSocket]
			});
			else assert$19(false);
		}
	}
	function writeStream({ h2stream, body, client, request: request$1, socket, contentLength, header, expectsPayload }) {
		assert$19(contentLength !== 0 || client[kRunning$3] === 0, "stream body cannot be pipelined");
		if (client[kHTTPConnVersion] === "h2") {
			const pipe$1 = pipeline$3(body, h2stream, (err) => {
				if (err) {
					util$28.destroy(body, err);
					util$28.destroy(h2stream, err);
				} else request$1.onRequestSent();
			});
			pipe$1.on("data", onPipeData);
			pipe$1.once("end", () => {
				pipe$1.removeListener("data", onPipeData);
				util$28.destroy(pipe$1);
			});
			function onPipeData(chunk) {
				request$1.onBodySent(chunk);
			}
			return;
		}
		let finished$2 = false;
		const writer = new AsyncWriter({
			socket,
			request: request$1,
			contentLength,
			client,
			expectsPayload,
			header
		});
		const onData = function(chunk) {
			if (finished$2) return;
			try {
				if (!writer.write(chunk) && this.pause) this.pause();
			} catch (err) {
				util$28.destroy(this, err);
			}
		};
		const onDrain = function() {
			if (finished$2) return;
			if (body.resume) body.resume();
		};
		const onAbort = function() {
			if (finished$2) return;
			const err = new RequestAbortedError$8();
			queueMicrotask(() => onFinished(err));
		};
		const onFinished = function(err) {
			if (finished$2) return;
			finished$2 = true;
			assert$19(socket.destroyed || socket[kWriting] && client[kRunning$3] <= 1);
			socket.off("drain", onDrain).off("error", onFinished);
			body.removeListener("data", onData).removeListener("end", onFinished).removeListener("error", onFinished).removeListener("close", onAbort);
			if (!err) try {
				writer.end();
			} catch (er) {
				err = er;
			}
			writer.destroy(err);
			if (err && (err.code !== "UND_ERR_INFO" || err.message !== "reset")) util$28.destroy(body, err);
			else util$28.destroy(body);
		};
		body.on("data", onData).on("end", onFinished).on("error", onFinished).on("close", onAbort);
		if (body.resume) body.resume();
		socket.on("drain", onDrain).on("error", onFinished);
	}
	async function writeBlob({ h2stream, body, client, request: request$1, socket, contentLength, header, expectsPayload }) {
		assert$19(contentLength === body.size, "blob body must have content length");
		const isH2 = client[kHTTPConnVersion] === "h2";
		try {
			if (contentLength != null && contentLength !== body.size) throw new RequestContentLengthMismatchError();
			const buffer$1 = Buffer.from(await body.arrayBuffer());
			if (isH2) {
				h2stream.cork();
				h2stream.write(buffer$1);
				h2stream.uncork();
			} else {
				socket.cork();
				socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, "latin1");
				socket.write(buffer$1);
				socket.uncork();
			}
			request$1.onBodySent(buffer$1);
			request$1.onRequestSent();
			if (!expectsPayload) socket[kReset] = true;
			resume$1(client);
		} catch (err) {
			util$28.destroy(isH2 ? h2stream : socket, err);
		}
	}
	async function writeIterable({ h2stream, body, client, request: request$1, socket, contentLength, header, expectsPayload }) {
		assert$19(contentLength !== 0 || client[kRunning$3] === 0, "iterator body cannot be pipelined");
		let callback = null;
		function onDrain() {
			if (callback) {
				const cb = callback;
				callback = null;
				cb();
			}
		}
		const waitForDrain = () => new Promise((resolve, reject) => {
			assert$19(callback === null);
			if (socket[kError$3]) reject(socket[kError$3]);
			else callback = resolve;
		});
		if (client[kHTTPConnVersion] === "h2") {
			h2stream.on("close", onDrain).on("drain", onDrain);
			try {
				for await (const chunk of body) {
					if (socket[kError$3]) throw socket[kError$3];
					const res = h2stream.write(chunk);
					request$1.onBodySent(chunk);
					if (!res) await waitForDrain();
				}
			} catch (err) {
				h2stream.destroy(err);
			} finally {
				request$1.onRequestSent();
				h2stream.end();
				h2stream.off("close", onDrain).off("drain", onDrain);
			}
			return;
		}
		socket.on("close", onDrain).on("drain", onDrain);
		const writer = new AsyncWriter({
			socket,
			request: request$1,
			contentLength,
			client,
			expectsPayload,
			header
		});
		try {
			for await (const chunk of body) {
				if (socket[kError$3]) throw socket[kError$3];
				if (!writer.write(chunk)) await waitForDrain();
			}
			writer.end();
		} catch (err) {
			writer.destroy(err);
		} finally {
			socket.off("close", onDrain).off("drain", onDrain);
		}
	}
	var AsyncWriter = class {
		constructor({ socket, request: request$1, contentLength, client, expectsPayload, header }) {
			this.socket = socket;
			this.request = request$1;
			this.contentLength = contentLength;
			this.client = client;
			this.bytesWritten = 0;
			this.expectsPayload = expectsPayload;
			this.header = header;
			socket[kWriting] = true;
		}
		write(chunk) {
			const { socket, request: request$1, contentLength, client, bytesWritten, expectsPayload, header } = this;
			if (socket[kError$3]) throw socket[kError$3];
			if (socket.destroyed) return false;
			const len = Buffer.byteLength(chunk);
			if (!len) return true;
			if (contentLength !== null && bytesWritten + len > contentLength) {
				if (client[kStrictContentLength]) throw new RequestContentLengthMismatchError();
				process.emitWarning(new RequestContentLengthMismatchError());
			}
			socket.cork();
			if (bytesWritten === 0) {
				if (!expectsPayload) socket[kReset] = true;
				if (contentLength === null) socket.write(`${header}transfer-encoding: chunked\r\n`, "latin1");
				else socket.write(`${header}content-length: ${contentLength}\r\n\r\n`, "latin1");
			}
			if (contentLength === null) socket.write(`\r\n${len.toString(16)}\r\n`, "latin1");
			this.bytesWritten += len;
			const ret = socket.write(chunk);
			socket.uncork();
			request$1.onBodySent(chunk);
			if (!ret) {
				if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
					// istanbul ignore else: only for jest
					if (socket[kParser].timeout.refresh) socket[kParser].timeout.refresh();
				}
			}
			return ret;
		}
		end() {
			const { socket, contentLength, client, bytesWritten, expectsPayload, header, request: request$1 } = this;
			request$1.onRequestSent();
			socket[kWriting] = false;
			if (socket[kError$3]) throw socket[kError$3];
			if (socket.destroyed) return;
			if (bytesWritten === 0) if (expectsPayload) socket.write(`${header}content-length: 0\r\n\r\n`, "latin1");
			else socket.write(`${header}\r\n`, "latin1");
			else if (contentLength === null) socket.write("\r\n0\r\n\r\n", "latin1");
			if (contentLength !== null && bytesWritten !== contentLength) if (client[kStrictContentLength]) throw new RequestContentLengthMismatchError();
			else process.emitWarning(new RequestContentLengthMismatchError());
			if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
				// istanbul ignore else: only for jest
				if (socket[kParser].timeout.refresh) socket[kParser].timeout.refresh();
			}
			resume$1(client);
		}
		destroy(err) {
			const { socket, client } = this;
			socket[kWriting] = false;
			if (err) {
				assert$19(client[kRunning$3] <= 1, "pipeline should only contain this request");
				util$28.destroy(socket, err);
			}
		}
	};
	function errorRequest(client, request$1, err) {
		try {
			request$1.onError(err);
			assert$19(request$1.aborted);
		} catch (err$1) {
			client.emit("error", err$1);
		}
	}
	module.exports = Client$4;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/node/fixed-queue.js
var require_fixed_queue = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/node/fixed-queue.js"(exports, module) {
	const kSize$3 = 2048;
	const kMask = kSize$3 - 1;
	var FixedCircularBuffer = class {
		constructor() {
			this.bottom = 0;
			this.top = 0;
			this.list = new Array(kSize$3);
			this.next = null;
		}
		isEmpty() {
			return this.top === this.bottom;
		}
		isFull() {
			return (this.top + 1 & kMask) === this.bottom;
		}
		push(data) {
			this.list[this.top] = data;
			this.top = this.top + 1 & kMask;
		}
		shift() {
			const nextItem = this.list[this.bottom];
			if (nextItem === void 0) return null;
			this.list[this.bottom] = void 0;
			this.bottom = this.bottom + 1 & kMask;
			return nextItem;
		}
	};
	module.exports = class FixedQueue$1 {
		constructor() {
			this.head = this.tail = new FixedCircularBuffer();
		}
		isEmpty() {
			return this.head.isEmpty();
		}
		push(data) {
			if (this.head.isFull()) this.head = this.head.next = new FixedCircularBuffer();
			this.head.push(data);
		}
		shift() {
			const tail = this.tail;
			const next = tail.shift();
			if (tail.isEmpty() && tail.next !== null) this.tail = tail.next;
			return next;
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/pool-stats.js
var require_pool_stats = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/pool-stats.js"(exports, module) {
	const { kFree: kFree$1, kConnected: kConnected$4, kPending: kPending$1, kQueued: kQueued$1, kRunning: kRunning$2, kSize: kSize$2 } = require_symbols$4();
	const kPool = Symbol("pool");
	var PoolStats$1 = class {
		constructor(pool) {
			this[kPool] = pool;
		}
		get connected() {
			return this[kPool][kConnected$4];
		}
		get free() {
			return this[kPool][kFree$1];
		}
		get pending() {
			return this[kPool][kPending$1];
		}
		get queued() {
			return this[kPool][kQueued$1];
		}
		get running() {
			return this[kPool][kRunning$2];
		}
		get size() {
			return this[kPool][kSize$2];
		}
	};
	module.exports = PoolStats$1;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/pool-base.js
var require_pool_base = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/pool-base.js"(exports, module) {
	const DispatcherBase$2 = require_dispatcher_base();
	const FixedQueue = require_fixed_queue();
	const { kConnected: kConnected$3, kSize: kSize$1, kRunning: kRunning$1, kPending, kQueued, kBusy, kFree, kUrl: kUrl$2, kClose: kClose$4, kDestroy: kDestroy$2, kDispatch: kDispatch$1 } = require_symbols$4();
	const PoolStats = require_pool_stats();
	const kClients$4 = Symbol("clients");
	const kNeedDrain$2 = Symbol("needDrain");
	const kQueue = Symbol("queue");
	const kClosedResolve = Symbol("closed resolve");
	const kOnDrain$1 = Symbol("onDrain");
	const kOnConnect$1 = Symbol("onConnect");
	const kOnDisconnect$1 = Symbol("onDisconnect");
	const kOnConnectionError$1 = Symbol("onConnectionError");
	const kGetDispatcher$2 = Symbol("get dispatcher");
	const kAddClient$2 = Symbol("add client");
	const kRemoveClient$1 = Symbol("remove client");
	const kStats = Symbol("stats");
	var PoolBase$2 = class extends DispatcherBase$2 {
		constructor() {
			super();
			this[kQueue] = new FixedQueue();
			this[kClients$4] = [];
			this[kQueued] = 0;
			const pool = this;
			this[kOnDrain$1] = function onDrain(origin$1, targets) {
				const queue = pool[kQueue];
				let needDrain = false;
				while (!needDrain) {
					const item = queue.shift();
					if (!item) break;
					pool[kQueued]--;
					needDrain = !this.dispatch(item.opts, item.handler);
				}
				this[kNeedDrain$2] = needDrain;
				if (!this[kNeedDrain$2] && pool[kNeedDrain$2]) {
					pool[kNeedDrain$2] = false;
					pool.emit("drain", origin$1, [pool, ...targets]);
				}
				if (pool[kClosedResolve] && queue.isEmpty()) Promise.all(pool[kClients$4].map((c) => c.close())).then(pool[kClosedResolve]);
			};
			this[kOnConnect$1] = (origin$1, targets) => {
				pool.emit("connect", origin$1, [pool, ...targets]);
			};
			this[kOnDisconnect$1] = (origin$1, targets, err) => {
				pool.emit("disconnect", origin$1, [pool, ...targets], err);
			};
			this[kOnConnectionError$1] = (origin$1, targets, err) => {
				pool.emit("connectionError", origin$1, [pool, ...targets], err);
			};
			this[kStats] = new PoolStats(this);
		}
		get [kBusy]() {
			return this[kNeedDrain$2];
		}
		get [kConnected$3]() {
			return this[kClients$4].filter((client) => client[kConnected$3]).length;
		}
		get [kFree]() {
			return this[kClients$4].filter((client) => client[kConnected$3] && !client[kNeedDrain$2]).length;
		}
		get [kPending]() {
			let ret = this[kQueued];
			for (const { [kPending]: pending } of this[kClients$4]) ret += pending;
			return ret;
		}
		get [kRunning$1]() {
			let ret = 0;
			for (const { [kRunning$1]: running } of this[kClients$4]) ret += running;
			return ret;
		}
		get [kSize$1]() {
			let ret = this[kQueued];
			for (const { [kSize$1]: size } of this[kClients$4]) ret += size;
			return ret;
		}
		get stats() {
			return this[kStats];
		}
		async [kClose$4]() {
			if (this[kQueue].isEmpty()) return Promise.all(this[kClients$4].map((c) => c.close()));
			else return new Promise((resolve) => {
				this[kClosedResolve] = resolve;
			});
		}
		async [kDestroy$2](err) {
			while (true) {
				const item = this[kQueue].shift();
				if (!item) break;
				item.handler.onError(err);
			}
			return Promise.all(this[kClients$4].map((c) => c.destroy(err)));
		}
		[kDispatch$1](opts, handler) {
			const dispatcher = this[kGetDispatcher$2]();
			if (!dispatcher) {
				this[kNeedDrain$2] = true;
				this[kQueue].push({
					opts,
					handler
				});
				this[kQueued]++;
			} else if (!dispatcher.dispatch(opts, handler)) {
				dispatcher[kNeedDrain$2] = true;
				this[kNeedDrain$2] = !this[kGetDispatcher$2]();
			}
			return !this[kNeedDrain$2];
		}
		[kAddClient$2](client) {
			client.on("drain", this[kOnDrain$1]).on("connect", this[kOnConnect$1]).on("disconnect", this[kOnDisconnect$1]).on("connectionError", this[kOnConnectionError$1]);
			this[kClients$4].push(client);
			if (this[kNeedDrain$2]) process.nextTick(() => {
				if (this[kNeedDrain$2]) this[kOnDrain$1](client[kUrl$2], [this, client]);
			});
			return this;
		}
		[kRemoveClient$1](client) {
			client.close(() => {
				const idx = this[kClients$4].indexOf(client);
				if (idx !== -1) this[kClients$4].splice(idx, 1);
			});
			this[kNeedDrain$2] = this[kClients$4].some((dispatcher) => !dispatcher[kNeedDrain$2] && dispatcher.closed !== true && dispatcher.destroyed !== true);
		}
	};
	module.exports = {
		PoolBase: PoolBase$2,
		kClients: kClients$4,
		kNeedDrain: kNeedDrain$2,
		kAddClient: kAddClient$2,
		kRemoveClient: kRemoveClient$1,
		kGetDispatcher: kGetDispatcher$2
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/pool.js
var require_pool = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/pool.js"(exports, module) {
	const { PoolBase: PoolBase$1, kClients: kClients$3, kNeedDrain: kNeedDrain$1, kAddClient: kAddClient$1, kGetDispatcher: kGetDispatcher$1 } = require_pool_base();
	const Client$3 = require_client();
	const { InvalidArgumentError: InvalidArgumentError$15 } = require_errors$2();
	const util$27 = require_util$9();
	const { kUrl: kUrl$1, kInterceptors: kInterceptors$3 } = require_symbols$4();
	const buildConnector$2 = require_connect();
	const kOptions$3 = Symbol("options");
	const kConnections = Symbol("connections");
	const kFactory$3 = Symbol("factory");
	function defaultFactory$3(origin$1, opts) {
		return new Client$3(origin$1, opts);
	}
	var Pool$5 = class extends PoolBase$1 {
		constructor(origin$1, { connections, factory = defaultFactory$3, connect: connect$2, connectTimeout, tls: tls$2, maxCachedSessions, socketPath, autoSelectFamily, autoSelectFamilyAttemptTimeout, allowH2,...options } = {}) {
			super();
			if (connections != null && (!Number.isFinite(connections) || connections < 0)) throw new InvalidArgumentError$15("invalid connections");
			if (typeof factory !== "function") throw new InvalidArgumentError$15("factory must be a function.");
			if (connect$2 != null && typeof connect$2 !== "function" && typeof connect$2 !== "object") throw new InvalidArgumentError$15("connect must be a function or an object");
			if (typeof connect$2 !== "function") connect$2 = buildConnector$2({
				...tls$2,
				maxCachedSessions,
				allowH2,
				socketPath,
				timeout: connectTimeout,
				...util$27.nodeHasAutoSelectFamily && autoSelectFamily ? {
					autoSelectFamily,
					autoSelectFamilyAttemptTimeout
				} : void 0,
				...connect$2
			});
			this[kInterceptors$3] = options.interceptors && options.interceptors.Pool && Array.isArray(options.interceptors.Pool) ? options.interceptors.Pool : [];
			this[kConnections] = connections || null;
			this[kUrl$1] = util$27.parseOrigin(origin$1);
			this[kOptions$3] = {
				...util$27.deepClone(options),
				connect: connect$2,
				allowH2
			};
			this[kOptions$3].interceptors = options.interceptors ? { ...options.interceptors } : void 0;
			this[kFactory$3] = factory;
			this.on("connectionError", (origin$2, targets, error$1) => {
				for (const target of targets) {
					const idx = this[kClients$3].indexOf(target);
					if (idx !== -1) this[kClients$3].splice(idx, 1);
				}
			});
		}
		[kGetDispatcher$1]() {
			let dispatcher = this[kClients$3].find((dispatcher$1) => !dispatcher$1[kNeedDrain$1]);
			if (dispatcher) return dispatcher;
			if (!this[kConnections] || this[kClients$3].length < this[kConnections]) {
				dispatcher = this[kFactory$3](this[kUrl$1], this[kOptions$3]);
				this[kAddClient$1](dispatcher);
			}
			return dispatcher;
		}
	};
	module.exports = Pool$5;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/balanced-pool.js
var require_balanced_pool = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/balanced-pool.js"(exports, module) {
	const { BalancedPoolMissingUpstreamError, InvalidArgumentError: InvalidArgumentError$14 } = require_errors$2();
	const { PoolBase, kClients: kClients$2, kNeedDrain, kAddClient, kRemoveClient, kGetDispatcher } = require_pool_base();
	const Pool$4 = require_pool();
	const { kUrl, kInterceptors: kInterceptors$2 } = require_symbols$4();
	const { parseOrigin } = require_util$9();
	const kFactory$2 = Symbol("factory");
	const kOptions$2 = Symbol("options");
	const kGreatestCommonDivisor = Symbol("kGreatestCommonDivisor");
	const kCurrentWeight = Symbol("kCurrentWeight");
	const kIndex = Symbol("kIndex");
	const kWeight = Symbol("kWeight");
	const kMaxWeightPerServer = Symbol("kMaxWeightPerServer");
	const kErrorPenalty = Symbol("kErrorPenalty");
	function getGreatestCommonDivisor(a, b) {
		if (b === 0) return a;
		return getGreatestCommonDivisor(b, a % b);
	}
	function defaultFactory$2(origin$1, opts) {
		return new Pool$4(origin$1, opts);
	}
	var BalancedPool$1 = class extends PoolBase {
		constructor(upstreams = [], { factory = defaultFactory$2,...opts } = {}) {
			super();
			this[kOptions$2] = opts;
			this[kIndex] = -1;
			this[kCurrentWeight] = 0;
			this[kMaxWeightPerServer] = this[kOptions$2].maxWeightPerServer || 100;
			this[kErrorPenalty] = this[kOptions$2].errorPenalty || 15;
			if (!Array.isArray(upstreams)) upstreams = [upstreams];
			if (typeof factory !== "function") throw new InvalidArgumentError$14("factory must be a function.");
			this[kInterceptors$2] = opts.interceptors && opts.interceptors.BalancedPool && Array.isArray(opts.interceptors.BalancedPool) ? opts.interceptors.BalancedPool : [];
			this[kFactory$2] = factory;
			for (const upstream of upstreams) this.addUpstream(upstream);
			this._updateBalancedPoolStats();
		}
		addUpstream(upstream) {
			const upstreamOrigin = parseOrigin(upstream).origin;
			if (this[kClients$2].find((pool$1) => pool$1[kUrl].origin === upstreamOrigin && pool$1.closed !== true && pool$1.destroyed !== true)) return this;
			const pool = this[kFactory$2](upstreamOrigin, Object.assign({}, this[kOptions$2]));
			this[kAddClient](pool);
			pool.on("connect", () => {
				pool[kWeight] = Math.min(this[kMaxWeightPerServer], pool[kWeight] + this[kErrorPenalty]);
			});
			pool.on("connectionError", () => {
				pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
				this._updateBalancedPoolStats();
			});
			pool.on("disconnect", (...args) => {
				const err = args[2];
				if (err && err.code === "UND_ERR_SOCKET") {
					pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty]);
					this._updateBalancedPoolStats();
				}
			});
			for (const client of this[kClients$2]) client[kWeight] = this[kMaxWeightPerServer];
			this._updateBalancedPoolStats();
			return this;
		}
		_updateBalancedPoolStats() {
			this[kGreatestCommonDivisor] = this[kClients$2].map((p) => p[kWeight]).reduce(getGreatestCommonDivisor, 0);
		}
		removeUpstream(upstream) {
			const upstreamOrigin = parseOrigin(upstream).origin;
			const pool = this[kClients$2].find((pool$1) => pool$1[kUrl].origin === upstreamOrigin && pool$1.closed !== true && pool$1.destroyed !== true);
			if (pool) this[kRemoveClient](pool);
			return this;
		}
		get upstreams() {
			return this[kClients$2].filter((dispatcher) => dispatcher.closed !== true && dispatcher.destroyed !== true).map((p) => p[kUrl].origin);
		}
		[kGetDispatcher]() {
			if (this[kClients$2].length === 0) throw new BalancedPoolMissingUpstreamError();
			const dispatcher = this[kClients$2].find((dispatcher$1) => !dispatcher$1[kNeedDrain] && dispatcher$1.closed !== true && dispatcher$1.destroyed !== true);
			if (!dispatcher) return;
			const allClientsBusy = this[kClients$2].map((pool) => pool[kNeedDrain]).reduce((a, b) => a && b, true);
			if (allClientsBusy) return;
			let counter = 0;
			let maxWeightIndex = this[kClients$2].findIndex((pool) => !pool[kNeedDrain]);
			while (counter++ < this[kClients$2].length) {
				this[kIndex] = (this[kIndex] + 1) % this[kClients$2].length;
				const pool = this[kClients$2][this[kIndex]];
				if (pool[kWeight] > this[kClients$2][maxWeightIndex][kWeight] && !pool[kNeedDrain]) maxWeightIndex = this[kIndex];
				if (this[kIndex] === 0) {
					this[kCurrentWeight] = this[kCurrentWeight] - this[kGreatestCommonDivisor];
					if (this[kCurrentWeight] <= 0) this[kCurrentWeight] = this[kMaxWeightPerServer];
				}
				if (pool[kWeight] >= this[kCurrentWeight] && !pool[kNeedDrain]) return pool;
			}
			this[kCurrentWeight] = this[kClients$2][maxWeightIndex][kWeight];
			this[kIndex] = maxWeightIndex;
			return this[kClients$2][maxWeightIndex];
		}
	};
	module.exports = BalancedPool$1;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/compat/dispatcher-weakref.js
var require_dispatcher_weakref = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/compat/dispatcher-weakref.js"(exports, module) {
	/* istanbul ignore file: only for Node 12 */
	const { kConnected: kConnected$2, kSize } = require_symbols$4();
	var CompatWeakRef = class {
		constructor(value) {
			this.value = value;
		}
		deref() {
			return this.value[kConnected$2] === 0 && this.value[kSize] === 0 ? void 0 : this.value;
		}
	};
	var CompatFinalizer = class {
		constructor(finalizer) {
			this.finalizer = finalizer;
		}
		register(dispatcher, key$1) {
			if (dispatcher.on) dispatcher.on("disconnect", () => {
				if (dispatcher[kConnected$2] === 0 && dispatcher[kSize] === 0) this.finalizer(key$1);
			});
		}
	};
	module.exports = function() {
		if (process.env.NODE_V8_COVERAGE) return {
			WeakRef: CompatWeakRef,
			FinalizationRegistry: CompatFinalizer
		};
		return {
			WeakRef: global.WeakRef || CompatWeakRef,
			FinalizationRegistry: global.FinalizationRegistry || CompatFinalizer
		};
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/agent.js
var require_agent = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/agent.js"(exports, module) {
	const { InvalidArgumentError: InvalidArgumentError$13 } = require_errors$2();
	const { kClients: kClients$1, kRunning, kClose: kClose$3, kDestroy: kDestroy$1, kDispatch, kInterceptors: kInterceptors$1 } = require_symbols$4();
	const DispatcherBase$1 = require_dispatcher_base();
	const Pool$3 = require_pool();
	const Client$2 = require_client();
	const util$26 = require_util$9();
	const createRedirectInterceptor$1 = require_redirectInterceptor();
	const { WeakRef: WeakRef$1, FinalizationRegistry: FinalizationRegistry$2 } = require_dispatcher_weakref()();
	const kOnConnect = Symbol("onConnect");
	const kOnDisconnect = Symbol("onDisconnect");
	const kOnConnectionError = Symbol("onConnectionError");
	const kMaxRedirections = Symbol("maxRedirections");
	const kOnDrain = Symbol("onDrain");
	const kFactory$1 = Symbol("factory");
	const kFinalizer = Symbol("finalizer");
	const kOptions$1 = Symbol("options");
	function defaultFactory$1(origin$1, opts) {
		return opts && opts.connections === 1 ? new Client$2(origin$1, opts) : new Pool$3(origin$1, opts);
	}
	var Agent$5 = class extends DispatcherBase$1 {
		constructor({ factory = defaultFactory$1, maxRedirections = 0, connect: connect$2,...options } = {}) {
			super();
			if (typeof factory !== "function") throw new InvalidArgumentError$13("factory must be a function.");
			if (connect$2 != null && typeof connect$2 !== "function" && typeof connect$2 !== "object") throw new InvalidArgumentError$13("connect must be a function or an object");
			if (!Number.isInteger(maxRedirections) || maxRedirections < 0) throw new InvalidArgumentError$13("maxRedirections must be a positive number");
			if (connect$2 && typeof connect$2 !== "function") connect$2 = { ...connect$2 };
			this[kInterceptors$1] = options.interceptors && options.interceptors.Agent && Array.isArray(options.interceptors.Agent) ? options.interceptors.Agent : [createRedirectInterceptor$1({ maxRedirections })];
			this[kOptions$1] = {
				...util$26.deepClone(options),
				connect: connect$2
			};
			this[kOptions$1].interceptors = options.interceptors ? { ...options.interceptors } : void 0;
			this[kMaxRedirections] = maxRedirections;
			this[kFactory$1] = factory;
			this[kClients$1] = new Map();
			this[kFinalizer] = new FinalizationRegistry$2(
				/* istanbul ignore next: gc is undeterministic */
				(key$1) => {
					const ref = this[kClients$1].get(key$1);
					if (ref !== void 0 && ref.deref() === void 0) this[kClients$1].delete(key$1);
				}
);
			const agent = this;
			this[kOnDrain] = (origin$1, targets) => {
				agent.emit("drain", origin$1, [agent, ...targets]);
			};
			this[kOnConnect] = (origin$1, targets) => {
				agent.emit("connect", origin$1, [agent, ...targets]);
			};
			this[kOnDisconnect] = (origin$1, targets, err) => {
				agent.emit("disconnect", origin$1, [agent, ...targets], err);
			};
			this[kOnConnectionError] = (origin$1, targets, err) => {
				agent.emit("connectionError", origin$1, [agent, ...targets], err);
			};
		}
		get [kRunning]() {
			let ret = 0;
			for (const ref of this[kClients$1].values()) {
				const client = ref.deref();
				/* istanbul ignore next: gc is undeterministic */
				if (client) ret += client[kRunning];
			}
			return ret;
		}
		[kDispatch](opts, handler) {
			let key$1;
			if (opts.origin && (typeof opts.origin === "string" || opts.origin instanceof URL)) key$1 = String(opts.origin);
			else throw new InvalidArgumentError$13("opts.origin must be a non-empty string or URL.");
			const ref = this[kClients$1].get(key$1);
			let dispatcher = ref ? ref.deref() : null;
			if (!dispatcher) {
				dispatcher = this[kFactory$1](opts.origin, this[kOptions$1]).on("drain", this[kOnDrain]).on("connect", this[kOnConnect]).on("disconnect", this[kOnDisconnect]).on("connectionError", this[kOnConnectionError]);
				this[kClients$1].set(key$1, new WeakRef$1(dispatcher));
				this[kFinalizer].register(dispatcher, key$1);
			}
			return dispatcher.dispatch(opts, handler);
		}
		async [kClose$3]() {
			const closePromises = [];
			for (const ref of this[kClients$1].values()) {
				const client = ref.deref();
				/* istanbul ignore else: gc is undeterministic */
				if (client) closePromises.push(client.close());
			}
			await Promise.all(closePromises);
		}
		async [kDestroy$1](err) {
			const destroyPromises = [];
			for (const ref of this[kClients$1].values()) {
				const client = ref.deref();
				/* istanbul ignore else: gc is undeterministic */
				if (client) destroyPromises.push(client.destroy(err));
			}
			await Promise.all(destroyPromises);
		}
	};
	module.exports = Agent$5;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/readable.js
var require_readable$1 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/readable.js"(exports, module) {
	const assert$18 = __require("assert");
	const { Readable: Readable$5 } = __require("stream");
	const { RequestAbortedError: RequestAbortedError$7, NotSupportedError, InvalidArgumentError: InvalidArgumentError$12 } = require_errors$2();
	const util$25 = require_util$9();
	const { ReadableStreamFrom, toUSVString: toUSVString$1 } = require_util$9();
	let Blob$1;
	const kConsume = Symbol("kConsume");
	const kReading = Symbol("kReading");
	const kBody = Symbol("kBody");
	const kAbort = Symbol("abort");
	const kContentType = Symbol("kContentType");
	const noop$6 = () => {};
	module.exports = class BodyReadable extends Readable$5 {
		constructor({ resume: resume$2, abort: abort$4, contentType: contentType$1 = "", highWaterMark = 64 * 1024 }) {
			super({
				autoDestroy: true,
				read: resume$2,
				highWaterMark
			});
			this._readableState.dataEmitted = false;
			this[kAbort] = abort$4;
			this[kConsume] = null;
			this[kBody] = null;
			this[kContentType] = contentType$1;
			this[kReading] = false;
		}
		destroy(err) {
			if (this.destroyed) return this;
			if (!err && !this._readableState.endEmitted) err = new RequestAbortedError$7();
			if (err) this[kAbort]();
			return super.destroy(err);
		}
		emit(ev, ...args) {
			if (ev === "data") this._readableState.dataEmitted = true;
			else if (ev === "error") this._readableState.errorEmitted = true;
			return super.emit(ev, ...args);
		}
		on(ev, ...args) {
			if (ev === "data" || ev === "readable") this[kReading] = true;
			return super.on(ev, ...args);
		}
		addListener(ev, ...args) {
			return this.on(ev, ...args);
		}
		off(ev, ...args) {
			const ret = super.off(ev, ...args);
			if (ev === "data" || ev === "readable") this[kReading] = this.listenerCount("data") > 0 || this.listenerCount("readable") > 0;
			return ret;
		}
		removeListener(ev, ...args) {
			return this.off(ev, ...args);
		}
		push(chunk) {
			if (this[kConsume] && chunk !== null && this.readableLength === 0) {
				consumePush(this[kConsume], chunk);
				return this[kReading] ? super.push(chunk) : true;
			}
			return super.push(chunk);
		}
		async text() {
			return consume(this, "text");
		}
		async json() {
			return consume(this, "json");
		}
		async blob() {
			return consume(this, "blob");
		}
		async arrayBuffer() {
			return consume(this, "arrayBuffer");
		}
		async formData() {
			throw new NotSupportedError();
		}
		get bodyUsed() {
			return util$25.isDisturbed(this);
		}
		get body() {
			if (!this[kBody]) {
				this[kBody] = ReadableStreamFrom(this);
				if (this[kConsume]) {
					this[kBody].getReader();
					assert$18(this[kBody].locked);
				}
			}
			return this[kBody];
		}
		dump(opts) {
			let limit = opts && Number.isFinite(opts.limit) ? opts.limit : 262144;
			const signal = opts && opts.signal;
			if (signal) try {
				if (typeof signal !== "object" || !("aborted" in signal)) throw new InvalidArgumentError$12("signal must be an AbortSignal");
				util$25.throwIfAborted(signal);
			} catch (err) {
				return Promise.reject(err);
			}
			if (this.closed) return Promise.resolve(null);
			return new Promise((resolve, reject) => {
				const signalListenerCleanup = signal ? util$25.addAbortListener(signal, () => {
					this.destroy();
				}) : noop$6;
				this.on("close", function() {
					signalListenerCleanup();
					if (signal && signal.aborted) reject(signal.reason || Object.assign(new Error("The operation was aborted"), { name: "AbortError" }));
					else resolve(null);
				}).on("error", noop$6).on("data", function(chunk) {
					limit -= chunk.length;
					if (limit <= 0) this.destroy();
				}).resume();
			});
		}
	};
	function isLocked(self$1) {
		return self$1[kBody] && self$1[kBody].locked === true || self$1[kConsume];
	}
	function isUnusable(self$1) {
		return util$25.isDisturbed(self$1) || isLocked(self$1);
	}
	async function consume(stream$3, type) {
		if (isUnusable(stream$3)) throw new TypeError("unusable");
		assert$18(!stream$3[kConsume]);
		return new Promise((resolve, reject) => {
			stream$3[kConsume] = {
				type,
				stream: stream$3,
				resolve,
				reject,
				length: 0,
				body: []
			};
			stream$3.on("error", function(err) {
				consumeFinish(this[kConsume], err);
			}).on("close", function() {
				if (this[kConsume].body !== null) consumeFinish(this[kConsume], new RequestAbortedError$7());
			});
			process.nextTick(consumeStart, stream$3[kConsume]);
		});
	}
	function consumeStart(consume$1) {
		if (consume$1.body === null) return;
		const { _readableState: state$1 } = consume$1.stream;
		for (const chunk of state$1.buffer) consumePush(consume$1, chunk);
		if (state$1.endEmitted) consumeEnd(this[kConsume]);
		else consume$1.stream.on("end", function() {
			consumeEnd(this[kConsume]);
		});
		consume$1.stream.resume();
		while (consume$1.stream.read() != null);
	}
	function consumeEnd(consume$1) {
		const { type, body, resolve, stream: stream$3, length } = consume$1;
		try {
			if (type === "text") resolve(toUSVString$1(Buffer.concat(body)));
			else if (type === "json") resolve(JSON.parse(Buffer.concat(body)));
			else if (type === "arrayBuffer") {
				const dst = new Uint8Array(length);
				let pos = 0;
				for (const buf of body) {
					dst.set(buf, pos);
					pos += buf.byteLength;
				}
				resolve(dst.buffer);
			} else if (type === "blob") {
				if (!Blob$1) Blob$1 = __require("buffer").Blob;
				resolve(new Blob$1(body, { type: stream$3[kContentType] }));
			}
			consumeFinish(consume$1);
		} catch (err) {
			stream$3.destroy(err);
		}
	}
	function consumePush(consume$1, chunk) {
		consume$1.length += chunk.length;
		consume$1.body.push(chunk);
	}
	function consumeFinish(consume$1, err) {
		if (consume$1.body === null) return;
		if (err) consume$1.reject(err);
		else consume$1.resolve();
		consume$1.type = null;
		consume$1.stream = null;
		consume$1.resolve = null;
		consume$1.reject = null;
		consume$1.length = 0;
		consume$1.body = null;
	}
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/util.js
var require_util$7 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/util.js"(exports, module) {
	const assert$17 = __require("assert");
	const { ResponseStatusCodeError } = require_errors$2();
	const { toUSVString } = require_util$9();
	async function getResolveErrorBodyCallback$2({ callback, body, contentType: contentType$1, statusCode, statusMessage, headers }) {
		assert$17(body);
		let chunks = [];
		let limit = 0;
		for await (const chunk of body) {
			chunks.push(chunk);
			limit += chunk.length;
			if (limit > 128 * 1024) {
				chunks = null;
				break;
			}
		}
		if (statusCode === 204 || !contentType$1 || !chunks) {
			process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
			return;
		}
		try {
			if (contentType$1.startsWith("application/json")) {
				const payload = JSON.parse(toUSVString(Buffer.concat(chunks)));
				process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
				return;
			}
			if (contentType$1.startsWith("text/")) {
				const payload = toUSVString(Buffer.concat(chunks));
				process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
				return;
			}
		} catch (err) {}
		process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
	}
	module.exports = { getResolveErrorBodyCallback: getResolveErrorBodyCallback$2 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/abort-signal.js
var require_abort_signal = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/abort-signal.js"(exports, module) {
	const { addAbortListener: addAbortListener$1 } = require_util$9();
	const { RequestAbortedError: RequestAbortedError$6 } = require_errors$2();
	const kListener = Symbol("kListener");
	const kSignal$1 = Symbol("kSignal");
	function abort$3(self$1) {
		if (self$1.abort) self$1.abort();
		else self$1.onError(new RequestAbortedError$6());
	}
	function addSignal$5(self$1, signal) {
		self$1[kSignal$1] = null;
		self$1[kListener] = null;
		if (!signal) return;
		if (signal.aborted) {
			abort$3(self$1);
			return;
		}
		self$1[kSignal$1] = signal;
		self$1[kListener] = () => {
			abort$3(self$1);
		};
		addAbortListener$1(self$1[kSignal$1], self$1[kListener]);
	}
	function removeSignal$5(self$1) {
		if (!self$1[kSignal$1]) return;
		if ("removeEventListener" in self$1[kSignal$1]) self$1[kSignal$1].removeEventListener("abort", self$1[kListener]);
		else self$1[kSignal$1].removeListener("abort", self$1[kListener]);
		self$1[kSignal$1] = null;
		self$1[kListener] = null;
	}
	module.exports = {
		addSignal: addSignal$5,
		removeSignal: removeSignal$5
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/api-request.js
var require_api_request = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/api-request.js"(exports, module) {
	const Readable$4 = require_readable$1();
	const { InvalidArgumentError: InvalidArgumentError$11, RequestAbortedError: RequestAbortedError$5 } = require_errors$2();
	const util$24 = require_util$9();
	const { getResolveErrorBodyCallback: getResolveErrorBodyCallback$1 } = require_util$7();
	const { AsyncResource: AsyncResource$4 } = __require("async_hooks");
	const { addSignal: addSignal$4, removeSignal: removeSignal$4 } = require_abort_signal();
	var RequestHandler = class extends AsyncResource$4 {
		constructor(opts, callback) {
			if (!opts || typeof opts !== "object") throw new InvalidArgumentError$11("invalid opts");
			const { signal, method: method$1, opaque, body, onInfo, responseHeaders, throwOnError, highWaterMark } = opts;
			try {
				if (typeof callback !== "function") throw new InvalidArgumentError$11("invalid callback");
				if (highWaterMark && (typeof highWaterMark !== "number" || highWaterMark < 0)) throw new InvalidArgumentError$11("invalid highWaterMark");
				if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new InvalidArgumentError$11("signal must be an EventEmitter or EventTarget");
				if (method$1 === "CONNECT") throw new InvalidArgumentError$11("invalid method");
				if (onInfo && typeof onInfo !== "function") throw new InvalidArgumentError$11("invalid onInfo callback");
				super("UNDICI_REQUEST");
			} catch (err) {
				if (util$24.isStream(body)) util$24.destroy(body.on("error", util$24.nop), err);
				throw err;
			}
			this.responseHeaders = responseHeaders || null;
			this.opaque = opaque || null;
			this.callback = callback;
			this.res = null;
			this.abort = null;
			this.body = body;
			this.trailers = {};
			this.context = null;
			this.onInfo = onInfo || null;
			this.throwOnError = throwOnError;
			this.highWaterMark = highWaterMark;
			if (util$24.isStream(body)) body.on("error", (err) => {
				this.onError(err);
			});
			addSignal$4(this, signal);
		}
		onConnect(abort$4, context) {
			if (!this.callback) throw new RequestAbortedError$5();
			this.abort = abort$4;
			this.context = context;
		}
		onHeaders(statusCode, rawHeaders, resume$2, statusMessage) {
			const { callback, opaque, abort: abort$4, context, responseHeaders, highWaterMark } = this;
			const headers = responseHeaders === "raw" ? util$24.parseRawHeaders(rawHeaders) : util$24.parseHeaders(rawHeaders);
			if (statusCode < 200) {
				if (this.onInfo) this.onInfo({
					statusCode,
					headers
				});
				return;
			}
			const parsedHeaders = responseHeaders === "raw" ? util$24.parseHeaders(rawHeaders) : headers;
			const contentType$1 = parsedHeaders["content-type"];
			const body = new Readable$4({
				resume: resume$2,
				abort: abort$4,
				contentType: contentType$1,
				highWaterMark
			});
			this.callback = null;
			this.res = body;
			if (callback !== null) if (this.throwOnError && statusCode >= 400) this.runInAsyncScope(getResolveErrorBodyCallback$1, null, {
				callback,
				body,
				contentType: contentType$1,
				statusCode,
				statusMessage,
				headers
			});
			else this.runInAsyncScope(callback, null, null, {
				statusCode,
				headers,
				trailers: this.trailers,
				opaque,
				body,
				context
			});
		}
		onData(chunk) {
			const { res } = this;
			return res.push(chunk);
		}
		onComplete(trailers) {
			const { res } = this;
			removeSignal$4(this);
			util$24.parseHeaders(trailers, this.trailers);
			res.push(null);
		}
		onError(err) {
			const { res, callback, body, opaque } = this;
			removeSignal$4(this);
			if (callback) {
				this.callback = null;
				queueMicrotask(() => {
					this.runInAsyncScope(callback, null, err, { opaque });
				});
			}
			if (res) {
				this.res = null;
				queueMicrotask(() => {
					util$24.destroy(res, err);
				});
			}
			if (body) {
				this.body = null;
				util$24.destroy(body, err);
			}
		}
	};
	function request(opts, callback) {
		if (callback === void 0) return new Promise((resolve, reject) => {
			request.call(this, opts, (err, data) => {
				return err ? reject(err) : resolve(data);
			});
		});
		try {
			this.dispatch(opts, new RequestHandler(opts, callback));
		} catch (err) {
			if (typeof callback !== "function") throw err;
			const opaque = opts && opts.opaque;
			queueMicrotask(() => callback(err, { opaque }));
		}
	}
	module.exports = request;
	module.exports.RequestHandler = RequestHandler;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/api-stream.js
var require_api_stream = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/api-stream.js"(exports, module) {
	const { finished: finished$1, PassThrough: PassThrough$3 } = __require("stream");
	const { InvalidArgumentError: InvalidArgumentError$10, InvalidReturnValueError: InvalidReturnValueError$1, RequestAbortedError: RequestAbortedError$4 } = require_errors$2();
	const util$23 = require_util$9();
	const { getResolveErrorBodyCallback } = require_util$7();
	const { AsyncResource: AsyncResource$3 } = __require("async_hooks");
	const { addSignal: addSignal$3, removeSignal: removeSignal$3 } = require_abort_signal();
	var StreamHandler = class extends AsyncResource$3 {
		constructor(opts, factory, callback) {
			if (!opts || typeof opts !== "object") throw new InvalidArgumentError$10("invalid opts");
			const { signal, method: method$1, opaque, body, onInfo, responseHeaders, throwOnError } = opts;
			try {
				if (typeof callback !== "function") throw new InvalidArgumentError$10("invalid callback");
				if (typeof factory !== "function") throw new InvalidArgumentError$10("invalid factory");
				if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new InvalidArgumentError$10("signal must be an EventEmitter or EventTarget");
				if (method$1 === "CONNECT") throw new InvalidArgumentError$10("invalid method");
				if (onInfo && typeof onInfo !== "function") throw new InvalidArgumentError$10("invalid onInfo callback");
				super("UNDICI_STREAM");
			} catch (err) {
				if (util$23.isStream(body)) util$23.destroy(body.on("error", util$23.nop), err);
				throw err;
			}
			this.responseHeaders = responseHeaders || null;
			this.opaque = opaque || null;
			this.factory = factory;
			this.callback = callback;
			this.res = null;
			this.abort = null;
			this.context = null;
			this.trailers = null;
			this.body = body;
			this.onInfo = onInfo || null;
			this.throwOnError = throwOnError || false;
			if (util$23.isStream(body)) body.on("error", (err) => {
				this.onError(err);
			});
			addSignal$3(this, signal);
		}
		onConnect(abort$4, context) {
			if (!this.callback) throw new RequestAbortedError$4();
			this.abort = abort$4;
			this.context = context;
		}
		onHeaders(statusCode, rawHeaders, resume$2, statusMessage) {
			const { factory, opaque, context, callback, responseHeaders } = this;
			const headers = responseHeaders === "raw" ? util$23.parseRawHeaders(rawHeaders) : util$23.parseHeaders(rawHeaders);
			if (statusCode < 200) {
				if (this.onInfo) this.onInfo({
					statusCode,
					headers
				});
				return;
			}
			this.factory = null;
			let res;
			if (this.throwOnError && statusCode >= 400) {
				const parsedHeaders = responseHeaders === "raw" ? util$23.parseHeaders(rawHeaders) : headers;
				const contentType$1 = parsedHeaders["content-type"];
				res = new PassThrough$3();
				this.callback = null;
				this.runInAsyncScope(getResolveErrorBodyCallback, null, {
					callback,
					body: res,
					contentType: contentType$1,
					statusCode,
					statusMessage,
					headers
				});
			} else {
				if (factory === null) return;
				res = this.runInAsyncScope(factory, null, {
					statusCode,
					headers,
					opaque,
					context
				});
				if (!res || typeof res.write !== "function" || typeof res.end !== "function" || typeof res.on !== "function") throw new InvalidReturnValueError$1("expected Writable");
				finished$1(res, { readable: false }, (err) => {
					const { callback: callback$1, res: res$1, opaque: opaque$1, trailers, abort: abort$4 } = this;
					this.res = null;
					if (err || !res$1.readable) util$23.destroy(res$1, err);
					this.callback = null;
					this.runInAsyncScope(callback$1, null, err || null, {
						opaque: opaque$1,
						trailers
					});
					if (err) abort$4();
				});
			}
			res.on("drain", resume$2);
			this.res = res;
			const needDrain = res.writableNeedDrain !== void 0 ? res.writableNeedDrain : res._writableState && res._writableState.needDrain;
			return needDrain !== true;
		}
		onData(chunk) {
			const { res } = this;
			return res ? res.write(chunk) : true;
		}
		onComplete(trailers) {
			const { res } = this;
			removeSignal$3(this);
			if (!res) return;
			this.trailers = util$23.parseHeaders(trailers);
			res.end();
		}
		onError(err) {
			const { res, callback, opaque, body } = this;
			removeSignal$3(this);
			this.factory = null;
			if (res) {
				this.res = null;
				util$23.destroy(res, err);
			} else if (callback) {
				this.callback = null;
				queueMicrotask(() => {
					this.runInAsyncScope(callback, null, err, { opaque });
				});
			}
			if (body) {
				this.body = null;
				util$23.destroy(body, err);
			}
		}
	};
	function stream$1(opts, factory, callback) {
		if (callback === void 0) return new Promise((resolve, reject) => {
			stream$1.call(this, opts, factory, (err, data) => {
				return err ? reject(err) : resolve(data);
			});
		});
		try {
			this.dispatch(opts, new StreamHandler(opts, factory, callback));
		} catch (err) {
			if (typeof callback !== "function") throw err;
			const opaque = opts && opts.opaque;
			queueMicrotask(() => callback(err, { opaque }));
		}
	}
	module.exports = stream$1;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/api-pipeline.js
var require_api_pipeline = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/api-pipeline.js"(exports, module) {
	const { Readable: Readable$3, Duplex: Duplex$4, PassThrough: PassThrough$2 } = __require("stream");
	const { InvalidArgumentError: InvalidArgumentError$9, InvalidReturnValueError, RequestAbortedError: RequestAbortedError$3 } = require_errors$2();
	const util$22 = require_util$9();
	const { AsyncResource: AsyncResource$2 } = __require("async_hooks");
	const { addSignal: addSignal$2, removeSignal: removeSignal$2 } = require_abort_signal();
	const assert$16 = __require("assert");
	const kResume = Symbol("resume");
	var PipelineRequest = class extends Readable$3 {
		constructor() {
			super({ autoDestroy: true });
			this[kResume] = null;
		}
		_read() {
			const { [kResume]: resume$2 } = this;
			if (resume$2) {
				this[kResume] = null;
				resume$2();
			}
		}
		_destroy(err, callback) {
			this._read();
			callback(err);
		}
	};
	var PipelineResponse = class extends Readable$3 {
		constructor(resume$2) {
			super({ autoDestroy: true });
			this[kResume] = resume$2;
		}
		_read() {
			this[kResume]();
		}
		_destroy(err, callback) {
			if (!err && !this._readableState.endEmitted) err = new RequestAbortedError$3();
			callback(err);
		}
	};
	var PipelineHandler = class extends AsyncResource$2 {
		constructor(opts, handler) {
			if (!opts || typeof opts !== "object") throw new InvalidArgumentError$9("invalid opts");
			if (typeof handler !== "function") throw new InvalidArgumentError$9("invalid handler");
			const { signal, method: method$1, opaque, onInfo, responseHeaders } = opts;
			if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new InvalidArgumentError$9("signal must be an EventEmitter or EventTarget");
			if (method$1 === "CONNECT") throw new InvalidArgumentError$9("invalid method");
			if (onInfo && typeof onInfo !== "function") throw new InvalidArgumentError$9("invalid onInfo callback");
			super("UNDICI_PIPELINE");
			this.opaque = opaque || null;
			this.responseHeaders = responseHeaders || null;
			this.handler = handler;
			this.abort = null;
			this.context = null;
			this.onInfo = onInfo || null;
			this.req = new PipelineRequest().on("error", util$22.nop);
			this.ret = new Duplex$4({
				readableObjectMode: opts.objectMode,
				autoDestroy: true,
				read: () => {
					const { body } = this;
					if (body && body.resume) body.resume();
				},
				write: (chunk, encoding, callback) => {
					const { req } = this;
					if (req.push(chunk, encoding) || req._readableState.destroyed) callback();
					else req[kResume] = callback;
				},
				destroy: (err, callback) => {
					const { body, req, res, ret, abort: abort$4 } = this;
					if (!err && !ret._readableState.endEmitted) err = new RequestAbortedError$3();
					if (abort$4 && err) abort$4();
					util$22.destroy(body, err);
					util$22.destroy(req, err);
					util$22.destroy(res, err);
					removeSignal$2(this);
					callback(err);
				}
			}).on("prefinish", () => {
				const { req } = this;
				req.push(null);
			});
			this.res = null;
			addSignal$2(this, signal);
		}
		onConnect(abort$4, context) {
			const { ret, res } = this;
			assert$16(!res, "pipeline cannot be retried");
			if (ret.destroyed) throw new RequestAbortedError$3();
			this.abort = abort$4;
			this.context = context;
		}
		onHeaders(statusCode, rawHeaders, resume$2) {
			const { opaque, handler, context } = this;
			if (statusCode < 200) {
				if (this.onInfo) {
					const headers = this.responseHeaders === "raw" ? util$22.parseRawHeaders(rawHeaders) : util$22.parseHeaders(rawHeaders);
					this.onInfo({
						statusCode,
						headers
					});
				}
				return;
			}
			this.res = new PipelineResponse(resume$2);
			let body;
			try {
				this.handler = null;
				const headers = this.responseHeaders === "raw" ? util$22.parseRawHeaders(rawHeaders) : util$22.parseHeaders(rawHeaders);
				body = this.runInAsyncScope(handler, null, {
					statusCode,
					headers,
					opaque,
					body: this.res,
					context
				});
			} catch (err) {
				this.res.on("error", util$22.nop);
				throw err;
			}
			if (!body || typeof body.on !== "function") throw new InvalidReturnValueError("expected Readable");
			body.on("data", (chunk) => {
				const { ret, body: body$1 } = this;
				if (!ret.push(chunk) && body$1.pause) body$1.pause();
			}).on("error", (err) => {
				const { ret } = this;
				util$22.destroy(ret, err);
			}).on("end", () => {
				const { ret } = this;
				ret.push(null);
			}).on("close", () => {
				const { ret } = this;
				if (!ret._readableState.ended) util$22.destroy(ret, new RequestAbortedError$3());
			});
			this.body = body;
		}
		onData(chunk) {
			const { res } = this;
			return res.push(chunk);
		}
		onComplete(trailers) {
			const { res } = this;
			res.push(null);
		}
		onError(err) {
			const { ret } = this;
			this.handler = null;
			util$22.destroy(ret, err);
		}
	};
	function pipeline$2(opts, handler) {
		try {
			const pipelineHandler = new PipelineHandler(opts, handler);
			this.dispatch({
				...opts,
				body: pipelineHandler.req
			}, pipelineHandler);
			return pipelineHandler.ret;
		} catch (err) {
			return new PassThrough$2().destroy(err);
		}
	}
	module.exports = pipeline$2;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/api-upgrade.js
var require_api_upgrade = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/api-upgrade.js"(exports, module) {
	const { InvalidArgumentError: InvalidArgumentError$8, RequestAbortedError: RequestAbortedError$2, SocketError: SocketError$1 } = require_errors$2();
	const { AsyncResource: AsyncResource$1 } = __require("async_hooks");
	const util$21 = require_util$9();
	const { addSignal: addSignal$1, removeSignal: removeSignal$1 } = require_abort_signal();
	const assert$15 = __require("assert");
	var UpgradeHandler = class extends AsyncResource$1 {
		constructor(opts, callback) {
			if (!opts || typeof opts !== "object") throw new InvalidArgumentError$8("invalid opts");
			if (typeof callback !== "function") throw new InvalidArgumentError$8("invalid callback");
			const { signal, opaque, responseHeaders } = opts;
			if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new InvalidArgumentError$8("signal must be an EventEmitter or EventTarget");
			super("UNDICI_UPGRADE");
			this.responseHeaders = responseHeaders || null;
			this.opaque = opaque || null;
			this.callback = callback;
			this.abort = null;
			this.context = null;
			addSignal$1(this, signal);
		}
		onConnect(abort$4, context) {
			if (!this.callback) throw new RequestAbortedError$2();
			this.abort = abort$4;
			this.context = null;
		}
		onHeaders() {
			throw new SocketError$1("bad upgrade", null);
		}
		onUpgrade(statusCode, rawHeaders, socket) {
			const { callback, opaque, context } = this;
			assert$15.strictEqual(statusCode, 101);
			removeSignal$1(this);
			this.callback = null;
			const headers = this.responseHeaders === "raw" ? util$21.parseRawHeaders(rawHeaders) : util$21.parseHeaders(rawHeaders);
			this.runInAsyncScope(callback, null, null, {
				headers,
				socket,
				opaque,
				context
			});
		}
		onError(err) {
			const { callback, opaque } = this;
			removeSignal$1(this);
			if (callback) {
				this.callback = null;
				queueMicrotask(() => {
					this.runInAsyncScope(callback, null, err, { opaque });
				});
			}
		}
	};
	function upgrade(opts, callback) {
		if (callback === void 0) return new Promise((resolve, reject) => {
			upgrade.call(this, opts, (err, data) => {
				return err ? reject(err) : resolve(data);
			});
		});
		try {
			const upgradeHandler = new UpgradeHandler(opts, callback);
			this.dispatch({
				...opts,
				method: opts.method || "GET",
				upgrade: opts.protocol || "Websocket"
			}, upgradeHandler);
		} catch (err) {
			if (typeof callback !== "function") throw err;
			const opaque = opts && opts.opaque;
			queueMicrotask(() => callback(err, { opaque }));
		}
	}
	module.exports = upgrade;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/api-connect.js
var require_api_connect = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/api-connect.js"(exports, module) {
	const { AsyncResource } = __require("async_hooks");
	const { InvalidArgumentError: InvalidArgumentError$7, RequestAbortedError: RequestAbortedError$1, SocketError } = require_errors$2();
	const util$20 = require_util$9();
	const { addSignal, removeSignal } = require_abort_signal();
	var ConnectHandler = class extends AsyncResource {
		constructor(opts, callback) {
			if (!opts || typeof opts !== "object") throw new InvalidArgumentError$7("invalid opts");
			if (typeof callback !== "function") throw new InvalidArgumentError$7("invalid callback");
			const { signal, opaque, responseHeaders } = opts;
			if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") throw new InvalidArgumentError$7("signal must be an EventEmitter or EventTarget");
			super("UNDICI_CONNECT");
			this.opaque = opaque || null;
			this.responseHeaders = responseHeaders || null;
			this.callback = callback;
			this.abort = null;
			addSignal(this, signal);
		}
		onConnect(abort$4, context) {
			if (!this.callback) throw new RequestAbortedError$1();
			this.abort = abort$4;
			this.context = context;
		}
		onHeaders() {
			throw new SocketError("bad connect", null);
		}
		onUpgrade(statusCode, rawHeaders, socket) {
			const { callback, opaque, context } = this;
			removeSignal(this);
			this.callback = null;
			let headers = rawHeaders;
			if (headers != null) headers = this.responseHeaders === "raw" ? util$20.parseRawHeaders(rawHeaders) : util$20.parseHeaders(rawHeaders);
			this.runInAsyncScope(callback, null, null, {
				statusCode,
				headers,
				socket,
				opaque,
				context
			});
		}
		onError(err) {
			const { callback, opaque } = this;
			removeSignal(this);
			if (callback) {
				this.callback = null;
				queueMicrotask(() => {
					this.runInAsyncScope(callback, null, err, { opaque });
				});
			}
		}
	};
	function connect(opts, callback) {
		if (callback === void 0) return new Promise((resolve, reject) => {
			connect.call(this, opts, (err, data) => {
				return err ? reject(err) : resolve(data);
			});
		});
		try {
			const connectHandler = new ConnectHandler(opts, callback);
			this.dispatch({
				...opts,
				method: "CONNECT"
			}, connectHandler);
		} catch (err) {
			if (typeof callback !== "function") throw err;
			const opaque = opts && opts.opaque;
			queueMicrotask(() => callback(err, { opaque }));
		}
	}
	module.exports = connect;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/index.js
var require_api = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/api/index.js"(exports, module) {
	module.exports.request = require_api_request();
	module.exports.stream = require_api_stream();
	module.exports.pipeline = require_api_pipeline();
	module.exports.upgrade = require_api_upgrade();
	module.exports.connect = require_api_connect();
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/mock-errors.js
var require_mock_errors = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/mock-errors.js"(exports, module) {
	const { UndiciError: UndiciError$1 } = require_errors$2();
	var MockNotMatchedError$1 = class MockNotMatchedError$1 extends UndiciError$1 {
		constructor(message) {
			super(message);
			Error.captureStackTrace(this, MockNotMatchedError$1);
			this.name = "MockNotMatchedError";
			this.message = message || "The request does not match any registered mock dispatches";
			this.code = "UND_MOCK_ERR_MOCK_NOT_MATCHED";
		}
	};
	module.exports = { MockNotMatchedError: MockNotMatchedError$1 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/mock-symbols.js
var require_mock_symbols = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/mock-symbols.js"(exports, module) {
	module.exports = {
		kAgent: Symbol("agent"),
		kOptions: Symbol("options"),
		kFactory: Symbol("factory"),
		kDispatches: Symbol("dispatches"),
		kDispatchKey: Symbol("dispatch key"),
		kDefaultHeaders: Symbol("default headers"),
		kDefaultTrailers: Symbol("default trailers"),
		kContentLength: Symbol("content length"),
		kMockAgent: Symbol("mock agent"),
		kMockAgentSet: Symbol("mock agent set"),
		kMockAgentGet: Symbol("mock agent get"),
		kMockDispatch: Symbol("mock dispatch"),
		kClose: Symbol("close"),
		kOriginalClose: Symbol("original agent close"),
		kOrigin: Symbol("origin"),
		kIsMockActive: Symbol("is mock active"),
		kNetConnect: Symbol("net connect"),
		kGetNetConnect: Symbol("get net connect"),
		kConnected: Symbol("connected")
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/mock-utils.js
var require_mock_utils = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/mock-utils.js"(exports, module) {
	const { MockNotMatchedError } = require_mock_errors();
	const { kDispatches: kDispatches$4, kMockAgent: kMockAgent$2, kOriginalDispatch: kOriginalDispatch$2, kOrigin: kOrigin$2, kGetNetConnect: kGetNetConnect$1 } = require_mock_symbols();
	const { buildURL: buildURL$2, nop: nop$1 } = require_util$9();
	const { STATUS_CODES: STATUS_CODES$1 } = __require("http");
	const { types: { isPromise } } = __require("util");
	function matchValue$1(match, value) {
		if (typeof match === "string") return match === value;
		if (match instanceof RegExp) return match.test(value);
		if (typeof match === "function") return match(value) === true;
		return false;
	}
	function lowerCaseEntries(headers) {
		return Object.fromEntries(Object.entries(headers).map(([headerName, headerValue]) => {
			return [headerName.toLocaleLowerCase(), headerValue];
		}));
	}
	/**
	* @param {import('../../index').Headers|string[]|Record<string, string>} headers
	* @param {string} key
	*/
	function getHeaderByName(headers, key$1) {
		if (Array.isArray(headers)) {
			for (let i = 0; i < headers.length; i += 2) if (headers[i].toLocaleLowerCase() === key$1.toLocaleLowerCase()) return headers[i + 1];
			return void 0;
		} else if (typeof headers.get === "function") return headers.get(key$1);
		else return lowerCaseEntries(headers)[key$1.toLocaleLowerCase()];
	}
	/** @param {string[]} headers */
	function buildHeadersFromArray(headers) {
		const clone$1 = headers.slice();
		const entries = [];
		for (let index = 0; index < clone$1.length; index += 2) entries.push([clone$1[index], clone$1[index + 1]]);
		return Object.fromEntries(entries);
	}
	function matchHeaders(mockDispatch$1, headers) {
		if (typeof mockDispatch$1.headers === "function") {
			if (Array.isArray(headers)) headers = buildHeadersFromArray(headers);
			return mockDispatch$1.headers(headers ? lowerCaseEntries(headers) : {});
		}
		if (typeof mockDispatch$1.headers === "undefined") return true;
		if (typeof headers !== "object" || typeof mockDispatch$1.headers !== "object") return false;
		for (const [matchHeaderName, matchHeaderValue$1] of Object.entries(mockDispatch$1.headers)) {
			const headerValue = getHeaderByName(headers, matchHeaderName);
			if (!matchValue$1(matchHeaderValue$1, headerValue)) return false;
		}
		return true;
	}
	function safeUrl(path$10) {
		if (typeof path$10 !== "string") return path$10;
		const pathSegments = path$10.split("?");
		if (pathSegments.length !== 2) return path$10;
		const qp = new URLSearchParams(pathSegments.pop());
		qp.sort();
		return [...pathSegments, qp.toString()].join("?");
	}
	function matchKey(mockDispatch$1, { path: path$10, method: method$1, body, headers }) {
		const pathMatch = matchValue$1(mockDispatch$1.path, path$10);
		const methodMatch = matchValue$1(mockDispatch$1.method, method$1);
		const bodyMatch = typeof mockDispatch$1.body !== "undefined" ? matchValue$1(mockDispatch$1.body, body) : true;
		const headersMatch = matchHeaders(mockDispatch$1, headers);
		return pathMatch && methodMatch && bodyMatch && headersMatch;
	}
	function getResponseData$1(data) {
		if (Buffer.isBuffer(data)) return data;
		else if (typeof data === "object") return JSON.stringify(data);
		else return data.toString();
	}
	function getMockDispatch(mockDispatches, key$1) {
		const basePath = key$1.query ? buildURL$2(key$1.path, key$1.query) : key$1.path;
		const resolvedPath = typeof basePath === "string" ? safeUrl(basePath) : basePath;
		let matchedMockDispatches = mockDispatches.filter(({ consumed }) => !consumed).filter(({ path: path$10 }) => matchValue$1(safeUrl(path$10), resolvedPath));
		if (matchedMockDispatches.length === 0) throw new MockNotMatchedError(`Mock dispatch not matched for path '${resolvedPath}'`);
		matchedMockDispatches = matchedMockDispatches.filter(({ method: method$1 }) => matchValue$1(method$1, key$1.method));
		if (matchedMockDispatches.length === 0) throw new MockNotMatchedError(`Mock dispatch not matched for method '${key$1.method}'`);
		matchedMockDispatches = matchedMockDispatches.filter(({ body }) => typeof body !== "undefined" ? matchValue$1(body, key$1.body) : true);
		if (matchedMockDispatches.length === 0) throw new MockNotMatchedError(`Mock dispatch not matched for body '${key$1.body}'`);
		matchedMockDispatches = matchedMockDispatches.filter((mockDispatch$1) => matchHeaders(mockDispatch$1, key$1.headers));
		if (matchedMockDispatches.length === 0) throw new MockNotMatchedError(`Mock dispatch not matched for headers '${typeof key$1.headers === "object" ? JSON.stringify(key$1.headers) : key$1.headers}'`);
		return matchedMockDispatches[0];
	}
	function addMockDispatch$1(mockDispatches, key$1, data) {
		const baseData = {
			timesInvoked: 0,
			times: 1,
			persist: false,
			consumed: false
		};
		const replyData = typeof data === "function" ? { callback: data } : { ...data };
		const newMockDispatch = {
			...baseData,
			...key$1,
			pending: true,
			data: {
				error: null,
				...replyData
			}
		};
		mockDispatches.push(newMockDispatch);
		return newMockDispatch;
	}
	function deleteMockDispatch(mockDispatches, key$1) {
		const index = mockDispatches.findIndex((dispatch) => {
			if (!dispatch.consumed) return false;
			return matchKey(dispatch, key$1);
		});
		if (index !== -1) mockDispatches.splice(index, 1);
	}
	function buildKey$1(opts) {
		const { path: path$10, method: method$1, body, headers, query } = opts;
		return {
			path: path$10,
			method: method$1,
			body,
			headers,
			query
		};
	}
	function generateKeyValues(data) {
		return Object.entries(data).reduce((keyValuePairs, [key$1, value]) => [
			...keyValuePairs,
			Buffer.from(`${key$1}`),
			Array.isArray(value) ? value.map((x) => Buffer.from(`${x}`)) : Buffer.from(`${value}`)
		], []);
	}
	/**
	* @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status
	* @param {number} statusCode
	*/
	function getStatusText(statusCode) {
		return STATUS_CODES$1[statusCode] || "unknown";
	}
	async function getResponse(body) {
		const buffers = [];
		for await (const data of body) buffers.push(data);
		return Buffer.concat(buffers).toString("utf8");
	}
	/**
	* Mock dispatch function used to simulate undici dispatches
	*/
	function mockDispatch(opts, handler) {
		const key$1 = buildKey$1(opts);
		const mockDispatch$1 = getMockDispatch(this[kDispatches$4], key$1);
		mockDispatch$1.timesInvoked++;
		if (mockDispatch$1.data.callback) mockDispatch$1.data = {
			...mockDispatch$1.data,
			...mockDispatch$1.data.callback(opts)
		};
		const { data: { statusCode, data, headers, trailers, error: error$1 }, delay, persist } = mockDispatch$1;
		const { timesInvoked, times } = mockDispatch$1;
		mockDispatch$1.consumed = !persist && timesInvoked >= times;
		mockDispatch$1.pending = timesInvoked < times;
		if (error$1 !== null) {
			deleteMockDispatch(this[kDispatches$4], key$1);
			handler.onError(error$1);
			return true;
		}
		if (typeof delay === "number" && delay > 0) setTimeout(() => {
			handleReply(this[kDispatches$4]);
		}, delay);
		else handleReply(this[kDispatches$4]);
		function handleReply(mockDispatches, _data = data) {
			const optsHeaders = Array.isArray(opts.headers) ? buildHeadersFromArray(opts.headers) : opts.headers;
			const body = typeof _data === "function" ? _data({
				...opts,
				headers: optsHeaders
			}) : _data;
			if (isPromise(body)) {
				body.then((newData) => handleReply(mockDispatches, newData));
				return;
			}
			const responseData = getResponseData$1(body);
			const responseHeaders = generateKeyValues(headers);
			const responseTrailers = generateKeyValues(trailers);
			handler.abort = nop$1;
			handler.onHeaders(statusCode, responseHeaders, resume$2, getStatusText(statusCode));
			handler.onData(Buffer.from(responseData));
			handler.onComplete(responseTrailers);
			deleteMockDispatch(mockDispatches, key$1);
		}
		function resume$2() {}
		return true;
	}
	function buildMockDispatch$2() {
		const agent = this[kMockAgent$2];
		const origin$1 = this[kOrigin$2];
		const originalDispatch = this[kOriginalDispatch$2];
		return function dispatch(opts, handler) {
			if (agent.isMockActive) try {
				mockDispatch.call(this, opts, handler);
			} catch (error$1) {
				if (error$1 instanceof MockNotMatchedError) {
					const netConnect = agent[kGetNetConnect$1]();
					if (netConnect === false) throw new MockNotMatchedError(`${error$1.message}: subsequent request to origin ${origin$1} was not allowed (net.connect disabled)`);
					if (checkNetConnect(netConnect, origin$1)) originalDispatch.call(this, opts, handler);
					else throw new MockNotMatchedError(`${error$1.message}: subsequent request to origin ${origin$1} was not allowed (net.connect is not enabled for this origin)`);
				} else throw error$1;
			}
			else originalDispatch.call(this, opts, handler);
		};
	}
	function checkNetConnect(netConnect, origin$1) {
		const url$3 = new URL(origin$1);
		if (netConnect === true) return true;
		else if (Array.isArray(netConnect) && netConnect.some((matcher) => matchValue$1(matcher, url$3.host))) return true;
		return false;
	}
	function buildMockOptions$1(opts) {
		if (opts) {
			const { agent,...mockOptions } = opts;
			return mockOptions;
		}
	}
	module.exports = {
		getResponseData: getResponseData$1,
		getMockDispatch,
		addMockDispatch: addMockDispatch$1,
		deleteMockDispatch,
		buildKey: buildKey$1,
		generateKeyValues,
		matchValue: matchValue$1,
		getResponse,
		getStatusText,
		mockDispatch,
		buildMockDispatch: buildMockDispatch$2,
		checkNetConnect,
		buildMockOptions: buildMockOptions$1,
		getHeaderByName
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/mock-interceptor.js
var require_mock_interceptor = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/mock-interceptor.js"(exports, module) {
	const { getResponseData, buildKey, addMockDispatch } = require_mock_utils();
	const { kDispatches: kDispatches$3, kDispatchKey, kDefaultHeaders, kDefaultTrailers, kContentLength, kMockDispatch } = require_mock_symbols();
	const { InvalidArgumentError: InvalidArgumentError$6 } = require_errors$2();
	const { buildURL: buildURL$1 } = require_util$9();
	/**
	* Defines the scope API for an interceptor reply
	*/
	var MockScope = class {
		constructor(mockDispatch$1) {
			this[kMockDispatch] = mockDispatch$1;
		}
		/**
		* Delay a reply by a set amount in ms.
		*/
		delay(waitInMs) {
			if (typeof waitInMs !== "number" || !Number.isInteger(waitInMs) || waitInMs <= 0) throw new InvalidArgumentError$6("waitInMs must be a valid integer > 0");
			this[kMockDispatch].delay = waitInMs;
			return this;
		}
		/**
		* For a defined reply, never mark as consumed.
		*/
		persist() {
			this[kMockDispatch].persist = true;
			return this;
		}
		/**
		* Allow one to define a reply for a set amount of matching requests.
		*/
		times(repeatTimes) {
			if (typeof repeatTimes !== "number" || !Number.isInteger(repeatTimes) || repeatTimes <= 0) throw new InvalidArgumentError$6("repeatTimes must be a valid integer > 0");
			this[kMockDispatch].times = repeatTimes;
			return this;
		}
	};
	/**
	* Defines an interceptor for a Mock
	*/
	var MockInterceptor$2 = class {
		constructor(opts, mockDispatches) {
			if (typeof opts !== "object") throw new InvalidArgumentError$6("opts must be an object");
			if (typeof opts.path === "undefined") throw new InvalidArgumentError$6("opts.path must be defined");
			if (typeof opts.method === "undefined") opts.method = "GET";
			if (typeof opts.path === "string") if (opts.query) opts.path = buildURL$1(opts.path, opts.query);
			else {
				const parsedURL = new URL(opts.path, "data://");
				opts.path = parsedURL.pathname + parsedURL.search;
			}
			if (typeof opts.method === "string") opts.method = opts.method.toUpperCase();
			this[kDispatchKey] = buildKey(opts);
			this[kDispatches$3] = mockDispatches;
			this[kDefaultHeaders] = {};
			this[kDefaultTrailers] = {};
			this[kContentLength] = false;
		}
		createMockScopeDispatchData(statusCode, data, responseOptions = {}) {
			const responseData = getResponseData(data);
			const contentLength = this[kContentLength] ? { "content-length": responseData.length } : {};
			const headers = {
				...this[kDefaultHeaders],
				...contentLength,
				...responseOptions.headers
			};
			const trailers = {
				...this[kDefaultTrailers],
				...responseOptions.trailers
			};
			return {
				statusCode,
				data,
				headers,
				trailers
			};
		}
		validateReplyParameters(statusCode, data, responseOptions) {
			if (typeof statusCode === "undefined") throw new InvalidArgumentError$6("statusCode must be defined");
			if (typeof data === "undefined") throw new InvalidArgumentError$6("data must be defined");
			if (typeof responseOptions !== "object") throw new InvalidArgumentError$6("responseOptions must be an object");
		}
		/**
		* Mock an undici request with a defined reply.
		*/
		reply(replyData) {
			if (typeof replyData === "function") {
				const wrappedDefaultsCallback = (opts) => {
					const resolvedData = replyData(opts);
					if (typeof resolvedData !== "object") throw new InvalidArgumentError$6("reply options callback must return an object");
					const { statusCode: statusCode$1, data: data$1 = "", responseOptions: responseOptions$1 = {} } = resolvedData;
					this.validateReplyParameters(statusCode$1, data$1, responseOptions$1);
					return { ...this.createMockScopeDispatchData(statusCode$1, data$1, responseOptions$1) };
				};
				const newMockDispatch$1 = addMockDispatch(this[kDispatches$3], this[kDispatchKey], wrappedDefaultsCallback);
				return new MockScope(newMockDispatch$1);
			}
			const [statusCode, data = "", responseOptions = {}] = [...arguments];
			this.validateReplyParameters(statusCode, data, responseOptions);
			const dispatchData = this.createMockScopeDispatchData(statusCode, data, responseOptions);
			const newMockDispatch = addMockDispatch(this[kDispatches$3], this[kDispatchKey], dispatchData);
			return new MockScope(newMockDispatch);
		}
		/**
		* Mock an undici request with a defined error.
		*/
		replyWithError(error$1) {
			if (typeof error$1 === "undefined") throw new InvalidArgumentError$6("error must be defined");
			const newMockDispatch = addMockDispatch(this[kDispatches$3], this[kDispatchKey], { error: error$1 });
			return new MockScope(newMockDispatch);
		}
		/**
		* Set default reply headers on the interceptor for subsequent replies
		*/
		defaultReplyHeaders(headers) {
			if (typeof headers === "undefined") throw new InvalidArgumentError$6("headers must be defined");
			this[kDefaultHeaders] = headers;
			return this;
		}
		/**
		* Set default reply trailers on the interceptor for subsequent replies
		*/
		defaultReplyTrailers(trailers) {
			if (typeof trailers === "undefined") throw new InvalidArgumentError$6("trailers must be defined");
			this[kDefaultTrailers] = trailers;
			return this;
		}
		/**
		* Set reply content length header for replies on the interceptor
		*/
		replyContentLength() {
			this[kContentLength] = true;
			return this;
		}
	};
	module.exports.MockInterceptor = MockInterceptor$2;
	module.exports.MockScope = MockScope;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/mock-client.js
var require_mock_client = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/mock-client.js"(exports, module) {
	const { promisify: promisify$1 } = __require("util");
	const Client$1 = require_client();
	const { buildMockDispatch: buildMockDispatch$1 } = require_mock_utils();
	const { kDispatches: kDispatches$2, kMockAgent: kMockAgent$1, kClose: kClose$2, kOriginalClose: kOriginalClose$1, kOrigin: kOrigin$1, kOriginalDispatch: kOriginalDispatch$1, kConnected: kConnected$1 } = require_mock_symbols();
	const { MockInterceptor: MockInterceptor$1 } = require_mock_interceptor();
	const Symbols$1 = require_symbols$4();
	const { InvalidArgumentError: InvalidArgumentError$5 } = require_errors$2();
	/**
	* MockClient provides an API that extends the Client to influence the mockDispatches.
	*/
	var MockClient$2 = class extends Client$1 {
		constructor(origin$1, opts) {
			super(origin$1, opts);
			if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") throw new InvalidArgumentError$5("Argument opts.agent must implement Agent");
			this[kMockAgent$1] = opts.agent;
			this[kOrigin$1] = origin$1;
			this[kDispatches$2] = [];
			this[kConnected$1] = 1;
			this[kOriginalDispatch$1] = this.dispatch;
			this[kOriginalClose$1] = this.close.bind(this);
			this.dispatch = buildMockDispatch$1.call(this);
			this.close = this[kClose$2];
		}
		get [Symbols$1.kConnected]() {
			return this[kConnected$1];
		}
		/**
		* Sets up the base interceptor for mocking replies from undici.
		*/
		intercept(opts) {
			return new MockInterceptor$1(opts, this[kDispatches$2]);
		}
		async [kClose$2]() {
			await promisify$1(this[kOriginalClose$1])();
			this[kConnected$1] = 0;
			this[kMockAgent$1][Symbols$1.kClients].delete(this[kOrigin$1]);
		}
	};
	module.exports = MockClient$2;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/mock-pool.js
var require_mock_pool = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/mock-pool.js"(exports, module) {
	const { promisify } = __require("util");
	const Pool$2 = require_pool();
	const { buildMockDispatch } = require_mock_utils();
	const { kDispatches: kDispatches$1, kMockAgent, kClose: kClose$1, kOriginalClose, kOrigin, kOriginalDispatch, kConnected } = require_mock_symbols();
	const { MockInterceptor } = require_mock_interceptor();
	const Symbols = require_symbols$4();
	const { InvalidArgumentError: InvalidArgumentError$4 } = require_errors$2();
	/**
	* MockPool provides an API that extends the Pool to influence the mockDispatches.
	*/
	var MockPool$2 = class extends Pool$2 {
		constructor(origin$1, opts) {
			super(origin$1, opts);
			if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") throw new InvalidArgumentError$4("Argument opts.agent must implement Agent");
			this[kMockAgent] = opts.agent;
			this[kOrigin] = origin$1;
			this[kDispatches$1] = [];
			this[kConnected] = 1;
			this[kOriginalDispatch] = this.dispatch;
			this[kOriginalClose] = this.close.bind(this);
			this.dispatch = buildMockDispatch.call(this);
			this.close = this[kClose$1];
		}
		get [Symbols.kConnected]() {
			return this[kConnected];
		}
		/**
		* Sets up the base interceptor for mocking replies from undici.
		*/
		intercept(opts) {
			return new MockInterceptor(opts, this[kDispatches$1]);
		}
		async [kClose$1]() {
			await promisify(this[kOriginalClose])();
			this[kConnected] = 0;
			this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
		}
	};
	module.exports = MockPool$2;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/pluralizer.js
var require_pluralizer = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/pluralizer.js"(exports, module) {
	const singulars = {
		pronoun: "it",
		is: "is",
		was: "was",
		this: "this"
	};
	const plurals = {
		pronoun: "they",
		is: "are",
		was: "were",
		this: "these"
	};
	module.exports = class Pluralizer$1 {
		constructor(singular, plural$1) {
			this.singular = singular;
			this.plural = plural$1;
		}
		pluralize(count) {
			const one = count === 1;
			const keys$2 = one ? singulars : plurals;
			const noun = one ? this.singular : this.plural;
			return {
				...keys$2,
				count,
				noun
			};
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/pending-interceptors-formatter.js
var require_pending_interceptors_formatter = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/pending-interceptors-formatter.js"(exports, module) {
	const { Transform: Transform$3 } = __require("stream");
	const { Console } = __require("console");
	/**
	* Gets the output of `console.table(…)` as a string.
	*/
	module.exports = class PendingInterceptorsFormatter$1 {
		constructor({ disableColors } = {}) {
			this.transform = new Transform$3({ transform(chunk, _enc, cb) {
				cb(null, chunk);
			} });
			this.logger = new Console({
				stdout: this.transform,
				inspectOptions: { colors: !disableColors && !process.env.CI }
			});
		}
		format(pendingInterceptors) {
			const withPrettyHeaders = pendingInterceptors.map(({ method: method$1, path: path$10, data: { statusCode }, persist, times, timesInvoked, origin: origin$1 }) => ({
				Method: method$1,
				Origin: origin$1,
				Path: path$10,
				"Status code": statusCode,
				Persistent: persist ? "✅" : "❌",
				Invocations: timesInvoked,
				Remaining: persist ? Infinity : times - timesInvoked
			}));
			this.logger.table(withPrettyHeaders);
			return this.transform.read().toString();
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/mock-agent.js
var require_mock_agent = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/mock/mock-agent.js"(exports, module) {
	const { kClients } = require_symbols$4();
	const Agent$4 = require_agent();
	const { kAgent: kAgent$1, kMockAgentSet, kMockAgentGet, kDispatches, kIsMockActive, kNetConnect, kGetNetConnect, kOptions, kFactory } = require_mock_symbols();
	const MockClient$1 = require_mock_client();
	const MockPool$1 = require_mock_pool();
	const { matchValue, buildMockOptions } = require_mock_utils();
	const { InvalidArgumentError: InvalidArgumentError$3, UndiciError } = require_errors$2();
	const Dispatcher$1 = require_dispatcher();
	const Pluralizer = require_pluralizer();
	const PendingInterceptorsFormatter = require_pending_interceptors_formatter();
	var FakeWeakRef = class {
		constructor(value) {
			this.value = value;
		}
		deref() {
			return this.value;
		}
	};
	var MockAgent$1 = class extends Dispatcher$1 {
		constructor(opts) {
			super(opts);
			this[kNetConnect] = true;
			this[kIsMockActive] = true;
			if (opts && opts.agent && typeof opts.agent.dispatch !== "function") throw new InvalidArgumentError$3("Argument opts.agent must implement Agent");
			const agent = opts && opts.agent ? opts.agent : new Agent$4(opts);
			this[kAgent$1] = agent;
			this[kClients] = agent[kClients];
			this[kOptions] = buildMockOptions(opts);
		}
		get(origin$1) {
			let dispatcher = this[kMockAgentGet](origin$1);
			if (!dispatcher) {
				dispatcher = this[kFactory](origin$1);
				this[kMockAgentSet](origin$1, dispatcher);
			}
			return dispatcher;
		}
		dispatch(opts, handler) {
			this.get(opts.origin);
			return this[kAgent$1].dispatch(opts, handler);
		}
		async close() {
			await this[kAgent$1].close();
			this[kClients].clear();
		}
		deactivate() {
			this[kIsMockActive] = false;
		}
		activate() {
			this[kIsMockActive] = true;
		}
		enableNetConnect(matcher) {
			if (typeof matcher === "string" || typeof matcher === "function" || matcher instanceof RegExp) if (Array.isArray(this[kNetConnect])) this[kNetConnect].push(matcher);
			else this[kNetConnect] = [matcher];
			else if (typeof matcher === "undefined") this[kNetConnect] = true;
			else throw new InvalidArgumentError$3("Unsupported matcher. Must be one of String|Function|RegExp.");
		}
		disableNetConnect() {
			this[kNetConnect] = false;
		}
		get isMockActive() {
			return this[kIsMockActive];
		}
		[kMockAgentSet](origin$1, dispatcher) {
			this[kClients].set(origin$1, new FakeWeakRef(dispatcher));
		}
		[kFactory](origin$1) {
			const mockOptions = Object.assign({ agent: this }, this[kOptions]);
			return this[kOptions] && this[kOptions].connections === 1 ? new MockClient$1(origin$1, mockOptions) : new MockPool$1(origin$1, mockOptions);
		}
		[kMockAgentGet](origin$1) {
			const ref = this[kClients].get(origin$1);
			if (ref) return ref.deref();
			if (typeof origin$1 !== "string") {
				const dispatcher = this[kFactory]("http://localhost:9999");
				this[kMockAgentSet](origin$1, dispatcher);
				return dispatcher;
			}
			for (const [keyMatcher, nonExplicitRef] of Array.from(this[kClients])) {
				const nonExplicitDispatcher = nonExplicitRef.deref();
				if (nonExplicitDispatcher && typeof keyMatcher !== "string" && matchValue(keyMatcher, origin$1)) {
					const dispatcher = this[kFactory](origin$1);
					this[kMockAgentSet](origin$1, dispatcher);
					dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches];
					return dispatcher;
				}
			}
		}
		[kGetNetConnect]() {
			return this[kNetConnect];
		}
		pendingInterceptors() {
			const mockAgentClients = this[kClients];
			return Array.from(mockAgentClients.entries()).flatMap(([origin$1, scope]) => scope.deref()[kDispatches].map((dispatch) => ({
				...dispatch,
				origin: origin$1
			}))).filter(({ pending }) => pending);
		}
		assertNoPendingInterceptors({ pendingInterceptorsFormatter = new PendingInterceptorsFormatter() } = {}) {
			const pending = this.pendingInterceptors();
			if (pending.length === 0) return;
			const pluralizer = new Pluralizer("interceptor", "interceptors").pluralize(pending.length);
			throw new UndiciError(`
${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:

${pendingInterceptorsFormatter.format(pending)}
`.trim());
		}
	};
	module.exports = MockAgent$1;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/proxy-agent.js
var require_proxy_agent = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/proxy-agent.js"(exports, module) {
	const { kProxy, kClose, kDestroy, kInterceptors } = require_symbols$4();
	const { URL: URL$3 } = __require("url");
	const Agent$3 = require_agent();
	const Pool$1 = require_pool();
	const DispatcherBase = require_dispatcher_base();
	const { InvalidArgumentError: InvalidArgumentError$2, RequestAbortedError } = require_errors$2();
	const buildConnector$1 = require_connect();
	const kAgent = Symbol("proxy agent");
	const kClient = Symbol("proxy client");
	const kProxyHeaders = Symbol("proxy headers");
	const kRequestTls = Symbol("request tls settings");
	const kProxyTls = Symbol("proxy tls settings");
	const kConnectEndpoint = Symbol("connect endpoint function");
	function defaultProtocolPort(protocol) {
		return protocol === "https:" ? 443 : 80;
	}
	function buildProxyOptions(opts) {
		if (typeof opts === "string") opts = { uri: opts };
		if (!opts || !opts.uri) throw new InvalidArgumentError$2("Proxy opts.uri is mandatory");
		return {
			uri: opts.uri,
			protocol: opts.protocol || "https"
		};
	}
	function defaultFactory(origin$1, opts) {
		return new Pool$1(origin$1, opts);
	}
	var ProxyAgent$1 = class extends DispatcherBase {
		constructor(opts) {
			super(opts);
			this[kProxy] = buildProxyOptions(opts);
			this[kAgent] = new Agent$3(opts);
			this[kInterceptors] = opts.interceptors && opts.interceptors.ProxyAgent && Array.isArray(opts.interceptors.ProxyAgent) ? opts.interceptors.ProxyAgent : [];
			if (typeof opts === "string") opts = { uri: opts };
			if (!opts || !opts.uri) throw new InvalidArgumentError$2("Proxy opts.uri is mandatory");
			const { clientFactory = defaultFactory } = opts;
			if (typeof clientFactory !== "function") throw new InvalidArgumentError$2("Proxy opts.clientFactory must be a function.");
			this[kRequestTls] = opts.requestTls;
			this[kProxyTls] = opts.proxyTls;
			this[kProxyHeaders] = opts.headers || {};
			const resolvedUrl = new URL$3(opts.uri);
			const { origin: origin$1, port, host, username, password } = resolvedUrl;
			if (opts.auth && opts.token) throw new InvalidArgumentError$2("opts.auth cannot be used in combination with opts.token");
			else if (opts.auth) this[kProxyHeaders]["proxy-authorization"] = `Basic ${opts.auth}`;
			else if (opts.token) this[kProxyHeaders]["proxy-authorization"] = opts.token;
			else if (username && password) this[kProxyHeaders]["proxy-authorization"] = `Basic ${Buffer.from(`${decodeURIComponent(username)}:${decodeURIComponent(password)}`).toString("base64")}`;
			const connect$2 = buildConnector$1({ ...opts.proxyTls });
			this[kConnectEndpoint] = buildConnector$1({ ...opts.requestTls });
			this[kClient] = clientFactory(resolvedUrl, { connect: connect$2 });
			this[kAgent] = new Agent$3({
				...opts,
				connect: async (opts$1, callback) => {
					let requestedHost = opts$1.host;
					if (!opts$1.port) requestedHost += `:${defaultProtocolPort(opts$1.protocol)}`;
					try {
						const { socket, statusCode } = await this[kClient].connect({
							origin: origin$1,
							port,
							path: requestedHost,
							signal: opts$1.signal,
							headers: {
								...this[kProxyHeaders],
								host
							}
						});
						if (statusCode !== 200) {
							socket.on("error", () => {}).destroy();
							callback(new RequestAbortedError(`Proxy response (${statusCode}) !== 200 when HTTP Tunneling`));
						}
						if (opts$1.protocol !== "https:") {
							callback(null, socket);
							return;
						}
						let servername;
						if (this[kRequestTls]) servername = this[kRequestTls].servername;
						else servername = opts$1.servername;
						this[kConnectEndpoint]({
							...opts$1,
							servername,
							httpSocket: socket
						}, callback);
					} catch (err) {
						callback(err);
					}
				}
			});
		}
		dispatch(opts, handler) {
			const { host } = new URL$3(opts.origin);
			const headers = buildHeaders$1(opts.headers);
			throwIfProxyAuthIsSent(headers);
			return this[kAgent].dispatch({
				...opts,
				headers: {
					...headers,
					host
				}
			}, handler);
		}
		async [kClose]() {
			await this[kAgent].close();
			await this[kClient].close();
		}
		async [kDestroy]() {
			await this[kAgent].destroy();
			await this[kClient].destroy();
		}
	};
	/**
	* @param {string[] | Record<string, string>} headers
	* @returns {Record<string, string>}
	*/
	function buildHeaders$1(headers) {
		if (Array.isArray(headers)) {
			/** @type {Record<string, string>} */
			const headersPair = {};
			for (let i = 0; i < headers.length; i += 2) headersPair[headers[i]] = headers[i + 1];
			return headersPair;
		}
		return headers;
	}
	/**
	* @param {Record<string, string>} headers
	*
	* Previous versions of ProxyAgent suggests the Proxy-Authorization in request headers
	* Nevertheless, it was changed and to avoid a security vulnerability by end users
	* this check was created.
	* It should be removed in the next major version for performance reasons
	*/
	function throwIfProxyAuthIsSent(headers) {
		const existProxyAuth = headers && Object.keys(headers).find((key$1) => key$1.toLowerCase() === "proxy-authorization");
		if (existProxyAuth) throw new InvalidArgumentError$2("Proxy-Authorization should be sent in ProxyAgent constructor");
	}
	module.exports = ProxyAgent$1;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/handler/RetryHandler.js
var require_RetryHandler = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/handler/RetryHandler.js"(exports, module) {
	const assert$14 = __require("assert");
	const { kRetryHandlerDefaultRetry } = require_symbols$4();
	const { RequestRetryError } = require_errors$2();
	const { isDisturbed: isDisturbed$1, parseHeaders: parseHeaders$1, parseRangeHeader } = require_util$9();
	function calculateRetryAfterHeader(retryAfter) {
		const current = Date.now();
		const diff$2 = new Date(retryAfter).getTime() - current;
		return diff$2;
	}
	var RetryHandler$1 = class RetryHandler$1 {
		constructor(opts, handlers) {
			const { retryOptions,...dispatchOpts } = opts;
			const { retry: retryFn, maxRetries, maxTimeout, minTimeout, timeoutFactor, methods, errorCodes, retryAfter, statusCodes } = retryOptions ?? {};
			this.dispatch = handlers.dispatch;
			this.handler = handlers.handler;
			this.opts = dispatchOpts;
			this.abort = null;
			this.aborted = false;
			this.retryOpts = {
				retry: retryFn ?? RetryHandler$1[kRetryHandlerDefaultRetry],
				retryAfter: retryAfter ?? true,
				maxTimeout: maxTimeout ?? 30 * 1e3,
				timeout: minTimeout ?? 500,
				timeoutFactor: timeoutFactor ?? 2,
				maxRetries: maxRetries ?? 5,
				methods: methods ?? [
					"GET",
					"HEAD",
					"OPTIONS",
					"PUT",
					"DELETE",
					"TRACE"
				],
				statusCodes: statusCodes ?? [
					500,
					502,
					503,
					504,
					429
				],
				errorCodes: errorCodes ?? [
					"ECONNRESET",
					"ECONNREFUSED",
					"ENOTFOUND",
					"ENETDOWN",
					"ENETUNREACH",
					"EHOSTDOWN",
					"EHOSTUNREACH",
					"EPIPE"
				]
			};
			this.retryCount = 0;
			this.start = 0;
			this.end = null;
			this.etag = null;
			this.resume = null;
			this.handler.onConnect((reason) => {
				this.aborted = true;
				if (this.abort) this.abort(reason);
				else this.reason = reason;
			});
		}
		onRequestSent() {
			if (this.handler.onRequestSent) this.handler.onRequestSent();
		}
		onUpgrade(statusCode, headers, socket) {
			if (this.handler.onUpgrade) this.handler.onUpgrade(statusCode, headers, socket);
		}
		onConnect(abort$4) {
			if (this.aborted) abort$4(this.reason);
			else this.abort = abort$4;
		}
		onBodySent(chunk) {
			if (this.handler.onBodySent) return this.handler.onBodySent(chunk);
		}
		static [kRetryHandlerDefaultRetry](err, { state: state$1, opts }, cb) {
			const { statusCode, code, headers } = err;
			const { method: method$1, retryOptions } = opts;
			const { maxRetries, timeout: timeout$1, maxTimeout, timeoutFactor, statusCodes, errorCodes, methods } = retryOptions;
			let { counter, currentTimeout } = state$1;
			currentTimeout = currentTimeout != null && currentTimeout > 0 ? currentTimeout : timeout$1;
			if (code && code !== "UND_ERR_REQ_RETRY" && code !== "UND_ERR_SOCKET" && !errorCodes.includes(code)) {
				cb(err);
				return;
			}
			if (Array.isArray(methods) && !methods.includes(method$1)) {
				cb(err);
				return;
			}
			if (statusCode != null && Array.isArray(statusCodes) && !statusCodes.includes(statusCode)) {
				cb(err);
				return;
			}
			if (counter > maxRetries) {
				cb(err);
				return;
			}
			let retryAfterHeader = headers != null && headers["retry-after"];
			if (retryAfterHeader) {
				retryAfterHeader = Number(retryAfterHeader);
				retryAfterHeader = isNaN(retryAfterHeader) ? calculateRetryAfterHeader(retryAfterHeader) : retryAfterHeader * 1e3;
			}
			const retryTimeout = retryAfterHeader > 0 ? Math.min(retryAfterHeader, maxTimeout) : Math.min(currentTimeout * timeoutFactor ** counter, maxTimeout);
			state$1.currentTimeout = retryTimeout;
			setTimeout(() => cb(null), retryTimeout);
		}
		onHeaders(statusCode, rawHeaders, resume$2, statusMessage) {
			const headers = parseHeaders$1(rawHeaders);
			this.retryCount += 1;
			if (statusCode >= 300) {
				this.abort(new RequestRetryError("Request failed", statusCode, {
					headers,
					count: this.retryCount
				}));
				return false;
			}
			if (this.resume != null) {
				this.resume = null;
				if (statusCode !== 206) return true;
				const contentRange = parseRangeHeader(headers["content-range"]);
				if (!contentRange) {
					this.abort(new RequestRetryError("Content-Range mismatch", statusCode, {
						headers,
						count: this.retryCount
					}));
					return false;
				}
				if (this.etag != null && this.etag !== headers.etag) {
					this.abort(new RequestRetryError("ETag mismatch", statusCode, {
						headers,
						count: this.retryCount
					}));
					return false;
				}
				const { start, size, end = size } = contentRange;
				assert$14(this.start === start, "content-range mismatch");
				assert$14(this.end == null || this.end === end, "content-range mismatch");
				this.resume = resume$2;
				return true;
			}
			if (this.end == null) {
				if (statusCode === 206) {
					const range = parseRangeHeader(headers["content-range"]);
					if (range == null) return this.handler.onHeaders(statusCode, rawHeaders, resume$2, statusMessage);
					const { start, size, end = size } = range;
					assert$14(start != null && Number.isFinite(start) && this.start !== start, "content-range mismatch");
					assert$14(Number.isFinite(start));
					assert$14(end != null && Number.isFinite(end) && this.end !== end, "invalid content-length");
					this.start = start;
					this.end = end;
				}
				if (this.end == null) {
					const contentLength = headers["content-length"];
					this.end = contentLength != null ? Number(contentLength) : null;
				}
				assert$14(Number.isFinite(this.start));
				assert$14(this.end == null || Number.isFinite(this.end), "invalid content-length");
				this.resume = resume$2;
				this.etag = headers.etag != null ? headers.etag : null;
				return this.handler.onHeaders(statusCode, rawHeaders, resume$2, statusMessage);
			}
			const err = new RequestRetryError("Request failed", statusCode, {
				headers,
				count: this.retryCount
			});
			this.abort(err);
			return false;
		}
		onData(chunk) {
			this.start += chunk.length;
			return this.handler.onData(chunk);
		}
		onComplete(rawTrailers) {
			this.retryCount = 0;
			return this.handler.onComplete(rawTrailers);
		}
		onError(err) {
			if (this.aborted || isDisturbed$1(this.opts.body)) return this.handler.onError(err);
			this.retryOpts.retry(err, {
				state: {
					counter: this.retryCount++,
					currentTimeout: this.retryAfter
				},
				opts: {
					retryOptions: this.retryOpts,
					...this.opts
				}
			}, onRetry.bind(this));
			function onRetry(err$1) {
				if (err$1 != null || this.aborted || isDisturbed$1(this.opts.body)) return this.handler.onError(err$1);
				if (this.start !== 0) this.opts = {
					...this.opts,
					headers: {
						...this.opts.headers,
						range: `bytes=${this.start}-${this.end ?? ""}`
					}
				};
				try {
					this.dispatch(this.opts, this);
				} catch (err$2) {
					this.handler.onError(err$2);
				}
			}
		}
	};
	module.exports = RetryHandler$1;
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/global.js
var require_global = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/global.js"(exports, module) {
	const globalDispatcher = Symbol.for("undici.globalDispatcher.1");
	const { InvalidArgumentError: InvalidArgumentError$1 } = require_errors$2();
	const Agent$2 = require_agent();
	if (getGlobalDispatcher$5() === void 0) setGlobalDispatcher$1(new Agent$2());
	function setGlobalDispatcher$1(agent) {
		if (!agent || typeof agent.dispatch !== "function") throw new InvalidArgumentError$1("Argument agent must implement Agent");
		Object.defineProperty(globalThis, globalDispatcher, {
			value: agent,
			writable: true,
			enumerable: false,
			configurable: false
		});
	}
	function getGlobalDispatcher$5() {
		return globalThis[globalDispatcher];
	}
	module.exports = {
		setGlobalDispatcher: setGlobalDispatcher$1,
		getGlobalDispatcher: getGlobalDispatcher$5
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/handler/DecoratorHandler.js
var require_DecoratorHandler = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/handler/DecoratorHandler.js"(exports, module) {
	module.exports = class DecoratorHandler$1 {
		constructor(handler) {
			this.handler = handler;
		}
		onConnect(...args) {
			return this.handler.onConnect(...args);
		}
		onError(...args) {
			return this.handler.onError(...args);
		}
		onUpgrade(...args) {
			return this.handler.onUpgrade(...args);
		}
		onHeaders(...args) {
			return this.handler.onHeaders(...args);
		}
		onData(...args) {
			return this.handler.onData(...args);
		}
		onComplete(...args) {
			return this.handler.onComplete(...args);
		}
		onBodySent(...args) {
			return this.handler.onBodySent(...args);
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/headers.js
var require_headers = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/headers.js"(exports, module) {
	const { kHeadersList: kHeadersList$5, kConstruct: kConstruct$4 } = require_symbols$4();
	const { kGuard: kGuard$4 } = require_symbols$3();
	const { kEnumerableProperty: kEnumerableProperty$7 } = require_util$9();
	const { makeIterator, isValidHeaderName: isValidHeaderName$2, isValidHeaderValue } = require_util$8();
	const util$19 = __require("util");
	const { webidl: webidl$10 } = require_webidl();
	const assert$13 = __require("assert");
	const kHeadersMap = Symbol("headers map");
	const kHeadersSortedMap = Symbol("headers map sorted");
	/**
	* @param {number} code
	*/
	function isHTTPWhiteSpaceCharCode(code) {
		return code === 10 || code === 13 || code === 9 || code === 32;
	}
	/**
	* @see https://fetch.spec.whatwg.org/#concept-header-value-normalize
	* @param {string} potentialValue
	*/
	function headerValueNormalize(potentialValue) {
		let i = 0;
		let j = potentialValue.length;
		while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(j - 1))) --j;
		while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(i))) ++i;
		return i === 0 && j === potentialValue.length ? potentialValue : potentialValue.substring(i, j);
	}
	function fill$1(headers, object) {
		if (Array.isArray(object)) for (let i = 0; i < object.length; ++i) {
			const header = object[i];
			if (header.length !== 2) throw webidl$10.errors.exception({
				header: "Headers constructor",
				message: `expected name/value pair to be length 2, found ${header.length}.`
			});
			appendHeader(headers, header[0], header[1]);
		}
		else if (typeof object === "object" && object !== null) {
			const keys$2 = Object.keys(object);
			for (let i = 0; i < keys$2.length; ++i) appendHeader(headers, keys$2[i], object[keys$2[i]]);
		} else throw webidl$10.errors.conversionFailed({
			prefix: "Headers constructor",
			argument: "Argument 1",
			types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
		});
	}
	/**
	* @see https://fetch.spec.whatwg.org/#concept-headers-append
	*/
	function appendHeader(headers, name$2, value) {
		value = headerValueNormalize(value);
		if (!isValidHeaderName$2(name$2)) throw webidl$10.errors.invalidArgument({
			prefix: "Headers.append",
			value: name$2,
			type: "header name"
		});
		else if (!isValidHeaderValue(value)) throw webidl$10.errors.invalidArgument({
			prefix: "Headers.append",
			value,
			type: "header value"
		});
		if (headers[kGuard$4] === "immutable") throw new TypeError("immutable");
		else if (headers[kGuard$4] === "request-no-cors") {}
		return headers[kHeadersList$5].append(name$2, value);
	}
	var HeadersList$2 = class HeadersList$2 {
		/** @type {[string, string][]|null} */
		cookies = null;
		constructor(init$2) {
			if (init$2 instanceof HeadersList$2) {
				this[kHeadersMap] = new Map(init$2[kHeadersMap]);
				this[kHeadersSortedMap] = init$2[kHeadersSortedMap];
				this.cookies = init$2.cookies === null ? null : [...init$2.cookies];
			} else {
				this[kHeadersMap] = new Map(init$2);
				this[kHeadersSortedMap] = null;
			}
		}
		contains(name$2) {
			name$2 = name$2.toLowerCase();
			return this[kHeadersMap].has(name$2);
		}
		clear() {
			this[kHeadersMap].clear();
			this[kHeadersSortedMap] = null;
			this.cookies = null;
		}
		append(name$2, value) {
			this[kHeadersSortedMap] = null;
			const lowercaseName = name$2.toLowerCase();
			const exists$1 = this[kHeadersMap].get(lowercaseName);
			if (exists$1) {
				const delimiter = lowercaseName === "cookie" ? "; " : ", ";
				this[kHeadersMap].set(lowercaseName, {
					name: exists$1.name,
					value: `${exists$1.value}${delimiter}${value}`
				});
			} else this[kHeadersMap].set(lowercaseName, {
				name: name$2,
				value
			});
			if (lowercaseName === "set-cookie") {
				this.cookies ??= [];
				this.cookies.push(value);
			}
		}
		set(name$2, value) {
			this[kHeadersSortedMap] = null;
			const lowercaseName = name$2.toLowerCase();
			if (lowercaseName === "set-cookie") this.cookies = [value];
			this[kHeadersMap].set(lowercaseName, {
				name: name$2,
				value
			});
		}
		delete(name$2) {
			this[kHeadersSortedMap] = null;
			name$2 = name$2.toLowerCase();
			if (name$2 === "set-cookie") this.cookies = null;
			this[kHeadersMap].delete(name$2);
		}
		get(name$2) {
			const value = this[kHeadersMap].get(name$2.toLowerCase());
			return value === void 0 ? null : value.value;
		}
		*[Symbol.iterator]() {
			for (const [name$2, { value }] of this[kHeadersMap]) yield [name$2, value];
		}
		get entries() {
			const headers = {};
			if (this[kHeadersMap].size) for (const { name: name$2, value } of this[kHeadersMap].values()) headers[name$2] = value;
			return headers;
		}
	};
	var Headers$6 = class Headers$6 {
		constructor(init$2 = void 0) {
			if (init$2 === kConstruct$4) return;
			this[kHeadersList$5] = new HeadersList$2();
			this[kGuard$4] = "none";
			if (init$2 !== void 0) {
				init$2 = webidl$10.converters.HeadersInit(init$2);
				fill$1(this, init$2);
			}
		}
		append(name$2, value) {
			webidl$10.brandCheck(this, Headers$6);
			webidl$10.argumentLengthCheck(arguments, 2, { header: "Headers.append" });
			name$2 = webidl$10.converters.ByteString(name$2);
			value = webidl$10.converters.ByteString(value);
			return appendHeader(this, name$2, value);
		}
		delete(name$2) {
			webidl$10.brandCheck(this, Headers$6);
			webidl$10.argumentLengthCheck(arguments, 1, { header: "Headers.delete" });
			name$2 = webidl$10.converters.ByteString(name$2);
			if (!isValidHeaderName$2(name$2)) throw webidl$10.errors.invalidArgument({
				prefix: "Headers.delete",
				value: name$2,
				type: "header name"
			});
			if (this[kGuard$4] === "immutable") throw new TypeError("immutable");
			else if (this[kGuard$4] === "request-no-cors") {}
			if (!this[kHeadersList$5].contains(name$2)) return;
			this[kHeadersList$5].delete(name$2);
		}
		get(name$2) {
			webidl$10.brandCheck(this, Headers$6);
			webidl$10.argumentLengthCheck(arguments, 1, { header: "Headers.get" });
			name$2 = webidl$10.converters.ByteString(name$2);
			if (!isValidHeaderName$2(name$2)) throw webidl$10.errors.invalidArgument({
				prefix: "Headers.get",
				value: name$2,
				type: "header name"
			});
			return this[kHeadersList$5].get(name$2);
		}
		has(name$2) {
			webidl$10.brandCheck(this, Headers$6);
			webidl$10.argumentLengthCheck(arguments, 1, { header: "Headers.has" });
			name$2 = webidl$10.converters.ByteString(name$2);
			if (!isValidHeaderName$2(name$2)) throw webidl$10.errors.invalidArgument({
				prefix: "Headers.has",
				value: name$2,
				type: "header name"
			});
			return this[kHeadersList$5].contains(name$2);
		}
		set(name$2, value) {
			webidl$10.brandCheck(this, Headers$6);
			webidl$10.argumentLengthCheck(arguments, 2, { header: "Headers.set" });
			name$2 = webidl$10.converters.ByteString(name$2);
			value = webidl$10.converters.ByteString(value);
			value = headerValueNormalize(value);
			if (!isValidHeaderName$2(name$2)) throw webidl$10.errors.invalidArgument({
				prefix: "Headers.set",
				value: name$2,
				type: "header name"
			});
			else if (!isValidHeaderValue(value)) throw webidl$10.errors.invalidArgument({
				prefix: "Headers.set",
				value,
				type: "header value"
			});
			if (this[kGuard$4] === "immutable") throw new TypeError("immutable");
			else if (this[kGuard$4] === "request-no-cors") {}
			this[kHeadersList$5].set(name$2, value);
		}
		getSetCookie() {
			webidl$10.brandCheck(this, Headers$6);
			const list = this[kHeadersList$5].cookies;
			if (list) return [...list];
			return [];
		}
		get [kHeadersSortedMap]() {
			if (this[kHeadersList$5][kHeadersSortedMap]) return this[kHeadersList$5][kHeadersSortedMap];
			const headers = [];
			const names = [...this[kHeadersList$5]].sort((a, b) => a[0] < b[0] ? -1 : 1);
			const cookies$1 = this[kHeadersList$5].cookies;
			for (let i = 0; i < names.length; ++i) {
				const [name$2, value] = names[i];
				if (name$2 === "set-cookie") for (let j = 0; j < cookies$1.length; ++j) headers.push([name$2, cookies$1[j]]);
				else {
					assert$13(value !== null);
					headers.push([name$2, value]);
				}
			}
			this[kHeadersList$5][kHeadersSortedMap] = headers;
			return headers;
		}
		keys() {
			webidl$10.brandCheck(this, Headers$6);
			if (this[kGuard$4] === "immutable") {
				const value = this[kHeadersSortedMap];
				return makeIterator(() => value, "Headers", "key");
			}
			return makeIterator(() => [...this[kHeadersSortedMap].values()], "Headers", "key");
		}
		values() {
			webidl$10.brandCheck(this, Headers$6);
			if (this[kGuard$4] === "immutable") {
				const value = this[kHeadersSortedMap];
				return makeIterator(() => value, "Headers", "value");
			}
			return makeIterator(() => [...this[kHeadersSortedMap].values()], "Headers", "value");
		}
		entries() {
			webidl$10.brandCheck(this, Headers$6);
			if (this[kGuard$4] === "immutable") {
				const value = this[kHeadersSortedMap];
				return makeIterator(() => value, "Headers", "key+value");
			}
			return makeIterator(() => [...this[kHeadersSortedMap].values()], "Headers", "key+value");
		}
		/**
		* @param {(value: string, key: string, self: Headers) => void} callbackFn
		* @param {unknown} thisArg
		*/
		forEach(callbackFn, thisArg = globalThis) {
			webidl$10.brandCheck(this, Headers$6);
			webidl$10.argumentLengthCheck(arguments, 1, { header: "Headers.forEach" });
			if (typeof callbackFn !== "function") throw new TypeError("Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'.");
			for (const [key$1, value] of this) callbackFn.apply(thisArg, [
				value,
				key$1,
				this
			]);
		}
		[Symbol.for("nodejs.util.inspect.custom")]() {
			webidl$10.brandCheck(this, Headers$6);
			return this[kHeadersList$5];
		}
	};
	Headers$6.prototype[Symbol.iterator] = Headers$6.prototype.entries;
	Object.defineProperties(Headers$6.prototype, {
		append: kEnumerableProperty$7,
		delete: kEnumerableProperty$7,
		get: kEnumerableProperty$7,
		has: kEnumerableProperty$7,
		set: kEnumerableProperty$7,
		getSetCookie: kEnumerableProperty$7,
		keys: kEnumerableProperty$7,
		values: kEnumerableProperty$7,
		entries: kEnumerableProperty$7,
		forEach: kEnumerableProperty$7,
		[Symbol.iterator]: { enumerable: false },
		[Symbol.toStringTag]: {
			value: "Headers",
			configurable: true
		},
		[util$19.inspect.custom]: { enumerable: false }
	});
	webidl$10.converters.HeadersInit = function(V) {
		if (webidl$10.util.Type(V) === "Object") {
			if (V[Symbol.iterator]) return webidl$10.converters["sequence<sequence<ByteString>>"](V);
			return webidl$10.converters["record<ByteString, ByteString>"](V);
		}
		throw webidl$10.errors.conversionFailed({
			prefix: "Headers constructor",
			argument: "Argument 1",
			types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
		});
	};
	module.exports = {
		fill: fill$1,
		Headers: Headers$6,
		HeadersList: HeadersList$2
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/response.js
var require_response = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/response.js"(exports, module) {
	const { Headers: Headers$5, HeadersList: HeadersList$1, fill } = require_headers();
	const { extractBody: extractBody$1, cloneBody: cloneBody$1, mixinBody: mixinBody$1 } = require_body();
	const util$18 = require_util$9();
	const { kEnumerableProperty: kEnumerableProperty$6 } = util$18;
	const { isValidReasonPhrase, isCancelled: isCancelled$1, isAborted: isAborted$1, isBlobLike: isBlobLike$2, serializeJavascriptValueToJSONString, isErrorLike: isErrorLike$1, isomorphicEncode: isomorphicEncode$1 } = require_util$8();
	const { redirectStatusSet: redirectStatusSet$1, nullBodyStatus: nullBodyStatus$1, DOMException: DOMException$4 } = require_constants$5();
	const { kState: kState$6, kHeaders: kHeaders$3, kGuard: kGuard$3, kRealm: kRealm$3 } = require_symbols$3();
	const { webidl: webidl$9 } = require_webidl();
	const { FormData: FormData$3 } = require_formdata();
	const { getGlobalOrigin: getGlobalOrigin$2 } = require_global$1();
	const { URLSerializer: URLSerializer$3 } = require_dataURL();
	const { kHeadersList: kHeadersList$4, kConstruct: kConstruct$3 } = require_symbols$4();
	const assert$12 = __require("assert");
	const { types: types$3 } = __require("util");
	const ReadableStream$2 = globalThis.ReadableStream || __require("stream/web").ReadableStream;
	const textEncoder$1 = new TextEncoder("utf-8");
	var Response$4 = class Response$4 {
		static error() {
			const relevantRealm = { settingsObject: {} };
			const responseObject = new Response$4();
			responseObject[kState$6] = makeNetworkError$1();
			responseObject[kRealm$3] = relevantRealm;
			responseObject[kHeaders$3][kHeadersList$4] = responseObject[kState$6].headersList;
			responseObject[kHeaders$3][kGuard$3] = "immutable";
			responseObject[kHeaders$3][kRealm$3] = relevantRealm;
			return responseObject;
		}
		static json(data, init$2 = {}) {
			webidl$9.argumentLengthCheck(arguments, 1, { header: "Response.json" });
			if (init$2 !== null) init$2 = webidl$9.converters.ResponseInit(init$2);
			const bytes = textEncoder$1.encode(serializeJavascriptValueToJSONString(data));
			const body = extractBody$1(bytes);
			const relevantRealm = { settingsObject: {} };
			const responseObject = new Response$4();
			responseObject[kRealm$3] = relevantRealm;
			responseObject[kHeaders$3][kGuard$3] = "response";
			responseObject[kHeaders$3][kRealm$3] = relevantRealm;
			initializeResponse(responseObject, init$2, {
				body: body[0],
				type: "application/json"
			});
			return responseObject;
		}
		static redirect(url$3, status = 302) {
			const relevantRealm = { settingsObject: {} };
			webidl$9.argumentLengthCheck(arguments, 1, { header: "Response.redirect" });
			url$3 = webidl$9.converters.USVString(url$3);
			status = webidl$9.converters["unsigned short"](status);
			let parsedURL;
			try {
				parsedURL = new URL(url$3, getGlobalOrigin$2());
			} catch (err) {
				throw Object.assign(new TypeError("Failed to parse URL from " + url$3), { cause: err });
			}
			if (!redirectStatusSet$1.has(status)) throw new RangeError("Invalid status code " + status);
			const responseObject = new Response$4();
			responseObject[kRealm$3] = relevantRealm;
			responseObject[kHeaders$3][kGuard$3] = "immutable";
			responseObject[kHeaders$3][kRealm$3] = relevantRealm;
			responseObject[kState$6].status = status;
			const value = isomorphicEncode$1(URLSerializer$3(parsedURL));
			responseObject[kState$6].headersList.append("location", value);
			return responseObject;
		}
		constructor(body = null, init$2 = {}) {
			if (body !== null) body = webidl$9.converters.BodyInit(body);
			init$2 = webidl$9.converters.ResponseInit(init$2);
			this[kRealm$3] = { settingsObject: {} };
			this[kState$6] = makeResponse$1({});
			this[kHeaders$3] = new Headers$5(kConstruct$3);
			this[kHeaders$3][kGuard$3] = "response";
			this[kHeaders$3][kHeadersList$4] = this[kState$6].headersList;
			this[kHeaders$3][kRealm$3] = this[kRealm$3];
			let bodyWithType = null;
			if (body != null) {
				const [extractedBody, type] = extractBody$1(body);
				bodyWithType = {
					body: extractedBody,
					type
				};
			}
			initializeResponse(this, init$2, bodyWithType);
		}
		get type() {
			webidl$9.brandCheck(this, Response$4);
			return this[kState$6].type;
		}
		get url() {
			webidl$9.brandCheck(this, Response$4);
			const urlList = this[kState$6].urlList;
			const url$3 = urlList[urlList.length - 1] ?? null;
			if (url$3 === null) return "";
			return URLSerializer$3(url$3, true);
		}
		get redirected() {
			webidl$9.brandCheck(this, Response$4);
			return this[kState$6].urlList.length > 1;
		}
		get status() {
			webidl$9.brandCheck(this, Response$4);
			return this[kState$6].status;
		}
		get ok() {
			webidl$9.brandCheck(this, Response$4);
			return this[kState$6].status >= 200 && this[kState$6].status <= 299;
		}
		get statusText() {
			webidl$9.brandCheck(this, Response$4);
			return this[kState$6].statusText;
		}
		get headers() {
			webidl$9.brandCheck(this, Response$4);
			return this[kHeaders$3];
		}
		get body() {
			webidl$9.brandCheck(this, Response$4);
			return this[kState$6].body ? this[kState$6].body.stream : null;
		}
		get bodyUsed() {
			webidl$9.brandCheck(this, Response$4);
			return !!this[kState$6].body && util$18.isDisturbed(this[kState$6].body.stream);
		}
		clone() {
			webidl$9.brandCheck(this, Response$4);
			if (this.bodyUsed || this.body && this.body.locked) throw webidl$9.errors.exception({
				header: "Response.clone",
				message: "Body has already been consumed."
			});
			const clonedResponse = cloneResponse$1(this[kState$6]);
			const clonedResponseObject = new Response$4();
			clonedResponseObject[kState$6] = clonedResponse;
			clonedResponseObject[kRealm$3] = this[kRealm$3];
			clonedResponseObject[kHeaders$3][kHeadersList$4] = clonedResponse.headersList;
			clonedResponseObject[kHeaders$3][kGuard$3] = this[kHeaders$3][kGuard$3];
			clonedResponseObject[kHeaders$3][kRealm$3] = this[kHeaders$3][kRealm$3];
			return clonedResponseObject;
		}
	};
	mixinBody$1(Response$4);
	Object.defineProperties(Response$4.prototype, {
		type: kEnumerableProperty$6,
		url: kEnumerableProperty$6,
		status: kEnumerableProperty$6,
		ok: kEnumerableProperty$6,
		redirected: kEnumerableProperty$6,
		statusText: kEnumerableProperty$6,
		headers: kEnumerableProperty$6,
		clone: kEnumerableProperty$6,
		body: kEnumerableProperty$6,
		bodyUsed: kEnumerableProperty$6,
		[Symbol.toStringTag]: {
			value: "Response",
			configurable: true
		}
	});
	Object.defineProperties(Response$4, {
		json: kEnumerableProperty$6,
		redirect: kEnumerableProperty$6,
		error: kEnumerableProperty$6
	});
	function cloneResponse$1(response) {
		if (response.internalResponse) return filterResponse$1(cloneResponse$1(response.internalResponse), response.type);
		const newResponse = makeResponse$1({
			...response,
			body: null
		});
		if (response.body != null) newResponse.body = cloneBody$1(response.body);
		return newResponse;
	}
	function makeResponse$1(init$2) {
		return {
			aborted: false,
			rangeRequested: false,
			timingAllowPassed: false,
			requestIncludesCredentials: false,
			type: "default",
			status: 200,
			timingInfo: null,
			cacheState: "",
			statusText: "",
			...init$2,
			headersList: init$2.headersList ? new HeadersList$1(init$2.headersList) : new HeadersList$1(),
			urlList: init$2.urlList ? [...init$2.urlList] : []
		};
	}
	function makeNetworkError$1(reason) {
		const isError$1 = isErrorLike$1(reason);
		return makeResponse$1({
			type: "error",
			status: 0,
			error: isError$1 ? reason : new Error(reason ? String(reason) : reason),
			aborted: reason && reason.name === "AbortError"
		});
	}
	function makeFilteredResponse(response, state$1) {
		state$1 = {
			internalResponse: response,
			...state$1
		};
		return new Proxy(response, {
			get(target, p) {
				return p in state$1 ? state$1[p] : target[p];
			},
			set(target, p, value) {
				assert$12(!(p in state$1));
				target[p] = value;
				return true;
			}
		});
	}
	function filterResponse$1(response, type) {
		if (type === "basic") return makeFilteredResponse(response, {
			type: "basic",
			headersList: response.headersList
		});
		else if (type === "cors") return makeFilteredResponse(response, {
			type: "cors",
			headersList: response.headersList
		});
		else if (type === "opaque") return makeFilteredResponse(response, {
			type: "opaque",
			urlList: Object.freeze([]),
			status: 0,
			statusText: "",
			body: null
		});
		else if (type === "opaqueredirect") return makeFilteredResponse(response, {
			type: "opaqueredirect",
			status: 0,
			statusText: "",
			headersList: [],
			body: null
		});
		else assert$12(false);
	}
	function makeAppropriateNetworkError$1(fetchParams, err = null) {
		assert$12(isCancelled$1(fetchParams));
		return isAborted$1(fetchParams) ? makeNetworkError$1(Object.assign(new DOMException$4("The operation was aborted.", "AbortError"), { cause: err })) : makeNetworkError$1(Object.assign(new DOMException$4("Request was cancelled."), { cause: err }));
	}
	function initializeResponse(response, init$2, body) {
		if (init$2.status !== null && (init$2.status < 200 || init$2.status > 599)) throw new RangeError("init[\"status\"] must be in the range of 200 to 599, inclusive.");
		if ("statusText" in init$2 && init$2.statusText != null) {
			if (!isValidReasonPhrase(String(init$2.statusText))) throw new TypeError("Invalid statusText");
		}
		if ("status" in init$2 && init$2.status != null) response[kState$6].status = init$2.status;
		if ("statusText" in init$2 && init$2.statusText != null) response[kState$6].statusText = init$2.statusText;
		if ("headers" in init$2 && init$2.headers != null) fill(response[kHeaders$3], init$2.headers);
		if (body) {
			if (nullBodyStatus$1.includes(response.status)) throw webidl$9.errors.exception({
				header: "Response constructor",
				message: "Invalid response status code " + response.status
			});
			response[kState$6].body = body.body;
			if (body.type != null && !response[kState$6].headersList.contains("Content-Type")) response[kState$6].headersList.append("content-type", body.type);
		}
	}
	webidl$9.converters.ReadableStream = webidl$9.interfaceConverter(ReadableStream$2);
	webidl$9.converters.FormData = webidl$9.interfaceConverter(FormData$3);
	webidl$9.converters.URLSearchParams = webidl$9.interfaceConverter(URLSearchParams);
	webidl$9.converters.XMLHttpRequestBodyInit = function(V) {
		if (typeof V === "string") return webidl$9.converters.USVString(V);
		if (isBlobLike$2(V)) return webidl$9.converters.Blob(V, { strict: false });
		if (types$3.isArrayBuffer(V) || types$3.isTypedArray(V) || types$3.isDataView(V)) return webidl$9.converters.BufferSource(V);
		if (util$18.isFormDataLike(V)) return webidl$9.converters.FormData(V, { strict: false });
		if (V instanceof URLSearchParams) return webidl$9.converters.URLSearchParams(V);
		return webidl$9.converters.DOMString(V);
	};
	webidl$9.converters.BodyInit = function(V) {
		if (V instanceof ReadableStream$2) return webidl$9.converters.ReadableStream(V);
		if (V?.[Symbol.asyncIterator]) return V;
		return webidl$9.converters.XMLHttpRequestBodyInit(V);
	};
	webidl$9.converters.ResponseInit = webidl$9.dictionaryConverter([
		{
			key: "status",
			converter: webidl$9.converters["unsigned short"],
			defaultValue: 200
		},
		{
			key: "statusText",
			converter: webidl$9.converters.ByteString,
			defaultValue: ""
		},
		{
			key: "headers",
			converter: webidl$9.converters.HeadersInit
		}
	]);
	module.exports = {
		makeNetworkError: makeNetworkError$1,
		makeResponse: makeResponse$1,
		makeAppropriateNetworkError: makeAppropriateNetworkError$1,
		filterResponse: filterResponse$1,
		Response: Response$4,
		cloneResponse: cloneResponse$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/request.js
var require_request = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/request.js"(exports, module) {
	const { extractBody, mixinBody, cloneBody } = require_body();
	const { Headers: Headers$4, fill: fillHeaders, HeadersList } = require_headers();
	const { FinalizationRegistry: FinalizationRegistry$1 } = require_dispatcher_weakref()();
	const util$17 = require_util$9();
	const { isValidHTTPToken, sameOrigin: sameOrigin$1, normalizeMethod, makePolicyContainer: makePolicyContainer$1, normalizeMethodRecord } = require_util$8();
	const { forbiddenMethodsSet, corsSafeListedMethodsSet, referrerPolicy, requestRedirect, requestMode, requestCredentials, requestCache, requestDuplex } = require_constants$5();
	const { kEnumerableProperty: kEnumerableProperty$5 } = util$17;
	const { kHeaders: kHeaders$2, kSignal, kState: kState$5, kGuard: kGuard$2, kRealm: kRealm$2 } = require_symbols$3();
	const { webidl: webidl$8 } = require_webidl();
	const { getGlobalOrigin: getGlobalOrigin$1 } = require_global$1();
	const { URLSerializer: URLSerializer$2 } = require_dataURL();
	const { kHeadersList: kHeadersList$3, kConstruct: kConstruct$2 } = require_symbols$4();
	const assert$11 = __require("assert");
	const { getMaxListeners, setMaxListeners, getEventListeners, defaultMaxListeners } = __require("events");
	let TransformStream$1 = globalThis.TransformStream;
	const kAbortController = Symbol("abortController");
	const requestFinalizer = new FinalizationRegistry$1(({ signal, abort: abort$4 }) => {
		signal.removeEventListener("abort", abort$4);
	});
	var Request$3 = class Request$3 {
		constructor(input, init$2 = {}) {
			if (input === kConstruct$2) return;
			webidl$8.argumentLengthCheck(arguments, 1, { header: "Request constructor" });
			input = webidl$8.converters.RequestInfo(input);
			init$2 = webidl$8.converters.RequestInit(init$2);
			this[kRealm$2] = { settingsObject: {
				baseUrl: getGlobalOrigin$1(),
				get origin() {
					return this.baseUrl?.origin;
				},
				policyContainer: makePolicyContainer$1()
			} };
			let request$1 = null;
			let fallbackMode = null;
			const baseUrl = this[kRealm$2].settingsObject.baseUrl;
			let signal = null;
			if (typeof input === "string") {
				let parsedURL;
				try {
					parsedURL = new URL(input, baseUrl);
				} catch (err) {
					throw new TypeError("Failed to parse URL from " + input, { cause: err });
				}
				if (parsedURL.username || parsedURL.password) throw new TypeError("Request cannot be constructed from a URL that includes credentials: " + input);
				request$1 = makeRequest$2({ urlList: [parsedURL] });
				fallbackMode = "cors";
			} else {
				assert$11(input instanceof Request$3);
				request$1 = input[kState$5];
				signal = input[kSignal];
			}
			const origin$1 = this[kRealm$2].settingsObject.origin;
			let window$1 = "client";
			if (request$1.window?.constructor?.name === "EnvironmentSettingsObject" && sameOrigin$1(request$1.window, origin$1)) window$1 = request$1.window;
			if (init$2.window != null) throw new TypeError(`'window' option '${window$1}' must be null`);
			if ("window" in init$2) window$1 = "no-window";
			request$1 = makeRequest$2({
				method: request$1.method,
				headersList: request$1.headersList,
				unsafeRequest: request$1.unsafeRequest,
				client: this[kRealm$2].settingsObject,
				window: window$1,
				priority: request$1.priority,
				origin: request$1.origin,
				referrer: request$1.referrer,
				referrerPolicy: request$1.referrerPolicy,
				mode: request$1.mode,
				credentials: request$1.credentials,
				cache: request$1.cache,
				redirect: request$1.redirect,
				integrity: request$1.integrity,
				keepalive: request$1.keepalive,
				reloadNavigation: request$1.reloadNavigation,
				historyNavigation: request$1.historyNavigation,
				urlList: [...request$1.urlList]
			});
			const initHasKey = Object.keys(init$2).length !== 0;
			if (initHasKey) {
				if (request$1.mode === "navigate") request$1.mode = "same-origin";
				request$1.reloadNavigation = false;
				request$1.historyNavigation = false;
				request$1.origin = "client";
				request$1.referrer = "client";
				request$1.referrerPolicy = "";
				request$1.url = request$1.urlList[request$1.urlList.length - 1];
				request$1.urlList = [request$1.url];
			}
			if (init$2.referrer !== void 0) {
				const referrer = init$2.referrer;
				if (referrer === "") request$1.referrer = "no-referrer";
				else {
					let parsedReferrer;
					try {
						parsedReferrer = new URL(referrer, baseUrl);
					} catch (err) {
						throw new TypeError(`Referrer "${referrer}" is not a valid URL.`, { cause: err });
					}
					if (parsedReferrer.protocol === "about:" && parsedReferrer.hostname === "client" || origin$1 && !sameOrigin$1(parsedReferrer, this[kRealm$2].settingsObject.baseUrl)) request$1.referrer = "client";
					else request$1.referrer = parsedReferrer;
				}
			}
			if (init$2.referrerPolicy !== void 0) request$1.referrerPolicy = init$2.referrerPolicy;
			let mode;
			if (init$2.mode !== void 0) mode = init$2.mode;
			else mode = fallbackMode;
			if (mode === "navigate") throw webidl$8.errors.exception({
				header: "Request constructor",
				message: "invalid request mode navigate."
			});
			if (mode != null) request$1.mode = mode;
			if (init$2.credentials !== void 0) request$1.credentials = init$2.credentials;
			if (init$2.cache !== void 0) request$1.cache = init$2.cache;
			if (request$1.cache === "only-if-cached" && request$1.mode !== "same-origin") throw new TypeError("'only-if-cached' can be set only with 'same-origin' mode");
			if (init$2.redirect !== void 0) request$1.redirect = init$2.redirect;
			if (init$2.integrity != null) request$1.integrity = String(init$2.integrity);
			if (init$2.keepalive !== void 0) request$1.keepalive = Boolean(init$2.keepalive);
			if (init$2.method !== void 0) {
				let method$1 = init$2.method;
				if (!isValidHTTPToken(method$1)) throw new TypeError(`'${method$1}' is not a valid HTTP method.`);
				if (forbiddenMethodsSet.has(method$1.toUpperCase())) throw new TypeError(`'${method$1}' HTTP method is unsupported.`);
				method$1 = normalizeMethodRecord[method$1] ?? normalizeMethod(method$1);
				request$1.method = method$1;
			}
			if (init$2.signal !== void 0) signal = init$2.signal;
			this[kState$5] = request$1;
			const ac = new AbortController();
			this[kSignal] = ac.signal;
			this[kSignal][kRealm$2] = this[kRealm$2];
			if (signal != null) {
				if (!signal || typeof signal.aborted !== "boolean" || typeof signal.addEventListener !== "function") throw new TypeError("Failed to construct 'Request': member signal is not of type AbortSignal.");
				if (signal.aborted) ac.abort(signal.reason);
				else {
					this[kAbortController] = ac;
					const acRef = new WeakRef(ac);
					const abort$4 = function() {
						const ac$1 = acRef.deref();
						if (ac$1 !== void 0) ac$1.abort(this.reason);
					};
					try {
						if (typeof getMaxListeners === "function" && getMaxListeners(signal) === defaultMaxListeners) setMaxListeners(100, signal);
						else if (getEventListeners(signal, "abort").length >= defaultMaxListeners) setMaxListeners(100, signal);
					} catch {}
					util$17.addAbortListener(signal, abort$4);
					requestFinalizer.register(ac, {
						signal,
						abort: abort$4
					});
				}
			}
			this[kHeaders$2] = new Headers$4(kConstruct$2);
			this[kHeaders$2][kHeadersList$3] = request$1.headersList;
			this[kHeaders$2][kGuard$2] = "request";
			this[kHeaders$2][kRealm$2] = this[kRealm$2];
			if (mode === "no-cors") {
				if (!corsSafeListedMethodsSet.has(request$1.method)) throw new TypeError(`'${request$1.method} is unsupported in no-cors mode.`);
				this[kHeaders$2][kGuard$2] = "request-no-cors";
			}
			if (initHasKey) {
				/** @type {HeadersList} */
				const headersList = this[kHeaders$2][kHeadersList$3];
				const headers = init$2.headers !== void 0 ? init$2.headers : new HeadersList(headersList);
				headersList.clear();
				if (headers instanceof HeadersList) {
					for (const [key$1, val] of headers) headersList.append(key$1, val);
					headersList.cookies = headers.cookies;
				} else fillHeaders(this[kHeaders$2], headers);
			}
			const inputBody = input instanceof Request$3 ? input[kState$5].body : null;
			if ((init$2.body != null || inputBody != null) && (request$1.method === "GET" || request$1.method === "HEAD")) throw new TypeError("Request with GET/HEAD method cannot have body.");
			let initBody = null;
			if (init$2.body != null) {
				const [extractedBody, contentType$1] = extractBody(init$2.body, request$1.keepalive);
				initBody = extractedBody;
				if (contentType$1 && !this[kHeaders$2][kHeadersList$3].contains("content-type")) this[kHeaders$2].append("content-type", contentType$1);
			}
			const inputOrInitBody = initBody ?? inputBody;
			if (inputOrInitBody != null && inputOrInitBody.source == null) {
				if (initBody != null && init$2.duplex == null) throw new TypeError("RequestInit: duplex option is required when sending a body.");
				if (request$1.mode !== "same-origin" && request$1.mode !== "cors") throw new TypeError("If request is made from ReadableStream, mode should be \"same-origin\" or \"cors\"");
				request$1.useCORSPreflightFlag = true;
			}
			let finalBody = inputOrInitBody;
			if (initBody == null && inputBody != null) {
				if (util$17.isDisturbed(inputBody.stream) || inputBody.stream.locked) throw new TypeError("Cannot construct a Request with a Request object that has already been used.");
				if (!TransformStream$1) TransformStream$1 = __require("stream/web").TransformStream;
				const identityTransform = new TransformStream$1();
				inputBody.stream.pipeThrough(identityTransform);
				finalBody = {
					source: inputBody.source,
					length: inputBody.length,
					stream: identityTransform.readable
				};
			}
			this[kState$5].body = finalBody;
		}
		get method() {
			webidl$8.brandCheck(this, Request$3);
			return this[kState$5].method;
		}
		get url() {
			webidl$8.brandCheck(this, Request$3);
			return URLSerializer$2(this[kState$5].url);
		}
		get headers() {
			webidl$8.brandCheck(this, Request$3);
			return this[kHeaders$2];
		}
		get destination() {
			webidl$8.brandCheck(this, Request$3);
			return this[kState$5].destination;
		}
		get referrer() {
			webidl$8.brandCheck(this, Request$3);
			if (this[kState$5].referrer === "no-referrer") return "";
			if (this[kState$5].referrer === "client") return "about:client";
			return this[kState$5].referrer.toString();
		}
		get referrerPolicy() {
			webidl$8.brandCheck(this, Request$3);
			return this[kState$5].referrerPolicy;
		}
		get mode() {
			webidl$8.brandCheck(this, Request$3);
			return this[kState$5].mode;
		}
		get credentials() {
			return this[kState$5].credentials;
		}
		get cache() {
			webidl$8.brandCheck(this, Request$3);
			return this[kState$5].cache;
		}
		get redirect() {
			webidl$8.brandCheck(this, Request$3);
			return this[kState$5].redirect;
		}
		get integrity() {
			webidl$8.brandCheck(this, Request$3);
			return this[kState$5].integrity;
		}
		get keepalive() {
			webidl$8.brandCheck(this, Request$3);
			return this[kState$5].keepalive;
		}
		get isReloadNavigation() {
			webidl$8.brandCheck(this, Request$3);
			return this[kState$5].reloadNavigation;
		}
		get isHistoryNavigation() {
			webidl$8.brandCheck(this, Request$3);
			return this[kState$5].historyNavigation;
		}
		get signal() {
			webidl$8.brandCheck(this, Request$3);
			return this[kSignal];
		}
		get body() {
			webidl$8.brandCheck(this, Request$3);
			return this[kState$5].body ? this[kState$5].body.stream : null;
		}
		get bodyUsed() {
			webidl$8.brandCheck(this, Request$3);
			return !!this[kState$5].body && util$17.isDisturbed(this[kState$5].body.stream);
		}
		get duplex() {
			webidl$8.brandCheck(this, Request$3);
			return "half";
		}
		clone() {
			webidl$8.brandCheck(this, Request$3);
			if (this.bodyUsed || this.body?.locked) throw new TypeError("unusable");
			const clonedRequest = cloneRequest(this[kState$5]);
			const clonedRequestObject = new Request$3(kConstruct$2);
			clonedRequestObject[kState$5] = clonedRequest;
			clonedRequestObject[kRealm$2] = this[kRealm$2];
			clonedRequestObject[kHeaders$2] = new Headers$4(kConstruct$2);
			clonedRequestObject[kHeaders$2][kHeadersList$3] = clonedRequest.headersList;
			clonedRequestObject[kHeaders$2][kGuard$2] = this[kHeaders$2][kGuard$2];
			clonedRequestObject[kHeaders$2][kRealm$2] = this[kHeaders$2][kRealm$2];
			const ac = new AbortController();
			if (this.signal.aborted) ac.abort(this.signal.reason);
			else util$17.addAbortListener(this.signal, () => {
				ac.abort(this.signal.reason);
			});
			clonedRequestObject[kSignal] = ac.signal;
			return clonedRequestObject;
		}
	};
	mixinBody(Request$3);
	function makeRequest$2(init$2) {
		const request$1 = {
			method: "GET",
			localURLsOnly: false,
			unsafeRequest: false,
			body: null,
			client: null,
			reservedClient: null,
			replacesClientId: "",
			window: "client",
			keepalive: false,
			serviceWorkers: "all",
			initiator: "",
			destination: "",
			priority: null,
			origin: "client",
			policyContainer: "client",
			referrer: "client",
			referrerPolicy: "",
			mode: "no-cors",
			useCORSPreflightFlag: false,
			credentials: "same-origin",
			useCredentials: false,
			cache: "default",
			redirect: "follow",
			integrity: "",
			cryptoGraphicsNonceMetadata: "",
			parserMetadata: "",
			reloadNavigation: false,
			historyNavigation: false,
			userActivation: false,
			taintedOrigin: false,
			redirectCount: 0,
			responseTainting: "basic",
			preventNoCacheCacheControlHeaderModification: false,
			done: false,
			timingAllowFailed: false,
			...init$2,
			headersList: init$2.headersList ? new HeadersList(init$2.headersList) : new HeadersList()
		};
		request$1.url = request$1.urlList[0];
		return request$1;
	}
	function cloneRequest(request$1) {
		const newRequest = makeRequest$2({
			...request$1,
			body: null
		});
		if (request$1.body != null) newRequest.body = cloneBody(request$1.body);
		return newRequest;
	}
	Object.defineProperties(Request$3.prototype, {
		method: kEnumerableProperty$5,
		url: kEnumerableProperty$5,
		headers: kEnumerableProperty$5,
		redirect: kEnumerableProperty$5,
		clone: kEnumerableProperty$5,
		signal: kEnumerableProperty$5,
		duplex: kEnumerableProperty$5,
		destination: kEnumerableProperty$5,
		body: kEnumerableProperty$5,
		bodyUsed: kEnumerableProperty$5,
		isHistoryNavigation: kEnumerableProperty$5,
		isReloadNavigation: kEnumerableProperty$5,
		keepalive: kEnumerableProperty$5,
		integrity: kEnumerableProperty$5,
		cache: kEnumerableProperty$5,
		credentials: kEnumerableProperty$5,
		attribute: kEnumerableProperty$5,
		referrerPolicy: kEnumerableProperty$5,
		referrer: kEnumerableProperty$5,
		mode: kEnumerableProperty$5,
		[Symbol.toStringTag]: {
			value: "Request",
			configurable: true
		}
	});
	webidl$8.converters.Request = webidl$8.interfaceConverter(Request$3);
	webidl$8.converters.RequestInfo = function(V) {
		if (typeof V === "string") return webidl$8.converters.USVString(V);
		if (V instanceof Request$3) return webidl$8.converters.Request(V);
		return webidl$8.converters.USVString(V);
	};
	webidl$8.converters.AbortSignal = webidl$8.interfaceConverter(AbortSignal);
	webidl$8.converters.RequestInit = webidl$8.dictionaryConverter([
		{
			key: "method",
			converter: webidl$8.converters.ByteString
		},
		{
			key: "headers",
			converter: webidl$8.converters.HeadersInit
		},
		{
			key: "body",
			converter: webidl$8.nullableConverter(webidl$8.converters.BodyInit)
		},
		{
			key: "referrer",
			converter: webidl$8.converters.USVString
		},
		{
			key: "referrerPolicy",
			converter: webidl$8.converters.DOMString,
			allowedValues: referrerPolicy
		},
		{
			key: "mode",
			converter: webidl$8.converters.DOMString,
			allowedValues: requestMode
		},
		{
			key: "credentials",
			converter: webidl$8.converters.DOMString,
			allowedValues: requestCredentials
		},
		{
			key: "cache",
			converter: webidl$8.converters.DOMString,
			allowedValues: requestCache
		},
		{
			key: "redirect",
			converter: webidl$8.converters.DOMString,
			allowedValues: requestRedirect
		},
		{
			key: "integrity",
			converter: webidl$8.converters.DOMString
		},
		{
			key: "keepalive",
			converter: webidl$8.converters.boolean
		},
		{
			key: "signal",
			converter: webidl$8.nullableConverter((signal) => webidl$8.converters.AbortSignal(signal, { strict: false }))
		},
		{
			key: "window",
			converter: webidl$8.converters.any
		},
		{
			key: "duplex",
			converter: webidl$8.converters.DOMString,
			allowedValues: requestDuplex
		}
	]);
	module.exports = {
		Request: Request$3,
		makeRequest: makeRequest$2
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/index.js
var require_fetch$1 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fetch/index.js"(exports, module) {
	const { Response: Response$3, makeNetworkError, makeAppropriateNetworkError, filterResponse, makeResponse } = require_response();
	const { Headers: Headers$3 } = require_headers();
	const { Request: Request$2, makeRequest: makeRequest$1 } = require_request();
	const zlib$3 = __require("zlib");
	const { bytesMatch, makePolicyContainer, clonePolicyContainer, requestBadPort, TAOCheck, appendRequestOriginHeader, responseLocationURL, requestCurrentURL, setRequestReferrerPolicyOnRedirect, tryUpgradeRequestToAPotentiallyTrustworthyURL, createOpaqueTimingInfo, appendFetchMetadata, corsCheck, crossOriginResourcePolicyCheck, determineRequestsReferrer, coarsenedSharedCurrentTime, createDeferredPromise: createDeferredPromise$1, isBlobLike: isBlobLike$1, sameOrigin, isCancelled, isAborted, isErrorLike, fullyReadBody, readableStreamClose, isomorphicEncode, urlIsLocal, urlIsHttpHttpsScheme: urlIsHttpHttpsScheme$1, urlHasHttpsScheme } = require_util$8();
	const { kState: kState$4, kHeaders: kHeaders$1, kGuard: kGuard$1, kRealm: kRealm$1 } = require_symbols$3();
	const assert$10 = __require("assert");
	const { safelyExtractBody } = require_body();
	const { redirectStatusSet, nullBodyStatus, safeMethodsSet, requestBodyHeader, subresourceSet, DOMException: DOMException$3 } = require_constants$5();
	const { kHeadersList: kHeadersList$2 } = require_symbols$4();
	const EE$1 = __require("events");
	const { Readable: Readable$2, pipeline: pipeline$1 } = __require("stream");
	const { addAbortListener, isErrored, isReadable, nodeMajor, nodeMinor } = require_util$9();
	const { dataURLProcessor, serializeAMimeType: serializeAMimeType$1 } = require_dataURL();
	const { TransformStream } = __require("stream/web");
	const { getGlobalDispatcher: getGlobalDispatcher$4 } = require_global();
	const { webidl: webidl$7 } = require_webidl();
	const { STATUS_CODES } = __require("http");
	const GET_OR_HEAD = ["GET", "HEAD"];
	/** @type {import('buffer').resolveObjectURL} */
	let resolveObjectURL;
	let ReadableStream$1 = globalThis.ReadableStream;
	var Fetch = class extends EE$1 {
		constructor(dispatcher) {
			super();
			this.dispatcher = dispatcher;
			this.connection = null;
			this.dump = false;
			this.state = "ongoing";
			this.setMaxListeners(21);
		}
		terminate(reason) {
			if (this.state !== "ongoing") return;
			this.state = "terminated";
			this.connection?.destroy(reason);
			this.emit("terminated", reason);
		}
		abort(error$1) {
			if (this.state !== "ongoing") return;
			this.state = "aborted";
			if (!error$1) error$1 = new DOMException$3("The operation was aborted.", "AbortError");
			this.serializedAbortReason = error$1;
			this.connection?.destroy(error$1);
			this.emit("terminated", error$1);
		}
	};
	function fetch$2(input, init$2 = {}) {
		webidl$7.argumentLengthCheck(arguments, 1, { header: "globalThis.fetch" });
		const p = createDeferredPromise$1();
		let requestObject;
		try {
			requestObject = new Request$2(input, init$2);
		} catch (e) {
			p.reject(e);
			return p.promise;
		}
		const request$1 = requestObject[kState$4];
		if (requestObject.signal.aborted) {
			abortFetch(p, request$1, null, requestObject.signal.reason);
			return p.promise;
		}
		const globalObject = request$1.client.globalObject;
		if (globalObject?.constructor?.name === "ServiceWorkerGlobalScope") request$1.serviceWorkers = "none";
		let responseObject = null;
		const relevantRealm = null;
		let locallyAborted = false;
		let controller = null;
		addAbortListener(requestObject.signal, () => {
			locallyAborted = true;
			assert$10(controller != null);
			controller.abort(requestObject.signal.reason);
			abortFetch(p, request$1, responseObject, requestObject.signal.reason);
		});
		const handleFetchDone = (response) => finalizeAndReportTiming(response, "fetch");
		const processResponse = (response) => {
			if (locallyAborted) return Promise.resolve();
			if (response.aborted) {
				abortFetch(p, request$1, responseObject, controller.serializedAbortReason);
				return Promise.resolve();
			}
			if (response.type === "error") {
				p.reject(Object.assign(new TypeError("fetch failed"), { cause: response.error }));
				return Promise.resolve();
			}
			responseObject = new Response$3();
			responseObject[kState$4] = response;
			responseObject[kRealm$1] = relevantRealm;
			responseObject[kHeaders$1][kHeadersList$2] = response.headersList;
			responseObject[kHeaders$1][kGuard$1] = "immutable";
			responseObject[kHeaders$1][kRealm$1] = relevantRealm;
			p.resolve(responseObject);
		};
		controller = fetching$2({
			request: request$1,
			processResponseEndOfBody: handleFetchDone,
			processResponse,
			dispatcher: init$2.dispatcher ?? getGlobalDispatcher$4()
		});
		return p.promise;
	}
	function finalizeAndReportTiming(response, initiatorType = "other") {
		if (response.type === "error" && response.aborted) return;
		if (!response.urlList?.length) return;
		const originalURL = response.urlList[0];
		let timingInfo = response.timingInfo;
		let cacheState = response.cacheState;
		if (!urlIsHttpHttpsScheme$1(originalURL)) return;
		if (timingInfo === null) return;
		if (!response.timingAllowPassed) {
			timingInfo = createOpaqueTimingInfo({ startTime: timingInfo.startTime });
			cacheState = "";
		}
		timingInfo.endTime = coarsenedSharedCurrentTime();
		response.timingInfo = timingInfo;
		markResourceTiming(timingInfo, originalURL, initiatorType, globalThis, cacheState);
	}
	function markResourceTiming(timingInfo, originalURL, initiatorType, globalThis$1, cacheState) {
		if (nodeMajor > 18 || nodeMajor === 18 && nodeMinor >= 2) performance.markResourceTiming(timingInfo, originalURL.href, initiatorType, globalThis$1, cacheState);
	}
	function abortFetch(p, request$1, responseObject, error$1) {
		if (!error$1) error$1 = new DOMException$3("The operation was aborted.", "AbortError");
		p.reject(error$1);
		if (request$1.body != null && isReadable(request$1.body?.stream)) request$1.body.stream.cancel(error$1).catch((err) => {
			if (err.code === "ERR_INVALID_STATE") return;
			throw err;
		});
		if (responseObject == null) return;
		const response = responseObject[kState$4];
		if (response.body != null && isReadable(response.body?.stream)) response.body.stream.cancel(error$1).catch((err) => {
			if (err.code === "ERR_INVALID_STATE") return;
			throw err;
		});
	}
	function fetching$2({ request: request$1, processRequestBodyChunkLength, processRequestEndOfBody, processResponse, processResponseEndOfBody, processResponseConsumeBody, useParallelQueue = false, dispatcher }) {
		let taskDestination = null;
		let crossOriginIsolatedCapability = false;
		if (request$1.client != null) {
			taskDestination = request$1.client.globalObject;
			crossOriginIsolatedCapability = request$1.client.crossOriginIsolatedCapability;
		}
		const currenTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability);
		const timingInfo = createOpaqueTimingInfo({ startTime: currenTime });
		const fetchParams = {
			controller: new Fetch(dispatcher),
			request: request$1,
			timingInfo,
			processRequestBodyChunkLength,
			processRequestEndOfBody,
			processResponse,
			processResponseConsumeBody,
			processResponseEndOfBody,
			taskDestination,
			crossOriginIsolatedCapability
		};
		assert$10(!request$1.body || request$1.body.stream);
		if (request$1.window === "client") request$1.window = request$1.client?.globalObject?.constructor?.name === "Window" ? request$1.client : "no-window";
		if (request$1.origin === "client") request$1.origin = request$1.client?.origin;
		if (request$1.policyContainer === "client") if (request$1.client != null) request$1.policyContainer = clonePolicyContainer(request$1.client.policyContainer);
		else request$1.policyContainer = makePolicyContainer();
		if (!request$1.headersList.contains("accept")) {
			const value = "*/*";
			request$1.headersList.append("accept", value);
		}
		if (!request$1.headersList.contains("accept-language")) request$1.headersList.append("accept-language", "*");
		if (request$1.priority === null) {}
		if (subresourceSet.has(request$1.destination)) {}
		mainFetch(fetchParams).catch((err) => {
			fetchParams.controller.terminate(err);
		});
		return fetchParams.controller;
	}
	async function mainFetch(fetchParams, recursive = false) {
		const request$1 = fetchParams.request;
		let response = null;
		if (request$1.localURLsOnly && !urlIsLocal(requestCurrentURL(request$1))) response = makeNetworkError("local URLs only");
		tryUpgradeRequestToAPotentiallyTrustworthyURL(request$1);
		if (requestBadPort(request$1) === "blocked") response = makeNetworkError("bad port");
		if (request$1.referrerPolicy === "") request$1.referrerPolicy = request$1.policyContainer.referrerPolicy;
		if (request$1.referrer !== "no-referrer") request$1.referrer = determineRequestsReferrer(request$1);
		if (response === null) response = await (async () => {
			const currentURL = requestCurrentURL(request$1);
			if (sameOrigin(currentURL, request$1.url) && request$1.responseTainting === "basic" || currentURL.protocol === "data:" || request$1.mode === "navigate" || request$1.mode === "websocket") {
				request$1.responseTainting = "basic";
				return await schemeFetch(fetchParams);
			}
			if (request$1.mode === "same-origin") return makeNetworkError("request mode cannot be \"same-origin\"");
			if (request$1.mode === "no-cors") {
				if (request$1.redirect !== "follow") return makeNetworkError("redirect mode cannot be \"follow\" for \"no-cors\" request");
				request$1.responseTainting = "opaque";
				return await schemeFetch(fetchParams);
			}
			if (!urlIsHttpHttpsScheme$1(requestCurrentURL(request$1))) return makeNetworkError("URL scheme must be a HTTP(S) scheme");
			request$1.responseTainting = "cors";
			return await httpFetch(fetchParams);
		})();
		if (recursive) return response;
		if (response.status !== 0 && !response.internalResponse) {
			if (request$1.responseTainting === "cors") {}
			if (request$1.responseTainting === "basic") response = filterResponse(response, "basic");
			else if (request$1.responseTainting === "cors") response = filterResponse(response, "cors");
			else if (request$1.responseTainting === "opaque") response = filterResponse(response, "opaque");
			else assert$10(false);
		}
		let internalResponse = response.status === 0 ? response : response.internalResponse;
		if (internalResponse.urlList.length === 0) internalResponse.urlList.push(...request$1.urlList);
		if (!request$1.timingAllowFailed) response.timingAllowPassed = true;
		if (response.type === "opaque" && internalResponse.status === 206 && internalResponse.rangeRequested && !request$1.headers.contains("range")) response = internalResponse = makeNetworkError();
		if (response.status !== 0 && (request$1.method === "HEAD" || request$1.method === "CONNECT" || nullBodyStatus.includes(internalResponse.status))) {
			internalResponse.body = null;
			fetchParams.controller.dump = true;
		}
		if (request$1.integrity) {
			const processBodyError = (reason) => fetchFinale(fetchParams, makeNetworkError(reason));
			if (request$1.responseTainting === "opaque" || response.body == null) {
				processBodyError(response.error);
				return;
			}
			const processBody = (bytes) => {
				if (!bytesMatch(bytes, request$1.integrity)) {
					processBodyError("integrity mismatch");
					return;
				}
				response.body = safelyExtractBody(bytes)[0];
				fetchFinale(fetchParams, response);
			};
			await fullyReadBody(response.body, processBody, processBodyError);
		} else fetchFinale(fetchParams, response);
	}
	function schemeFetch(fetchParams) {
		if (isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) return Promise.resolve(makeAppropriateNetworkError(fetchParams));
		const { request: request$1 } = fetchParams;
		const { protocol: scheme } = requestCurrentURL(request$1);
		switch (scheme) {
			case "about:": return Promise.resolve(makeNetworkError("about scheme is not supported"));
			case "blob:": {
				if (!resolveObjectURL) resolveObjectURL = __require("buffer").resolveObjectURL;
				const blobURLEntry = requestCurrentURL(request$1);
				if (blobURLEntry.search.length !== 0) return Promise.resolve(makeNetworkError("NetworkError when attempting to fetch resource."));
				const blobURLEntryObject = resolveObjectURL(blobURLEntry.toString());
				if (request$1.method !== "GET" || !isBlobLike$1(blobURLEntryObject)) return Promise.resolve(makeNetworkError("invalid method"));
				const bodyWithType = safelyExtractBody(blobURLEntryObject);
				const body = bodyWithType[0];
				const length = isomorphicEncode(`${body.length}`);
				const type = bodyWithType[1] ?? "";
				const response = makeResponse({
					statusText: "OK",
					headersList: [["content-length", {
						name: "Content-Length",
						value: length
					}], ["content-type", {
						name: "Content-Type",
						value: type
					}]]
				});
				response.body = body;
				return Promise.resolve(response);
			}
			case "data:": {
				const currentURL = requestCurrentURL(request$1);
				const dataURLStruct = dataURLProcessor(currentURL);
				if (dataURLStruct === "failure") return Promise.resolve(makeNetworkError("failed to fetch the data URL"));
				const mimeType = serializeAMimeType$1(dataURLStruct.mimeType);
				return Promise.resolve(makeResponse({
					statusText: "OK",
					headersList: [["content-type", {
						name: "Content-Type",
						value: mimeType
					}]],
					body: safelyExtractBody(dataURLStruct.body)[0]
				}));
			}
			case "file:": return Promise.resolve(makeNetworkError("not implemented... yet..."));
			case "http:":
			case "https:": return httpFetch(fetchParams).catch((err) => makeNetworkError(err));
			default: return Promise.resolve(makeNetworkError("unknown scheme"));
		}
	}
	function finalizeResponse(fetchParams, response) {
		fetchParams.request.done = true;
		if (fetchParams.processResponseDone != null) queueMicrotask(() => fetchParams.processResponseDone(response));
	}
	function fetchFinale(fetchParams, response) {
		if (response.type === "error") {
			response.urlList = [fetchParams.request.urlList[0]];
			response.timingInfo = createOpaqueTimingInfo({ startTime: fetchParams.timingInfo.startTime });
		}
		const processResponseEndOfBody = () => {
			fetchParams.request.done = true;
			if (fetchParams.processResponseEndOfBody != null) queueMicrotask(() => fetchParams.processResponseEndOfBody(response));
		};
		if (fetchParams.processResponse != null) queueMicrotask(() => fetchParams.processResponse(response));
		if (response.body == null) processResponseEndOfBody();
		else {
			const identityTransformAlgorithm = (chunk, controller) => {
				controller.enqueue(chunk);
			};
			const transformStream = new TransformStream({
				start() {},
				transform: identityTransformAlgorithm,
				flush: processResponseEndOfBody
			}, { size() {
				return 1;
			} }, { size() {
				return 1;
			} });
			response.body = { stream: response.body.stream.pipeThrough(transformStream) };
		}
		if (fetchParams.processResponseConsumeBody != null) {
			const processBody = (nullOrBytes) => fetchParams.processResponseConsumeBody(response, nullOrBytes);
			const processBodyError = (failure) => fetchParams.processResponseConsumeBody(response, failure);
			if (response.body == null) queueMicrotask(() => processBody(null));
			else return fullyReadBody(response.body, processBody, processBodyError);
			return Promise.resolve();
		}
	}
	async function httpFetch(fetchParams) {
		const request$1 = fetchParams.request;
		let response = null;
		let actualResponse = null;
		const timingInfo = fetchParams.timingInfo;
		if (request$1.serviceWorkers === "all") {}
		if (response === null) {
			if (request$1.redirect === "follow") request$1.serviceWorkers = "none";
			actualResponse = response = await httpNetworkOrCacheFetch(fetchParams);
			if (request$1.responseTainting === "cors" && corsCheck(request$1, response) === "failure") return makeNetworkError("cors failure");
			if (TAOCheck(request$1, response) === "failure") request$1.timingAllowFailed = true;
		}
		if ((request$1.responseTainting === "opaque" || response.type === "opaque") && crossOriginResourcePolicyCheck(request$1.origin, request$1.client, request$1.destination, actualResponse) === "blocked") return makeNetworkError("blocked");
		if (redirectStatusSet.has(actualResponse.status)) {
			if (request$1.redirect !== "manual") fetchParams.controller.connection.destroy();
			if (request$1.redirect === "error") response = makeNetworkError("unexpected redirect");
			else if (request$1.redirect === "manual") response = actualResponse;
			else if (request$1.redirect === "follow") response = await httpRedirectFetch(fetchParams, response);
			else assert$10(false);
		}
		response.timingInfo = timingInfo;
		return response;
	}
	function httpRedirectFetch(fetchParams, response) {
		const request$1 = fetchParams.request;
		const actualResponse = response.internalResponse ? response.internalResponse : response;
		let locationURL;
		try {
			locationURL = responseLocationURL(actualResponse, requestCurrentURL(request$1).hash);
			if (locationURL == null) return response;
		} catch (err) {
			return Promise.resolve(makeNetworkError(err));
		}
		if (!urlIsHttpHttpsScheme$1(locationURL)) return Promise.resolve(makeNetworkError("URL scheme must be a HTTP(S) scheme"));
		if (request$1.redirectCount === 20) return Promise.resolve(makeNetworkError("redirect count exceeded"));
		request$1.redirectCount += 1;
		if (request$1.mode === "cors" && (locationURL.username || locationURL.password) && !sameOrigin(request$1, locationURL)) return Promise.resolve(makeNetworkError("cross origin not allowed for request mode \"cors\""));
		if (request$1.responseTainting === "cors" && (locationURL.username || locationURL.password)) return Promise.resolve(makeNetworkError("URL cannot contain credentials for request mode \"cors\""));
		if (actualResponse.status !== 303 && request$1.body != null && request$1.body.source == null) return Promise.resolve(makeNetworkError());
		if ([301, 302].includes(actualResponse.status) && request$1.method === "POST" || actualResponse.status === 303 && !GET_OR_HEAD.includes(request$1.method)) {
			request$1.method = "GET";
			request$1.body = null;
			for (const headerName of requestBodyHeader) request$1.headersList.delete(headerName);
		}
		if (!sameOrigin(requestCurrentURL(request$1), locationURL)) {
			request$1.headersList.delete("authorization");
			request$1.headersList.delete("proxy-authorization", true);
			request$1.headersList.delete("cookie");
			request$1.headersList.delete("host");
		}
		if (request$1.body != null) {
			assert$10(request$1.body.source != null);
			request$1.body = safelyExtractBody(request$1.body.source)[0];
		}
		const timingInfo = fetchParams.timingInfo;
		timingInfo.redirectEndTime = timingInfo.postRedirectStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);
		if (timingInfo.redirectStartTime === 0) timingInfo.redirectStartTime = timingInfo.startTime;
		request$1.urlList.push(locationURL);
		setRequestReferrerPolicyOnRedirect(request$1, actualResponse);
		return mainFetch(fetchParams, true);
	}
	async function httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch = false, isNewConnectionFetch = false) {
		const request$1 = fetchParams.request;
		let httpFetchParams = null;
		let httpRequest = null;
		let response = null;
		const httpCache = null;
		const revalidatingFlag = false;
		if (request$1.window === "no-window" && request$1.redirect === "error") {
			httpFetchParams = fetchParams;
			httpRequest = request$1;
		} else {
			httpRequest = makeRequest$1(request$1);
			httpFetchParams = { ...fetchParams };
			httpFetchParams.request = httpRequest;
		}
		const includeCredentials = request$1.credentials === "include" || request$1.credentials === "same-origin" && request$1.responseTainting === "basic";
		const contentLength = httpRequest.body ? httpRequest.body.length : null;
		let contentLengthHeaderValue = null;
		if (httpRequest.body == null && ["POST", "PUT"].includes(httpRequest.method)) contentLengthHeaderValue = "0";
		if (contentLength != null) contentLengthHeaderValue = isomorphicEncode(`${contentLength}`);
		if (contentLengthHeaderValue != null) httpRequest.headersList.append("content-length", contentLengthHeaderValue);
		if (contentLength != null && httpRequest.keepalive) {}
		if (httpRequest.referrer instanceof URL) httpRequest.headersList.append("referer", isomorphicEncode(httpRequest.referrer.href));
		appendRequestOriginHeader(httpRequest);
		appendFetchMetadata(httpRequest);
		if (!httpRequest.headersList.contains("user-agent")) httpRequest.headersList.append("user-agent", typeof esbuildDetection === "undefined" ? "undici" : "node");
		if (httpRequest.cache === "default" && (httpRequest.headersList.contains("if-modified-since") || httpRequest.headersList.contains("if-none-match") || httpRequest.headersList.contains("if-unmodified-since") || httpRequest.headersList.contains("if-match") || httpRequest.headersList.contains("if-range"))) httpRequest.cache = "no-store";
		if (httpRequest.cache === "no-cache" && !httpRequest.preventNoCacheCacheControlHeaderModification && !httpRequest.headersList.contains("cache-control")) httpRequest.headersList.append("cache-control", "max-age=0");
		if (httpRequest.cache === "no-store" || httpRequest.cache === "reload") {
			if (!httpRequest.headersList.contains("pragma")) httpRequest.headersList.append("pragma", "no-cache");
			if (!httpRequest.headersList.contains("cache-control")) httpRequest.headersList.append("cache-control", "no-cache");
		}
		if (httpRequest.headersList.contains("range")) httpRequest.headersList.append("accept-encoding", "identity");
		if (!httpRequest.headersList.contains("accept-encoding")) if (urlHasHttpsScheme(requestCurrentURL(httpRequest))) httpRequest.headersList.append("accept-encoding", "br, gzip, deflate");
		else httpRequest.headersList.append("accept-encoding", "gzip, deflate");
		httpRequest.headersList.delete("host");
		if (includeCredentials) {}
		if (httpCache == null) httpRequest.cache = "no-store";
		if (httpRequest.mode !== "no-store" && httpRequest.mode !== "reload") {}
		if (response == null) {
			if (httpRequest.mode === "only-if-cached") return makeNetworkError("only if cached");
			const forwardResponse = await httpNetworkFetch(httpFetchParams, includeCredentials, isNewConnectionFetch);
			if (!safeMethodsSet.has(httpRequest.method) && forwardResponse.status >= 200 && forwardResponse.status <= 399) {}
			if (revalidatingFlag && forwardResponse.status === 304) {}
			if (response == null) response = forwardResponse;
		}
		response.urlList = [...httpRequest.urlList];
		if (httpRequest.headersList.contains("range")) response.rangeRequested = true;
		response.requestIncludesCredentials = includeCredentials;
		if (response.status === 407) {
			if (request$1.window === "no-window") return makeNetworkError();
			if (isCancelled(fetchParams)) return makeAppropriateNetworkError(fetchParams);
			return makeNetworkError("proxy authentication required");
		}
		if (response.status === 421 && !isNewConnectionFetch && (request$1.body == null || request$1.body.source != null)) {
			if (isCancelled(fetchParams)) return makeAppropriateNetworkError(fetchParams);
			fetchParams.controller.connection.destroy();
			response = await httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch, true);
		}
		if (isAuthenticationFetch) {}
		return response;
	}
	async function httpNetworkFetch(fetchParams, includeCredentials = false, forceNewConnection = false) {
		assert$10(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed);
		fetchParams.controller.connection = {
			abort: null,
			destroyed: false,
			destroy(err) {
				if (!this.destroyed) {
					this.destroyed = true;
					this.abort?.(err ?? new DOMException$3("The operation was aborted.", "AbortError"));
				}
			}
		};
		const request$1 = fetchParams.request;
		let response = null;
		const timingInfo = fetchParams.timingInfo;
		const httpCache = null;
		if (httpCache == null) request$1.cache = "no-store";
		const newConnection = forceNewConnection ? "yes" : "no";
		if (request$1.mode === "websocket") {}
		let requestBody = null;
		if (request$1.body == null && fetchParams.processRequestEndOfBody) queueMicrotask(() => fetchParams.processRequestEndOfBody());
		else if (request$1.body != null) {
			const processBodyChunk = async function* (bytes) {
				if (isCancelled(fetchParams)) return;
				yield bytes;
				fetchParams.processRequestBodyChunkLength?.(bytes.byteLength);
			};
			const processEndOfBody = () => {
				if (isCancelled(fetchParams)) return;
				if (fetchParams.processRequestEndOfBody) fetchParams.processRequestEndOfBody();
			};
			const processBodyError = (e) => {
				if (isCancelled(fetchParams)) return;
				if (e.name === "AbortError") fetchParams.controller.abort();
				else fetchParams.controller.terminate(e);
			};
			requestBody = async function* () {
				try {
					for await (const bytes of request$1.body.stream) yield* processBodyChunk(bytes);
					processEndOfBody();
				} catch (err) {
					processBodyError(err);
				}
			}();
		}
		try {
			const { body, status, statusText, headersList, socket } = await dispatch({ body: requestBody });
			if (socket) response = makeResponse({
				status,
				statusText,
				headersList,
				socket
			});
			else {
				const iterator$1 = body[Symbol.asyncIterator]();
				fetchParams.controller.next = () => iterator$1.next();
				response = makeResponse({
					status,
					statusText,
					headersList
				});
			}
		} catch (err) {
			if (err.name === "AbortError") {
				fetchParams.controller.connection.destroy();
				return makeAppropriateNetworkError(fetchParams, err);
			}
			return makeNetworkError(err);
		}
		const pullAlgorithm = () => {
			fetchParams.controller.resume();
		};
		const cancelAlgorithm = (reason) => {
			fetchParams.controller.abort(reason);
		};
		if (!ReadableStream$1) ReadableStream$1 = __require("stream/web").ReadableStream;
		const stream$3 = new ReadableStream$1({
			async start(controller) {
				fetchParams.controller.controller = controller;
			},
			async pull(controller) {
				await pullAlgorithm(controller);
			},
			async cancel(reason) {
				await cancelAlgorithm(reason);
			}
		}, {
			highWaterMark: 0,
			size() {
				return 1;
			}
		});
		response.body = { stream: stream$3 };
		fetchParams.controller.on("terminated", onAborted);
		fetchParams.controller.resume = async () => {
			while (true) {
				let bytes;
				let isFailure;
				try {
					const { done: done$1, value } = await fetchParams.controller.next();
					if (isAborted(fetchParams)) break;
					bytes = done$1 ? void 0 : value;
				} catch (err) {
					if (fetchParams.controller.ended && !timingInfo.encodedBodySize) bytes = void 0;
					else {
						bytes = err;
						isFailure = true;
					}
				}
				if (bytes === void 0) {
					readableStreamClose(fetchParams.controller.controller);
					finalizeResponse(fetchParams, response);
					return;
				}
				timingInfo.decodedBodySize += bytes?.byteLength ?? 0;
				if (isFailure) {
					fetchParams.controller.terminate(bytes);
					return;
				}
				fetchParams.controller.controller.enqueue(new Uint8Array(bytes));
				if (isErrored(stream$3)) {
					fetchParams.controller.terminate();
					return;
				}
				if (!fetchParams.controller.controller.desiredSize) return;
			}
		};
		function onAborted(reason) {
			if (isAborted(fetchParams)) {
				response.aborted = true;
				if (isReadable(stream$3)) fetchParams.controller.controller.error(fetchParams.controller.serializedAbortReason);
			} else if (isReadable(stream$3)) fetchParams.controller.controller.error(new TypeError("terminated", { cause: isErrorLike(reason) ? reason : void 0 }));
			fetchParams.controller.connection.destroy();
		}
		return response;
		async function dispatch({ body }) {
			const url$3 = requestCurrentURL(request$1);
			/** @type {import('../..').Agent} */
			const agent = fetchParams.controller.dispatcher;
			return new Promise((resolve, reject) => agent.dispatch({
				path: url$3.pathname + url$3.search,
				origin: url$3.origin,
				method: request$1.method,
				body: fetchParams.controller.dispatcher.isMockActive ? request$1.body && (request$1.body.source || request$1.body.stream) : body,
				headers: request$1.headersList.entries,
				maxRedirections: 0,
				upgrade: request$1.mode === "websocket" ? "websocket" : void 0
			}, {
				body: null,
				abort: null,
				onConnect(abort$4) {
					const { connection } = fetchParams.controller;
					if (connection.destroyed) abort$4(new DOMException$3("The operation was aborted.", "AbortError"));
					else {
						fetchParams.controller.on("terminated", abort$4);
						this.abort = connection.abort = abort$4;
					}
				},
				onHeaders(status, headersList, resume$2, statusText) {
					if (status < 200) return;
					let codings = [];
					let location = "";
					const headers = new Headers$3();
					if (Array.isArray(headersList)) for (let n = 0; n < headersList.length; n += 2) {
						const key$1 = headersList[n + 0].toString("latin1");
						const val = headersList[n + 1].toString("latin1");
						if (key$1.toLowerCase() === "content-encoding") codings = val.toLowerCase().split(",").map((x) => x.trim());
						else if (key$1.toLowerCase() === "location") location = val;
						headers[kHeadersList$2].append(key$1, val);
					}
					else {
						const keys$2 = Object.keys(headersList);
						for (const key$1 of keys$2) {
							const val = headersList[key$1];
							if (key$1.toLowerCase() === "content-encoding") codings = val.toLowerCase().split(",").map((x) => x.trim()).reverse();
							else if (key$1.toLowerCase() === "location") location = val;
							headers[kHeadersList$2].append(key$1, val);
						}
					}
					this.body = new Readable$2({ read: resume$2 });
					const decoders$1 = [];
					const willFollow = request$1.redirect === "follow" && location && redirectStatusSet.has(status);
					if (request$1.method !== "HEAD" && request$1.method !== "CONNECT" && !nullBodyStatus.includes(status) && !willFollow) for (const coding of codings) if (coding === "x-gzip" || coding === "gzip") decoders$1.push(zlib$3.createGunzip({
						flush: zlib$3.constants.Z_SYNC_FLUSH,
						finishFlush: zlib$3.constants.Z_SYNC_FLUSH
					}));
					else if (coding === "deflate") decoders$1.push(zlib$3.createInflate());
					else if (coding === "br") decoders$1.push(zlib$3.createBrotliDecompress());
					else {
						decoders$1.length = 0;
						break;
					}
					resolve({
						status,
						statusText,
						headersList: headers[kHeadersList$2],
						body: decoders$1.length ? pipeline$1(this.body, ...decoders$1, () => {}) : this.body.on("error", () => {})
					});
					return true;
				},
				onData(chunk) {
					if (fetchParams.controller.dump) return;
					const bytes = chunk;
					timingInfo.encodedBodySize += bytes.byteLength;
					return this.body.push(bytes);
				},
				onComplete() {
					if (this.abort) fetchParams.controller.off("terminated", this.abort);
					fetchParams.controller.ended = true;
					this.body.push(null);
				},
				onError(error$1) {
					if (this.abort) fetchParams.controller.off("terminated", this.abort);
					this.body?.destroy(error$1);
					fetchParams.controller.terminate(error$1);
					reject(error$1);
				},
				onUpgrade(status, headersList, socket) {
					if (status !== 101) return;
					const headers = new Headers$3();
					for (let n = 0; n < headersList.length; n += 2) {
						const key$1 = headersList[n + 0].toString("latin1");
						const val = headersList[n + 1].toString("latin1");
						headers[kHeadersList$2].append(key$1, val);
					}
					resolve({
						status,
						statusText: STATUS_CODES[status],
						headersList: headers[kHeadersList$2],
						socket
					});
					return true;
				}
			}));
		}
	}
	module.exports = {
		fetch: fetch$2,
		Fetch,
		fetching: fetching$2,
		finalizeAndReportTiming
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fileapi/symbols.js
var require_symbols$2 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fileapi/symbols.js"(exports, module) {
	module.exports = {
		kState: Symbol("FileReader state"),
		kResult: Symbol("FileReader result"),
		kError: Symbol("FileReader error"),
		kLastProgressEventFired: Symbol("FileReader last progress event fired timestamp"),
		kEvents: Symbol("FileReader events"),
		kAborted: Symbol("FileReader aborted")
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fileapi/progressevent.js
var require_progressevent = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fileapi/progressevent.js"(exports, module) {
	const { webidl: webidl$6 } = require_webidl();
	const kState$3 = Symbol("ProgressEvent state");
	/**
	* @see https://xhr.spec.whatwg.org/#progressevent
	*/
	var ProgressEvent$1 = class ProgressEvent$1 extends Event {
		constructor(type, eventInitDict = {}) {
			type = webidl$6.converters.DOMString(type);
			eventInitDict = webidl$6.converters.ProgressEventInit(eventInitDict ?? {});
			super(type, eventInitDict);
			this[kState$3] = {
				lengthComputable: eventInitDict.lengthComputable,
				loaded: eventInitDict.loaded,
				total: eventInitDict.total
			};
		}
		get lengthComputable() {
			webidl$6.brandCheck(this, ProgressEvent$1);
			return this[kState$3].lengthComputable;
		}
		get loaded() {
			webidl$6.brandCheck(this, ProgressEvent$1);
			return this[kState$3].loaded;
		}
		get total() {
			webidl$6.brandCheck(this, ProgressEvent$1);
			return this[kState$3].total;
		}
	};
	webidl$6.converters.ProgressEventInit = webidl$6.dictionaryConverter([
		{
			key: "lengthComputable",
			converter: webidl$6.converters.boolean,
			defaultValue: false
		},
		{
			key: "loaded",
			converter: webidl$6.converters["unsigned long long"],
			defaultValue: 0
		},
		{
			key: "total",
			converter: webidl$6.converters["unsigned long long"],
			defaultValue: 0
		},
		{
			key: "bubbles",
			converter: webidl$6.converters.boolean,
			defaultValue: false
		},
		{
			key: "cancelable",
			converter: webidl$6.converters.boolean,
			defaultValue: false
		},
		{
			key: "composed",
			converter: webidl$6.converters.boolean,
			defaultValue: false
		}
	]);
	module.exports = { ProgressEvent: ProgressEvent$1 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fileapi/encoding.js
var require_encoding = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fileapi/encoding.js"(exports, module) {
	/**
	* @see https://encoding.spec.whatwg.org/#concept-encoding-get
	* @param {string|undefined} label
	*/
	function getEncoding$1(label) {
		if (!label) return "failure";
		switch (label.trim().toLowerCase()) {
			case "unicode-1-1-utf-8":
			case "unicode11utf8":
			case "unicode20utf8":
			case "utf-8":
			case "utf8":
			case "x-unicode20utf8": return "UTF-8";
			case "866":
			case "cp866":
			case "csibm866":
			case "ibm866": return "IBM866";
			case "csisolatin2":
			case "iso-8859-2":
			case "iso-ir-101":
			case "iso8859-2":
			case "iso88592":
			case "iso_8859-2":
			case "iso_8859-2:1987":
			case "l2":
			case "latin2": return "ISO-8859-2";
			case "csisolatin3":
			case "iso-8859-3":
			case "iso-ir-109":
			case "iso8859-3":
			case "iso88593":
			case "iso_8859-3":
			case "iso_8859-3:1988":
			case "l3":
			case "latin3": return "ISO-8859-3";
			case "csisolatin4":
			case "iso-8859-4":
			case "iso-ir-110":
			case "iso8859-4":
			case "iso88594":
			case "iso_8859-4":
			case "iso_8859-4:1988":
			case "l4":
			case "latin4": return "ISO-8859-4";
			case "csisolatincyrillic":
			case "cyrillic":
			case "iso-8859-5":
			case "iso-ir-144":
			case "iso8859-5":
			case "iso88595":
			case "iso_8859-5":
			case "iso_8859-5:1988": return "ISO-8859-5";
			case "arabic":
			case "asmo-708":
			case "csiso88596e":
			case "csiso88596i":
			case "csisolatinarabic":
			case "ecma-114":
			case "iso-8859-6":
			case "iso-8859-6-e":
			case "iso-8859-6-i":
			case "iso-ir-127":
			case "iso8859-6":
			case "iso88596":
			case "iso_8859-6":
			case "iso_8859-6:1987": return "ISO-8859-6";
			case "csisolatingreek":
			case "ecma-118":
			case "elot_928":
			case "greek":
			case "greek8":
			case "iso-8859-7":
			case "iso-ir-126":
			case "iso8859-7":
			case "iso88597":
			case "iso_8859-7":
			case "iso_8859-7:1987":
			case "sun_eu_greek": return "ISO-8859-7";
			case "csiso88598e":
			case "csisolatinhebrew":
			case "hebrew":
			case "iso-8859-8":
			case "iso-8859-8-e":
			case "iso-ir-138":
			case "iso8859-8":
			case "iso88598":
			case "iso_8859-8":
			case "iso_8859-8:1988":
			case "visual": return "ISO-8859-8";
			case "csiso88598i":
			case "iso-8859-8-i":
			case "logical": return "ISO-8859-8-I";
			case "csisolatin6":
			case "iso-8859-10":
			case "iso-ir-157":
			case "iso8859-10":
			case "iso885910":
			case "l6":
			case "latin6": return "ISO-8859-10";
			case "iso-8859-13":
			case "iso8859-13":
			case "iso885913": return "ISO-8859-13";
			case "iso-8859-14":
			case "iso8859-14":
			case "iso885914": return "ISO-8859-14";
			case "csisolatin9":
			case "iso-8859-15":
			case "iso8859-15":
			case "iso885915":
			case "iso_8859-15":
			case "l9": return "ISO-8859-15";
			case "iso-8859-16": return "ISO-8859-16";
			case "cskoi8r":
			case "koi":
			case "koi8":
			case "koi8-r":
			case "koi8_r": return "KOI8-R";
			case "koi8-ru":
			case "koi8-u": return "KOI8-U";
			case "csmacintosh":
			case "mac":
			case "macintosh":
			case "x-mac-roman": return "macintosh";
			case "iso-8859-11":
			case "iso8859-11":
			case "iso885911":
			case "tis-620":
			case "windows-874": return "windows-874";
			case "cp1250":
			case "windows-1250":
			case "x-cp1250": return "windows-1250";
			case "cp1251":
			case "windows-1251":
			case "x-cp1251": return "windows-1251";
			case "ansi_x3.4-1968":
			case "ascii":
			case "cp1252":
			case "cp819":
			case "csisolatin1":
			case "ibm819":
			case "iso-8859-1":
			case "iso-ir-100":
			case "iso8859-1":
			case "iso88591":
			case "iso_8859-1":
			case "iso_8859-1:1987":
			case "l1":
			case "latin1":
			case "us-ascii":
			case "windows-1252":
			case "x-cp1252": return "windows-1252";
			case "cp1253":
			case "windows-1253":
			case "x-cp1253": return "windows-1253";
			case "cp1254":
			case "csisolatin5":
			case "iso-8859-9":
			case "iso-ir-148":
			case "iso8859-9":
			case "iso88599":
			case "iso_8859-9":
			case "iso_8859-9:1989":
			case "l5":
			case "latin5":
			case "windows-1254":
			case "x-cp1254": return "windows-1254";
			case "cp1255":
			case "windows-1255":
			case "x-cp1255": return "windows-1255";
			case "cp1256":
			case "windows-1256":
			case "x-cp1256": return "windows-1256";
			case "cp1257":
			case "windows-1257":
			case "x-cp1257": return "windows-1257";
			case "cp1258":
			case "windows-1258":
			case "x-cp1258": return "windows-1258";
			case "x-mac-cyrillic":
			case "x-mac-ukrainian": return "x-mac-cyrillic";
			case "chinese":
			case "csgb2312":
			case "csiso58gb231280":
			case "gb2312":
			case "gb_2312":
			case "gb_2312-80":
			case "gbk":
			case "iso-ir-58":
			case "x-gbk": return "GBK";
			case "gb18030": return "gb18030";
			case "big5":
			case "big5-hkscs":
			case "cn-big5":
			case "csbig5":
			case "x-x-big5": return "Big5";
			case "cseucpkdfmtjapanese":
			case "euc-jp":
			case "x-euc-jp": return "EUC-JP";
			case "csiso2022jp":
			case "iso-2022-jp": return "ISO-2022-JP";
			case "csshiftjis":
			case "ms932":
			case "ms_kanji":
			case "shift-jis":
			case "shift_jis":
			case "sjis":
			case "windows-31j":
			case "x-sjis": return "Shift_JIS";
			case "cseuckr":
			case "csksc56011987":
			case "euc-kr":
			case "iso-ir-149":
			case "korean":
			case "ks_c_5601-1987":
			case "ks_c_5601-1989":
			case "ksc5601":
			case "ksc_5601":
			case "windows-949": return "EUC-KR";
			case "csiso2022kr":
			case "hz-gb-2312":
			case "iso-2022-cn":
			case "iso-2022-cn-ext":
			case "iso-2022-kr":
			case "replacement": return "replacement";
			case "unicodefffe":
			case "utf-16be": return "UTF-16BE";
			case "csunicode":
			case "iso-10646-ucs-2":
			case "ucs-2":
			case "unicode":
			case "unicodefeff":
			case "utf-16":
			case "utf-16le": return "UTF-16LE";
			case "x-user-defined": return "x-user-defined";
			default: return "failure";
		}
	}
	module.exports = { getEncoding: getEncoding$1 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fileapi/util.js
var require_util$6 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fileapi/util.js"(exports, module) {
	const { kState: kState$2, kError: kError$2, kResult: kResult$1, kAborted: kAborted$1, kLastProgressEventFired } = require_symbols$2();
	const { ProgressEvent } = require_progressevent();
	const { getEncoding } = require_encoding();
	const { DOMException: DOMException$2 } = require_constants$5();
	const { serializeAMimeType, parseMIMEType } = require_dataURL();
	const { types: types$2 } = __require("util");
	const { StringDecoder: StringDecoder$3 } = __require("string_decoder");
	const { btoa: btoa$1 } = __require("buffer");
	/** @type {PropertyDescriptor} */
	const staticPropertyDescriptors$3 = {
		enumerable: true,
		writable: false,
		configurable: false
	};
	/**
	* @see https://w3c.github.io/FileAPI/#readOperation
	* @param {import('./filereader').FileReader} fr
	* @param {import('buffer').Blob} blob
	* @param {string} type
	* @param {string?} encodingName
	*/
	function readOperation$1(fr, blob, type, encodingName) {
		if (fr[kState$2] === "loading") throw new DOMException$2("Invalid state", "InvalidStateError");
		fr[kState$2] = "loading";
		fr[kResult$1] = null;
		fr[kError$2] = null;
		/** @type {import('stream/web').ReadableStream} */
		const stream$3 = blob.stream();
		const reader = stream$3.getReader();
		/** @type {Uint8Array[]} */
		const bytes = [];
		let chunkPromise = reader.read();
		let isFirstChunk = true;
		(async () => {
			while (!fr[kAborted$1]) try {
				const { done: done$1, value } = await chunkPromise;
				if (isFirstChunk && !fr[kAborted$1]) queueMicrotask(() => {
					fireAProgressEvent$1("loadstart", fr);
				});
				isFirstChunk = false;
				if (!done$1 && types$2.isUint8Array(value)) {
					bytes.push(value);
					if ((fr[kLastProgressEventFired] === void 0 || Date.now() - fr[kLastProgressEventFired] >= 50) && !fr[kAborted$1]) {
						fr[kLastProgressEventFired] = Date.now();
						queueMicrotask(() => {
							fireAProgressEvent$1("progress", fr);
						});
					}
					chunkPromise = reader.read();
				} else if (done$1) {
					queueMicrotask(() => {
						fr[kState$2] = "done";
						try {
							const result = packageData(bytes, type, blob.type, encodingName);
							if (fr[kAborted$1]) return;
							fr[kResult$1] = result;
							fireAProgressEvent$1("load", fr);
						} catch (error$1) {
							fr[kError$2] = error$1;
							fireAProgressEvent$1("error", fr);
						}
						if (fr[kState$2] !== "loading") fireAProgressEvent$1("loadend", fr);
					});
					break;
				}
			} catch (error$1) {
				if (fr[kAborted$1]) return;
				queueMicrotask(() => {
					fr[kState$2] = "done";
					fr[kError$2] = error$1;
					fireAProgressEvent$1("error", fr);
					if (fr[kState$2] !== "loading") fireAProgressEvent$1("loadend", fr);
				});
				break;
			}
		})();
	}
	/**
	* @see https://w3c.github.io/FileAPI/#fire-a-progress-event
	* @see https://dom.spec.whatwg.org/#concept-event-fire
	* @param {string} e The name of the event
	* @param {import('./filereader').FileReader} reader
	*/
	function fireAProgressEvent$1(e, reader) {
		const event = new ProgressEvent(e, {
			bubbles: false,
			cancelable: false
		});
		reader.dispatchEvent(event);
	}
	/**
	* @see https://w3c.github.io/FileAPI/#blob-package-data
	* @param {Uint8Array[]} bytes
	* @param {string} type
	* @param {string?} mimeType
	* @param {string?} encodingName
	*/
	function packageData(bytes, type, mimeType, encodingName) {
		switch (type) {
			case "DataURL": {
				let dataURL = "data:";
				const parsed = parseMIMEType(mimeType || "application/octet-stream");
				if (parsed !== "failure") dataURL += serializeAMimeType(parsed);
				dataURL += ";base64,";
				const decoder = new StringDecoder$3("latin1");
				for (const chunk of bytes) dataURL += btoa$1(decoder.write(chunk));
				dataURL += btoa$1(decoder.end());
				return dataURL;
			}
			case "Text": {
				let encoding = "failure";
				if (encodingName) encoding = getEncoding(encodingName);
				if (encoding === "failure" && mimeType) {
					const type$1 = parseMIMEType(mimeType);
					if (type$1 !== "failure") encoding = getEncoding(type$1.parameters.get("charset"));
				}
				if (encoding === "failure") encoding = "UTF-8";
				return decode$1(bytes, encoding);
			}
			case "ArrayBuffer": {
				const sequence = combineByteSequences(bytes);
				return sequence.buffer;
			}
			case "BinaryString": {
				let binaryString = "";
				const decoder = new StringDecoder$3("latin1");
				for (const chunk of bytes) binaryString += decoder.write(chunk);
				binaryString += decoder.end();
				return binaryString;
			}
		}
	}
	/**
	* @see https://encoding.spec.whatwg.org/#decode
	* @param {Uint8Array[]} ioQueue
	* @param {string} encoding
	*/
	function decode$1(ioQueue, encoding) {
		const bytes = combineByteSequences(ioQueue);
		const BOMEncoding = BOMSniffing(bytes);
		let slice$1 = 0;
		if (BOMEncoding !== null) {
			encoding = BOMEncoding;
			slice$1 = BOMEncoding === "UTF-8" ? 3 : 2;
		}
		const sliced = bytes.slice(slice$1);
		return new TextDecoder(encoding).decode(sliced);
	}
	/**
	* @see https://encoding.spec.whatwg.org/#bom-sniff
	* @param {Uint8Array} ioQueue
	*/
	function BOMSniffing(ioQueue) {
		const [a, b, c] = ioQueue;
		if (a === 239 && b === 187 && c === 191) return "UTF-8";
		else if (a === 254 && b === 255) return "UTF-16BE";
		else if (a === 255 && b === 254) return "UTF-16LE";
		return null;
	}
	/**
	* @param {Uint8Array[]} sequences
	*/
	function combineByteSequences(sequences) {
		const size = sequences.reduce((a, b) => {
			return a + b.byteLength;
		}, 0);
		let offset = 0;
		return sequences.reduce((a, b) => {
			a.set(b, offset);
			offset += b.byteLength;
			return a;
		}, new Uint8Array(size));
	}
	module.exports = {
		staticPropertyDescriptors: staticPropertyDescriptors$3,
		readOperation: readOperation$1,
		fireAProgressEvent: fireAProgressEvent$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fileapi/filereader.js
var require_filereader = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/fileapi/filereader.js"(exports, module) {
	const { staticPropertyDescriptors: staticPropertyDescriptors$2, readOperation, fireAProgressEvent } = require_util$6();
	const { kState: kState$1, kError: kError$1, kResult, kEvents, kAborted } = require_symbols$2();
	const { webidl: webidl$5 } = require_webidl();
	const { kEnumerableProperty: kEnumerableProperty$4 } = require_util$9();
	var FileReader = class FileReader extends EventTarget {
		constructor() {
			super();
			this[kState$1] = "empty";
			this[kResult] = null;
			this[kError$1] = null;
			this[kEvents] = {
				loadend: null,
				error: null,
				abort: null,
				load: null,
				progress: null,
				loadstart: null
			};
		}
		/**
		* @see https://w3c.github.io/FileAPI/#dfn-readAsArrayBuffer
		* @param {import('buffer').Blob} blob
		*/
		readAsArrayBuffer(blob) {
			webidl$5.brandCheck(this, FileReader);
			webidl$5.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsArrayBuffer" });
			blob = webidl$5.converters.Blob(blob, { strict: false });
			readOperation(this, blob, "ArrayBuffer");
		}
		/**
		* @see https://w3c.github.io/FileAPI/#readAsBinaryString
		* @param {import('buffer').Blob} blob
		*/
		readAsBinaryString(blob) {
			webidl$5.brandCheck(this, FileReader);
			webidl$5.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsBinaryString" });
			blob = webidl$5.converters.Blob(blob, { strict: false });
			readOperation(this, blob, "BinaryString");
		}
		/**
		* @see https://w3c.github.io/FileAPI/#readAsDataText
		* @param {import('buffer').Blob} blob
		* @param {string?} encoding
		*/
		readAsText(blob, encoding = void 0) {
			webidl$5.brandCheck(this, FileReader);
			webidl$5.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsText" });
			blob = webidl$5.converters.Blob(blob, { strict: false });
			if (encoding !== void 0) encoding = webidl$5.converters.DOMString(encoding);
			readOperation(this, blob, "Text", encoding);
		}
		/**
		* @see https://w3c.github.io/FileAPI/#dfn-readAsDataURL
		* @param {import('buffer').Blob} blob
		*/
		readAsDataURL(blob) {
			webidl$5.brandCheck(this, FileReader);
			webidl$5.argumentLengthCheck(arguments, 1, { header: "FileReader.readAsDataURL" });
			blob = webidl$5.converters.Blob(blob, { strict: false });
			readOperation(this, blob, "DataURL");
		}
		/**
		* @see https://w3c.github.io/FileAPI/#dfn-abort
		*/
		abort() {
			if (this[kState$1] === "empty" || this[kState$1] === "done") {
				this[kResult] = null;
				return;
			}
			if (this[kState$1] === "loading") {
				this[kState$1] = "done";
				this[kResult] = null;
			}
			this[kAborted] = true;
			fireAProgressEvent("abort", this);
			if (this[kState$1] !== "loading") fireAProgressEvent("loadend", this);
		}
		/**
		* @see https://w3c.github.io/FileAPI/#dom-filereader-readystate
		*/
		get readyState() {
			webidl$5.brandCheck(this, FileReader);
			switch (this[kState$1]) {
				case "empty": return this.EMPTY;
				case "loading": return this.LOADING;
				case "done": return this.DONE;
			}
		}
		/**
		* @see https://w3c.github.io/FileAPI/#dom-filereader-result
		*/
		get result() {
			webidl$5.brandCheck(this, FileReader);
			return this[kResult];
		}
		/**
		* @see https://w3c.github.io/FileAPI/#dom-filereader-error
		*/
		get error() {
			webidl$5.brandCheck(this, FileReader);
			return this[kError$1];
		}
		get onloadend() {
			webidl$5.brandCheck(this, FileReader);
			return this[kEvents].loadend;
		}
		set onloadend(fn) {
			webidl$5.brandCheck(this, FileReader);
			if (this[kEvents].loadend) this.removeEventListener("loadend", this[kEvents].loadend);
			if (typeof fn === "function") {
				this[kEvents].loadend = fn;
				this.addEventListener("loadend", fn);
			} else this[kEvents].loadend = null;
		}
		get onerror() {
			webidl$5.brandCheck(this, FileReader);
			return this[kEvents].error;
		}
		set onerror(fn) {
			webidl$5.brandCheck(this, FileReader);
			if (this[kEvents].error) this.removeEventListener("error", this[kEvents].error);
			if (typeof fn === "function") {
				this[kEvents].error = fn;
				this.addEventListener("error", fn);
			} else this[kEvents].error = null;
		}
		get onloadstart() {
			webidl$5.brandCheck(this, FileReader);
			return this[kEvents].loadstart;
		}
		set onloadstart(fn) {
			webidl$5.brandCheck(this, FileReader);
			if (this[kEvents].loadstart) this.removeEventListener("loadstart", this[kEvents].loadstart);
			if (typeof fn === "function") {
				this[kEvents].loadstart = fn;
				this.addEventListener("loadstart", fn);
			} else this[kEvents].loadstart = null;
		}
		get onprogress() {
			webidl$5.brandCheck(this, FileReader);
			return this[kEvents].progress;
		}
		set onprogress(fn) {
			webidl$5.brandCheck(this, FileReader);
			if (this[kEvents].progress) this.removeEventListener("progress", this[kEvents].progress);
			if (typeof fn === "function") {
				this[kEvents].progress = fn;
				this.addEventListener("progress", fn);
			} else this[kEvents].progress = null;
		}
		get onload() {
			webidl$5.brandCheck(this, FileReader);
			return this[kEvents].load;
		}
		set onload(fn) {
			webidl$5.brandCheck(this, FileReader);
			if (this[kEvents].load) this.removeEventListener("load", this[kEvents].load);
			if (typeof fn === "function") {
				this[kEvents].load = fn;
				this.addEventListener("load", fn);
			} else this[kEvents].load = null;
		}
		get onabort() {
			webidl$5.brandCheck(this, FileReader);
			return this[kEvents].abort;
		}
		set onabort(fn) {
			webidl$5.brandCheck(this, FileReader);
			if (this[kEvents].abort) this.removeEventListener("abort", this[kEvents].abort);
			if (typeof fn === "function") {
				this[kEvents].abort = fn;
				this.addEventListener("abort", fn);
			} else this[kEvents].abort = null;
		}
	};
	FileReader.EMPTY = FileReader.prototype.EMPTY = 0;
	FileReader.LOADING = FileReader.prototype.LOADING = 1;
	FileReader.DONE = FileReader.prototype.DONE = 2;
	Object.defineProperties(FileReader.prototype, {
		EMPTY: staticPropertyDescriptors$2,
		LOADING: staticPropertyDescriptors$2,
		DONE: staticPropertyDescriptors$2,
		readAsArrayBuffer: kEnumerableProperty$4,
		readAsBinaryString: kEnumerableProperty$4,
		readAsText: kEnumerableProperty$4,
		readAsDataURL: kEnumerableProperty$4,
		abort: kEnumerableProperty$4,
		readyState: kEnumerableProperty$4,
		result: kEnumerableProperty$4,
		error: kEnumerableProperty$4,
		onloadstart: kEnumerableProperty$4,
		onprogress: kEnumerableProperty$4,
		onload: kEnumerableProperty$4,
		onabort: kEnumerableProperty$4,
		onerror: kEnumerableProperty$4,
		onloadend: kEnumerableProperty$4,
		[Symbol.toStringTag]: {
			value: "FileReader",
			writable: false,
			enumerable: false,
			configurable: true
		}
	});
	Object.defineProperties(FileReader, {
		EMPTY: staticPropertyDescriptors$2,
		LOADING: staticPropertyDescriptors$2,
		DONE: staticPropertyDescriptors$2
	});
	module.exports = { FileReader };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cache/symbols.js
var require_symbols$1 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cache/symbols.js"(exports, module) {
	module.exports = { kConstruct: require_symbols$4().kConstruct };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cache/util.js
var require_util$5 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cache/util.js"(exports, module) {
	const assert$9 = __require("assert");
	const { URLSerializer: URLSerializer$1 } = require_dataURL();
	const { isValidHeaderName: isValidHeaderName$1 } = require_util$8();
	/**
	* @see https://url.spec.whatwg.org/#concept-url-equals
	* @param {URL} A
	* @param {URL} B
	* @param {boolean | undefined} excludeFragment
	* @returns {boolean}
	*/
	function urlEquals$1(A, B, excludeFragment = false) {
		const serializedA = URLSerializer$1(A, excludeFragment);
		const serializedB = URLSerializer$1(B, excludeFragment);
		return serializedA === serializedB;
	}
	/**
	* @see https://github.com/chromium/chromium/blob/694d20d134cb553d8d89e5500b9148012b1ba299/content/browser/cache_storage/cache_storage_cache.cc#L260-L262
	* @param {string} header
	*/
	function fieldValues(header) {
		assert$9(header !== null);
		const values$1 = [];
		for (let value of header.split(",")) {
			value = value.trim();
			if (!value.length) continue;
			else if (!isValidHeaderName$1(value)) continue;
			values$1.push(value);
		}
		return values$1;
	}
	module.exports = {
		urlEquals: urlEquals$1,
		fieldValues
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cache/cache.js
var require_cache$2 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cache/cache.js"(exports, module) {
	const { kConstruct: kConstruct$1 } = require_symbols$1();
	const { urlEquals, fieldValues: getFieldValues } = require_util$5();
	const { kEnumerableProperty: kEnumerableProperty$3, isDisturbed } = require_util$9();
	const { kHeadersList: kHeadersList$1 } = require_symbols$4();
	const { webidl: webidl$4 } = require_webidl();
	const { Response: Response$2, cloneResponse } = require_response();
	const { Request: Request$1 } = require_request();
	const { kState, kHeaders, kGuard, kRealm } = require_symbols$3();
	const { fetching: fetching$1 } = require_fetch$1();
	const { urlIsHttpHttpsScheme, createDeferredPromise, readAllBytes } = require_util$8();
	const assert$8 = __require("assert");
	const { getGlobalDispatcher: getGlobalDispatcher$3 } = require_global();
	/**
	* @see https://w3c.github.io/ServiceWorker/#dfn-cache-batch-operation
	* @typedef {Object} CacheBatchOperation
	* @property {'delete' | 'put'} type
	* @property {any} request
	* @property {any} response
	* @property {import('../../types/cache').CacheQueryOptions} options
	*/
	/**
	* @see https://w3c.github.io/ServiceWorker/#dfn-request-response-list
	* @typedef {[any, any][]} requestResponseList
	*/
	var Cache$2 = class Cache$2 {
		/**
		* @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list
		* @type {requestResponseList}
		*/
		#relevantRequestResponseList;
		constructor() {
			if (arguments[0] !== kConstruct$1) webidl$4.illegalConstructor();
			this.#relevantRequestResponseList = arguments[1];
		}
		async match(request$1, options = {}) {
			webidl$4.brandCheck(this, Cache$2);
			webidl$4.argumentLengthCheck(arguments, 1, { header: "Cache.match" });
			request$1 = webidl$4.converters.RequestInfo(request$1);
			options = webidl$4.converters.CacheQueryOptions(options);
			const p = await this.matchAll(request$1, options);
			if (p.length === 0) return;
			return p[0];
		}
		async matchAll(request$1 = void 0, options = {}) {
			webidl$4.brandCheck(this, Cache$2);
			if (request$1 !== void 0) request$1 = webidl$4.converters.RequestInfo(request$1);
			options = webidl$4.converters.CacheQueryOptions(options);
			let r = null;
			if (request$1 !== void 0) {
				if (request$1 instanceof Request$1) {
					r = request$1[kState];
					if (r.method !== "GET" && !options.ignoreMethod) return [];
				} else if (typeof request$1 === "string") r = new Request$1(request$1)[kState];
			}
			const responses = [];
			if (request$1 === void 0) for (const requestResponse of this.#relevantRequestResponseList) responses.push(requestResponse[1]);
			else {
				const requestResponses = this.#queryCache(r, options);
				for (const requestResponse of requestResponses) responses.push(requestResponse[1]);
			}
			const responseList = [];
			for (const response of responses) {
				const responseObject = new Response$2(response.body?.source ?? null);
				const body = responseObject[kState].body;
				responseObject[kState] = response;
				responseObject[kState].body = body;
				responseObject[kHeaders][kHeadersList$1] = response.headersList;
				responseObject[kHeaders][kGuard] = "immutable";
				responseList.push(responseObject);
			}
			return Object.freeze(responseList);
		}
		async add(request$1) {
			webidl$4.brandCheck(this, Cache$2);
			webidl$4.argumentLengthCheck(arguments, 1, { header: "Cache.add" });
			request$1 = webidl$4.converters.RequestInfo(request$1);
			const requests$1 = [request$1];
			const responseArrayPromise = this.addAll(requests$1);
			return await responseArrayPromise;
		}
		async addAll(requests$1) {
			webidl$4.brandCheck(this, Cache$2);
			webidl$4.argumentLengthCheck(arguments, 1, { header: "Cache.addAll" });
			requests$1 = webidl$4.converters["sequence<RequestInfo>"](requests$1);
			const responsePromises = [];
			const requestList = [];
			for (const request$1 of requests$1) {
				if (typeof request$1 === "string") continue;
				const r = request$1[kState];
				if (!urlIsHttpHttpsScheme(r.url) || r.method !== "GET") throw webidl$4.errors.exception({
					header: "Cache.addAll",
					message: "Expected http/s scheme when method is not GET."
				});
			}
			/** @type {ReturnType<typeof fetching>[]} */
			const fetchControllers = [];
			for (const request$1 of requests$1) {
				const r = new Request$1(request$1)[kState];
				if (!urlIsHttpHttpsScheme(r.url)) throw webidl$4.errors.exception({
					header: "Cache.addAll",
					message: "Expected http/s scheme."
				});
				r.initiator = "fetch";
				r.destination = "subresource";
				requestList.push(r);
				const responsePromise = createDeferredPromise();
				fetchControllers.push(fetching$1({
					request: r,
					dispatcher: getGlobalDispatcher$3(),
					processResponse(response) {
						if (response.type === "error" || response.status === 206 || response.status < 200 || response.status > 299) responsePromise.reject(webidl$4.errors.exception({
							header: "Cache.addAll",
							message: "Received an invalid status code or the request failed."
						}));
						else if (response.headersList.contains("vary")) {
							const fieldValues$1 = getFieldValues(response.headersList.get("vary"));
							for (const fieldValue of fieldValues$1) if (fieldValue === "*") {
								responsePromise.reject(webidl$4.errors.exception({
									header: "Cache.addAll",
									message: "invalid vary field value"
								}));
								for (const controller of fetchControllers) controller.abort();
								return;
							}
						}
					},
					processResponseEndOfBody(response) {
						if (response.aborted) {
							responsePromise.reject(new DOMException("aborted", "AbortError"));
							return;
						}
						responsePromise.resolve(response);
					}
				}));
				responsePromises.push(responsePromise.promise);
			}
			const p = Promise.all(responsePromises);
			const responses = await p;
			const operations = [];
			let index = 0;
			for (const response of responses) {
				/** @type {CacheBatchOperation} */
				const operation = {
					type: "put",
					request: requestList[index],
					response
				};
				operations.push(operation);
				index++;
			}
			const cacheJobPromise = createDeferredPromise();
			let errorData = null;
			try {
				this.#batchCacheOperations(operations);
			} catch (e) {
				errorData = e;
			}
			queueMicrotask(() => {
				if (errorData === null) cacheJobPromise.resolve(void 0);
				else cacheJobPromise.reject(errorData);
			});
			return cacheJobPromise.promise;
		}
		async put(request$1, response) {
			webidl$4.brandCheck(this, Cache$2);
			webidl$4.argumentLengthCheck(arguments, 2, { header: "Cache.put" });
			request$1 = webidl$4.converters.RequestInfo(request$1);
			response = webidl$4.converters.Response(response);
			let innerRequest = null;
			if (request$1 instanceof Request$1) innerRequest = request$1[kState];
			else innerRequest = new Request$1(request$1)[kState];
			if (!urlIsHttpHttpsScheme(innerRequest.url) || innerRequest.method !== "GET") throw webidl$4.errors.exception({
				header: "Cache.put",
				message: "Expected an http/s scheme when method is not GET"
			});
			const innerResponse = response[kState];
			if (innerResponse.status === 206) throw webidl$4.errors.exception({
				header: "Cache.put",
				message: "Got 206 status"
			});
			if (innerResponse.headersList.contains("vary")) {
				const fieldValues$1 = getFieldValues(innerResponse.headersList.get("vary"));
				for (const fieldValue of fieldValues$1) if (fieldValue === "*") throw webidl$4.errors.exception({
					header: "Cache.put",
					message: "Got * vary field value"
				});
			}
			if (innerResponse.body && (isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) throw webidl$4.errors.exception({
				header: "Cache.put",
				message: "Response body is locked or disturbed"
			});
			const clonedResponse = cloneResponse(innerResponse);
			const bodyReadPromise = createDeferredPromise();
			if (innerResponse.body != null) {
				const stream$3 = innerResponse.body.stream;
				const reader = stream$3.getReader();
				readAllBytes(reader).then(bodyReadPromise.resolve, bodyReadPromise.reject);
			} else bodyReadPromise.resolve(void 0);
			/** @type {CacheBatchOperation[]} */
			const operations = [];
			/** @type {CacheBatchOperation} */
			const operation = {
				type: "put",
				request: innerRequest,
				response: clonedResponse
			};
			operations.push(operation);
			const bytes = await bodyReadPromise.promise;
			if (clonedResponse.body != null) clonedResponse.body.source = bytes;
			const cacheJobPromise = createDeferredPromise();
			let errorData = null;
			try {
				this.#batchCacheOperations(operations);
			} catch (e) {
				errorData = e;
			}
			queueMicrotask(() => {
				if (errorData === null) cacheJobPromise.resolve();
				else cacheJobPromise.reject(errorData);
			});
			return cacheJobPromise.promise;
		}
		async delete(request$1, options = {}) {
			webidl$4.brandCheck(this, Cache$2);
			webidl$4.argumentLengthCheck(arguments, 1, { header: "Cache.delete" });
			request$1 = webidl$4.converters.RequestInfo(request$1);
			options = webidl$4.converters.CacheQueryOptions(options);
			/**
			* @type {Request}
			*/
			let r = null;
			if (request$1 instanceof Request$1) {
				r = request$1[kState];
				if (r.method !== "GET" && !options.ignoreMethod) return false;
			} else {
				assert$8(typeof request$1 === "string");
				r = new Request$1(request$1)[kState];
			}
			/** @type {CacheBatchOperation[]} */
			const operations = [];
			/** @type {CacheBatchOperation} */
			const operation = {
				type: "delete",
				request: r,
				options
			};
			operations.push(operation);
			const cacheJobPromise = createDeferredPromise();
			let errorData = null;
			let requestResponses;
			try {
				requestResponses = this.#batchCacheOperations(operations);
			} catch (e) {
				errorData = e;
			}
			queueMicrotask(() => {
				if (errorData === null) cacheJobPromise.resolve(!!requestResponses?.length);
				else cacheJobPromise.reject(errorData);
			});
			return cacheJobPromise.promise;
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#dom-cache-keys
		* @param {any} request
		* @param {import('../../types/cache').CacheQueryOptions} options
		* @returns {readonly Request[]}
		*/
		async keys(request$1 = void 0, options = {}) {
			webidl$4.brandCheck(this, Cache$2);
			if (request$1 !== void 0) request$1 = webidl$4.converters.RequestInfo(request$1);
			options = webidl$4.converters.CacheQueryOptions(options);
			let r = null;
			if (request$1 !== void 0) {
				if (request$1 instanceof Request$1) {
					r = request$1[kState];
					if (r.method !== "GET" && !options.ignoreMethod) return [];
				} else if (typeof request$1 === "string") r = new Request$1(request$1)[kState];
			}
			const promise = createDeferredPromise();
			const requests$1 = [];
			if (request$1 === void 0) for (const requestResponse of this.#relevantRequestResponseList) requests$1.push(requestResponse[0]);
			else {
				const requestResponses = this.#queryCache(r, options);
				for (const requestResponse of requestResponses) requests$1.push(requestResponse[0]);
			}
			queueMicrotask(() => {
				const requestList = [];
				for (const request$2 of requests$1) {
					const requestObject = new Request$1("https://a");
					requestObject[kState] = request$2;
					requestObject[kHeaders][kHeadersList$1] = request$2.headersList;
					requestObject[kHeaders][kGuard] = "immutable";
					requestObject[kRealm] = request$2.client;
					requestList.push(requestObject);
				}
				promise.resolve(Object.freeze(requestList));
			});
			return promise.promise;
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm
		* @param {CacheBatchOperation[]} operations
		* @returns {requestResponseList}
		*/
		#batchCacheOperations(operations) {
			const cache$1 = this.#relevantRequestResponseList;
			const backupCache = [...cache$1];
			const addedItems = [];
			const resultList = [];
			try {
				for (const operation of operations) {
					if (operation.type !== "delete" && operation.type !== "put") throw webidl$4.errors.exception({
						header: "Cache.#batchCacheOperations",
						message: "operation type does not match \"delete\" or \"put\""
					});
					if (operation.type === "delete" && operation.response != null) throw webidl$4.errors.exception({
						header: "Cache.#batchCacheOperations",
						message: "delete operation should not have an associated response"
					});
					if (this.#queryCache(operation.request, operation.options, addedItems).length) throw new DOMException("???", "InvalidStateError");
					let requestResponses;
					if (operation.type === "delete") {
						requestResponses = this.#queryCache(operation.request, operation.options);
						if (requestResponses.length === 0) return [];
						for (const requestResponse of requestResponses) {
							const idx = cache$1.indexOf(requestResponse);
							assert$8(idx !== -1);
							cache$1.splice(idx, 1);
						}
					} else if (operation.type === "put") {
						if (operation.response == null) throw webidl$4.errors.exception({
							header: "Cache.#batchCacheOperations",
							message: "put operation should have an associated response"
						});
						const r = operation.request;
						if (!urlIsHttpHttpsScheme(r.url)) throw webidl$4.errors.exception({
							header: "Cache.#batchCacheOperations",
							message: "expected http or https scheme"
						});
						if (r.method !== "GET") throw webidl$4.errors.exception({
							header: "Cache.#batchCacheOperations",
							message: "not get method"
						});
						if (operation.options != null) throw webidl$4.errors.exception({
							header: "Cache.#batchCacheOperations",
							message: "options must not be defined"
						});
						requestResponses = this.#queryCache(operation.request);
						for (const requestResponse of requestResponses) {
							const idx = cache$1.indexOf(requestResponse);
							assert$8(idx !== -1);
							cache$1.splice(idx, 1);
						}
						cache$1.push([operation.request, operation.response]);
						addedItems.push([operation.request, operation.response]);
					}
					resultList.push([operation.request, operation.response]);
				}
				return resultList;
			} catch (e) {
				this.#relevantRequestResponseList.length = 0;
				this.#relevantRequestResponseList = backupCache;
				throw e;
			}
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#query-cache
		* @param {any} requestQuery
		* @param {import('../../types/cache').CacheQueryOptions} options
		* @param {requestResponseList} targetStorage
		* @returns {requestResponseList}
		*/
		#queryCache(requestQuery, options, targetStorage) {
			/** @type {requestResponseList} */
			const resultList = [];
			const storage = targetStorage ?? this.#relevantRequestResponseList;
			for (const requestResponse of storage) {
				const [cachedRequest, cachedResponse] = requestResponse;
				if (this.#requestMatchesCachedItem(requestQuery, cachedRequest, cachedResponse, options)) resultList.push(requestResponse);
			}
			return resultList;
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm
		* @param {any} requestQuery
		* @param {any} request
		* @param {any | null} response
		* @param {import('../../types/cache').CacheQueryOptions | undefined} options
		* @returns {boolean}
		*/
		#requestMatchesCachedItem(requestQuery, request$1, response = null, options) {
			const queryURL = new URL(requestQuery.url);
			const cachedURL = new URL(request$1.url);
			if (options?.ignoreSearch) {
				cachedURL.search = "";
				queryURL.search = "";
			}
			if (!urlEquals(queryURL, cachedURL, true)) return false;
			if (response == null || options?.ignoreVary || !response.headersList.contains("vary")) return true;
			const fieldValues$1 = getFieldValues(response.headersList.get("vary"));
			for (const fieldValue of fieldValues$1) {
				if (fieldValue === "*") return false;
				const requestValue = request$1.headersList.get(fieldValue);
				const queryValue = requestQuery.headersList.get(fieldValue);
				if (requestValue !== queryValue) return false;
			}
			return true;
		}
	};
	Object.defineProperties(Cache$2.prototype, {
		[Symbol.toStringTag]: {
			value: "Cache",
			configurable: true
		},
		match: kEnumerableProperty$3,
		matchAll: kEnumerableProperty$3,
		add: kEnumerableProperty$3,
		addAll: kEnumerableProperty$3,
		put: kEnumerableProperty$3,
		delete: kEnumerableProperty$3,
		keys: kEnumerableProperty$3
	});
	const cacheQueryOptionConverters = [
		{
			key: "ignoreSearch",
			converter: webidl$4.converters.boolean,
			defaultValue: false
		},
		{
			key: "ignoreMethod",
			converter: webidl$4.converters.boolean,
			defaultValue: false
		},
		{
			key: "ignoreVary",
			converter: webidl$4.converters.boolean,
			defaultValue: false
		}
	];
	webidl$4.converters.CacheQueryOptions = webidl$4.dictionaryConverter(cacheQueryOptionConverters);
	webidl$4.converters.MultiCacheQueryOptions = webidl$4.dictionaryConverter([...cacheQueryOptionConverters, {
		key: "cacheName",
		converter: webidl$4.converters.DOMString
	}]);
	webidl$4.converters.Response = webidl$4.interfaceConverter(Response$2);
	webidl$4.converters["sequence<RequestInfo>"] = webidl$4.sequenceConverter(webidl$4.converters.RequestInfo);
	module.exports = { Cache: Cache$2 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cache/cachestorage.js
var require_cachestorage = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cache/cachestorage.js"(exports, module) {
	const { kConstruct } = require_symbols$1();
	const { Cache: Cache$1 } = require_cache$2();
	const { webidl: webidl$3 } = require_webidl();
	const { kEnumerableProperty: kEnumerableProperty$2 } = require_util$9();
	var CacheStorage = class CacheStorage {
		/**
		* @see https://w3c.github.io/ServiceWorker/#dfn-relevant-name-to-cache-map
		* @type {Map<string, import('./cache').requestResponseList}
		*/
		#caches = new Map();
		constructor() {
			if (arguments[0] !== kConstruct) webidl$3.illegalConstructor();
		}
		async match(request$1, options = {}) {
			webidl$3.brandCheck(this, CacheStorage);
			webidl$3.argumentLengthCheck(arguments, 1, { header: "CacheStorage.match" });
			request$1 = webidl$3.converters.RequestInfo(request$1);
			options = webidl$3.converters.MultiCacheQueryOptions(options);
			if (options.cacheName != null) {
				if (this.#caches.has(options.cacheName)) {
					const cacheList = this.#caches.get(options.cacheName);
					const cache$1 = new Cache$1(kConstruct, cacheList);
					return await cache$1.match(request$1, options);
				}
			} else for (const cacheList of this.#caches.values()) {
				const cache$1 = new Cache$1(kConstruct, cacheList);
				const response = await cache$1.match(request$1, options);
				if (response !== void 0) return response;
			}
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#cache-storage-has
		* @param {string} cacheName
		* @returns {Promise<boolean>}
		*/
		async has(cacheName) {
			webidl$3.brandCheck(this, CacheStorage);
			webidl$3.argumentLengthCheck(arguments, 1, { header: "CacheStorage.has" });
			cacheName = webidl$3.converters.DOMString(cacheName);
			return this.#caches.has(cacheName);
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#dom-cachestorage-open
		* @param {string} cacheName
		* @returns {Promise<Cache>}
		*/
		async open(cacheName) {
			webidl$3.brandCheck(this, CacheStorage);
			webidl$3.argumentLengthCheck(arguments, 1, { header: "CacheStorage.open" });
			cacheName = webidl$3.converters.DOMString(cacheName);
			if (this.#caches.has(cacheName)) {
				const cache$2 = this.#caches.get(cacheName);
				return new Cache$1(kConstruct, cache$2);
			}
			const cache$1 = [];
			this.#caches.set(cacheName, cache$1);
			return new Cache$1(kConstruct, cache$1);
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#cache-storage-delete
		* @param {string} cacheName
		* @returns {Promise<boolean>}
		*/
		async delete(cacheName) {
			webidl$3.brandCheck(this, CacheStorage);
			webidl$3.argumentLengthCheck(arguments, 1, { header: "CacheStorage.delete" });
			cacheName = webidl$3.converters.DOMString(cacheName);
			return this.#caches.delete(cacheName);
		}
		/**
		* @see https://w3c.github.io/ServiceWorker/#cache-storage-keys
		* @returns {string[]}
		*/
		async keys() {
			webidl$3.brandCheck(this, CacheStorage);
			const keys$2 = this.#caches.keys();
			return [...keys$2];
		}
	};
	Object.defineProperties(CacheStorage.prototype, {
		[Symbol.toStringTag]: {
			value: "CacheStorage",
			configurable: true
		},
		match: kEnumerableProperty$2,
		has: kEnumerableProperty$2,
		open: kEnumerableProperty$2,
		delete: kEnumerableProperty$2,
		keys: kEnumerableProperty$2
	});
	module.exports = { CacheStorage };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cookies/constants.js
var require_constants$3 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cookies/constants.js"(exports, module) {
	const maxAttributeValueSize$1 = 1024;
	const maxNameValuePairSize$1 = 4096;
	module.exports = {
		maxAttributeValueSize: maxAttributeValueSize$1,
		maxNameValuePairSize: maxNameValuePairSize$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cookies/util.js
var require_util$4 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cookies/util.js"(exports, module) {
	/**
	* @param {string} value
	* @returns {boolean}
	*/
	function isCTLExcludingHtab$1(value) {
		if (value.length === 0) return false;
		for (const char of value) {
			const code = char.charCodeAt(0);
			if (code >= 0 || code <= 8 || code >= 10 || code <= 31 || code === 127) return false;
		}
	}
	/**
	CHAR           = <any US-ASCII character (octets 0 - 127)>
	token          = 1*<any CHAR except CTLs or separators>
	separators     = "(" | ")" | "<" | ">" | "@"
	| "," | ";" | ":" | "\" | <">
	| "/" | "[" | "]" | "?" | "="
	| "{" | "}" | SP | HT
	* @param {string} name
	*/
	function validateCookieName(name$2) {
		for (const char of name$2) {
			const code = char.charCodeAt(0);
			if (code <= 32 || code > 127 || char === "(" || char === ")" || char === ">" || char === "<" || char === "@" || char === "," || char === ";" || char === ":" || char === "\\" || char === "\"" || char === "/" || char === "[" || char === "]" || char === "?" || char === "=" || char === "{" || char === "}") throw new Error("Invalid cookie name");
		}
	}
	/**
	cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )
	cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E
	; US-ASCII characters excluding CTLs,
	; whitespace DQUOTE, comma, semicolon,
	; and backslash
	* @param {string} value
	*/
	function validateCookieValue(value) {
		for (const char of value) {
			const code = char.charCodeAt(0);
			if (code < 33 || code === 34 || code === 44 || code === 59 || code === 92 || code > 126) throw new Error("Invalid header value");
		}
	}
	/**
	* path-value        = <any CHAR except CTLs or ";">
	* @param {string} path
	*/
	function validateCookiePath(path$10) {
		for (const char of path$10) {
			const code = char.charCodeAt(0);
			if (code < 33 || char === ";") throw new Error("Invalid cookie path");
		}
	}
	/**
	* I have no idea why these values aren't allowed to be honest,
	* but Deno tests these. - Khafra
	* @param {string} domain
	*/
	function validateCookieDomain(domain) {
		if (domain.startsWith("-") || domain.endsWith(".") || domain.endsWith("-")) throw new Error("Invalid cookie domain");
	}
	/**
	* @see https://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1
	* @param {number|Date} date
	IMF-fixdate  = day-name "," SP date1 SP time-of-day SP GMT
	; fixed length/zone/capitalization subset of the format
	; see Section 3.3 of [RFC5322]
	
	day-name     = %x4D.6F.6E ; "Mon", case-sensitive
	/ %x54.75.65 ; "Tue", case-sensitive
	/ %x57.65.64 ; "Wed", case-sensitive
	/ %x54.68.75 ; "Thu", case-sensitive
	/ %x46.72.69 ; "Fri", case-sensitive
	/ %x53.61.74 ; "Sat", case-sensitive
	/ %x53.75.6E ; "Sun", case-sensitive
	date1        = day SP month SP year
	; e.g., 02 Jun 1982
	
	day          = 2DIGIT
	month        = %x4A.61.6E ; "Jan", case-sensitive
	/ %x46.65.62 ; "Feb", case-sensitive
	/ %x4D.61.72 ; "Mar", case-sensitive
	/ %x41.70.72 ; "Apr", case-sensitive
	/ %x4D.61.79 ; "May", case-sensitive
	/ %x4A.75.6E ; "Jun", case-sensitive
	/ %x4A.75.6C ; "Jul", case-sensitive
	/ %x41.75.67 ; "Aug", case-sensitive
	/ %x53.65.70 ; "Sep", case-sensitive
	/ %x4F.63.74 ; "Oct", case-sensitive
	/ %x4E.6F.76 ; "Nov", case-sensitive
	/ %x44.65.63 ; "Dec", case-sensitive
	year         = 4DIGIT
	
	GMT          = %x47.4D.54 ; "GMT", case-sensitive
	
	time-of-day  = hour ":" minute ":" second
	; 00:00:00 - 23:59:60 (leap second)
	
	hour         = 2DIGIT
	minute       = 2DIGIT
	second       = 2DIGIT
	*/
	function toIMFDate(date) {
		if (typeof date === "number") date = new Date(date);
		const days = [
			"Sun",
			"Mon",
			"Tue",
			"Wed",
			"Thu",
			"Fri",
			"Sat"
		];
		const months = [
			"Jan",
			"Feb",
			"Mar",
			"Apr",
			"May",
			"Jun",
			"Jul",
			"Aug",
			"Sep",
			"Oct",
			"Nov",
			"Dec"
		];
		const dayName = days[date.getUTCDay()];
		const day = date.getUTCDate().toString().padStart(2, "0");
		const month = months[date.getUTCMonth()];
		const year = date.getUTCFullYear();
		const hour = date.getUTCHours().toString().padStart(2, "0");
		const minute = date.getUTCMinutes().toString().padStart(2, "0");
		const second = date.getUTCSeconds().toString().padStart(2, "0");
		return `${dayName}, ${day} ${month} ${year} ${hour}:${minute}:${second} GMT`;
	}
	/**
	max-age-av        = "Max-Age=" non-zero-digit *DIGIT
	; In practice, both expires-av and max-age-av
	; are limited to dates representable by the
	; user agent.
	* @param {number} maxAge
	*/
	function validateCookieMaxAge(maxAge) {
		if (maxAge < 0) throw new Error("Invalid cookie max-age");
	}
	/**
	* @see https://www.rfc-editor.org/rfc/rfc6265#section-4.1.1
	* @param {import('./index').Cookie} cookie
	*/
	function stringify$3(cookie) {
		if (cookie.name.length === 0) return null;
		validateCookieName(cookie.name);
		validateCookieValue(cookie.value);
		const out = [`${cookie.name}=${cookie.value}`];
		if (cookie.name.startsWith("__Secure-")) cookie.secure = true;
		if (cookie.name.startsWith("__Host-")) {
			cookie.secure = true;
			cookie.domain = null;
			cookie.path = "/";
		}
		if (cookie.secure) out.push("Secure");
		if (cookie.httpOnly) out.push("HttpOnly");
		if (typeof cookie.maxAge === "number") {
			validateCookieMaxAge(cookie.maxAge);
			out.push(`Max-Age=${cookie.maxAge}`);
		}
		if (cookie.domain) {
			validateCookieDomain(cookie.domain);
			out.push(`Domain=${cookie.domain}`);
		}
		if (cookie.path) {
			validateCookiePath(cookie.path);
			out.push(`Path=${cookie.path}`);
		}
		if (cookie.expires && cookie.expires.toString() !== "Invalid Date") out.push(`Expires=${toIMFDate(cookie.expires)}`);
		if (cookie.sameSite) out.push(`SameSite=${cookie.sameSite}`);
		for (const part of cookie.unparsed) {
			if (!part.includes("=")) throw new Error("Invalid unparsed");
			const [key$1, ...value] = part.split("=");
			out.push(`${key$1.trim()}=${value.join("=")}`);
		}
		return out.join("; ");
	}
	module.exports = {
		isCTLExcludingHtab: isCTLExcludingHtab$1,
		validateCookieName,
		validateCookiePath,
		validateCookieValue,
		toIMFDate,
		stringify: stringify$3
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cookies/parse.js
var require_parse$1 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cookies/parse.js"(exports, module) {
	const { maxNameValuePairSize, maxAttributeValueSize } = require_constants$3();
	const { isCTLExcludingHtab } = require_util$4();
	const { collectASequenceOfCodePointsFast } = require_dataURL();
	const assert$7 = __require("assert");
	/**
	* @description Parses the field-value attributes of a set-cookie header string.
	* @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4
	* @param {string} header
	* @returns if the header is invalid, null will be returned
	*/
	function parseSetCookie$1(header) {
		if (isCTLExcludingHtab(header)) return null;
		let nameValuePair = "";
		let unparsedAttributes = "";
		let name$2 = "";
		let value = "";
		if (header.includes(";")) {
			const position = { position: 0 };
			nameValuePair = collectASequenceOfCodePointsFast(";", header, position);
			unparsedAttributes = header.slice(position.position);
		} else nameValuePair = header;
		if (!nameValuePair.includes("=")) value = nameValuePair;
		else {
			const position = { position: 0 };
			name$2 = collectASequenceOfCodePointsFast("=", nameValuePair, position);
			value = nameValuePair.slice(position.position + 1);
		}
		name$2 = name$2.trim();
		value = value.trim();
		if (name$2.length + value.length > maxNameValuePairSize) return null;
		return {
			name: name$2,
			value,
			...parseUnparsedAttributes(unparsedAttributes)
		};
	}
	/**
	* Parses the remaining attributes of a set-cookie header
	* @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4
	* @param {string} unparsedAttributes
	* @param {[Object.<string, unknown>]={}} cookieAttributeList
	*/
	function parseUnparsedAttributes(unparsedAttributes, cookieAttributeList = {}) {
		if (unparsedAttributes.length === 0) return cookieAttributeList;
		assert$7(unparsedAttributes[0] === ";");
		unparsedAttributes = unparsedAttributes.slice(1);
		let cookieAv = "";
		if (unparsedAttributes.includes(";")) {
			cookieAv = collectASequenceOfCodePointsFast(";", unparsedAttributes, { position: 0 });
			unparsedAttributes = unparsedAttributes.slice(cookieAv.length);
		} else {
			cookieAv = unparsedAttributes;
			unparsedAttributes = "";
		}
		let attributeName = "";
		let attributeValue = "";
		if (cookieAv.includes("=")) {
			const position = { position: 0 };
			attributeName = collectASequenceOfCodePointsFast("=", cookieAv, position);
			attributeValue = cookieAv.slice(position.position + 1);
		} else attributeName = cookieAv;
		attributeName = attributeName.trim();
		attributeValue = attributeValue.trim();
		if (attributeValue.length > maxAttributeValueSize) return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
		const attributeNameLowercase = attributeName.toLowerCase();
		if (attributeNameLowercase === "expires") {
			const expiryTime = new Date(attributeValue);
			cookieAttributeList.expires = expiryTime;
		} else if (attributeNameLowercase === "max-age") {
			const charCode = attributeValue.charCodeAt(0);
			if ((charCode < 48 || charCode > 57) && attributeValue[0] !== "-") return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
			if (!/^\d+$/.test(attributeValue)) return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
			const deltaSeconds = Number(attributeValue);
			cookieAttributeList.maxAge = deltaSeconds;
		} else if (attributeNameLowercase === "domain") {
			let cookieDomain = attributeValue;
			if (cookieDomain[0] === ".") cookieDomain = cookieDomain.slice(1);
			cookieDomain = cookieDomain.toLowerCase();
			cookieAttributeList.domain = cookieDomain;
		} else if (attributeNameLowercase === "path") {
			let cookiePath = "";
			if (attributeValue.length === 0 || attributeValue[0] !== "/") cookiePath = "/";
			else cookiePath = attributeValue;
			cookieAttributeList.path = cookiePath;
		} else if (attributeNameLowercase === "secure") cookieAttributeList.secure = true;
		else if (attributeNameLowercase === "httponly") cookieAttributeList.httpOnly = true;
		else if (attributeNameLowercase === "samesite") {
			let enforcement = "Default";
			const attributeValueLowercase = attributeValue.toLowerCase();
			if (attributeValueLowercase.includes("none")) enforcement = "None";
			if (attributeValueLowercase.includes("strict")) enforcement = "Strict";
			if (attributeValueLowercase.includes("lax")) enforcement = "Lax";
			cookieAttributeList.sameSite = enforcement;
		} else {
			cookieAttributeList.unparsed ??= [];
			cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`);
		}
		return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList);
	}
	module.exports = {
		parseSetCookie: parseSetCookie$1,
		parseUnparsedAttributes
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cookies/index.js
var require_cookies = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/cookies/index.js"(exports, module) {
	const { parseSetCookie } = require_parse$1();
	const { stringify: stringify$2 } = require_util$4();
	const { webidl: webidl$2 } = require_webidl();
	const { Headers: Headers$2 } = require_headers();
	/**
	* @typedef {Object} Cookie
	* @property {string} name
	* @property {string} value
	* @property {Date|number|undefined} expires
	* @property {number|undefined} maxAge
	* @property {string|undefined} domain
	* @property {string|undefined} path
	* @property {boolean|undefined} secure
	* @property {boolean|undefined} httpOnly
	* @property {'Strict'|'Lax'|'None'} sameSite
	* @property {string[]} unparsed
	*/
	/**
	* @param {Headers} headers
	* @returns {Record<string, string>}
	*/
	function getCookies(headers) {
		webidl$2.argumentLengthCheck(arguments, 1, { header: "getCookies" });
		webidl$2.brandCheck(headers, Headers$2, { strict: false });
		const cookie = headers.get("cookie");
		const out = {};
		if (!cookie) return out;
		for (const piece of cookie.split(";")) {
			const [name$2, ...value] = piece.split("=");
			out[name$2.trim()] = value.join("=");
		}
		return out;
	}
	/**
	* @param {Headers} headers
	* @param {string} name
	* @param {{ path?: string, domain?: string }|undefined} attributes
	* @returns {void}
	*/
	function deleteCookie(headers, name$2, attributes) {
		webidl$2.argumentLengthCheck(arguments, 2, { header: "deleteCookie" });
		webidl$2.brandCheck(headers, Headers$2, { strict: false });
		name$2 = webidl$2.converters.DOMString(name$2);
		attributes = webidl$2.converters.DeleteCookieAttributes(attributes);
		setCookie(headers, {
			name: name$2,
			value: "",
			expires: new Date(0),
			...attributes
		});
	}
	/**
	* @param {Headers} headers
	* @returns {Cookie[]}
	*/
	function getSetCookies(headers) {
		webidl$2.argumentLengthCheck(arguments, 1, { header: "getSetCookies" });
		webidl$2.brandCheck(headers, Headers$2, { strict: false });
		const cookies$1 = headers.getSetCookie();
		if (!cookies$1) return [];
		return cookies$1.map((pair) => parseSetCookie(pair));
	}
	/**
	* @param {Headers} headers
	* @param {Cookie} cookie
	* @returns {void}
	*/
	function setCookie(headers, cookie) {
		webidl$2.argumentLengthCheck(arguments, 2, { header: "setCookie" });
		webidl$2.brandCheck(headers, Headers$2, { strict: false });
		cookie = webidl$2.converters.Cookie(cookie);
		const str = stringify$2(cookie);
		if (str) headers.append("Set-Cookie", stringify$2(cookie));
	}
	webidl$2.converters.DeleteCookieAttributes = webidl$2.dictionaryConverter([{
		converter: webidl$2.nullableConverter(webidl$2.converters.DOMString),
		key: "path",
		defaultValue: null
	}, {
		converter: webidl$2.nullableConverter(webidl$2.converters.DOMString),
		key: "domain",
		defaultValue: null
	}]);
	webidl$2.converters.Cookie = webidl$2.dictionaryConverter([
		{
			converter: webidl$2.converters.DOMString,
			key: "name"
		},
		{
			converter: webidl$2.converters.DOMString,
			key: "value"
		},
		{
			converter: webidl$2.nullableConverter((value) => {
				if (typeof value === "number") return webidl$2.converters["unsigned long long"](value);
				return new Date(value);
			}),
			key: "expires",
			defaultValue: null
		},
		{
			converter: webidl$2.nullableConverter(webidl$2.converters["long long"]),
			key: "maxAge",
			defaultValue: null
		},
		{
			converter: webidl$2.nullableConverter(webidl$2.converters.DOMString),
			key: "domain",
			defaultValue: null
		},
		{
			converter: webidl$2.nullableConverter(webidl$2.converters.DOMString),
			key: "path",
			defaultValue: null
		},
		{
			converter: webidl$2.nullableConverter(webidl$2.converters.boolean),
			key: "secure",
			defaultValue: null
		},
		{
			converter: webidl$2.nullableConverter(webidl$2.converters.boolean),
			key: "httpOnly",
			defaultValue: null
		},
		{
			converter: webidl$2.converters.USVString,
			key: "sameSite",
			allowedValues: [
				"Strict",
				"Lax",
				"None"
			]
		},
		{
			converter: webidl$2.sequenceConverter(webidl$2.converters.DOMString),
			key: "unparsed",
			defaultValue: []
		}
	]);
	module.exports = {
		getCookies,
		deleteCookie,
		getSetCookies,
		setCookie
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/constants.js
var require_constants$2 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/constants.js"(exports, module) {
	const uid$1 = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
	/** @type {PropertyDescriptor} */
	const staticPropertyDescriptors$1 = {
		enumerable: true,
		writable: false,
		configurable: false
	};
	const states$4 = {
		CONNECTING: 0,
		OPEN: 1,
		CLOSING: 2,
		CLOSED: 3
	};
	const opcodes$3 = {
		CONTINUATION: 0,
		TEXT: 1,
		BINARY: 2,
		CLOSE: 8,
		PING: 9,
		PONG: 10
	};
	const maxUnsigned16Bit$1 = 2 ** 16 - 1;
	const parserStates$1 = {
		INFO: 0,
		PAYLOADLENGTH_16: 2,
		PAYLOADLENGTH_64: 3,
		READ_DATA: 4
	};
	const emptyBuffer$2 = Buffer.allocUnsafe(0);
	module.exports = {
		uid: uid$1,
		staticPropertyDescriptors: staticPropertyDescriptors$1,
		states: states$4,
		opcodes: opcodes$3,
		maxUnsigned16Bit: maxUnsigned16Bit$1,
		parserStates: parserStates$1,
		emptyBuffer: emptyBuffer$2
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/symbols.js
var require_symbols = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/symbols.js"(exports, module) {
	module.exports = {
		kWebSocketURL: Symbol("url"),
		kReadyState: Symbol("ready state"),
		kController: Symbol("controller"),
		kResponse: Symbol("response"),
		kBinaryType: Symbol("binary type"),
		kSentClose: Symbol("sent close"),
		kReceivedClose: Symbol("received close"),
		kByteParser: Symbol("byte parser")
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/events.js
var require_events = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/events.js"(exports, module) {
	const { webidl: webidl$1 } = require_webidl();
	const { kEnumerableProperty: kEnumerableProperty$1 } = require_util$9();
	const { MessagePort } = __require("worker_threads");
	/**
	* @see https://html.spec.whatwg.org/multipage/comms.html#messageevent
	*/
	var MessageEvent$1 = class MessageEvent$1 extends Event {
		#eventInit;
		constructor(type, eventInitDict = {}) {
			webidl$1.argumentLengthCheck(arguments, 1, { header: "MessageEvent constructor" });
			type = webidl$1.converters.DOMString(type);
			eventInitDict = webidl$1.converters.MessageEventInit(eventInitDict);
			super(type, eventInitDict);
			this.#eventInit = eventInitDict;
		}
		get data() {
			webidl$1.brandCheck(this, MessageEvent$1);
			return this.#eventInit.data;
		}
		get origin() {
			webidl$1.brandCheck(this, MessageEvent$1);
			return this.#eventInit.origin;
		}
		get lastEventId() {
			webidl$1.brandCheck(this, MessageEvent$1);
			return this.#eventInit.lastEventId;
		}
		get source() {
			webidl$1.brandCheck(this, MessageEvent$1);
			return this.#eventInit.source;
		}
		get ports() {
			webidl$1.brandCheck(this, MessageEvent$1);
			if (!Object.isFrozen(this.#eventInit.ports)) Object.freeze(this.#eventInit.ports);
			return this.#eventInit.ports;
		}
		initMessageEvent(type, bubbles = false, cancelable = false, data = null, origin$1 = "", lastEventId = "", source = null, ports = []) {
			webidl$1.brandCheck(this, MessageEvent$1);
			webidl$1.argumentLengthCheck(arguments, 1, { header: "MessageEvent.initMessageEvent" });
			return new MessageEvent$1(type, {
				bubbles,
				cancelable,
				data,
				origin: origin$1,
				lastEventId,
				source,
				ports
			});
		}
	};
	/**
	* @see https://websockets.spec.whatwg.org/#the-closeevent-interface
	*/
	var CloseEvent$1 = class CloseEvent$1 extends Event {
		#eventInit;
		constructor(type, eventInitDict = {}) {
			webidl$1.argumentLengthCheck(arguments, 1, { header: "CloseEvent constructor" });
			type = webidl$1.converters.DOMString(type);
			eventInitDict = webidl$1.converters.CloseEventInit(eventInitDict);
			super(type, eventInitDict);
			this.#eventInit = eventInitDict;
		}
		get wasClean() {
			webidl$1.brandCheck(this, CloseEvent$1);
			return this.#eventInit.wasClean;
		}
		get code() {
			webidl$1.brandCheck(this, CloseEvent$1);
			return this.#eventInit.code;
		}
		get reason() {
			webidl$1.brandCheck(this, CloseEvent$1);
			return this.#eventInit.reason;
		}
	};
	var ErrorEvent$1 = class ErrorEvent$1 extends Event {
		#eventInit;
		constructor(type, eventInitDict) {
			webidl$1.argumentLengthCheck(arguments, 1, { header: "ErrorEvent constructor" });
			super(type, eventInitDict);
			type = webidl$1.converters.DOMString(type);
			eventInitDict = webidl$1.converters.ErrorEventInit(eventInitDict ?? {});
			this.#eventInit = eventInitDict;
		}
		get message() {
			webidl$1.brandCheck(this, ErrorEvent$1);
			return this.#eventInit.message;
		}
		get filename() {
			webidl$1.brandCheck(this, ErrorEvent$1);
			return this.#eventInit.filename;
		}
		get lineno() {
			webidl$1.brandCheck(this, ErrorEvent$1);
			return this.#eventInit.lineno;
		}
		get colno() {
			webidl$1.brandCheck(this, ErrorEvent$1);
			return this.#eventInit.colno;
		}
		get error() {
			webidl$1.brandCheck(this, ErrorEvent$1);
			return this.#eventInit.error;
		}
	};
	Object.defineProperties(MessageEvent$1.prototype, {
		[Symbol.toStringTag]: {
			value: "MessageEvent",
			configurable: true
		},
		data: kEnumerableProperty$1,
		origin: kEnumerableProperty$1,
		lastEventId: kEnumerableProperty$1,
		source: kEnumerableProperty$1,
		ports: kEnumerableProperty$1,
		initMessageEvent: kEnumerableProperty$1
	});
	Object.defineProperties(CloseEvent$1.prototype, {
		[Symbol.toStringTag]: {
			value: "CloseEvent",
			configurable: true
		},
		reason: kEnumerableProperty$1,
		code: kEnumerableProperty$1,
		wasClean: kEnumerableProperty$1
	});
	Object.defineProperties(ErrorEvent$1.prototype, {
		[Symbol.toStringTag]: {
			value: "ErrorEvent",
			configurable: true
		},
		message: kEnumerableProperty$1,
		filename: kEnumerableProperty$1,
		lineno: kEnumerableProperty$1,
		colno: kEnumerableProperty$1,
		error: kEnumerableProperty$1
	});
	webidl$1.converters.MessagePort = webidl$1.interfaceConverter(MessagePort);
	webidl$1.converters["sequence<MessagePort>"] = webidl$1.sequenceConverter(webidl$1.converters.MessagePort);
	const eventInit = [
		{
			key: "bubbles",
			converter: webidl$1.converters.boolean,
			defaultValue: false
		},
		{
			key: "cancelable",
			converter: webidl$1.converters.boolean,
			defaultValue: false
		},
		{
			key: "composed",
			converter: webidl$1.converters.boolean,
			defaultValue: false
		}
	];
	webidl$1.converters.MessageEventInit = webidl$1.dictionaryConverter([
		...eventInit,
		{
			key: "data",
			converter: webidl$1.converters.any,
			defaultValue: null
		},
		{
			key: "origin",
			converter: webidl$1.converters.USVString,
			defaultValue: ""
		},
		{
			key: "lastEventId",
			converter: webidl$1.converters.DOMString,
			defaultValue: ""
		},
		{
			key: "source",
			converter: webidl$1.nullableConverter(webidl$1.converters.MessagePort),
			defaultValue: null
		},
		{
			key: "ports",
			converter: webidl$1.converters["sequence<MessagePort>"],
			get defaultValue() {
				return [];
			}
		}
	]);
	webidl$1.converters.CloseEventInit = webidl$1.dictionaryConverter([
		...eventInit,
		{
			key: "wasClean",
			converter: webidl$1.converters.boolean,
			defaultValue: false
		},
		{
			key: "code",
			converter: webidl$1.converters["unsigned short"],
			defaultValue: 0
		},
		{
			key: "reason",
			converter: webidl$1.converters.USVString,
			defaultValue: ""
		}
	]);
	webidl$1.converters.ErrorEventInit = webidl$1.dictionaryConverter([
		...eventInit,
		{
			key: "message",
			converter: webidl$1.converters.DOMString,
			defaultValue: ""
		},
		{
			key: "filename",
			converter: webidl$1.converters.USVString,
			defaultValue: ""
		},
		{
			key: "lineno",
			converter: webidl$1.converters["unsigned long"],
			defaultValue: 0
		},
		{
			key: "colno",
			converter: webidl$1.converters["unsigned long"],
			defaultValue: 0
		},
		{
			key: "error",
			converter: webidl$1.converters.any
		}
	]);
	module.exports = {
		MessageEvent: MessageEvent$1,
		CloseEvent: CloseEvent$1,
		ErrorEvent: ErrorEvent$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/util.js
var require_util$3 = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/util.js"(exports, module) {
	const { kReadyState: kReadyState$3, kController: kController$1, kResponse: kResponse$2, kBinaryType: kBinaryType$1, kWebSocketURL: kWebSocketURL$1 } = require_symbols();
	const { states: states$3, opcodes: opcodes$2 } = require_constants$2();
	const { MessageEvent, ErrorEvent } = require_events();
	/**
	* @param {import('./websocket').WebSocket} ws
	*/
	function isEstablished$1(ws) {
		return ws[kReadyState$3] === states$3.OPEN;
	}
	/**
	* @param {import('./websocket').WebSocket} ws
	*/
	function isClosing$1(ws) {
		return ws[kReadyState$3] === states$3.CLOSING;
	}
	/**
	* @param {import('./websocket').WebSocket} ws
	*/
	function isClosed(ws) {
		return ws[kReadyState$3] === states$3.CLOSED;
	}
	/**
	* @see https://dom.spec.whatwg.org/#concept-event-fire
	* @param {string} e
	* @param {EventTarget} target
	* @param {EventInit | undefined} eventInitDict
	*/
	function fireEvent$2(e, target, eventConstructor = Event, eventInitDict) {
		const event = new eventConstructor(e, eventInitDict);
		target.dispatchEvent(event);
	}
	/**
	* @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
	* @param {import('./websocket').WebSocket} ws
	* @param {number} type Opcode
	* @param {Buffer} data application data
	*/
	function websocketMessageReceived$1(ws, type, data) {
		if (ws[kReadyState$3] !== states$3.OPEN) return;
		let dataForEvent;
		if (type === opcodes$2.TEXT) try {
			dataForEvent = new TextDecoder("utf-8", { fatal: true }).decode(data);
		} catch {
			failWebsocketConnection$3(ws, "Received invalid UTF-8 in text frame.");
			return;
		}
		else if (type === opcodes$2.BINARY) if (ws[kBinaryType$1] === "blob") dataForEvent = new Blob([data]);
		else dataForEvent = new Uint8Array(data).buffer;
		fireEvent$2("message", ws, MessageEvent, {
			origin: ws[kWebSocketURL$1].origin,
			data: dataForEvent
		});
	}
	/**
	* @see https://datatracker.ietf.org/doc/html/rfc6455
	* @see https://datatracker.ietf.org/doc/html/rfc2616
	* @see https://bugs.chromium.org/p/chromium/issues/detail?id=398407
	* @param {string} protocol
	*/
	function isValidSubprotocol$1(protocol) {
		if (protocol.length === 0) return false;
		for (const char of protocol) {
			const code = char.charCodeAt(0);
			if (code < 33 || code > 126 || char === "(" || char === ")" || char === "<" || char === ">" || char === "@" || char === "," || char === ";" || char === ":" || char === "\\" || char === "\"" || char === "/" || char === "[" || char === "]" || char === "?" || char === "=" || char === "{" || char === "}" || code === 32 || code === 9) return false;
		}
		return true;
	}
	/**
	* @see https://datatracker.ietf.org/doc/html/rfc6455#section-7-4
	* @param {number} code
	*/
	function isValidStatusCode$1(code) {
		if (code >= 1e3 && code < 1015) return code !== 1004 && code !== 1005 && code !== 1006;
		return code >= 3e3 && code <= 4999;
	}
	/**
	* @param {import('./websocket').WebSocket} ws
	* @param {string|undefined} reason
	*/
	function failWebsocketConnection$3(ws, reason) {
		const { [kController$1]: controller, [kResponse$2]: response } = ws;
		controller.abort();
		if (response?.socket && !response.socket.destroyed) response.socket.destroy();
		if (reason) fireEvent$2("error", ws, ErrorEvent, { error: new Error(reason) });
	}
	module.exports = {
		isEstablished: isEstablished$1,
		isClosing: isClosing$1,
		isClosed,
		fireEvent: fireEvent$2,
		isValidSubprotocol: isValidSubprotocol$1,
		isValidStatusCode: isValidStatusCode$1,
		failWebsocketConnection: failWebsocketConnection$3,
		websocketMessageReceived: websocketMessageReceived$1
	};
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/connection.js
var require_connection = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/connection.js"(exports, module) {
	const diagnosticsChannel$1 = __require("diagnostics_channel");
	const { uid, states: states$2 } = require_constants$2();
	const { kReadyState: kReadyState$2, kSentClose: kSentClose$2, kByteParser: kByteParser$1, kReceivedClose: kReceivedClose$1 } = require_symbols();
	const { fireEvent: fireEvent$1, failWebsocketConnection: failWebsocketConnection$2 } = require_util$3();
	const { CloseEvent } = require_events();
	const { makeRequest } = require_request();
	const { fetching } = require_fetch$1();
	const { Headers: Headers$1 } = require_headers();
	const { getGlobalDispatcher: getGlobalDispatcher$2 } = require_global();
	const { kHeadersList } = require_symbols$4();
	const channels$2 = {};
	channels$2.open = diagnosticsChannel$1.channel("undici:websocket:open");
	channels$2.close = diagnosticsChannel$1.channel("undici:websocket:close");
	channels$2.socketError = diagnosticsChannel$1.channel("undici:websocket:socket_error");
	/** @type {import('crypto')} */
	let crypto$4;
	try {
		crypto$4 = __require("crypto");
	} catch {}
	/**
	* @see https://websockets.spec.whatwg.org/#concept-websocket-establish
	* @param {URL} url
	* @param {string|string[]} protocols
	* @param {import('./websocket').WebSocket} ws
	* @param {(response: any) => void} onEstablish
	* @param {Partial<import('../../types/websocket').WebSocketInit>} options
	*/
	function establishWebSocketConnection$1(url$3, protocols$1, ws, onEstablish, options) {
		const requestURL = url$3;
		requestURL.protocol = url$3.protocol === "ws:" ? "http:" : "https:";
		const request$1 = makeRequest({
			urlList: [requestURL],
			serviceWorkers: "none",
			referrer: "no-referrer",
			mode: "websocket",
			credentials: "include",
			cache: "no-store",
			redirect: "error"
		});
		if (options.headers) {
			const headersList = new Headers$1(options.headers)[kHeadersList];
			request$1.headersList = headersList;
		}
		const keyValue = crypto$4.randomBytes(16).toString("base64");
		request$1.headersList.append("sec-websocket-key", keyValue);
		request$1.headersList.append("sec-websocket-version", "13");
		for (const protocol of protocols$1) request$1.headersList.append("sec-websocket-protocol", protocol);
		const permessageDeflate = "";
		const controller = fetching({
			request: request$1,
			useParallelQueue: true,
			dispatcher: options.dispatcher ?? getGlobalDispatcher$2(),
			processResponse(response) {
				if (response.type === "error" || response.status !== 101) {
					failWebsocketConnection$2(ws, "Received network error or non-101 status code.");
					return;
				}
				if (protocols$1.length !== 0 && !response.headersList.get("Sec-WebSocket-Protocol")) {
					failWebsocketConnection$2(ws, "Server did not respond with sent protocols.");
					return;
				}
				if (response.headersList.get("Upgrade")?.toLowerCase() !== "websocket") {
					failWebsocketConnection$2(ws, "Server did not set Upgrade header to \"websocket\".");
					return;
				}
				if (response.headersList.get("Connection")?.toLowerCase() !== "upgrade") {
					failWebsocketConnection$2(ws, "Server did not set Connection header to \"upgrade\".");
					return;
				}
				const secWSAccept = response.headersList.get("Sec-WebSocket-Accept");
				const digest = crypto$4.createHash("sha1").update(keyValue + uid).digest("base64");
				if (secWSAccept !== digest) {
					failWebsocketConnection$2(ws, "Incorrect hash received in Sec-WebSocket-Accept header.");
					return;
				}
				const secExtension = response.headersList.get("Sec-WebSocket-Extensions");
				if (secExtension !== null && secExtension !== permessageDeflate) {
					failWebsocketConnection$2(ws, "Received different permessage-deflate than the one set.");
					return;
				}
				const secProtocol = response.headersList.get("Sec-WebSocket-Protocol");
				if (secProtocol !== null && secProtocol !== request$1.headersList.get("Sec-WebSocket-Protocol")) {
					failWebsocketConnection$2(ws, "Protocol was not set in the opening handshake.");
					return;
				}
				response.socket.on("data", onSocketData);
				response.socket.on("close", onSocketClose);
				response.socket.on("error", onSocketError);
				if (channels$2.open.hasSubscribers) channels$2.open.publish({
					address: response.socket.address(),
					protocol: secProtocol,
					extensions: secExtension
				});
				onEstablish(response);
			}
		});
		return controller;
	}
	/**
	* @param {Buffer} chunk
	*/
	function onSocketData(chunk) {
		if (!this.ws[kByteParser$1].write(chunk)) this.pause();
	}
	/**
	* @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
	* @see https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.4
	*/
	function onSocketClose() {
		const { ws } = this;
		const wasClean = ws[kSentClose$2] && ws[kReceivedClose$1];
		let code = 1005;
		let reason = "";
		const result = ws[kByteParser$1].closingInfo;
		if (result) {
			code = result.code ?? 1005;
			reason = result.reason;
		} else if (!ws[kSentClose$2]) code = 1006;
		ws[kReadyState$2] = states$2.CLOSED;
		fireEvent$1("close", ws, CloseEvent, {
			wasClean,
			code,
			reason
		});
		if (channels$2.close.hasSubscribers) channels$2.close.publish({
			websocket: ws,
			code,
			reason
		});
	}
	function onSocketError(error$1) {
		const { ws } = this;
		ws[kReadyState$2] = states$2.CLOSING;
		if (channels$2.socketError.hasSubscribers) channels$2.socketError.publish(error$1);
		this.destroy();
	}
	module.exports = { establishWebSocketConnection: establishWebSocketConnection$1 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/frame.js
var require_frame = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/frame.js"(exports, module) {
	const { maxUnsigned16Bit } = require_constants$2();
	/** @type {import('crypto')} */
	let crypto$3;
	try {
		crypto$3 = __require("crypto");
	} catch {}
	var WebsocketFrameSend$2 = class {
		/**
		* @param {Buffer|undefined} data
		*/
		constructor(data) {
			this.frameData = data;
			this.maskKey = crypto$3.randomBytes(4);
		}
		createFrame(opcode) {
			const bodyLength$1 = this.frameData?.byteLength ?? 0;
			/** @type {number} */
			let payloadLength = bodyLength$1;
			let offset = 6;
			if (bodyLength$1 > maxUnsigned16Bit) {
				offset += 8;
				payloadLength = 127;
			} else if (bodyLength$1 > 125) {
				offset += 2;
				payloadLength = 126;
			}
			const buffer$1 = Buffer.allocUnsafe(bodyLength$1 + offset);
			buffer$1[0] = buffer$1[1] = 0;
			buffer$1[0] |= 128;
			buffer$1[0] = (buffer$1[0] & 240) + opcode;
			/*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */
			buffer$1[offset - 4] = this.maskKey[0];
			buffer$1[offset - 3] = this.maskKey[1];
			buffer$1[offset - 2] = this.maskKey[2];
			buffer$1[offset - 1] = this.maskKey[3];
			buffer$1[1] = payloadLength;
			if (payloadLength === 126) buffer$1.writeUInt16BE(bodyLength$1, 2);
			else if (payloadLength === 127) {
				buffer$1[2] = buffer$1[3] = 0;
				buffer$1.writeUIntBE(bodyLength$1, 4, 6);
			}
			buffer$1[1] |= 128;
			for (let i = 0; i < bodyLength$1; i++) buffer$1[offset + i] = this.frameData[i] ^ this.maskKey[i % 4];
			return buffer$1;
		}
	};
	module.exports = { WebsocketFrameSend: WebsocketFrameSend$2 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/receiver.js
var require_receiver = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/receiver.js"(exports, module) {
	const { Writable: Writable$6 } = __require("stream");
	const diagnosticsChannel = __require("diagnostics_channel");
	const { parserStates, opcodes: opcodes$1, states: states$1, emptyBuffer: emptyBuffer$1 } = require_constants$2();
	const { kReadyState: kReadyState$1, kSentClose: kSentClose$1, kResponse: kResponse$1, kReceivedClose } = require_symbols();
	const { isValidStatusCode, failWebsocketConnection: failWebsocketConnection$1, websocketMessageReceived } = require_util$3();
	const { WebsocketFrameSend: WebsocketFrameSend$1 } = require_frame();
	const channels$1 = {};
	channels$1.ping = diagnosticsChannel.channel("undici:websocket:ping");
	channels$1.pong = diagnosticsChannel.channel("undici:websocket:pong");
	var ByteParser$1 = class extends Writable$6 {
		#buffers = [];
		#byteOffset = 0;
		#state = parserStates.INFO;
		#info = {};
		#fragments = [];
		constructor(ws) {
			super();
			this.ws = ws;
		}
		/**
		* @param {Buffer} chunk
		* @param {() => void} callback
		*/
		_write(chunk, _, callback) {
			this.#buffers.push(chunk);
			this.#byteOffset += chunk.length;
			this.run(callback);
		}
		/**
		* Runs whenever a new chunk is received.
		* Callback is called whenever there are no more chunks buffering,
		* or not enough bytes are buffered to parse.
		*/
		run(callback) {
			while (true) {
				if (this.#state === parserStates.INFO) {
					if (this.#byteOffset < 2) return callback();
					const buffer$1 = this.consume(2);
					this.#info.fin = (buffer$1[0] & 128) !== 0;
					this.#info.opcode = buffer$1[0] & 15;
					this.#info.originalOpcode ??= this.#info.opcode;
					this.#info.fragmented = !this.#info.fin && this.#info.opcode !== opcodes$1.CONTINUATION;
					if (this.#info.fragmented && this.#info.opcode !== opcodes$1.BINARY && this.#info.opcode !== opcodes$1.TEXT) {
						failWebsocketConnection$1(this.ws, "Invalid frame type was fragmented.");
						return;
					}
					const payloadLength = buffer$1[1] & 127;
					if (payloadLength <= 125) {
						this.#info.payloadLength = payloadLength;
						this.#state = parserStates.READ_DATA;
					} else if (payloadLength === 126) this.#state = parserStates.PAYLOADLENGTH_16;
					else if (payloadLength === 127) this.#state = parserStates.PAYLOADLENGTH_64;
					if (this.#info.fragmented && payloadLength > 125) {
						failWebsocketConnection$1(this.ws, "Fragmented frame exceeded 125 bytes.");
						return;
					} else if ((this.#info.opcode === opcodes$1.PING || this.#info.opcode === opcodes$1.PONG || this.#info.opcode === opcodes$1.CLOSE) && payloadLength > 125) {
						failWebsocketConnection$1(this.ws, "Payload length for control frame exceeded 125 bytes.");
						return;
					} else if (this.#info.opcode === opcodes$1.CLOSE) {
						if (payloadLength === 1) {
							failWebsocketConnection$1(this.ws, "Received close frame with a 1-byte body.");
							return;
						}
						const body = this.consume(payloadLength);
						this.#info.closeInfo = this.parseCloseBody(false, body);
						if (!this.ws[kSentClose$1]) {
							const body$1 = Buffer.allocUnsafe(2);
							body$1.writeUInt16BE(this.#info.closeInfo.code, 0);
							const closeFrame = new WebsocketFrameSend$1(body$1);
							this.ws[kResponse$1].socket.write(closeFrame.createFrame(opcodes$1.CLOSE), (err) => {
								if (!err) this.ws[kSentClose$1] = true;
							});
						}
						this.ws[kReadyState$1] = states$1.CLOSING;
						this.ws[kReceivedClose] = true;
						this.end();
						return;
					} else if (this.#info.opcode === opcodes$1.PING) {
						const body = this.consume(payloadLength);
						if (!this.ws[kReceivedClose]) {
							const frame = new WebsocketFrameSend$1(body);
							this.ws[kResponse$1].socket.write(frame.createFrame(opcodes$1.PONG));
							if (channels$1.ping.hasSubscribers) channels$1.ping.publish({ payload: body });
						}
						this.#state = parserStates.INFO;
						if (this.#byteOffset > 0) continue;
						else {
							callback();
							return;
						}
					} else if (this.#info.opcode === opcodes$1.PONG) {
						const body = this.consume(payloadLength);
						if (channels$1.pong.hasSubscribers) channels$1.pong.publish({ payload: body });
						if (this.#byteOffset > 0) continue;
						else {
							callback();
							return;
						}
					}
				} else if (this.#state === parserStates.PAYLOADLENGTH_16) {
					if (this.#byteOffset < 2) return callback();
					const buffer$1 = this.consume(2);
					this.#info.payloadLength = buffer$1.readUInt16BE(0);
					this.#state = parserStates.READ_DATA;
				} else if (this.#state === parserStates.PAYLOADLENGTH_64) {
					if (this.#byteOffset < 8) return callback();
					const buffer$1 = this.consume(8);
					const upper = buffer$1.readUInt32BE(0);
					if (upper > 2 ** 31 - 1) {
						failWebsocketConnection$1(this.ws, "Received payload length > 2^31 bytes.");
						return;
					}
					const lower = buffer$1.readUInt32BE(4);
					this.#info.payloadLength = (upper << 8) + lower;
					this.#state = parserStates.READ_DATA;
				} else if (this.#state === parserStates.READ_DATA) {
					if (this.#byteOffset < this.#info.payloadLength) return callback();
					else if (this.#byteOffset >= this.#info.payloadLength) {
						const body = this.consume(this.#info.payloadLength);
						this.#fragments.push(body);
						if (!this.#info.fragmented || this.#info.fin && this.#info.opcode === opcodes$1.CONTINUATION) {
							const fullMessage = Buffer.concat(this.#fragments);
							websocketMessageReceived(this.ws, this.#info.originalOpcode, fullMessage);
							this.#info = {};
							this.#fragments.length = 0;
						}
						this.#state = parserStates.INFO;
					}
				}
				if (this.#byteOffset > 0) continue;
				else {
					callback();
					break;
				}
			}
		}
		/**
		* Take n bytes from the buffered Buffers
		* @param {number} n
		* @returns {Buffer|null}
		*/
		consume(n) {
			if (n > this.#byteOffset) return null;
			else if (n === 0) return emptyBuffer$1;
			if (this.#buffers[0].length === n) {
				this.#byteOffset -= this.#buffers[0].length;
				return this.#buffers.shift();
			}
			const buffer$1 = Buffer.allocUnsafe(n);
			let offset = 0;
			while (offset !== n) {
				const next = this.#buffers[0];
				const { length } = next;
				if (length + offset === n) {
					buffer$1.set(this.#buffers.shift(), offset);
					break;
				} else if (length + offset > n) {
					buffer$1.set(next.subarray(0, n - offset), offset);
					this.#buffers[0] = next.subarray(n - offset);
					break;
				} else {
					buffer$1.set(this.#buffers.shift(), offset);
					offset += next.length;
				}
			}
			this.#byteOffset -= n;
			return buffer$1;
		}
		parseCloseBody(onlyCode, data) {
			/** @type {number|undefined} */
			let code;
			if (data.length >= 2) code = data.readUInt16BE(0);
			if (onlyCode) {
				if (!isValidStatusCode(code)) return null;
				return { code };
			}
			/** @type {Buffer} */
			let reason = data.subarray(2);
			if (reason[0] === 239 && reason[1] === 187 && reason[2] === 191) reason = reason.subarray(3);
			if (code !== void 0 && !isValidStatusCode(code)) return null;
			try {
				reason = new TextDecoder("utf-8", { fatal: true }).decode(reason);
			} catch {
				return null;
			}
			return {
				code,
				reason
			};
		}
		get closingInfo() {
			return this.#info.closeInfo;
		}
	};
	module.exports = { ByteParser: ByteParser$1 };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/websocket.js
var require_websocket = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/lib/websocket/websocket.js"(exports, module) {
	const { webidl } = require_webidl();
	const { DOMException: DOMException$1 } = require_constants$5();
	const { URLSerializer } = require_dataURL();
	const { getGlobalOrigin } = require_global$1();
	const { staticPropertyDescriptors, states, opcodes, emptyBuffer } = require_constants$2();
	const { kWebSocketURL, kReadyState, kController, kBinaryType, kResponse, kSentClose, kByteParser } = require_symbols();
	const { isEstablished, isClosing, isValidSubprotocol, failWebsocketConnection, fireEvent } = require_util$3();
	const { establishWebSocketConnection } = require_connection();
	const { WebsocketFrameSend } = require_frame();
	const { ByteParser } = require_receiver();
	const { kEnumerableProperty, isBlobLike } = require_util$9();
	const { getGlobalDispatcher: getGlobalDispatcher$1 } = require_global();
	const { types: types$1 } = __require("util");
	let experimentalWarned = false;
	var WebSocket = class WebSocket extends EventTarget {
		#events = {
			open: null,
			error: null,
			close: null,
			message: null
		};
		#bufferedAmount = 0;
		#protocol = "";
		#extensions = "";
		/**
		* @param {string} url
		* @param {string|string[]} protocols
		*/
		constructor(url$3, protocols$1 = []) {
			super();
			webidl.argumentLengthCheck(arguments, 1, { header: "WebSocket constructor" });
			if (!experimentalWarned) {
				experimentalWarned = true;
				process.emitWarning("WebSockets are experimental, expect them to change at any time.", { code: "UNDICI-WS" });
			}
			const options = webidl.converters["DOMString or sequence<DOMString> or WebSocketInit"](protocols$1);
			url$3 = webidl.converters.USVString(url$3);
			protocols$1 = options.protocols;
			const baseURL = getGlobalOrigin();
			let urlRecord;
			try {
				urlRecord = new URL(url$3, baseURL);
			} catch (e) {
				throw new DOMException$1(e, "SyntaxError");
			}
			if (urlRecord.protocol === "http:") urlRecord.protocol = "ws:";
			else if (urlRecord.protocol === "https:") urlRecord.protocol = "wss:";
			if (urlRecord.protocol !== "ws:" && urlRecord.protocol !== "wss:") throw new DOMException$1(`Expected a ws: or wss: protocol, got ${urlRecord.protocol}`, "SyntaxError");
			if (urlRecord.hash || urlRecord.href.endsWith("#")) throw new DOMException$1("Got fragment", "SyntaxError");
			if (typeof protocols$1 === "string") protocols$1 = [protocols$1];
			if (protocols$1.length !== new Set(protocols$1.map((p) => p.toLowerCase())).size) throw new DOMException$1("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
			if (protocols$1.length > 0 && !protocols$1.every((p) => isValidSubprotocol(p))) throw new DOMException$1("Invalid Sec-WebSocket-Protocol value", "SyntaxError");
			this[kWebSocketURL] = new URL(urlRecord.href);
			this[kController] = establishWebSocketConnection(urlRecord, protocols$1, this, (response) => this.#onConnectionEstablished(response), options);
			this[kReadyState] = WebSocket.CONNECTING;
			this[kBinaryType] = "blob";
		}
		/**
		* @see https://websockets.spec.whatwg.org/#dom-websocket-close
		* @param {number|undefined} code
		* @param {string|undefined} reason
		*/
		close(code = void 0, reason = void 0) {
			webidl.brandCheck(this, WebSocket);
			if (code !== void 0) code = webidl.converters["unsigned short"](code, { clamp: true });
			if (reason !== void 0) reason = webidl.converters.USVString(reason);
			if (code !== void 0) {
				if (code !== 1e3 && (code < 3e3 || code > 4999)) throw new DOMException$1("invalid code", "InvalidAccessError");
			}
			let reasonByteLength = 0;
			if (reason !== void 0) {
				reasonByteLength = Buffer.byteLength(reason);
				if (reasonByteLength > 123) throw new DOMException$1(`Reason must be less than 123 bytes; received ${reasonByteLength}`, "SyntaxError");
			}
			if (this[kReadyState] === WebSocket.CLOSING || this[kReadyState] === WebSocket.CLOSED) {} else if (!isEstablished(this)) {
				failWebsocketConnection(this, "Connection was closed before it was established.");
				this[kReadyState] = WebSocket.CLOSING;
			} else if (!isClosing(this)) {
				const frame = new WebsocketFrameSend();
				if (code !== void 0 && reason === void 0) {
					frame.frameData = Buffer.allocUnsafe(2);
					frame.frameData.writeUInt16BE(code, 0);
				} else if (code !== void 0 && reason !== void 0) {
					frame.frameData = Buffer.allocUnsafe(2 + reasonByteLength);
					frame.frameData.writeUInt16BE(code, 0);
					frame.frameData.write(reason, 2, "utf-8");
				} else frame.frameData = emptyBuffer;
				/** @type {import('stream').Duplex} */
				const socket = this[kResponse].socket;
				socket.write(frame.createFrame(opcodes.CLOSE), (err) => {
					if (!err) this[kSentClose] = true;
				});
				this[kReadyState] = states.CLOSING;
			} else this[kReadyState] = WebSocket.CLOSING;
		}
		/**
		* @see https://websockets.spec.whatwg.org/#dom-websocket-send
		* @param {NodeJS.TypedArray|ArrayBuffer|Blob|string} data
		*/
		send(data) {
			webidl.brandCheck(this, WebSocket);
			webidl.argumentLengthCheck(arguments, 1, { header: "WebSocket.send" });
			data = webidl.converters.WebSocketSendData(data);
			if (this[kReadyState] === WebSocket.CONNECTING) throw new DOMException$1("Sent before connected.", "InvalidStateError");
			if (!isEstablished(this) || isClosing(this)) return;
			/** @type {import('stream').Duplex} */
			const socket = this[kResponse].socket;
			if (typeof data === "string") {
				const value = Buffer.from(data);
				const frame = new WebsocketFrameSend(value);
				const buffer$1 = frame.createFrame(opcodes.TEXT);
				this.#bufferedAmount += value.byteLength;
				socket.write(buffer$1, () => {
					this.#bufferedAmount -= value.byteLength;
				});
			} else if (types$1.isArrayBuffer(data)) {
				const value = Buffer.from(data);
				const frame = new WebsocketFrameSend(value);
				const buffer$1 = frame.createFrame(opcodes.BINARY);
				this.#bufferedAmount += value.byteLength;
				socket.write(buffer$1, () => {
					this.#bufferedAmount -= value.byteLength;
				});
			} else if (ArrayBuffer.isView(data)) {
				const ab = Buffer.from(data, data.byteOffset, data.byteLength);
				const frame = new WebsocketFrameSend(ab);
				const buffer$1 = frame.createFrame(opcodes.BINARY);
				this.#bufferedAmount += ab.byteLength;
				socket.write(buffer$1, () => {
					this.#bufferedAmount -= ab.byteLength;
				});
			} else if (isBlobLike(data)) {
				const frame = new WebsocketFrameSend();
				data.arrayBuffer().then((ab) => {
					const value = Buffer.from(ab);
					frame.frameData = value;
					const buffer$1 = frame.createFrame(opcodes.BINARY);
					this.#bufferedAmount += value.byteLength;
					socket.write(buffer$1, () => {
						this.#bufferedAmount -= value.byteLength;
					});
				});
			}
		}
		get readyState() {
			webidl.brandCheck(this, WebSocket);
			return this[kReadyState];
		}
		get bufferedAmount() {
			webidl.brandCheck(this, WebSocket);
			return this.#bufferedAmount;
		}
		get url() {
			webidl.brandCheck(this, WebSocket);
			return URLSerializer(this[kWebSocketURL]);
		}
		get extensions() {
			webidl.brandCheck(this, WebSocket);
			return this.#extensions;
		}
		get protocol() {
			webidl.brandCheck(this, WebSocket);
			return this.#protocol;
		}
		get onopen() {
			webidl.brandCheck(this, WebSocket);
			return this.#events.open;
		}
		set onopen(fn) {
			webidl.brandCheck(this, WebSocket);
			if (this.#events.open) this.removeEventListener("open", this.#events.open);
			if (typeof fn === "function") {
				this.#events.open = fn;
				this.addEventListener("open", fn);
			} else this.#events.open = null;
		}
		get onerror() {
			webidl.brandCheck(this, WebSocket);
			return this.#events.error;
		}
		set onerror(fn) {
			webidl.brandCheck(this, WebSocket);
			if (this.#events.error) this.removeEventListener("error", this.#events.error);
			if (typeof fn === "function") {
				this.#events.error = fn;
				this.addEventListener("error", fn);
			} else this.#events.error = null;
		}
		get onclose() {
			webidl.brandCheck(this, WebSocket);
			return this.#events.close;
		}
		set onclose(fn) {
			webidl.brandCheck(this, WebSocket);
			if (this.#events.close) this.removeEventListener("close", this.#events.close);
			if (typeof fn === "function") {
				this.#events.close = fn;
				this.addEventListener("close", fn);
			} else this.#events.close = null;
		}
		get onmessage() {
			webidl.brandCheck(this, WebSocket);
			return this.#events.message;
		}
		set onmessage(fn) {
			webidl.brandCheck(this, WebSocket);
			if (this.#events.message) this.removeEventListener("message", this.#events.message);
			if (typeof fn === "function") {
				this.#events.message = fn;
				this.addEventListener("message", fn);
			} else this.#events.message = null;
		}
		get binaryType() {
			webidl.brandCheck(this, WebSocket);
			return this[kBinaryType];
		}
		set binaryType(type) {
			webidl.brandCheck(this, WebSocket);
			if (type !== "blob" && type !== "arraybuffer") this[kBinaryType] = "blob";
			else this[kBinaryType] = type;
		}
		/**
		* @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol
		*/
		#onConnectionEstablished(response) {
			this[kResponse] = response;
			const parser = new ByteParser(this);
			parser.on("drain", function onParserDrain() {
				this.ws[kResponse].socket.resume();
			});
			response.socket.ws = this;
			this[kByteParser] = parser;
			this[kReadyState] = states.OPEN;
			const extensions = response.headersList.get("sec-websocket-extensions");
			if (extensions !== null) this.#extensions = extensions;
			const protocol = response.headersList.get("sec-websocket-protocol");
			if (protocol !== null) this.#protocol = protocol;
			fireEvent("open", this);
		}
	};
	WebSocket.CONNECTING = WebSocket.prototype.CONNECTING = states.CONNECTING;
	WebSocket.OPEN = WebSocket.prototype.OPEN = states.OPEN;
	WebSocket.CLOSING = WebSocket.prototype.CLOSING = states.CLOSING;
	WebSocket.CLOSED = WebSocket.prototype.CLOSED = states.CLOSED;
	Object.defineProperties(WebSocket.prototype, {
		CONNECTING: staticPropertyDescriptors,
		OPEN: staticPropertyDescriptors,
		CLOSING: staticPropertyDescriptors,
		CLOSED: staticPropertyDescriptors,
		url: kEnumerableProperty,
		readyState: kEnumerableProperty,
		bufferedAmount: kEnumerableProperty,
		onopen: kEnumerableProperty,
		onerror: kEnumerableProperty,
		onclose: kEnumerableProperty,
		close: kEnumerableProperty,
		onmessage: kEnumerableProperty,
		binaryType: kEnumerableProperty,
		send: kEnumerableProperty,
		extensions: kEnumerableProperty,
		protocol: kEnumerableProperty,
		[Symbol.toStringTag]: {
			value: "WebSocket",
			writable: false,
			enumerable: false,
			configurable: true
		}
	});
	Object.defineProperties(WebSocket, {
		CONNECTING: staticPropertyDescriptors,
		OPEN: staticPropertyDescriptors,
		CLOSING: staticPropertyDescriptors,
		CLOSED: staticPropertyDescriptors
	});
	webidl.converters["sequence<DOMString>"] = webidl.sequenceConverter(webidl.converters.DOMString);
	webidl.converters["DOMString or sequence<DOMString>"] = function(V) {
		if (webidl.util.Type(V) === "Object" && Symbol.iterator in V) return webidl.converters["sequence<DOMString>"](V);
		return webidl.converters.DOMString(V);
	};
	webidl.converters.WebSocketInit = webidl.dictionaryConverter([
		{
			key: "protocols",
			converter: webidl.converters["DOMString or sequence<DOMString>"],
			get defaultValue() {
				return [];
			}
		},
		{
			key: "dispatcher",
			converter: (V) => V,
			get defaultValue() {
				return getGlobalDispatcher$1();
			}
		},
		{
			key: "headers",
			converter: webidl.nullableConverter(webidl.converters.HeadersInit)
		}
	]);
	webidl.converters["DOMString or sequence<DOMString> or WebSocketInit"] = function(V) {
		if (webidl.util.Type(V) === "Object" && !(Symbol.iterator in V)) return webidl.converters.WebSocketInit(V);
		return { protocols: webidl.converters["DOMString or sequence<DOMString>"](V) };
	};
	webidl.converters.WebSocketSendData = function(V) {
		if (webidl.util.Type(V) === "Object") {
			if (isBlobLike(V)) return webidl.converters.Blob(V, { strict: false });
			if (ArrayBuffer.isView(V) || types$1.isAnyArrayBuffer(V)) return webidl.converters.BufferSource(V);
		}
		return webidl.converters.USVString(V);
	};
	module.exports = { WebSocket };
} });

//#endregion
//#region node_modules/.pnpm/undici@5.29.0/node_modules/undici/index.js
var require_undici = __commonJS({ "node_modules/.pnpm/undici@5.29.0/node_modules/undici/index.js"(exports, module) {
	const Client = require_client();
	const Dispatcher = require_dispatcher();
	const errors$3 = require_errors$2();
	const Pool = require_pool();
	const BalancedPool = require_balanced_pool();
	const Agent$1 = require_agent();
	const util$16 = require_util$9();
	const { InvalidArgumentError } = errors$3;
	const api = require_api();
	const buildConnector = require_connect();
	const MockClient = require_mock_client();
	const MockAgent = require_mock_agent();
	const MockPool = require_mock_pool();
	const mockErrors = require_mock_errors();
	const ProxyAgent = require_proxy_agent();
	const RetryHandler = require_RetryHandler();
	const { getGlobalDispatcher, setGlobalDispatcher } = require_global();
	const DecoratorHandler = require_DecoratorHandler();
	const RedirectHandler = require_RedirectHandler();
	const createRedirectInterceptor = require_redirectInterceptor();
	let hasCrypto;
	try {
		__require("crypto");
		hasCrypto = true;
	} catch {
		hasCrypto = false;
	}
	Object.assign(Dispatcher.prototype, api);
	module.exports.Dispatcher = Dispatcher;
	module.exports.Client = Client;
	module.exports.Pool = Pool;
	module.exports.BalancedPool = BalancedPool;
	module.exports.Agent = Agent$1;
	module.exports.ProxyAgent = ProxyAgent;
	module.exports.RetryHandler = RetryHandler;
	module.exports.DecoratorHandler = DecoratorHandler;
	module.exports.RedirectHandler = RedirectHandler;
	module.exports.createRedirectInterceptor = createRedirectInterceptor;
	module.exports.buildConnector = buildConnector;
	module.exports.errors = errors$3;
	function makeDispatcher(fn) {
		return (url$3, opts, handler) => {
			if (typeof opts === "function") {
				handler = opts;
				opts = null;
			}
			if (!url$3 || typeof url$3 !== "string" && typeof url$3 !== "object" && !(url$3 instanceof URL)) throw new InvalidArgumentError("invalid url");
			if (opts != null && typeof opts !== "object") throw new InvalidArgumentError("invalid opts");
			if (opts && opts.path != null) {
				if (typeof opts.path !== "string") throw new InvalidArgumentError("invalid opts.path");
				let path$10 = opts.path;
				if (!opts.path.startsWith("/")) path$10 = `/${path$10}`;
				url$3 = new URL(util$16.parseOrigin(url$3).origin + path$10);
			} else {
				if (!opts) opts = typeof url$3 === "object" ? url$3 : {};
				url$3 = util$16.parseURL(url$3);
			}
			const { agent, dispatcher = getGlobalDispatcher() } = opts;
			if (agent) throw new InvalidArgumentError("unsupported opts.agent. Did you mean opts.client?");
			return fn.call(dispatcher, {
				...opts,
				origin: url$3.origin,
				path: url$3.search ? `${url$3.pathname}${url$3.search}` : url$3.pathname,
				method: opts.method || (opts.body ? "PUT" : "GET")
			}, handler);
		};
	}
	module.exports.setGlobalDispatcher = setGlobalDispatcher;
	module.exports.getGlobalDispatcher = getGlobalDispatcher;
	if (util$16.nodeMajor > 16 || util$16.nodeMajor === 16 && util$16.nodeMinor >= 8) {
		let fetchImpl = null;
		module.exports.fetch = async function fetch$3(resource) {
			if (!fetchImpl) fetchImpl = require_fetch$1().fetch;
			try {
				return await fetchImpl(...arguments);
			} catch (err) {
				if (typeof err === "object") Error.captureStackTrace(err, this);
				throw err;
			}
		};
		module.exports.Headers = require_headers().Headers;
		module.exports.Response = require_response().Response;
		module.exports.Request = require_request().Request;
		module.exports.FormData = require_formdata().FormData;
		module.exports.File = require_file$1().File;
		module.exports.FileReader = require_filereader().FileReader;
		const { setGlobalOrigin: setGlobalOrigin$1, getGlobalOrigin: getGlobalOrigin$5 } = require_global$1();
		module.exports.setGlobalOrigin = setGlobalOrigin$1;
		module.exports.getGlobalOrigin = getGlobalOrigin$5;
		const { CacheStorage: CacheStorage$1 } = require_cachestorage();
		const { kConstruct: kConstruct$5 } = require_symbols$1();
		module.exports.caches = new CacheStorage$1(kConstruct$5);
	}
	if (util$16.nodeMajor >= 16) {
		const { deleteCookie: deleteCookie$1, getCookies: getCookies$1, getSetCookies: getSetCookies$1, setCookie: setCookie$1 } = require_cookies();
		module.exports.deleteCookie = deleteCookie$1;
		module.exports.getCookies = getCookies$1;
		module.exports.getSetCookies = getSetCookies$1;
		module.exports.setCookie = setCookie$1;
		const { parseMIMEType: parseMIMEType$4, serializeAMimeType: serializeAMimeType$5 } = require_dataURL();
		module.exports.parseMIMEType = parseMIMEType$4;
		module.exports.serializeAMimeType = serializeAMimeType$5;
	}
	if (util$16.nodeMajor >= 18 && hasCrypto) {
		const { WebSocket: WebSocket$1 } = require_websocket();
		module.exports.WebSocket = WebSocket$1;
	}
	module.exports.request = makeDispatcher(api.request);
	module.exports.stream = makeDispatcher(api.stream);
	module.exports.pipeline = makeDispatcher(api.pipeline);
	module.exports.connect = makeDispatcher(api.connect);
	module.exports.upgrade = makeDispatcher(api.upgrade);
	module.exports.MockClient = MockClient;
	module.exports.MockPool = MockPool;
	module.exports.MockAgent = MockAgent;
	module.exports.mockErrors = mockErrors;
} });

//#endregion
//#region node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/index.js
var require_lib$1 = __commonJS({ "node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/index.js"(exports) {
	var __createBinding$21 = exports && exports.__createBinding || (Object.create ? function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc$1 = Object.getOwnPropertyDescriptor(m$1, k);
		if (!desc$1 || ("get" in desc$1 ? !m$1.__esModule : desc$1.writable || desc$1.configurable)) desc$1 = {
			enumerable: true,
			get: function() {
				return m$1[k];
			}
		};
		Object.defineProperty(o, k2, desc$1);
	} : function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		o[k2] = m$1[k];
	});
	var __setModuleDefault$10 = exports && exports.__setModuleDefault || (Object.create ? function(o, v$1) {
		Object.defineProperty(o, "default", {
			enumerable: true,
			value: v$1
		});
	} : function(o, v$1) {
		o["default"] = v$1;
	});
	var __importStar$10 = exports && exports.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$21(result, mod, k);
		}
		__setModuleDefault$10(result, mod);
		return result;
	};
	var __awaiter$9 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve) {
				resolve(value);
			});
		}
		return new (P || (P = Promise))(function(resolve, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;
	const http$6 = __importStar$10(__require("http"));
	const https$6 = __importStar$10(__require("https"));
	const pm = __importStar$10(require_proxy());
	const tunnel = __importStar$10(require_tunnel());
	const undici_1 = require_undici();
	var HttpCodes;
	(function(HttpCodes$1) {
		HttpCodes$1[HttpCodes$1["OK"] = 200] = "OK";
		HttpCodes$1[HttpCodes$1["MultipleChoices"] = 300] = "MultipleChoices";
		HttpCodes$1[HttpCodes$1["MovedPermanently"] = 301] = "MovedPermanently";
		HttpCodes$1[HttpCodes$1["ResourceMoved"] = 302] = "ResourceMoved";
		HttpCodes$1[HttpCodes$1["SeeOther"] = 303] = "SeeOther";
		HttpCodes$1[HttpCodes$1["NotModified"] = 304] = "NotModified";
		HttpCodes$1[HttpCodes$1["UseProxy"] = 305] = "UseProxy";
		HttpCodes$1[HttpCodes$1["SwitchProxy"] = 306] = "SwitchProxy";
		HttpCodes$1[HttpCodes$1["TemporaryRedirect"] = 307] = "TemporaryRedirect";
		HttpCodes$1[HttpCodes$1["PermanentRedirect"] = 308] = "PermanentRedirect";
		HttpCodes$1[HttpCodes$1["BadRequest"] = 400] = "BadRequest";
		HttpCodes$1[HttpCodes$1["Unauthorized"] = 401] = "Unauthorized";
		HttpCodes$1[HttpCodes$1["PaymentRequired"] = 402] = "PaymentRequired";
		HttpCodes$1[HttpCodes$1["Forbidden"] = 403] = "Forbidden";
		HttpCodes$1[HttpCodes$1["NotFound"] = 404] = "NotFound";
		HttpCodes$1[HttpCodes$1["MethodNotAllowed"] = 405] = "MethodNotAllowed";
		HttpCodes$1[HttpCodes$1["NotAcceptable"] = 406] = "NotAcceptable";
		HttpCodes$1[HttpCodes$1["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
		HttpCodes$1[HttpCodes$1["RequestTimeout"] = 408] = "RequestTimeout";
		HttpCodes$1[HttpCodes$1["Conflict"] = 409] = "Conflict";
		HttpCodes$1[HttpCodes$1["Gone"] = 410] = "Gone";
		HttpCodes$1[HttpCodes$1["TooManyRequests"] = 429] = "TooManyRequests";
		HttpCodes$1[HttpCodes$1["InternalServerError"] = 500] = "InternalServerError";
		HttpCodes$1[HttpCodes$1["NotImplemented"] = 501] = "NotImplemented";
		HttpCodes$1[HttpCodes$1["BadGateway"] = 502] = "BadGateway";
		HttpCodes$1[HttpCodes$1["ServiceUnavailable"] = 503] = "ServiceUnavailable";
		HttpCodes$1[HttpCodes$1["GatewayTimeout"] = 504] = "GatewayTimeout";
	})(HttpCodes || (exports.HttpCodes = HttpCodes = {}));
	var Headers;
	(function(Headers$7) {
		Headers$7["Accept"] = "accept";
		Headers$7["ContentType"] = "content-type";
	})(Headers || (exports.Headers = Headers = {}));
	var MediaTypes;
	(function(MediaTypes$1) {
		MediaTypes$1["ApplicationJson"] = "application/json";
	})(MediaTypes || (exports.MediaTypes = MediaTypes = {}));
	/**
	* Returns the proxy URL, depending upon the supplied url and proxy environment variables.
	* @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
	*/
	function getProxyUrl(serverUrl) {
		const proxyUrl = pm.getProxyUrl(new URL(serverUrl));
		return proxyUrl ? proxyUrl.href : "";
	}
	exports.getProxyUrl = getProxyUrl;
	const HttpRedirectCodes = [
		HttpCodes.MovedPermanently,
		HttpCodes.ResourceMoved,
		HttpCodes.SeeOther,
		HttpCodes.TemporaryRedirect,
		HttpCodes.PermanentRedirect
	];
	const HttpResponseRetryCodes = [
		HttpCodes.BadGateway,
		HttpCodes.ServiceUnavailable,
		HttpCodes.GatewayTimeout
	];
	const RetryableHttpVerbs = [
		"OPTIONS",
		"GET",
		"DELETE",
		"HEAD"
	];
	const ExponentialBackoffCeiling = 10;
	const ExponentialBackoffTimeSlice = 5;
	var HttpClientError = class HttpClientError extends Error {
		constructor(message, statusCode) {
			super(message);
			this.name = "HttpClientError";
			this.statusCode = statusCode;
			Object.setPrototypeOf(this, HttpClientError.prototype);
		}
	};
	exports.HttpClientError = HttpClientError;
	var HttpClientResponse = class {
		constructor(message) {
			this.message = message;
		}
		readBody() {
			return __awaiter$9(this, void 0, void 0, function* () {
				return new Promise((resolve) => __awaiter$9(this, void 0, void 0, function* () {
					let output = Buffer.alloc(0);
					this.message.on("data", (chunk) => {
						output = Buffer.concat([output, chunk]);
					});
					this.message.on("end", () => {
						resolve(output.toString());
					});
				}));
			});
		}
		readBodyBuffer() {
			return __awaiter$9(this, void 0, void 0, function* () {
				return new Promise((resolve) => __awaiter$9(this, void 0, void 0, function* () {
					const chunks = [];
					this.message.on("data", (chunk) => {
						chunks.push(chunk);
					});
					this.message.on("end", () => {
						resolve(Buffer.concat(chunks));
					});
				}));
			});
		}
	};
	exports.HttpClientResponse = HttpClientResponse;
	function isHttps$1(requestUrl) {
		const parsedUrl = new URL(requestUrl);
		return parsedUrl.protocol === "https:";
	}
	exports.isHttps = isHttps$1;
	var HttpClient = class {
		constructor(userAgent, handlers, requestOptions) {
			this._ignoreSslError = false;
			this._allowRedirects = true;
			this._allowRedirectDowngrade = false;
			this._maxRedirects = 50;
			this._allowRetries = false;
			this._maxRetries = 1;
			this._keepAlive = false;
			this._disposed = false;
			this.userAgent = userAgent;
			this.handlers = handlers || [];
			this.requestOptions = requestOptions;
			if (requestOptions) {
				if (requestOptions.ignoreSslError != null) this._ignoreSslError = requestOptions.ignoreSslError;
				this._socketTimeout = requestOptions.socketTimeout;
				if (requestOptions.allowRedirects != null) this._allowRedirects = requestOptions.allowRedirects;
				if (requestOptions.allowRedirectDowngrade != null) this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
				if (requestOptions.maxRedirects != null) this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
				if (requestOptions.keepAlive != null) this._keepAlive = requestOptions.keepAlive;
				if (requestOptions.allowRetries != null) this._allowRetries = requestOptions.allowRetries;
				if (requestOptions.maxRetries != null) this._maxRetries = requestOptions.maxRetries;
			}
		}
		options(requestUrl, additionalHeaders) {
			return __awaiter$9(this, void 0, void 0, function* () {
				return this.request("OPTIONS", requestUrl, null, additionalHeaders || {});
			});
		}
		get(requestUrl, additionalHeaders) {
			return __awaiter$9(this, void 0, void 0, function* () {
				return this.request("GET", requestUrl, null, additionalHeaders || {});
			});
		}
		del(requestUrl, additionalHeaders) {
			return __awaiter$9(this, void 0, void 0, function* () {
				return this.request("DELETE", requestUrl, null, additionalHeaders || {});
			});
		}
		post(requestUrl, data, additionalHeaders) {
			return __awaiter$9(this, void 0, void 0, function* () {
				return this.request("POST", requestUrl, data, additionalHeaders || {});
			});
		}
		patch(requestUrl, data, additionalHeaders) {
			return __awaiter$9(this, void 0, void 0, function* () {
				return this.request("PATCH", requestUrl, data, additionalHeaders || {});
			});
		}
		put(requestUrl, data, additionalHeaders) {
			return __awaiter$9(this, void 0, void 0, function* () {
				return this.request("PUT", requestUrl, data, additionalHeaders || {});
			});
		}
		head(requestUrl, additionalHeaders) {
			return __awaiter$9(this, void 0, void 0, function* () {
				return this.request("HEAD", requestUrl, null, additionalHeaders || {});
			});
		}
		sendStream(verb, requestUrl, stream$3, additionalHeaders) {
			return __awaiter$9(this, void 0, void 0, function* () {
				return this.request(verb, requestUrl, stream$3, additionalHeaders);
			});
		}
		/**
		* Gets a typed object from an endpoint
		* Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
		*/
		getJson(requestUrl, additionalHeaders = {}) {
			return __awaiter$9(this, void 0, void 0, function* () {
				additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
				const res = yield this.get(requestUrl, additionalHeaders);
				return this._processResponse(res, this.requestOptions);
			});
		}
		postJson(requestUrl, obj, additionalHeaders = {}) {
			return __awaiter$9(this, void 0, void 0, function* () {
				const data = JSON.stringify(obj, null, 2);
				additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
				additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
				const res = yield this.post(requestUrl, data, additionalHeaders);
				return this._processResponse(res, this.requestOptions);
			});
		}
		putJson(requestUrl, obj, additionalHeaders = {}) {
			return __awaiter$9(this, void 0, void 0, function* () {
				const data = JSON.stringify(obj, null, 2);
				additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
				additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
				const res = yield this.put(requestUrl, data, additionalHeaders);
				return this._processResponse(res, this.requestOptions);
			});
		}
		patchJson(requestUrl, obj, additionalHeaders = {}) {
			return __awaiter$9(this, void 0, void 0, function* () {
				const data = JSON.stringify(obj, null, 2);
				additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
				additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
				const res = yield this.patch(requestUrl, data, additionalHeaders);
				return this._processResponse(res, this.requestOptions);
			});
		}
		/**
		* Makes a raw http request.
		* All other methods such as get, post, patch, and request ultimately call this.
		* Prefer get, del, post and patch
		*/
		request(verb, requestUrl, data, headers) {
			return __awaiter$9(this, void 0, void 0, function* () {
				if (this._disposed) throw new Error("Client has already been disposed.");
				const parsedUrl = new URL(requestUrl);
				let info$1 = this._prepareRequest(verb, parsedUrl, headers);
				const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb) ? this._maxRetries + 1 : 1;
				let numTries = 0;
				let response;
				do {
					response = yield this.requestRaw(info$1, data);
					if (response && response.message && response.message.statusCode === HttpCodes.Unauthorized) {
						let authenticationHandler;
						for (const handler of this.handlers) if (handler.canHandleAuthentication(response)) {
							authenticationHandler = handler;
							break;
						}
						if (authenticationHandler) return authenticationHandler.handleAuthentication(this, info$1, data);
						else return response;
					}
					let redirectsRemaining = this._maxRedirects;
					while (response.message.statusCode && HttpRedirectCodes.includes(response.message.statusCode) && this._allowRedirects && redirectsRemaining > 0) {
						const redirectUrl = response.message.headers["location"];
						if (!redirectUrl) break;
						const parsedRedirectUrl = new URL(redirectUrl);
						if (parsedUrl.protocol === "https:" && parsedUrl.protocol !== parsedRedirectUrl.protocol && !this._allowRedirectDowngrade) throw new Error("Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.");
						yield response.readBody();
						if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
							for (const header in headers) if (header.toLowerCase() === "authorization") delete headers[header];
						}
						info$1 = this._prepareRequest(verb, parsedRedirectUrl, headers);
						response = yield this.requestRaw(info$1, data);
						redirectsRemaining--;
					}
					if (!response.message.statusCode || !HttpResponseRetryCodes.includes(response.message.statusCode)) return response;
					numTries += 1;
					if (numTries < maxTries) {
						yield response.readBody();
						yield this._performExponentialBackoff(numTries);
					}
				} while (numTries < maxTries);
				return response;
			});
		}
		/**
		* Needs to be called if keepAlive is set to true in request options.
		*/
		dispose() {
			if (this._agent) this._agent.destroy();
			this._disposed = true;
		}
		/**
		* Raw request.
		* @param info
		* @param data
		*/
		requestRaw(info$1, data) {
			return __awaiter$9(this, void 0, void 0, function* () {
				return new Promise((resolve, reject) => {
					function callbackForResult(err, res) {
						if (err) reject(err);
						else if (!res) reject(new Error("Unknown error"));
						else resolve(res);
					}
					this.requestRawWithCallback(info$1, data, callbackForResult);
				});
			});
		}
		/**
		* Raw request with callback.
		* @param info
		* @param data
		* @param onResult
		*/
		requestRawWithCallback(info$1, data, onResult) {
			if (typeof data === "string") {
				if (!info$1.options.headers) info$1.options.headers = {};
				info$1.options.headers["Content-Length"] = Buffer.byteLength(data, "utf8");
			}
			let callbackCalled = false;
			function handleResult(err, res) {
				if (!callbackCalled) {
					callbackCalled = true;
					onResult(err, res);
				}
			}
			const req = info$1.httpModule.request(info$1.options, (msg) => {
				const res = new HttpClientResponse(msg);
				handleResult(void 0, res);
			});
			let socket;
			req.on("socket", (sock) => {
				socket = sock;
			});
			req.setTimeout(this._socketTimeout || 3 * 6e4, () => {
				if (socket) socket.end();
				handleResult(new Error(`Request timeout: ${info$1.options.path}`));
			});
			req.on("error", function(err) {
				handleResult(err);
			});
			if (data && typeof data === "string") req.write(data, "utf8");
			if (data && typeof data !== "string") {
				data.on("close", function() {
					req.end();
				});
				data.pipe(req);
			} else req.end();
		}
		/**
		* Gets an http agent. This function is useful when you need an http agent that handles
		* routing through a proxy server - depending upon the url and proxy environment variables.
		* @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
		*/
		getAgent(serverUrl) {
			const parsedUrl = new URL(serverUrl);
			return this._getAgent(parsedUrl);
		}
		getAgentDispatcher(serverUrl) {
			const parsedUrl = new URL(serverUrl);
			const proxyUrl = pm.getProxyUrl(parsedUrl);
			const useProxy = proxyUrl && proxyUrl.hostname;
			if (!useProxy) return;
			return this._getProxyAgentDispatcher(parsedUrl, proxyUrl);
		}
		_prepareRequest(method$1, requestUrl, headers) {
			const info$1 = {};
			info$1.parsedUrl = requestUrl;
			const usingSsl = info$1.parsedUrl.protocol === "https:";
			info$1.httpModule = usingSsl ? https$6 : http$6;
			const defaultPort = usingSsl ? 443 : 80;
			info$1.options = {};
			info$1.options.host = info$1.parsedUrl.hostname;
			info$1.options.port = info$1.parsedUrl.port ? parseInt(info$1.parsedUrl.port) : defaultPort;
			info$1.options.path = (info$1.parsedUrl.pathname || "") + (info$1.parsedUrl.search || "");
			info$1.options.method = method$1;
			info$1.options.headers = this._mergeHeaders(headers);
			if (this.userAgent != null) info$1.options.headers["user-agent"] = this.userAgent;
			info$1.options.agent = this._getAgent(info$1.parsedUrl);
			if (this.handlers) for (const handler of this.handlers) handler.prepareRequest(info$1.options);
			return info$1;
		}
		_mergeHeaders(headers) {
			if (this.requestOptions && this.requestOptions.headers) return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));
			return lowercaseKeys(headers || {});
		}
		_getExistingOrDefaultHeader(additionalHeaders, header, _default) {
			let clientHeader;
			if (this.requestOptions && this.requestOptions.headers) clientHeader = lowercaseKeys(this.requestOptions.headers)[header];
			return additionalHeaders[header] || clientHeader || _default;
		}
		_getAgent(parsedUrl) {
			let agent;
			const proxyUrl = pm.getProxyUrl(parsedUrl);
			const useProxy = proxyUrl && proxyUrl.hostname;
			if (this._keepAlive && useProxy) agent = this._proxyAgent;
			if (!useProxy) agent = this._agent;
			if (agent) return agent;
			const usingSsl = parsedUrl.protocol === "https:";
			let maxSockets = 100;
			if (this.requestOptions) maxSockets = this.requestOptions.maxSockets || http$6.globalAgent.maxSockets;
			if (proxyUrl && proxyUrl.hostname) {
				const agentOptions = {
					maxSockets,
					keepAlive: this._keepAlive,
					proxy: Object.assign(Object.assign({}, (proxyUrl.username || proxyUrl.password) && { proxyAuth: `${proxyUrl.username}:${proxyUrl.password}` }), {
						host: proxyUrl.hostname,
						port: proxyUrl.port
					})
				};
				let tunnelAgent;
				const overHttps = proxyUrl.protocol === "https:";
				if (usingSsl) tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
				else tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
				agent = tunnelAgent(agentOptions);
				this._proxyAgent = agent;
			}
			if (!agent) {
				const options = {
					keepAlive: this._keepAlive,
					maxSockets
				};
				agent = usingSsl ? new https$6.Agent(options) : new http$6.Agent(options);
				this._agent = agent;
			}
			if (usingSsl && this._ignoreSslError) agent.options = Object.assign(agent.options || {}, { rejectUnauthorized: false });
			return agent;
		}
		_getProxyAgentDispatcher(parsedUrl, proxyUrl) {
			let proxyAgent;
			if (this._keepAlive) proxyAgent = this._proxyAgentDispatcher;
			if (proxyAgent) return proxyAgent;
			const usingSsl = parsedUrl.protocol === "https:";
			proxyAgent = new undici_1.ProxyAgent(Object.assign({
				uri: proxyUrl.href,
				pipelining: !this._keepAlive ? 0 : 1
			}, (proxyUrl.username || proxyUrl.password) && { token: `Basic ${Buffer.from(`${proxyUrl.username}:${proxyUrl.password}`).toString("base64")}` }));
			this._proxyAgentDispatcher = proxyAgent;
			if (usingSsl && this._ignoreSslError) proxyAgent.options = Object.assign(proxyAgent.options.requestTls || {}, { rejectUnauthorized: false });
			return proxyAgent;
		}
		_performExponentialBackoff(retryNumber) {
			return __awaiter$9(this, void 0, void 0, function* () {
				retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
				const ms$2 = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
				return new Promise((resolve) => setTimeout(() => resolve(), ms$2));
			});
		}
		_processResponse(res, options) {
			return __awaiter$9(this, void 0, void 0, function* () {
				return new Promise((resolve, reject) => __awaiter$9(this, void 0, void 0, function* () {
					const statusCode = res.message.statusCode || 0;
					const response = {
						statusCode,
						result: null,
						headers: {}
					};
					if (statusCode === HttpCodes.NotFound) resolve(response);
					function dateTimeDeserializer(key$1, value) {
						if (typeof value === "string") {
							const a = new Date(value);
							if (!isNaN(a.valueOf())) return a;
						}
						return value;
					}
					let obj;
					let contents;
					try {
						contents = yield res.readBody();
						if (contents && contents.length > 0) {
							if (options && options.deserializeDates) obj = JSON.parse(contents, dateTimeDeserializer);
							else obj = JSON.parse(contents);
							response.result = obj;
						}
						response.headers = res.message.headers;
					} catch (err) {}
					if (statusCode > 299) {
						let msg;
						if (obj && obj.message) msg = obj.message;
						else if (contents && contents.length > 0) msg = contents;
						else msg = `Failed request: (${statusCode})`;
						const err = new HttpClientError(msg, statusCode);
						err.result = response.result;
						reject(err);
					} else resolve(response);
				}));
			});
		}
	};
	exports.HttpClient = HttpClient;
	const lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => (c[k.toLowerCase()] = obj[k], c), {});
} });

//#endregion
//#region node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/auth.js
var require_auth = __commonJS({ "node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/lib/auth.js"(exports) {
	var __awaiter$8 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve) {
				resolve(value);
			});
		}
		return new (P || (P = Promise))(function(resolve, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;
	var BasicCredentialHandler = class {
		constructor(username, password) {
			this.username = username;
			this.password = password;
		}
		prepareRequest(options) {
			if (!options.headers) throw Error("The request has no headers");
			options.headers["Authorization"] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString("base64")}`;
		}
		canHandleAuthentication() {
			return false;
		}
		handleAuthentication() {
			return __awaiter$8(this, void 0, void 0, function* () {
				throw new Error("not implemented");
			});
		}
	};
	exports.BasicCredentialHandler = BasicCredentialHandler;
	var BearerCredentialHandler = class {
		constructor(token) {
			this.token = token;
		}
		prepareRequest(options) {
			if (!options.headers) throw Error("The request has no headers");
			options.headers["Authorization"] = `Bearer ${this.token}`;
		}
		canHandleAuthentication() {
			return false;
		}
		handleAuthentication() {
			return __awaiter$8(this, void 0, void 0, function* () {
				throw new Error("not implemented");
			});
		}
	};
	exports.BearerCredentialHandler = BearerCredentialHandler;
	var PersonalAccessTokenCredentialHandler = class {
		constructor(token) {
			this.token = token;
		}
		prepareRequest(options) {
			if (!options.headers) throw Error("The request has no headers");
			options.headers["Authorization"] = `Basic ${Buffer.from(`PAT:${this.token}`).toString("base64")}`;
		}
		canHandleAuthentication() {
			return false;
		}
		handleAuthentication() {
			return __awaiter$8(this, void 0, void 0, function* () {
				throw new Error("not implemented");
			});
		}
	};
	exports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
} });

//#endregion
//#region node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/oidc-utils.js
var require_oidc_utils = __commonJS({ "node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/oidc-utils.js"(exports) {
	var __awaiter$7 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve) {
				resolve(value);
			});
		}
		return new (P || (P = Promise))(function(resolve, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.OidcClient = void 0;
	const http_client_1$2 = require_lib$1();
	const auth_1 = require_auth();
	const core_1 = require_core();
	var OidcClient = class OidcClient {
		static createHttpClient(allowRetry = true, maxRetry = 10) {
			const requestOptions = {
				allowRetries: allowRetry,
				maxRetries: maxRetry
			};
			return new http_client_1$2.HttpClient("actions/oidc-client", [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);
		}
		static getRequestToken() {
			const token = process.env["ACTIONS_ID_TOKEN_REQUEST_TOKEN"];
			if (!token) throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable");
			return token;
		}
		static getIDTokenUrl() {
			const runtimeUrl = process.env["ACTIONS_ID_TOKEN_REQUEST_URL"];
			if (!runtimeUrl) throw new Error("Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable");
			return runtimeUrl;
		}
		static getCall(id_token_url) {
			var _a$1;
			return __awaiter$7(this, void 0, void 0, function* () {
				const httpclient = OidcClient.createHttpClient();
				const res = yield httpclient.getJson(id_token_url).catch((error$1) => {
					throw new Error(`Failed to get ID Token. \n 
        Error Code : ${error$1.statusCode}\n 
        Error Message: ${error$1.message}`);
				});
				const id_token = (_a$1 = res.result) === null || _a$1 === void 0 ? void 0 : _a$1.value;
				if (!id_token) throw new Error("Response json body do not have ID Token field");
				return id_token;
			});
		}
		static getIDToken(audience) {
			return __awaiter$7(this, void 0, void 0, function* () {
				try {
					let id_token_url = OidcClient.getIDTokenUrl();
					if (audience) {
						const encodedAudience = encodeURIComponent(audience);
						id_token_url = `${id_token_url}&audience=${encodedAudience}`;
					}
					(0, core_1.debug)(`ID token url is ${id_token_url}`);
					const id_token = yield OidcClient.getCall(id_token_url);
					(0, core_1.setSecret)(id_token);
					return id_token;
				} catch (error$1) {
					throw new Error(`Error message: ${error$1.message}`);
				}
			});
		}
	};
	exports.OidcClient = OidcClient;
} });

//#endregion
//#region node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/summary.js
var require_summary = __commonJS({ "node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/summary.js"(exports) {
	var __awaiter$6 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve) {
				resolve(value);
			});
		}
		return new (P || (P = Promise))(function(resolve, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;
	const os_1$1 = __require("os");
	const fs_1$1 = __require("fs");
	const { access: access$1, appendFile, writeFile } = fs_1$1.promises;
	exports.SUMMARY_ENV_VAR = "GITHUB_STEP_SUMMARY";
	exports.SUMMARY_DOCS_URL = "https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary";
	var Summary = class {
		constructor() {
			this._buffer = "";
		}
		/**
		* Finds the summary file path from the environment, rejects if env var is not found or file does not exist
		* Also checks r/w permissions.
		*
		* @returns step summary file path
		*/
		filePath() {
			return __awaiter$6(this, void 0, void 0, function* () {
				if (this._filePath) return this._filePath;
				const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];
				if (!pathFromEnv) throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
				try {
					yield access$1(pathFromEnv, fs_1$1.constants.R_OK | fs_1$1.constants.W_OK);
				} catch (_a$1) {
					throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);
				}
				this._filePath = pathFromEnv;
				return this._filePath;
			});
		}
		/**
		* Wraps content in an HTML tag, adding any HTML attributes
		*
		* @param {string} tag HTML tag to wrap
		* @param {string | null} content content within the tag
		* @param {[attribute: string]: string} attrs key-value list of HTML attributes to add
		*
		* @returns {string} content wrapped in HTML element
		*/
		wrap(tag, content, attrs = {}) {
			const htmlAttrs = Object.entries(attrs).map(([key$1, value]) => ` ${key$1}="${value}"`).join("");
			if (!content) return `<${tag}${htmlAttrs}>`;
			return `<${tag}${htmlAttrs}>${content}</${tag}>`;
		}
		/**
		* Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.
		*
		* @param {SummaryWriteOptions} [options] (optional) options for write operation
		*
		* @returns {Promise<Summary>} summary instance
		*/
		write(options) {
			return __awaiter$6(this, void 0, void 0, function* () {
				const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);
				const filePath = yield this.filePath();
				const writeFunc = overwrite ? writeFile : appendFile;
				yield writeFunc(filePath, this._buffer, { encoding: "utf8" });
				return this.emptyBuffer();
			});
		}
		/**
		* Clears the summary buffer and wipes the summary file
		*
		* @returns {Summary} summary instance
		*/
		clear() {
			return __awaiter$6(this, void 0, void 0, function* () {
				return this.emptyBuffer().write({ overwrite: true });
			});
		}
		/**
		* Returns the current summary buffer as a string
		*
		* @returns {string} string of summary buffer
		*/
		stringify() {
			return this._buffer;
		}
		/**
		* If the summary buffer is empty
		*
		* @returns {boolen} true if the buffer is empty
		*/
		isEmptyBuffer() {
			return this._buffer.length === 0;
		}
		/**
		* Resets the summary buffer without writing to summary file
		*
		* @returns {Summary} summary instance
		*/
		emptyBuffer() {
			this._buffer = "";
			return this;
		}
		/**
		* Adds raw text to the summary buffer
		*
		* @param {string} text content to add
		* @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)
		*
		* @returns {Summary} summary instance
		*/
		addRaw(text, addEOL = false) {
			this._buffer += text;
			return addEOL ? this.addEOL() : this;
		}
		/**
		* Adds the operating system-specific end-of-line marker to the buffer
		*
		* @returns {Summary} summary instance
		*/
		addEOL() {
			return this.addRaw(os_1$1.EOL);
		}
		/**
		* Adds an HTML codeblock to the summary buffer
		*
		* @param {string} code content to render within fenced code block
		* @param {string} lang (optional) language to syntax highlight code
		*
		* @returns {Summary} summary instance
		*/
		addCodeBlock(code, lang) {
			const attrs = Object.assign({}, lang && { lang });
			const element = this.wrap("pre", this.wrap("code", code), attrs);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML list to the summary buffer
		*
		* @param {string[]} items list of items to render
		* @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)
		*
		* @returns {Summary} summary instance
		*/
		addList(items, ordered = false) {
			const tag = ordered ? "ol" : "ul";
			const listItems = items.map((item) => this.wrap("li", item)).join("");
			const element = this.wrap(tag, listItems);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML table to the summary buffer
		*
		* @param {SummaryTableCell[]} rows table rows
		*
		* @returns {Summary} summary instance
		*/
		addTable(rows) {
			const tableBody = rows.map((row) => {
				const cells = row.map((cell) => {
					if (typeof cell === "string") return this.wrap("td", cell);
					const { header, data, colspan, rowspan } = cell;
					const tag = header ? "th" : "td";
					const attrs = Object.assign(Object.assign({}, colspan && { colspan }), rowspan && { rowspan });
					return this.wrap(tag, data, attrs);
				}).join("");
				return this.wrap("tr", cells);
			}).join("");
			const element = this.wrap("table", tableBody);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds a collapsable HTML details element to the summary buffer
		*
		* @param {string} label text for the closed state
		* @param {string} content collapsable content
		*
		* @returns {Summary} summary instance
		*/
		addDetails(label, content) {
			const element = this.wrap("details", this.wrap("summary", label) + content);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML image tag to the summary buffer
		*
		* @param {string} src path to the image you to embed
		* @param {string} alt text description of the image
		* @param {SummaryImageOptions} options (optional) addition image attributes
		*
		* @returns {Summary} summary instance
		*/
		addImage(src$2, alt, options) {
			const { width, height } = options || {};
			const attrs = Object.assign(Object.assign({}, width && { width }), height && { height });
			const element = this.wrap("img", null, Object.assign({
				src: src$2,
				alt
			}, attrs));
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML section heading element
		*
		* @param {string} text heading text
		* @param {number | string} [level=1] (optional) the heading level, default: 1
		*
		* @returns {Summary} summary instance
		*/
		addHeading(text, level) {
			const tag = `h${level}`;
			const allowedTag = [
				"h1",
				"h2",
				"h3",
				"h4",
				"h5",
				"h6"
			].includes(tag) ? tag : "h1";
			const element = this.wrap(allowedTag, text);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML thematic break (<hr>) to the summary buffer
		*
		* @returns {Summary} summary instance
		*/
		addSeparator() {
			const element = this.wrap("hr", null);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML line break (<br>) to the summary buffer
		*
		* @returns {Summary} summary instance
		*/
		addBreak() {
			const element = this.wrap("br", null);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML blockquote to the summary buffer
		*
		* @param {string} text quote text
		* @param {string} cite (optional) citation url
		*
		* @returns {Summary} summary instance
		*/
		addQuote(text, cite) {
			const attrs = Object.assign({}, cite && { cite });
			const element = this.wrap("blockquote", text, attrs);
			return this.addRaw(element).addEOL();
		}
		/**
		* Adds an HTML anchor tag to the summary buffer
		*
		* @param {string} text link text/content
		* @param {string} href hyperlink
		*
		* @returns {Summary} summary instance
		*/
		addLink(text, href) {
			const element = this.wrap("a", text, { href });
			return this.addRaw(element).addEOL();
		}
	};
	const _summary = new Summary();
	/**
	* @deprecated use `core.summary`
	*/
	exports.markdownSummary = _summary;
	exports.summary = _summary;
} });

//#endregion
//#region node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/path-utils.js
var require_path_utils = __commonJS({ "node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/path-utils.js"(exports) {
	var __createBinding$20 = exports && exports.__createBinding || (Object.create ? function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc$1 = Object.getOwnPropertyDescriptor(m$1, k);
		if (!desc$1 || ("get" in desc$1 ? !m$1.__esModule : desc$1.writable || desc$1.configurable)) desc$1 = {
			enumerable: true,
			get: function() {
				return m$1[k];
			}
		};
		Object.defineProperty(o, k2, desc$1);
	} : function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		o[k2] = m$1[k];
	});
	var __setModuleDefault$9 = exports && exports.__setModuleDefault || (Object.create ? function(o, v$1) {
		Object.defineProperty(o, "default", {
			enumerable: true,
			value: v$1
		});
	} : function(o, v$1) {
		o["default"] = v$1;
	});
	var __importStar$9 = exports && exports.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$20(result, mod, k);
		}
		__setModuleDefault$9(result, mod);
		return result;
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;
	const path$9 = __importStar$9(__require("path"));
	/**
	* toPosixPath converts the given path to the posix form. On Windows, \\ will be
	* replaced with /.
	*
	* @param pth. Path to transform.
	* @return string Posix path.
	*/
	function toPosixPath(pth) {
		return pth.replace(/[\\]/g, "/");
	}
	exports.toPosixPath = toPosixPath;
	/**
	* toWin32Path converts the given path to the win32 form. On Linux, / will be
	* replaced with \\.
	*
	* @param pth. Path to transform.
	* @return string Win32 path.
	*/
	function toWin32Path(pth) {
		return pth.replace(/[/]/g, "\\");
	}
	exports.toWin32Path = toWin32Path;
	/**
	* toPlatformPath converts the given path to a platform-specific path. It does
	* this by replacing instances of / and \ with the platform-specific path
	* separator.
	*
	* @param pth The path to platformize.
	* @return string The platform-specific path.
	*/
	function toPlatformPath(pth) {
		return pth.replace(/[/\\]/g, path$9.sep);
	}
	exports.toPlatformPath = toPlatformPath;
} });

//#endregion
//#region node_modules/.pnpm/@actions+io@1.1.3/node_modules/@actions/io/lib/io-util.js
var require_io_util = __commonJS({ "node_modules/.pnpm/@actions+io@1.1.3/node_modules/@actions/io/lib/io-util.js"(exports) {
	var __createBinding$19 = exports && exports.__createBinding || (Object.create ? function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		Object.defineProperty(o, k2, {
			enumerable: true,
			get: function() {
				return m$1[k];
			}
		});
	} : function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		o[k2] = m$1[k];
	});
	var __setModuleDefault$8 = exports && exports.__setModuleDefault || (Object.create ? function(o, v$1) {
		Object.defineProperty(o, "default", {
			enumerable: true,
			value: v$1
		});
	} : function(o, v$1) {
		o["default"] = v$1;
	});
	var __importStar$8 = exports && exports.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding$19(result, mod, k);
		}
		__setModuleDefault$8(result, mod);
		return result;
	};
	var __awaiter$5 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve) {
				resolve(value);
			});
		}
		return new (P || (P = Promise))(function(resolve, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	var _a;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getCmdPath = exports.tryGetExecutablePath = exports.isRooted = exports.isDirectory = exports.exists = exports.READONLY = exports.UV_FS_O_EXLOCK = exports.IS_WINDOWS = exports.unlink = exports.symlink = exports.stat = exports.rmdir = exports.rm = exports.rename = exports.readlink = exports.readdir = exports.open = exports.mkdir = exports.lstat = exports.copyFile = exports.chmod = void 0;
	const fs$8 = __importStar$8(__require("fs"));
	const path$8 = __importStar$8(__require("path"));
	_a = fs$8.promises, exports.chmod = _a.chmod, exports.copyFile = _a.copyFile, exports.lstat = _a.lstat, exports.mkdir = _a.mkdir, exports.open = _a.open, exports.readdir = _a.readdir, exports.readlink = _a.readlink, exports.rename = _a.rename, exports.rm = _a.rm, exports.rmdir = _a.rmdir, exports.stat = _a.stat, exports.symlink = _a.symlink, exports.unlink = _a.unlink;
	exports.IS_WINDOWS = process.platform === "win32";
	exports.UV_FS_O_EXLOCK = 268435456;
	exports.READONLY = fs$8.constants.O_RDONLY;
	function exists(fsPath) {
		return __awaiter$5(this, void 0, void 0, function* () {
			try {
				yield exports.stat(fsPath);
			} catch (err) {
				if (err.code === "ENOENT") return false;
				throw err;
			}
			return true;
		});
	}
	exports.exists = exists;
	function isDirectory$2(fsPath, useStat = false) {
		return __awaiter$5(this, void 0, void 0, function* () {
			const stats = useStat ? yield exports.stat(fsPath) : yield exports.lstat(fsPath);
			return stats.isDirectory();
		});
	}
	exports.isDirectory = isDirectory$2;
	/**
	* On OSX/Linux, true if path starts with '/'. On Windows, true for paths like:
	* \, \hello, \\hello\share, C:, and C:\hello (and corresponding alternate separator cases).
	*/
	function isRooted(p) {
		p = normalizeSeparators(p);
		if (!p) throw new Error("isRooted() parameter \"p\" cannot be empty");
		if (exports.IS_WINDOWS) return p.startsWith("\\") || /^[A-Z]:/i.test(p);
		return p.startsWith("/");
	}
	exports.isRooted = isRooted;
	/**
	* Best effort attempt to determine whether a file exists and is executable.
	* @param filePath    file path to check
	* @param extensions  additional file extensions to try
	* @return if file exists and is executable, returns the file path. otherwise empty string.
	*/
	function tryGetExecutablePath(filePath, extensions) {
		return __awaiter$5(this, void 0, void 0, function* () {
			let stats = void 0;
			try {
				stats = yield exports.stat(filePath);
			} catch (err) {
				if (err.code !== "ENOENT") console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
			}
			if (stats && stats.isFile()) {
				if (exports.IS_WINDOWS) {
					const upperExt = path$8.extname(filePath).toUpperCase();
					if (extensions.some((validExt) => validExt.toUpperCase() === upperExt)) return filePath;
				} else if (isUnixExecutable(stats)) return filePath;
			}
			const originalFilePath = filePath;
			for (const extension$1 of extensions) {
				filePath = originalFilePath + extension$1;
				stats = void 0;
				try {
					stats = yield exports.stat(filePath);
				} catch (err) {
					if (err.code !== "ENOENT") console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
				}
				if (stats && stats.isFile()) {
					if (exports.IS_WINDOWS) {
						try {
							const directory = path$8.dirname(filePath);
							const upperName = path$8.basename(filePath).toUpperCase();
							for (const actualName of yield exports.readdir(directory)) if (upperName === actualName.toUpperCase()) {
								filePath = path$8.join(directory, actualName);
								break;
							}
						} catch (err) {
							console.log(`Unexpected error attempting to determine the actual case of the file '${filePath}': ${err}`);
						}
						return filePath;
					} else if (isUnixExecutable(stats)) return filePath;
				}
			}
			return "";
		});
	}
	exports.tryGetExecutablePath = tryGetExecutablePath;
	function normalizeSeparators(p) {
		p = p || "";
		if (exports.IS_WINDOWS) {
			p = p.replace(/\//g, "\\");
			return p.replace(/\\\\+/g, "\\");
		}
		return p.replace(/\/\/+/g, "/");
	}
	function isUnixExecutable(stats) {
		return (stats.mode & 1) > 0 || (stats.mode & 8) > 0 && stats.gid === process.getgid() || (stats.mode & 64) > 0 && stats.uid === process.getuid();
	}
	function getCmdPath() {
		var _a$1;
		return (_a$1 = process.env["COMSPEC"]) !== null && _a$1 !== void 0 ? _a$1 : `cmd.exe`;
	}
	exports.getCmdPath = getCmdPath;
} });

//#endregion
//#region node_modules/.pnpm/@actions+io@1.1.3/node_modules/@actions/io/lib/io.js
var require_io = __commonJS({ "node_modules/.pnpm/@actions+io@1.1.3/node_modules/@actions/io/lib/io.js"(exports) {
	var __createBinding$18 = exports && exports.__createBinding || (Object.create ? function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		Object.defineProperty(o, k2, {
			enumerable: true,
			get: function() {
				return m$1[k];
			}
		});
	} : function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		o[k2] = m$1[k];
	});
	var __setModuleDefault$7 = exports && exports.__setModuleDefault || (Object.create ? function(o, v$1) {
		Object.defineProperty(o, "default", {
			enumerable: true,
			value: v$1
		});
	} : function(o, v$1) {
		o["default"] = v$1;
	});
	var __importStar$7 = exports && exports.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding$18(result, mod, k);
		}
		__setModuleDefault$7(result, mod);
		return result;
	};
	var __awaiter$4 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve) {
				resolve(value);
			});
		}
		return new (P || (P = Promise))(function(resolve, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.findInPath = exports.which = exports.mkdirP = exports.rmRF = exports.mv = exports.cp = void 0;
	const assert_1 = __require("assert");
	const path$7 = __importStar$7(__require("path"));
	const ioUtil$1 = __importStar$7(require_io_util());
	/**
	* Copies a file or folder.
	* Based off of shelljs - https://github.com/shelljs/shelljs/blob/9237f66c52e5daa40458f94f9565e18e8132f5a6/src/cp.js
	*
	* @param     source    source path
	* @param     dest      destination path
	* @param     options   optional. See CopyOptions.
	*/
	function cp(source, dest, options = {}) {
		return __awaiter$4(this, void 0, void 0, function* () {
			const { force, recursive, copySourceDirectory } = readCopyOptions(options);
			const destStat = (yield ioUtil$1.exists(dest)) ? yield ioUtil$1.stat(dest) : null;
			if (destStat && destStat.isFile() && !force) return;
			const newDest = destStat && destStat.isDirectory() && copySourceDirectory ? path$7.join(dest, path$7.basename(source)) : dest;
			if (!(yield ioUtil$1.exists(source))) throw new Error(`no such file or directory: ${source}`);
			const sourceStat = yield ioUtil$1.stat(source);
			if (sourceStat.isDirectory()) if (!recursive) throw new Error(`Failed to copy. ${source} is a directory, but tried to copy without recursive flag.`);
			else yield cpDirRecursive(source, newDest, 0, force);
			else {
				if (path$7.relative(source, newDest) === "") throw new Error(`'${newDest}' and '${source}' are the same file`);
				yield copyFile(source, newDest, force);
			}
		});
	}
	exports.cp = cp;
	/**
	* Moves a path.
	*
	* @param     source    source path
	* @param     dest      destination path
	* @param     options   optional. See MoveOptions.
	*/
	function mv(source, dest, options = {}) {
		return __awaiter$4(this, void 0, void 0, function* () {
			if (yield ioUtil$1.exists(dest)) {
				let destExists = true;
				if (yield ioUtil$1.isDirectory(dest)) {
					dest = path$7.join(dest, path$7.basename(source));
					destExists = yield ioUtil$1.exists(dest);
				}
				if (destExists) if (options.force == null || options.force) yield rmRF(dest);
				else throw new Error("Destination already exists");
			}
			yield mkdirP(path$7.dirname(dest));
			yield ioUtil$1.rename(source, dest);
		});
	}
	exports.mv = mv;
	/**
	* Remove a path recursively with force
	*
	* @param inputPath path to remove
	*/
	function rmRF(inputPath) {
		return __awaiter$4(this, void 0, void 0, function* () {
			if (ioUtil$1.IS_WINDOWS) {
				if (/[*"<>|]/.test(inputPath)) throw new Error("File path must not contain `*`, `\"`, `<`, `>` or `|` on Windows");
			}
			try {
				yield ioUtil$1.rm(inputPath, {
					force: true,
					maxRetries: 3,
					recursive: true,
					retryDelay: 300
				});
			} catch (err) {
				throw new Error(`File was unable to be removed ${err}`);
			}
		});
	}
	exports.rmRF = rmRF;
	/**
	* Make a directory.  Creates the full path with folders in between
	* Will throw if it fails
	*
	* @param   fsPath        path to create
	* @returns Promise<void>
	*/
	function mkdirP(fsPath) {
		return __awaiter$4(this, void 0, void 0, function* () {
			assert_1.ok(fsPath, "a path argument must be provided");
			yield ioUtil$1.mkdir(fsPath, { recursive: true });
		});
	}
	exports.mkdirP = mkdirP;
	/**
	* Returns path of a tool had the tool actually been invoked.  Resolves via paths.
	* If you check and the tool does not exist, it will throw.
	*
	* @param     tool              name of the tool
	* @param     check             whether to check if tool exists
	* @returns   Promise<string>   path to tool
	*/
	function which(tool, check) {
		return __awaiter$4(this, void 0, void 0, function* () {
			if (!tool) throw new Error("parameter 'tool' is required");
			if (check) {
				const result = yield which(tool, false);
				if (!result) if (ioUtil$1.IS_WINDOWS) throw new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also verify the file has a valid extension for an executable file.`);
				else throw new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.`);
				return result;
			}
			const matches = yield findInPath(tool);
			if (matches && matches.length > 0) return matches[0];
			return "";
		});
	}
	exports.which = which;
	/**
	* Returns a list of all occurrences of the given tool on the system path.
	*
	* @returns   Promise<string[]>  the paths of the tool
	*/
	function findInPath(tool) {
		return __awaiter$4(this, void 0, void 0, function* () {
			if (!tool) throw new Error("parameter 'tool' is required");
			const extensions = [];
			if (ioUtil$1.IS_WINDOWS && process.env["PATHEXT"]) {
				for (const extension$1 of process.env["PATHEXT"].split(path$7.delimiter)) if (extension$1) extensions.push(extension$1);
			}
			if (ioUtil$1.isRooted(tool)) {
				const filePath = yield ioUtil$1.tryGetExecutablePath(tool, extensions);
				if (filePath) return [filePath];
				return [];
			}
			if (tool.includes(path$7.sep)) return [];
			const directories = [];
			if (process.env.PATH) {
				for (const p of process.env.PATH.split(path$7.delimiter)) if (p) directories.push(p);
			}
			const matches = [];
			for (const directory of directories) {
				const filePath = yield ioUtil$1.tryGetExecutablePath(path$7.join(directory, tool), extensions);
				if (filePath) matches.push(filePath);
			}
			return matches;
		});
	}
	exports.findInPath = findInPath;
	function readCopyOptions(options) {
		const force = options.force == null ? true : options.force;
		const recursive = Boolean(options.recursive);
		const copySourceDirectory = options.copySourceDirectory == null ? true : Boolean(options.copySourceDirectory);
		return {
			force,
			recursive,
			copySourceDirectory
		};
	}
	function cpDirRecursive(sourceDir, destDir, currentDepth, force) {
		return __awaiter$4(this, void 0, void 0, function* () {
			if (currentDepth >= 255) return;
			currentDepth++;
			yield mkdirP(destDir);
			const files = yield ioUtil$1.readdir(sourceDir);
			for (const fileName of files) {
				const srcFile = `${sourceDir}/${fileName}`;
				const destFile = `${destDir}/${fileName}`;
				const srcFileStat = yield ioUtil$1.lstat(srcFile);
				if (srcFileStat.isDirectory()) yield cpDirRecursive(srcFile, destFile, currentDepth, force);
				else yield copyFile(srcFile, destFile, force);
			}
			yield ioUtil$1.chmod(destDir, (yield ioUtil$1.stat(sourceDir)).mode);
		});
	}
	function copyFile(srcFile, destFile, force) {
		return __awaiter$4(this, void 0, void 0, function* () {
			if ((yield ioUtil$1.lstat(srcFile)).isSymbolicLink()) {
				try {
					yield ioUtil$1.lstat(destFile);
					yield ioUtil$1.unlink(destFile);
				} catch (e) {
					if (e.code === "EPERM") {
						yield ioUtil$1.chmod(destFile, "0666");
						yield ioUtil$1.unlink(destFile);
					}
				}
				const symlinkFull = yield ioUtil$1.readlink(srcFile);
				yield ioUtil$1.symlink(symlinkFull, destFile, ioUtil$1.IS_WINDOWS ? "junction" : null);
			} else if (!(yield ioUtil$1.exists(destFile)) || force) yield ioUtil$1.copyFile(srcFile, destFile);
		});
	}
} });

//#endregion
//#region node_modules/.pnpm/@actions+exec@1.1.1/node_modules/@actions/exec/lib/toolrunner.js
var require_toolrunner = __commonJS({ "node_modules/.pnpm/@actions+exec@1.1.1/node_modules/@actions/exec/lib/toolrunner.js"(exports) {
	var __createBinding$17 = exports && exports.__createBinding || (Object.create ? function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		Object.defineProperty(o, k2, {
			enumerable: true,
			get: function() {
				return m$1[k];
			}
		});
	} : function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		o[k2] = m$1[k];
	});
	var __setModuleDefault$6 = exports && exports.__setModuleDefault || (Object.create ? function(o, v$1) {
		Object.defineProperty(o, "default", {
			enumerable: true,
			value: v$1
		});
	} : function(o, v$1) {
		o["default"] = v$1;
	});
	var __importStar$6 = exports && exports.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding$17(result, mod, k);
		}
		__setModuleDefault$6(result, mod);
		return result;
	};
	var __awaiter$3 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve) {
				resolve(value);
			});
		}
		return new (P || (P = Promise))(function(resolve, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.argStringToArray = exports.ToolRunner = void 0;
	const os$8 = __importStar$6(__require("os"));
	const events$2 = __importStar$6(__require("events"));
	const child = __importStar$6(__require("child_process"));
	const path$6 = __importStar$6(__require("path"));
	const io = __importStar$6(require_io());
	const ioUtil = __importStar$6(require_io_util());
	const timers_1 = __require("timers");
	const IS_WINDOWS = process.platform === "win32";
	var ToolRunner = class extends events$2.EventEmitter {
		constructor(toolPath, args, options) {
			super();
			if (!toolPath) throw new Error("Parameter 'toolPath' cannot be null or empty.");
			this.toolPath = toolPath;
			this.args = args || [];
			this.options = options || {};
		}
		_debug(message) {
			if (this.options.listeners && this.options.listeners.debug) this.options.listeners.debug(message);
		}
		_getCommandString(options, noPrefix) {
			const toolPath = this._getSpawnFileName();
			const args = this._getSpawnArgs(options);
			let cmd = noPrefix ? "" : "[command]";
			if (IS_WINDOWS) if (this._isCmdFile()) {
				cmd += toolPath;
				for (const a of args) cmd += ` ${a}`;
			} else if (options.windowsVerbatimArguments) {
				cmd += `"${toolPath}"`;
				for (const a of args) cmd += ` ${a}`;
			} else {
				cmd += this._windowsQuoteCmdArg(toolPath);
				for (const a of args) cmd += ` ${this._windowsQuoteCmdArg(a)}`;
			}
			else {
				cmd += toolPath;
				for (const a of args) cmd += ` ${a}`;
			}
			return cmd;
		}
		_processLineBuffer(data, strBuffer, onLine) {
			try {
				let s$1 = strBuffer + data.toString();
				let n = s$1.indexOf(os$8.EOL);
				while (n > -1) {
					const line = s$1.substring(0, n);
					onLine(line);
					s$1 = s$1.substring(n + os$8.EOL.length);
					n = s$1.indexOf(os$8.EOL);
				}
				return s$1;
			} catch (err) {
				this._debug(`error processing line. Failed with error ${err}`);
				return "";
			}
		}
		_getSpawnFileName() {
			if (IS_WINDOWS) {
				if (this._isCmdFile()) return process.env["COMSPEC"] || "cmd.exe";
			}
			return this.toolPath;
		}
		_getSpawnArgs(options) {
			if (IS_WINDOWS) {
				if (this._isCmdFile()) {
					let argline = `/D /S /C "${this._windowsQuoteCmdArg(this.toolPath)}`;
					for (const a of this.args) {
						argline += " ";
						argline += options.windowsVerbatimArguments ? a : this._windowsQuoteCmdArg(a);
					}
					argline += "\"";
					return [argline];
				}
			}
			return this.args;
		}
		_endsWith(str, end) {
			return str.endsWith(end);
		}
		_isCmdFile() {
			const upperToolPath = this.toolPath.toUpperCase();
			return this._endsWith(upperToolPath, ".CMD") || this._endsWith(upperToolPath, ".BAT");
		}
		_windowsQuoteCmdArg(arg) {
			if (!this._isCmdFile()) return this._uvQuoteCmdArg(arg);
			if (!arg) return "\"\"";
			const cmdSpecialChars = [
				" ",
				"	",
				"&",
				"(",
				")",
				"[",
				"]",
				"{",
				"}",
				"^",
				"=",
				";",
				"!",
				"'",
				"+",
				",",
				"`",
				"~",
				"|",
				"<",
				">",
				"\""
			];
			let needsQuotes = false;
			for (const char of arg) if (cmdSpecialChars.some((x) => x === char)) {
				needsQuotes = true;
				break;
			}
			if (!needsQuotes) return arg;
			let reverse = "\"";
			let quoteHit = true;
			for (let i = arg.length; i > 0; i--) {
				reverse += arg[i - 1];
				if (quoteHit && arg[i - 1] === "\\") reverse += "\\";
				else if (arg[i - 1] === "\"") {
					quoteHit = true;
					reverse += "\"";
				} else quoteHit = false;
			}
			reverse += "\"";
			return reverse.split("").reverse().join("");
		}
		_uvQuoteCmdArg(arg) {
			if (!arg) return "\"\"";
			if (!arg.includes(" ") && !arg.includes("	") && !arg.includes("\"")) return arg;
			if (!arg.includes("\"") && !arg.includes("\\")) return `"${arg}"`;
			let reverse = "\"";
			let quoteHit = true;
			for (let i = arg.length; i > 0; i--) {
				reverse += arg[i - 1];
				if (quoteHit && arg[i - 1] === "\\") reverse += "\\";
				else if (arg[i - 1] === "\"") {
					quoteHit = true;
					reverse += "\\";
				} else quoteHit = false;
			}
			reverse += "\"";
			return reverse.split("").reverse().join("");
		}
		_cloneExecOptions(options) {
			options = options || {};
			const result = {
				cwd: options.cwd || process.cwd(),
				env: options.env || process.env,
				silent: options.silent || false,
				windowsVerbatimArguments: options.windowsVerbatimArguments || false,
				failOnStdErr: options.failOnStdErr || false,
				ignoreReturnCode: options.ignoreReturnCode || false,
				delay: options.delay || 1e4
			};
			result.outStream = options.outStream || process.stdout;
			result.errStream = options.errStream || process.stderr;
			return result;
		}
		_getSpawnOptions(options, toolPath) {
			options = options || {};
			const result = {};
			result.cwd = options.cwd;
			result.env = options.env;
			result["windowsVerbatimArguments"] = options.windowsVerbatimArguments || this._isCmdFile();
			if (options.windowsVerbatimArguments) result.argv0 = `"${toolPath}"`;
			return result;
		}
		/**
		* Exec a tool.
		* Output will be streamed to the live console.
		* Returns promise with return code
		*
		* @param     tool     path to tool to exec
		* @param     options  optional exec options.  See ExecOptions
		* @returns   number
		*/
		exec() {
			return __awaiter$3(this, void 0, void 0, function* () {
				if (!ioUtil.isRooted(this.toolPath) && (this.toolPath.includes("/") || IS_WINDOWS && this.toolPath.includes("\\"))) this.toolPath = path$6.resolve(process.cwd(), this.options.cwd || process.cwd(), this.toolPath);
				this.toolPath = yield io.which(this.toolPath, true);
				return new Promise((resolve, reject) => __awaiter$3(this, void 0, void 0, function* () {
					this._debug(`exec tool: ${this.toolPath}`);
					this._debug("arguments:");
					for (const arg of this.args) this._debug(`   ${arg}`);
					const optionsNonNull = this._cloneExecOptions(this.options);
					if (!optionsNonNull.silent && optionsNonNull.outStream) optionsNonNull.outStream.write(this._getCommandString(optionsNonNull) + os$8.EOL);
					const state$1 = new ExecState(optionsNonNull, this.toolPath);
					state$1.on("debug", (message) => {
						this._debug(message);
					});
					if (this.options.cwd && !(yield ioUtil.exists(this.options.cwd))) return reject(new Error(`The cwd: ${this.options.cwd} does not exist!`));
					const fileName = this._getSpawnFileName();
					const cp$1 = child.spawn(fileName, this._getSpawnArgs(optionsNonNull), this._getSpawnOptions(this.options, fileName));
					let stdbuffer = "";
					if (cp$1.stdout) cp$1.stdout.on("data", (data) => {
						if (this.options.listeners && this.options.listeners.stdout) this.options.listeners.stdout(data);
						if (!optionsNonNull.silent && optionsNonNull.outStream) optionsNonNull.outStream.write(data);
						stdbuffer = this._processLineBuffer(data, stdbuffer, (line) => {
							if (this.options.listeners && this.options.listeners.stdline) this.options.listeners.stdline(line);
						});
					});
					let errbuffer = "";
					if (cp$1.stderr) cp$1.stderr.on("data", (data) => {
						state$1.processStderr = true;
						if (this.options.listeners && this.options.listeners.stderr) this.options.listeners.stderr(data);
						if (!optionsNonNull.silent && optionsNonNull.errStream && optionsNonNull.outStream) {
							const s$1 = optionsNonNull.failOnStdErr ? optionsNonNull.errStream : optionsNonNull.outStream;
							s$1.write(data);
						}
						errbuffer = this._processLineBuffer(data, errbuffer, (line) => {
							if (this.options.listeners && this.options.listeners.errline) this.options.listeners.errline(line);
						});
					});
					cp$1.on("error", (err) => {
						state$1.processError = err.message;
						state$1.processExited = true;
						state$1.processClosed = true;
						state$1.CheckComplete();
					});
					cp$1.on("exit", (code) => {
						state$1.processExitCode = code;
						state$1.processExited = true;
						this._debug(`Exit code ${code} received from tool '${this.toolPath}'`);
						state$1.CheckComplete();
					});
					cp$1.on("close", (code) => {
						state$1.processExitCode = code;
						state$1.processExited = true;
						state$1.processClosed = true;
						this._debug(`STDIO streams have closed for tool '${this.toolPath}'`);
						state$1.CheckComplete();
					});
					state$1.on("done", (error$1, exitCode) => {
						if (stdbuffer.length > 0) this.emit("stdline", stdbuffer);
						if (errbuffer.length > 0) this.emit("errline", errbuffer);
						cp$1.removeAllListeners();
						if (error$1) reject(error$1);
						else resolve(exitCode);
					});
					if (this.options.input) {
						if (!cp$1.stdin) throw new Error("child process missing stdin");
						cp$1.stdin.end(this.options.input);
					}
				}));
			});
		}
	};
	exports.ToolRunner = ToolRunner;
	/**
	* Convert an arg string to an array of args. Handles escaping
	*
	* @param    argString   string of arguments
	* @returns  string[]    array of arguments
	*/
	function argStringToArray(argString) {
		const args = [];
		let inQuotes = false;
		let escaped = false;
		let arg = "";
		function append(c) {
			if (escaped && c !== "\"") arg += "\\";
			arg += c;
			escaped = false;
		}
		for (let i = 0; i < argString.length; i++) {
			const c = argString.charAt(i);
			if (c === "\"") {
				if (!escaped) inQuotes = !inQuotes;
				else append(c);
				continue;
			}
			if (c === "\\" && escaped) {
				append(c);
				continue;
			}
			if (c === "\\" && inQuotes) {
				escaped = true;
				continue;
			}
			if (c === " " && !inQuotes) {
				if (arg.length > 0) {
					args.push(arg);
					arg = "";
				}
				continue;
			}
			append(c);
		}
		if (arg.length > 0) args.push(arg.trim());
		return args;
	}
	exports.argStringToArray = argStringToArray;
	var ExecState = class ExecState extends events$2.EventEmitter {
		constructor(options, toolPath) {
			super();
			this.processClosed = false;
			this.processError = "";
			this.processExitCode = 0;
			this.processExited = false;
			this.processStderr = false;
			this.delay = 1e4;
			this.done = false;
			this.timeout = null;
			if (!toolPath) throw new Error("toolPath must not be empty");
			this.options = options;
			this.toolPath = toolPath;
			if (options.delay) this.delay = options.delay;
		}
		CheckComplete() {
			if (this.done) return;
			if (this.processClosed) this._setResult();
			else if (this.processExited) this.timeout = timers_1.setTimeout(ExecState.HandleTimeout, this.delay, this);
		}
		_debug(message) {
			this.emit("debug", message);
		}
		_setResult() {
			let error$1;
			if (this.processExited) {
				if (this.processError) error$1 = new Error(`There was an error when attempting to execute the process '${this.toolPath}'. This may indicate the process failed to start. Error: ${this.processError}`);
				else if (this.processExitCode !== 0 && !this.options.ignoreReturnCode) error$1 = new Error(`The process '${this.toolPath}' failed with exit code ${this.processExitCode}`);
				else if (this.processStderr && this.options.failOnStdErr) error$1 = new Error(`The process '${this.toolPath}' failed because one or more lines were written to the STDERR stream`);
			}
			if (this.timeout) {
				clearTimeout(this.timeout);
				this.timeout = null;
			}
			this.done = true;
			this.emit("done", error$1, this.processExitCode);
		}
		static HandleTimeout(state$1) {
			if (state$1.done) return;
			if (!state$1.processClosed && state$1.processExited) {
				const message = `The STDIO streams did not close within ${state$1.delay / 1e3} seconds of the exit event from process '${state$1.toolPath}'. This may indicate a child process inherited the STDIO streams and has not yet exited.`;
				state$1._debug(message);
			}
			state$1._setResult();
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/@actions+exec@1.1.1/node_modules/@actions/exec/lib/exec.js
var require_exec = __commonJS({ "node_modules/.pnpm/@actions+exec@1.1.1/node_modules/@actions/exec/lib/exec.js"(exports) {
	var __createBinding$16 = exports && exports.__createBinding || (Object.create ? function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		Object.defineProperty(o, k2, {
			enumerable: true,
			get: function() {
				return m$1[k];
			}
		});
	} : function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		o[k2] = m$1[k];
	});
	var __setModuleDefault$5 = exports && exports.__setModuleDefault || (Object.create ? function(o, v$1) {
		Object.defineProperty(o, "default", {
			enumerable: true,
			value: v$1
		});
	} : function(o, v$1) {
		o["default"] = v$1;
	});
	var __importStar$5 = exports && exports.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding$16(result, mod, k);
		}
		__setModuleDefault$5(result, mod);
		return result;
	};
	var __awaiter$2 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve) {
				resolve(value);
			});
		}
		return new (P || (P = Promise))(function(resolve, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getExecOutput = exports.exec = void 0;
	const string_decoder_1 = __require("string_decoder");
	const tr = __importStar$5(require_toolrunner());
	/**
	* Exec a command.
	* Output will be streamed to the live console.
	* Returns promise with return code
	*
	* @param     commandLine        command to execute (can include additional args). Must be correctly escaped.
	* @param     args               optional arguments for tool. Escaping is handled by the lib.
	* @param     options            optional exec options.  See ExecOptions
	* @returns   Promise<number>    exit code
	*/
	function exec$1(commandLine, args, options) {
		return __awaiter$2(this, void 0, void 0, function* () {
			const commandArgs = tr.argStringToArray(commandLine);
			if (commandArgs.length === 0) throw new Error(`Parameter 'commandLine' cannot be null or empty.`);
			const toolPath = commandArgs[0];
			args = commandArgs.slice(1).concat(args || []);
			const runner = new tr.ToolRunner(toolPath, args, options);
			return runner.exec();
		});
	}
	exports.exec = exec$1;
	/**
	* Exec a command and get the output.
	* Output will be streamed to the live console.
	* Returns promise with the exit code and collected stdout and stderr
	*
	* @param     commandLine           command to execute (can include additional args). Must be correctly escaped.
	* @param     args                  optional arguments for tool. Escaping is handled by the lib.
	* @param     options               optional exec options.  See ExecOptions
	* @returns   Promise<ExecOutput>   exit code, stdout, and stderr
	*/
	function getExecOutput(commandLine, args, options) {
		var _a$1, _b;
		return __awaiter$2(this, void 0, void 0, function* () {
			let stdout = "";
			let stderr = "";
			const stdoutDecoder = new string_decoder_1.StringDecoder("utf8");
			const stderrDecoder = new string_decoder_1.StringDecoder("utf8");
			const originalStdoutListener = (_a$1 = options === null || options === void 0 ? void 0 : options.listeners) === null || _a$1 === void 0 ? void 0 : _a$1.stdout;
			const originalStdErrListener = (_b = options === null || options === void 0 ? void 0 : options.listeners) === null || _b === void 0 ? void 0 : _b.stderr;
			const stdErrListener = (data) => {
				stderr += stderrDecoder.write(data);
				if (originalStdErrListener) originalStdErrListener(data);
			};
			const stdOutListener = (data) => {
				stdout += stdoutDecoder.write(data);
				if (originalStdoutListener) originalStdoutListener(data);
			};
			const listeners = Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.listeners), {
				stdout: stdOutListener,
				stderr: stdErrListener
			});
			const exitCode = yield exec$1(commandLine, args, Object.assign(Object.assign({}, options), { listeners }));
			stdout += stdoutDecoder.end();
			stderr += stderrDecoder.end();
			return {
				exitCode,
				stdout,
				stderr
			};
		});
	}
	exports.getExecOutput = getExecOutput;
} });

//#endregion
//#region node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/platform.js
var require_platform = __commonJS({ "node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/platform.js"(exports) {
	var __createBinding$15 = exports && exports.__createBinding || (Object.create ? function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc$1 = Object.getOwnPropertyDescriptor(m$1, k);
		if (!desc$1 || ("get" in desc$1 ? !m$1.__esModule : desc$1.writable || desc$1.configurable)) desc$1 = {
			enumerable: true,
			get: function() {
				return m$1[k];
			}
		};
		Object.defineProperty(o, k2, desc$1);
	} : function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		o[k2] = m$1[k];
	});
	var __setModuleDefault$4 = exports && exports.__setModuleDefault || (Object.create ? function(o, v$1) {
		Object.defineProperty(o, "default", {
			enumerable: true,
			value: v$1
		});
	} : function(o, v$1) {
		o["default"] = v$1;
	});
	var __importStar$4 = exports && exports.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$15(result, mod, k);
		}
		__setModuleDefault$4(result, mod);
		return result;
	};
	var __awaiter$1 = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve) {
				resolve(value);
			});
		}
		return new (P || (P = Promise))(function(resolve, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	var __importDefault$8 = exports && exports.__importDefault || function(mod) {
		return mod && mod.__esModule ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getDetails = exports.isLinux = exports.isMacOS = exports.isWindows = exports.arch = exports.platform = void 0;
	const os_1 = __importDefault$8(__require("os"));
	const exec = __importStar$4(require_exec());
	const getWindowsInfo = () => __awaiter$1(void 0, void 0, void 0, function* () {
		const { stdout: version } = yield exec.getExecOutput("powershell -command \"(Get-CimInstance -ClassName Win32_OperatingSystem).Version\"", void 0, { silent: true });
		const { stdout: name$2 } = yield exec.getExecOutput("powershell -command \"(Get-CimInstance -ClassName Win32_OperatingSystem).Caption\"", void 0, { silent: true });
		return {
			name: name$2.trim(),
			version: version.trim()
		};
	});
	const getMacOsInfo = () => __awaiter$1(void 0, void 0, void 0, function* () {
		var _a$1, _b, _c, _d;
		const { stdout } = yield exec.getExecOutput("sw_vers", void 0, { silent: true });
		const version = (_b = (_a$1 = stdout.match(/ProductVersion:\s*(.+)/)) === null || _a$1 === void 0 ? void 0 : _a$1[1]) !== null && _b !== void 0 ? _b : "";
		const name$2 = (_d = (_c = stdout.match(/ProductName:\s*(.+)/)) === null || _c === void 0 ? void 0 : _c[1]) !== null && _d !== void 0 ? _d : "";
		return {
			name: name$2,
			version
		};
	});
	const getLinuxInfo = () => __awaiter$1(void 0, void 0, void 0, function* () {
		const { stdout } = yield exec.getExecOutput("lsb_release", [
			"-i",
			"-r",
			"-s"
		], { silent: true });
		const [name$2, version] = stdout.trim().split("\n");
		return {
			name: name$2,
			version
		};
	});
	exports.platform = os_1.default.platform();
	exports.arch = os_1.default.arch();
	exports.isWindows = exports.platform === "win32";
	exports.isMacOS = exports.platform === "darwin";
	exports.isLinux = exports.platform === "linux";
	function getDetails() {
		return __awaiter$1(this, void 0, void 0, function* () {
			return Object.assign(Object.assign({}, yield exports.isWindows ? getWindowsInfo() : exports.isMacOS ? getMacOsInfo() : getLinuxInfo()), {
				platform: exports.platform,
				arch: exports.arch,
				isWindows: exports.isWindows,
				isMacOS: exports.isMacOS,
				isLinux: exports.isLinux
			});
		});
	}
	exports.getDetails = getDetails;
} });

//#endregion
//#region node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/core.js
var require_core = __commonJS({ "node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/lib/core.js"(exports) {
	var __createBinding$14 = exports && exports.__createBinding || (Object.create ? function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc$1 = Object.getOwnPropertyDescriptor(m$1, k);
		if (!desc$1 || ("get" in desc$1 ? !m$1.__esModule : desc$1.writable || desc$1.configurable)) desc$1 = {
			enumerable: true,
			get: function() {
				return m$1[k];
			}
		};
		Object.defineProperty(o, k2, desc$1);
	} : function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		o[k2] = m$1[k];
	});
	var __setModuleDefault$3 = exports && exports.__setModuleDefault || (Object.create ? function(o, v$1) {
		Object.defineProperty(o, "default", {
			enumerable: true,
			value: v$1
		});
	} : function(o, v$1) {
		o["default"] = v$1;
	});
	var __importStar$3 = exports && exports.__importStar || function(mod) {
		if (mod && mod.__esModule) return mod;
		var result = {};
		if (mod != null) {
			for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding$14(result, mod, k);
		}
		__setModuleDefault$3(result, mod);
		return result;
	};
	var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P ? value : new P(function(resolve) {
				resolve(value);
			});
		}
		return new (P || (P = Promise))(function(resolve, reject) {
			function fulfilled(value) {
				try {
					step(generator.next(value));
				} catch (e) {
					reject(e);
				}
			}
			function rejected(value) {
				try {
					step(generator["throw"](value));
				} catch (e) {
					reject(e);
				}
			}
			function step(result) {
				result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
			}
			step((generator = generator.apply(thisArg, _arguments || [])).next());
		});
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.platform = exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = exports.markdownSummary = exports.summary = exports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;
	const command_1 = require_command();
	const file_command_1 = require_file_command();
	const utils_1 = require_utils$1();
	const os$7 = __importStar$3(__require("os"));
	const path$5 = __importStar$3(__require("path"));
	const oidc_utils_1 = require_oidc_utils();
	/**
	* The code to exit an action
	*/
	var ExitCode;
	(function(ExitCode$1) {
		/**
		* A code indicating that the action was successful
		*/
		ExitCode$1[ExitCode$1["Success"] = 0] = "Success";
		/**
		* A code indicating that the action was a failure
		*/
		ExitCode$1[ExitCode$1["Failure"] = 1] = "Failure";
	})(ExitCode || (exports.ExitCode = ExitCode = {}));
	/**
	* Sets env variable for this action and future actions in the job
	* @param name the name of the variable to set
	* @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify
	*/
	function exportVariable(name$2, val) {
		const convertedVal = (0, utils_1.toCommandValue)(val);
		process.env[name$2] = convertedVal;
		const filePath = process.env["GITHUB_ENV"] || "";
		if (filePath) return (0, file_command_1.issueFileCommand)("ENV", (0, file_command_1.prepareKeyValueMessage)(name$2, val));
		(0, command_1.issueCommand)("set-env", { name: name$2 }, convertedVal);
	}
	exports.exportVariable = exportVariable;
	/**
	* Registers a secret which will get masked from logs
	* @param secret value of the secret
	*/
	function setSecret(secret) {
		(0, command_1.issueCommand)("add-mask", {}, secret);
	}
	exports.setSecret = setSecret;
	/**
	* Prepends inputPath to the PATH (for this action and future actions)
	* @param inputPath
	*/
	function addPath(inputPath) {
		const filePath = process.env["GITHUB_PATH"] || "";
		if (filePath) (0, file_command_1.issueFileCommand)("PATH", inputPath);
		else (0, command_1.issueCommand)("add-path", {}, inputPath);
		process.env["PATH"] = `${inputPath}${path$5.delimiter}${process.env["PATH"]}`;
	}
	exports.addPath = addPath;
	/**
	* Gets the value of an input.
	* Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.
	* Returns an empty string if the value is not defined.
	*
	* @param     name     name of the input to get
	* @param     options  optional. See InputOptions.
	* @returns   string
	*/
	function getInput(name$2, options) {
		const val = process.env[`INPUT_${name$2.replace(/ /g, "_").toUpperCase()}`] || "";
		if (options && options.required && !val) throw new Error(`Input required and not supplied: ${name$2}`);
		if (options && options.trimWhitespace === false) return val;
		return val.trim();
	}
	exports.getInput = getInput;
	/**
	* Gets the values of an multiline input.  Each value is also trimmed.
	*
	* @param     name     name of the input to get
	* @param     options  optional. See InputOptions.
	* @returns   string[]
	*
	*/
	function getMultilineInput(name$2, options) {
		const inputs = getInput(name$2, options).split("\n").filter((x) => x !== "");
		if (options && options.trimWhitespace === false) return inputs;
		return inputs.map((input) => input.trim());
	}
	exports.getMultilineInput = getMultilineInput;
	/**
	* Gets the input value of the boolean type in the YAML 1.2 "core schema" specification.
	* Support boolean input list: `true | True | TRUE | false | False | FALSE` .
	* The return value is also in boolean type.
	* ref: https://yaml.org/spec/1.2/spec.html#id2804923
	*
	* @param     name     name of the input to get
	* @param     options  optional. See InputOptions.
	* @returns   boolean
	*/
	function getBooleanInput(name$2, options) {
		const trueValue = [
			"true",
			"True",
			"TRUE"
		];
		const falseValue = [
			"false",
			"False",
			"FALSE"
		];
		const val = getInput(name$2, options);
		if (trueValue.includes(val)) return true;
		if (falseValue.includes(val)) return false;
		throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name$2}\nSupport boolean input list: \`true | True | TRUE | false | False | FALSE\``);
	}
	exports.getBooleanInput = getBooleanInput;
	/**
	* Sets the value of an output.
	*
	* @param     name     name of the output to set
	* @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
	*/
	function setOutput(name$2, value) {
		const filePath = process.env["GITHUB_OUTPUT"] || "";
		if (filePath) return (0, file_command_1.issueFileCommand)("OUTPUT", (0, file_command_1.prepareKeyValueMessage)(name$2, value));
		process.stdout.write(os$7.EOL);
		(0, command_1.issueCommand)("set-output", { name: name$2 }, (0, utils_1.toCommandValue)(value));
	}
	exports.setOutput = setOutput;
	/**
	* Enables or disables the echoing of commands into stdout for the rest of the step.
	* Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.
	*
	*/
	function setCommandEcho(enabled$2) {
		(0, command_1.issue)("echo", enabled$2 ? "on" : "off");
	}
	exports.setCommandEcho = setCommandEcho;
	/**
	* Sets the action status to failed.
	* When the action exits it will be with an exit code of 1
	* @param message add error issue message
	*/
	function setFailed(message) {
		process.exitCode = ExitCode.Failure;
		error(message);
	}
	exports.setFailed = setFailed;
	/**
	* Gets whether Actions Step Debug is on or not
	*/
	function isDebug() {
		return process.env["RUNNER_DEBUG"] === "1";
	}
	exports.isDebug = isDebug;
	/**
	* Writes debug message to user log
	* @param message debug message
	*/
	function debug$19(message) {
		(0, command_1.issueCommand)("debug", {}, message);
	}
	exports.debug = debug$19;
	/**
	* Adds an error issue
	* @param message error issue message. Errors will be converted to string via toString()
	* @param properties optional properties to add to the annotation.
	*/
	function error(message, properties = {}) {
		(0, command_1.issueCommand)("error", (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
	}
	exports.error = error;
	/**
	* Adds a warning issue
	* @param message warning issue message. Errors will be converted to string via toString()
	* @param properties optional properties to add to the annotation.
	*/
	function warning(message, properties = {}) {
		(0, command_1.issueCommand)("warning", (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
	}
	exports.warning = warning;
	/**
	* Adds a notice issue
	* @param message notice issue message. Errors will be converted to string via toString()
	* @param properties optional properties to add to the annotation.
	*/
	function notice(message, properties = {}) {
		(0, command_1.issueCommand)("notice", (0, utils_1.toCommandProperties)(properties), message instanceof Error ? message.toString() : message);
	}
	exports.notice = notice;
	/**
	* Writes info to log with console.log.
	* @param message info message
	*/
	function info(message) {
		process.stdout.write(message + os$7.EOL);
	}
	exports.info = info;
	/**
	* Begin an output group.
	*
	* Output until the next `groupEnd` will be foldable in this group
	*
	* @param name The name of the output group
	*/
	function startGroup(name$2) {
		(0, command_1.issue)("group", name$2);
	}
	exports.startGroup = startGroup;
	/**
	* End an output group.
	*/
	function endGroup() {
		(0, command_1.issue)("endgroup");
	}
	exports.endGroup = endGroup;
	/**
	* Wrap an asynchronous function call in a group.
	*
	* Returns the same type as the function itself.
	*
	* @param name The name of the group
	* @param fn The function to wrap in the group
	*/
	function group(name$2, fn) {
		return __awaiter(this, void 0, void 0, function* () {
			startGroup(name$2);
			let result;
			try {
				result = yield fn();
			} finally {
				endGroup();
			}
			return result;
		});
	}
	exports.group = group;
	/**
	* Saves state for current action, the state can only be retrieved by this action's post job execution.
	*
	* @param     name     name of the state to store
	* @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
	*/
	function saveState(name$2, value) {
		const filePath = process.env["GITHUB_STATE"] || "";
		if (filePath) return (0, file_command_1.issueFileCommand)("STATE", (0, file_command_1.prepareKeyValueMessage)(name$2, value));
		(0, command_1.issueCommand)("save-state", { name: name$2 }, (0, utils_1.toCommandValue)(value));
	}
	exports.saveState = saveState;
	/**
	* Gets the value of an state set by this action's main execution.
	*
	* @param     name     name of the state to get
	* @returns   string
	*/
	function getState(name$2) {
		return process.env[`STATE_${name$2}`] || "";
	}
	exports.getState = getState;
	function getIDToken(aud) {
		return __awaiter(this, void 0, void 0, function* () {
			return yield oidc_utils_1.OidcClient.getIDToken(aud);
		});
	}
	exports.getIDToken = getIDToken;
	/**
	* Summary exports
	*/
	var summary_1 = require_summary();
	Object.defineProperty(exports, "summary", {
		enumerable: true,
		get: function() {
			return summary_1.summary;
		}
	});
	/**
	* @deprecated use core.summary
	*/
	var summary_2 = require_summary();
	Object.defineProperty(exports, "markdownSummary", {
		enumerable: true,
		get: function() {
			return summary_2.markdownSummary;
		}
	});
	/**
	* Path exports
	*/
	var path_utils_1 = require_path_utils();
	Object.defineProperty(exports, "toPosixPath", {
		enumerable: true,
		get: function() {
			return path_utils_1.toPosixPath;
		}
	});
	Object.defineProperty(exports, "toWin32Path", {
		enumerable: true,
		get: function() {
			return path_utils_1.toWin32Path;
		}
	});
	Object.defineProperty(exports, "toPlatformPath", {
		enumerable: true,
		get: function() {
			return path_utils_1.toPlatformPath;
		}
	});
	/**
	* Platform utilities exports
	*/
	exports.platform = __importStar$3(require_platform());
} });
var import_core = __toESM(require_core(), 1);

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/array.js
var require_array = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/array.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.flatten = void 0;
	exports.flat = flat;
	exports.unique = unique;
	exports.last = last;
	exports.first = first;
	exports.splitInChunks = splitInChunks;
	exports.transformVariadicArgumentToArray = transformVariadicArgumentToArray;
	exports.zip = zip;
	exports.partition = partition;
	exports.filterDuplicates = filterDuplicates;
	exports.filterDuplicatesRight = filterDuplicatesRight;
	/**
	* Flatten a two dimensional array into a one dimensional array.
	* @param arr - The array to be flattened.
	* @returns A one dimensional array.
	*/
	function flat(arr) {
		return arr.reduce((flattened, subArr) => [...flattened, ...subArr], []);
	}
	/**
	* Remove all duplicates from an array.
	* @param arr - Array that might contain duplicates.
	* @returns Array of unique items.
	*/
	function unique(arr) {
		return Array.from(new Set(arr));
	}
	/**
	* Get the last item from an array. Returns `undefined`, if the array is empty.
	* @param arr - Array to get the last item of.
	* @returns Last item of the array or `undefined`, if the array was empty.
	*/
	function last(arr) {
		return arr.length ? arr[arr.length - 1] : void 0;
	}
	/**
	* Get the first item from an array. Returns `undefined`, if the array is empty.
	* @param arr - Array to get the first item of.
	* @returns Fist item of the array or `undefined`, if the array was empty.
	*/
	function first(arr) {
		return arr[0];
	}
	/**
	* Split the given array in chunks.
	* @param arr - Array to be split into chunks.
	* @param chunkSize - Size of the chunks.
	* @returns Two dimensional array with arrays of length chunkSize. The last subarray could be shorter.
	*/
	function splitInChunks(arr, chunkSize) {
		const chunks = [];
		if (arr) for (let i = 0; i < arr.length; i += chunkSize) chunks.push(arr.slice(i, i + chunkSize));
		return chunks;
	}
	/**
	* We want to provide methods which accept a variable single number of elements and arrays.
	* The overloaded signature to achieve this is:
	* ```
	* function doSomething(array: T[])
	* function doSomething(...varArgs: T[])
	* function doSomething(first: undefined | T | T[], ...rest: T[]) {
	*   //implementation
	* }
	* ```
	* This wrapper methods makes it easy build an array from the input.
	* @param firstOrArray - Either an array, the first element of the var args or `undefined`, if no argument was given.
	* @param rest - Second to last element, if var args were used, empty array, if the first argument is an array.
	* @returns Array from the input or empty array if no input was given.
	*/
	function transformVariadicArgumentToArray(firstOrArray, rest) {
		if (Array.isArray(firstOrArray)) return [...firstOrArray, ...rest];
		return firstOrArray ? [firstOrArray, ...rest] : [...rest];
	}
	/**
	* Flattens a array: [1,[2,[3,4]],5] will become [1,2,3,4,5].
	* Non primitive values are copied by reference.
	* @param input - Array to be flattened.
	* @returns The flattened array.
	*/
	const flatten = (input) => {
		const flatResult = [];
		const stack = [...input];
		while (stack.length > 0) {
			const current = stack.pop();
			if (!Array.isArray(current)) flatResult.push(current);
			else stack.push(...current);
		}
		return flatResult.reverse();
	};
	exports.flatten = flatten;
	/**
	* Merge two arrays by alternately adding inserting values from both arrays, starting from the left.
	* @example `zip([1, 2], [3, 4, 5, 6])` results in `[1, 3, 2, 4, 5, 6]`.
	* @param left - Array to start alternately merging from.
	* @param right - Second array to merge.
	* @returns Zipped array.
	*/
	function zip(left, right) {
		const longerArr = left.length > right.length ? left : right;
		return longerArr.reduce((zipped, _, i) => {
			const currentZipped = [];
			if (left.length > i) currentZipped.push(left[i]);
			if (right.length > i) currentZipped.push(right[i]);
			return [...zipped, ...currentZipped];
		}, []);
	}
	/**
	* Split an array into two based on a condition.
	* @param arr - Array to partition.
	* @param condition - Function to determine to where to put each item.
	* @returns A two dimensional array containing two arrays, where the first one includes all items where the given condition was met and the second one includes all items where it was not met.
	*/
	function partition(arr, condition) {
		return arr.reduce(([conditionTrue, conditionFalse], item) => condition(item) ? [[...conditionTrue, item], conditionFalse] : [conditionTrue, [...conditionFalse, item]], [[], []]);
	}
	/**
	* Filter an array by removing duplicates and keeping the left most occurrence. By default this compares by identity.
	* @param arr - Array to remove duplicates from.
	* @param comparator - Optional comparator function, indicating whether two items are equal and therefore handled as duplicates. Defaults to identity.
	* @returns A filtered array containing no duplicates.
	*/
	function filterDuplicates(arr, comparator = (left, right) => left === right) {
		return arr.filter((item, index) => !arr.slice(0, index).find((filteredItem) => comparator(item, filteredItem)));
	}
	/**
	* Filter an array by removing duplicates and keeping the right most occurrence. By default this compares by identity.
	* @param arr - Array to remove duplicates from.
	* @param comparator - Optional comparator function, indicating whether two items are equal and therefore handled as duplicates. Defaults to identity.
	* @returns A filtered array containing no duplicates.
	*/
	function filterDuplicatesRight(arr, comparator = (left, right) => left === right) {
		return filterDuplicates(arr.reverse(), comparator).reverse();
	}
} });

//#endregion
//#region node_modules/.pnpm/voca@1.4.1/node_modules/voca/index.js
var require_voca = __commonJS({ "node_modules/.pnpm/voca@1.4.1/node_modules/voca/index.js"(exports, module) {
	/*! 
	* Voca string library 1.4.1
	* https://vocajs.pages.dev
	*
	* Copyright Dmitri Pavlutin and other contributors
	* Released under the MIT license
	*/
	(function(global$1, factory) {
		typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global$1 = global$1 || self, global$1.v = factory());
	})(exports, function() {
		"use strict";
		function _extends() {
			_extends = Object.assign || function(target) {
				for (var i = 1; i < arguments.length; i++) {
					var source = arguments[i];
					for (var key$1 in source) if (Object.prototype.hasOwnProperty.call(source, key$1)) target[key$1] = source[key$1];
				}
				return target;
			};
			return _extends.apply(this, arguments);
		}
		function _slicedToArray(arr, i) {
			return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
		}
		function _toConsumableArray(arr) {
			return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
		}
		function _arrayWithoutHoles(arr) {
			if (Array.isArray(arr)) {
				for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];
				return arr2;
			}
		}
		function _arrayWithHoles(arr) {
			if (Array.isArray(arr)) return arr;
		}
		function _iterableToArray(iter) {
			if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
		}
		function _iterableToArrayLimit(arr, i) {
			if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) return;
			var _arr = [];
			var _n = true;
			var _d = false;
			var _e = void 0;
			try {
				for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
					_arr.push(_s.value);
					if (i && _arr.length === i) break;
				}
			} catch (err) {
				_d = true;
				_e = err;
			} finally {
				try {
					if (!_n && _i["return"] != null) _i["return"]();
				} finally {
					if (_d) throw _e;
				}
			}
			return _arr;
		}
		function _nonIterableSpread() {
			throw new TypeError("Invalid attempt to spread non-iterable instance");
		}
		function _nonIterableRest() {
			throw new TypeError("Invalid attempt to destructure non-iterable instance");
		}
		/**
		* Checks if `value` is `null` or `undefined`
		*
		* @ignore
		* @function isNil
		* @param {*} value The object to check
		* @return {boolean} Returns `true` is `value` is `undefined` or `null`, `false` otherwise
		*/
		function isNil(value) {
			return value === void 0 || value === null;
		}
		/**
		* Converts the `value` to a boolean. If `value` is `undefined` or `null`, returns `defaultValue`.
		*
		* @ignore
		* @function toBoolean
		* @param {*} value The value to convert.
		* @param {boolean} [defaultValue=false] The default value.
		* @return {boolean} Returns the coercion to boolean.
		*/
		function coerceToBoolean(value) {
			var defaultValue = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
			if (isNil(value)) return defaultValue;
			return Boolean(value);
		}
		/**
		* Checks whether `subject` is a string primitive type.
		*
		* @function isString
		* @static
		* @since 1.0.0
		* @memberOf Query
		* @param {string} subject The value to verify.
		* @return {boolean} Returns `true` if `subject` is string primitive type or `false` otherwise.
		* @example
		* v.isString('vacation');
		* // => true
		*
		* v.isString(560);
		* // => false
		*/
		function isString$6(subject) {
			return typeof subject === "string";
		}
		/**
		* Get the string representation of the `value`.
		* Converts the `value` to string.
		* If `value` is `null` or `undefined`, return `defaultValue`.
		*
		* @ignore
		* @function toString
		* @param {*} value             The value to convert.
		* @param {*} [defaultValue=''] The default value to return.
		* @return {string|null}        Returns the string representation of `value`. Returns `defaultValue` if `value` is
		*                              `null` or `undefined`.
		*/
		function coerceToString(value) {
			var defaultValue = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
			if (isNil(value)) return defaultValue;
			if (isString$6(value)) return value;
			return String(value);
		}
		/**
		* Converts the first character of `subject` to upper case. If `restToLower` is `true`, convert the rest of
		* `subject` to lower case.
		*
		* @function capitalize
		* @static
		* @since 1.0.0
		* @memberOf Case
		* @param  {string}  [subject='']        The string to capitalize.
		* @param  {boolean} [restToLower=false] Convert the rest of `subject` to lower case.
		* @return {string}                      Returns the capitalized string.
		* @example
		* v.capitalize('apple');
		* // => 'Apple'
		*
		* v.capitalize('aPPle', true);
		* // => 'Apple'
		*/
		function capitalize(subject, restToLower) {
			var subjectString = coerceToString(subject);
			var restToLowerCaseBoolean = coerceToBoolean(restToLower);
			if (subjectString === "") return "";
			if (restToLowerCaseBoolean) subjectString = subjectString.toLowerCase();
			return subjectString.substr(0, 1).toUpperCase() + subjectString.substr(1);
		}
		/**
		* Converts the `subject` to lower case.
		*
		* @function lowerCase
		* @static
		* @since 1.0.0
		* @memberOf Case
		* @param  {string} [subject=''] The string to convert to lower case.
		* @return {string}              Returns the lower case string.
		* @example
		* v.lowerCase('Green');
		* // => 'green'
		*
		* v.lowerCase('BLUE');
		* // => 'blue'
		*/
		function lowerCase(subject) {
			var subjectString = coerceToString(subject, "");
			return subjectString.toLowerCase();
		}
		/**
		* A regular expression string matching digits
		*
		* @type {string}
		* @ignore
		*/
		var digit = "\\d";
		/**
		* A regular expression string matching whitespace
		*
		* @type {string}
		* @ignore
		*/
		var whitespace = "\\s\\uFEFF\\xA0";
		/**
		* A regular expression string matching high surrogate
		*
		* @type {string}
		* @ignore
		*/
		var highSurrogate = "\\uD800-\\uDBFF";
		/**
		* A regular expression string matching low surrogate
		*
		* @type {string}
		* @ignore
		*/
		var lowSurrogate = "\\uDC00-\\uDFFF";
		/**
		* A regular expression string matching diacritical mark
		*
		* @type {string}
		* @ignore
		*/
		var diacriticalMark = "\\u0300-\\u036F\\u1AB0-\\u1AFF\\u1DC0-\\u1DFF\\u20D0-\\u20FF\\uFE20-\\uFE2F";
		/**
		* A regular expression to match the base character for a combining mark
		*
		* @type {string}
		* @ignore
		*/
		var base = "\\0-\\u02FF\\u0370-\\u1AAF\\u1B00-\\u1DBF\\u1E00-\\u20CF\\u2100-\\uD7FF\\uE000-\\uFE1F\\uFE30-\\uFFFF";
		/**
		* Regular expression to match combining marks
		*
		* @see http://unicode.org/faq/char_combmark.html
		* @type {RegExp}
		* @ignore
		*/
		var REGEXP_COMBINING_MARKS = new RegExp("([" + base + "]|[" + highSurrogate + "][" + lowSurrogate + "]|[" + highSurrogate + "](?![" + lowSurrogate + "])|(?:[^" + highSurrogate + "]|^)[" + lowSurrogate + "])([" + diacriticalMark + "]+)", "g");
		/**
		* Regular expression to match surrogate pairs
		*
		* @see http://www.unicode.org/faq/utf_bom.html#utf16-2
		* @type {RegExp}
		* @ignore
		*/
		var REGEXP_SURROGATE_PAIRS = new RegExp("([" + highSurrogate + "])([" + lowSurrogate + "])", "g");
		/**
		* Regular expression to match a unicode character
		*
		* @type {RegExp}
		* @ignore
		*/
		var REGEXP_UNICODE_CHARACTER = new RegExp("((?:[" + base + "]|[" + highSurrogate + "][" + lowSurrogate + "]|[" + highSurrogate + "](?![" + lowSurrogate + "])|(?:[^" + highSurrogate + "]|^)[" + lowSurrogate + "])(?:[" + diacriticalMark + "]+))|([" + highSurrogate + "][" + lowSurrogate + "])|([\\n\\r\\u2028\\u2029])|(.)", "g");
		/**
		* Regular expression to match whitespaces
		*
		* @type {RegExp}
		* @ignore
		*/
		var REGEXP_WHITESPACE = new RegExp("[" + whitespace + "]");
		/**
		* Regular expression to match whitespaces from the left side
		*
		* @type {RegExp}
		* @ignore
		*/
		var REGEXP_TRIM_LEFT = new RegExp("^[" + whitespace + "]+");
		/**
		* Regular expression to match whitespaces from the right side
		*
		* @type {RegExp}
		* @ignore
		*/
		var REGEXP_TRIM_RIGHT = new RegExp("[" + whitespace + "]+$");
		/**
		* Regular expression to match digit characters
		*
		* @type {RegExp}
		* @ignore
		*/
		var REGEXP_DIGIT = new RegExp("^" + digit + "+$");
		/**
		* Regular expression to match regular expression special characters
		*
		* @type {RegExp}
		* @ignore
		*/
		var REGEXP_SPECIAL_CHARACTERS = /[-[\]{}()*+!<=:?./\\^$|#,]/g;
		/**
		* Regular expression to match not latin characters
		*
		* @type {RegExp}
		* @ignore
		*/
		var REGEXP_NON_LATIN = /[^A-Za-z0-9]/g;
		/**
		* Regular expression to match HTML special characters.
		*
		* @type {RegExp}
		* @ignore
		*/
		var REGEXP_HTML_SPECIAL_CHARACTERS = /[<>&"'`]/g;
		/**
		* Regular expression to match sprintf format string
		*
		* @type {RegExp}
		* @ignore
		*/
		var REGEXP_CONVERSION_SPECIFICATION = /(%{1,2})(?:(\d+)\$)?(\+)?([ 0]|'.{1})?(-)?(\d+)?(?:\.(\d+))?([bcdiouxXeEfgGs])?/g;
		/**
		* Regular expression to match trailing zeros in a number
		*
		* @type {RegExp}
		* @ignore
		*/
		var REGEXP_TRAILING_ZEROS = /\.?0+$/g;
		/**
		* Regular expression to match a list of tags.
		*
		* @see https://html.spec.whatwg.org/multipage/syntax.html#syntax-tag-name
		* @type {RegExp}
		* @ignore
		*/
		var REGEXP_TAG_LIST = /<([A-Za-z0-9]+)>/g;
		/**
		* A regular expression to match the General Punctuation Unicode block
		*
		* @type {string}
		* @ignore
		*/
		var generalPunctuationBlock = "\\u2000-\\u206F";
		/**
		* A regular expression to match non characters from from Basic Latin and Latin-1 Supplement Unicode blocks
		*
		* @type {string}
		* @ignore
		*/
		var nonCharacter = "\\x00-\\x2F\\x3A-\\x40\\x5B-\\x60\\x7b-\\xBF\\xD7\\xF7";
		/**
		* A regular expression to match the dingbat Unicode block
		*
		* @type {string}
		* @ignore
		*/
		var dingbatBlock = "\\u2700-\\u27BF";
		/**
		* A regular expression string that matches lower case letters: LATIN
		*
		* @type {string}
		* @ignore
		*/
		var lowerCaseLetter = "a-z\\xB5\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F";
		/**
		* A regular expression string that matches upper case letters: LATIN
		*
		* @type {string}
		* @ignore
		*/
		var upperCaseLetter = "\\x41-\\x5a\\xc0-\\xd6\\xd8-\\xde\\u0100\\u0102\\u0104\\u0106\\u0108\\u010a\\u010c\\u010e\\u0110\\u0112\\u0114\\u0116\\u0118\\u011a\\u011c\\u011e\\u0120\\u0122\\u0124\\u0126\\u0128\\u012a\\u012c\\u012e\\u0130\\u0132\\u0134\\u0136\\u0139\\u013b\\u013d\\u013f\\u0141\\u0143\\u0145\\u0147\\u014a\\u014c\\u014e\\u0150\\u0152\\u0154\\u0156\\u0158\\u015a\\u015c\\u015e\\u0160\\u0162\\u0164\\u0166\\u0168\\u016a\\u016c\\u016e\\u0170\\u0172\\u0174\\u0176\\u0178\\u0179\\u017b\\u017d\\u0181\\u0182\\u0184\\u0186\\u0187\\u0189-\\u018b\\u018e-\\u0191\\u0193\\u0194\\u0196-\\u0198\\u019c\\u019d\\u019f\\u01a0\\u01a2\\u01a4\\u01a6\\u01a7\\u01a9\\u01ac\\u01ae\\u01af\\u01b1-\\u01b3\\u01b5\\u01b7\\u01b8\\u01bc\\u01c4\\u01c5\\u01c7\\u01c8\\u01ca\\u01cb\\u01cd\\u01cf\\u01d1\\u01d3\\u01d5\\u01d7\\u01d9\\u01db\\u01de\\u01e0\\u01e2\\u01e4\\u01e6\\u01e8\\u01ea\\u01ec\\u01ee\\u01f1\\u01f2\\u01f4\\u01f6-\\u01f8\\u01fa\\u01fc\\u01fe\\u0200\\u0202\\u0204\\u0206\\u0208\\u020a\\u020c\\u020e\\u0210\\u0212\\u0214\\u0216\\u0218\\u021a\\u021c\\u021e\\u0220\\u0222\\u0224\\u0226\\u0228\\u022a\\u022c\\u022e\\u0230\\u0232\\u023a\\u023b\\u023d\\u023e\\u0241\\u0243-\\u0246\\u0248\\u024a\\u024c\\u024e";
		/**
		* Regular expression to match Unicode words
		*
		* @type {RegExp}
		* @ignore
		*/
		var REGEXP_WORD = new RegExp("(?:[" + upperCaseLetter + "][" + diacriticalMark + "]*)?(?:[" + lowerCaseLetter + "][" + diacriticalMark + "]*)+|(?:[" + upperCaseLetter + "][" + diacriticalMark + "]*)+(?![" + lowerCaseLetter + "])|[" + digit + "]+|[" + dingbatBlock + "]|[^" + nonCharacter + generalPunctuationBlock + whitespace + "]+", "g");
		/**
		* Regular expression to match words from Basic Latin and Latin-1 Supplement blocks
		*
		* @type {RegExp}
		* @ignore
		*/
		var REGEXP_LATIN_WORD = /[A-Z\xC0-\xD6\xD8-\xDE]?[a-z\xDF-\xF6\xF8-\xFF]+|[A-Z\xC0-\xD6\xD8-\xDE]+(?![a-z\xDF-\xF6\xF8-\xFF])|\d+/g;
		/**
		* Regular expression to match alpha characters
		*
		* @see http://stackoverflow.com/a/22075070/1894471
		* @type {RegExp}
		* @ignore
		*/
		var REGEXP_ALPHA = new RegExp("^(?:[" + lowerCaseLetter + upperCaseLetter + "][" + diacriticalMark + "]*)+$");
		/**
		* Regular expression to match alpha and digit characters
		*
		* @see http://stackoverflow.com/a/22075070/1894471
		* @type {RegExp}
		* @ignore
		*/
		var REGEXP_ALPHA_DIGIT = new RegExp("^((?:[" + lowerCaseLetter + upperCaseLetter + "][" + diacriticalMark + "]*)|[" + digit + "])+$");
		/**
		* Regular expression to match Extended ASCII characters, i.e. the first 255
		*
		* @type {RegExp}
		* @ignore
		*/
		var REGEXP_EXTENDED_ASCII = /^[\x01-\xFF]*$/;
		/**
		* Verifies if `value` is `undefined` or `null` and returns `defaultValue`. In other case returns `value`.
		*
		* @ignore
		* @function nilDefault
		* @param {*} value The value to verify.
		* @param {*} defaultValue The default value.
		* @return {*} Returns `defaultValue` if `value` is `undefined` or `null`, otherwise `defaultValue`.
		*/
		function nilDefault(value, defaultValue) {
			return value == null ? defaultValue : value;
		}
		/**
		* Get the string representation of the `value`.
		* Converts the `value` to string.
		*
		* @ignore
		* @function toString
		* @param {*} value             The value to convert.
		* @return {string|null}        Returns the string representation of `value`.
		*/
		function toString$4(value) {
			if (isNil(value)) return null;
			if (isString$6(value)) return value;
			return String(value);
		}
		/**
		* Splits `subject` into an array of words.
		*
		* @function words
		* @static
		* @since 1.0.0
		* @memberOf Split
		* @param {string} [subject=''] The string to split into words.
		* @param {string|RegExp} [pattern] The pattern to watch words. If `pattern` is not RegExp, it is transformed to `new RegExp(pattern, flags)`.
		* @param {string} [flags=''] The regular expression flags. Applies when `pattern` is string type.
		* @return {Array} Returns the array of words.
		* @example
		* v.words('gravity can cross dimensions');
		* // => ['gravity', 'can', 'cross', 'dimensions']
		*
		* v.words('GravityCanCrossDimensions');
		* // => ['Gravity', 'Can', 'Cross', 'Dimensions']
		*
		* v.words('Gravity - can cross dimensions!');
		* // => ['Gravity', 'can', 'cross', 'dimensions']
		*
		* v.words('Earth gravity', /[^\s]+/g);
		* // => ['Earth', 'gravity']
		*/
		function words(subject, pattern, flags) {
			var subjectString = coerceToString(subject);
			var patternRegExp;
			if (isNil(pattern)) patternRegExp = REGEXP_EXTENDED_ASCII.test(subjectString) ? REGEXP_LATIN_WORD : REGEXP_WORD;
			else if (pattern instanceof RegExp) patternRegExp = pattern;
			else {
				var flagsString = toString$4(nilDefault(flags, ""));
				patternRegExp = new RegExp(toString$4(pattern), flagsString);
			}
			return nilDefault(subjectString.match(patternRegExp), []);
		}
		/**
		* Transforms the `word` into camel case chunk.
		*
		* @param  {string} word  The word string
		* @param  {number} index The index of the word in phrase.
		* @return {string}       The transformed word.
		* @ignore
		*/
		function wordToCamel(word, index) {
			return index === 0 ? lowerCase(word) : capitalize(word, true);
		}
		/**
		* Converts the `subject` to <a href="https://en.wikipedia.org/wiki/CamelCase">camel case</a>.
		*
		* @function camelCase
		* @static
		* @since 1.0.0
		* @memberOf Case
		* @param  {string} [subject=''] The string to convert to camel case.
		* @return {string}              The camel case string.
		* @example
		* v.camelCase('bird flight');
		* // => 'birdFlight'
		*
		* v.camelCase('BirdFlight');
		* // => 'birdFlight'
		*
		* v.camelCase('-BIRD-FLIGHT-');
		* // => 'birdFlight'
		*/
		function camelCase$1(subject) {
			var subjectString = coerceToString(subject);
			if (subjectString === "") return "";
			return words(subjectString).map(wordToCamel).join("");
		}
		/**
		* Converts the first character of `subject` to lower case.
		*
		* @function decapitalize
		* @static
		* @since 1.0.0
		* @memberOf Case
		* @param  {string} [subject=''] The string to decapitalize.
		* @return {string}              Returns the decapitalized string.
		* @example
		* v.decapitalize('Sun');
		* // => 'sun'
		*
		* v.decapitalize('moon');
		* // => 'moon'
		*/
		function decapitalize(subject) {
			var subjectString = coerceToString(subject);
			if (subjectString === "") return "";
			return subjectString.substr(0, 1).toLowerCase() + subjectString.substr(1);
		}
		/**
		* Converts the `subject` to <a href="https://en.wikipedia.org/wiki/Letter_case#cite_ref-13">kebab case</a>,
		* also called <i>spinal case</i> or <i>lisp case</i>.
		*
		* @function kebabCase
		* @static
		* @since 1.0.0
		* @memberOf Case
		* @param  {string} [subject=''] The string to convert to kebab case.
		* @return {string}              Returns the kebab case string.
		* @example
		* v.kebabCase('goodbye blue sky');
		* // => 'goodbye-blue-sky'
		*
		* v.kebabCase('GoodbyeBlueSky');
		* // => 'goodbye-blue-sky'
		*
		* v.kebabCase('-Goodbye-Blue-Sky-');
		* // => 'goodbye-blue-sky'
		*/
		function kebabCase$1(subject) {
			var subjectString = coerceToString(subject);
			if (subjectString === "") return "";
			return words(subjectString).map(lowerCase).join("-");
		}
		/**
		* Converts the `subject` to <a href="https://en.wikipedia.org/wiki/Snake_case">snake case</a>.
		*
		* @function snakeCase
		* @static
		* @since 1.0.0
		* @memberOf Case
		* @param  {string} [subject=''] The string to convert to snake case.
		* @return {string}              Returns the snake case string.
		* @example
		* v.snakeCase('learning to fly');
		* // => 'learning_to_fly'
		*
		* v.snakeCase('LearningToFly');
		* // => 'learning_to_fly'
		*
		* v.snakeCase('-Learning-To-Fly-');
		* // => 'learning_to_fly'
		*/
		function snakeCase(subject) {
			var subjectString = coerceToString(subject);
			if (subjectString === "") return "";
			return words(subjectString).map(lowerCase).join("_");
		}
		/**
		* Converts the `subject` to upper case.
		*
		* @function upperCase
		* @static
		* @since 1.0.0
		* @memberOf Case
		* @param  {string} [subject=''] The string to convert to upper case.
		* @return {string}              Returns the upper case string.
		* @example
		* v.upperCase('school');
		* // => 'SCHOOL'
		*/
		function upperCase(subject) {
			var subjectString = coerceToString(subject);
			return subjectString.toUpperCase();
		}
		/**
		* Converts the uppercase alpha characters of `subject` to lowercase and lowercase
		* characters to uppercase.
		*
		* @function swapCase
		* @static
		* @since 1.3.0
		* @memberOf Case
		* @param  {string} [subject=''] The string to swap the case.
		* @return {string}              Returns the converted string.
		* @example
		* v.swapCase('League of Shadows');
		* // => 'lEAGUE OF sHADOWS'
		*
		* v.swapCase('2 Bees');
		* // => '2 bEES'
		*/
		function swapCase(subject) {
			var subjectString = coerceToString(subject);
			return subjectString.split("").reduce(swapAndConcat, "");
		}
		function swapAndConcat(swapped, character) {
			var lowerCase$1 = character.toLowerCase();
			var upperCase$1 = character.toUpperCase();
			return swapped + (character === lowerCase$1 ? upperCase$1 : lowerCase$1);
		}
		/**
		* Converts the subject to title case.
		*
		* @function titleCase
		* @static
		* @since 1.4.0
		* @memberOf Case
		* @param  {string} [subject=''] The string to convert to title case.
		* @param  {Array}  [noSplit]    Do not split words at the specified characters.
		* @return {string}              Returns the title case string.
		* @example
		* v.titleCase('learning to fly');
		* // => 'Learning To Fly'
		*
		* v.titleCase('jean-luc is good-looking', ['-']);
		* // => 'Jean-luc Is Good-looking'
		*/
		function titleCase(subject, noSplit) {
			var subjectString = coerceToString(subject);
			var noSplitArray = Array.isArray(noSplit) ? noSplit : [];
			var wordsRegExp = REGEXP_EXTENDED_ASCII.test(subjectString) ? REGEXP_LATIN_WORD : REGEXP_WORD;
			return subjectString.replace(wordsRegExp, function(word, index) {
				var isNoSplit = index > 0 && noSplitArray.indexOf(subjectString[index - 1]) >= 0;
				return isNoSplit ? word.toLowerCase() : capitalize(word, true);
			});
		}
		/**
		* Clip the number to interval `downLimit` to `upLimit`.
		*
		* @ignore
		* @function clipNumber
		* @param {number} value The number to clip
		* @param {number} downLimit The down limit
		* @param {number} upLimit The upper limit
		* @return {number} The clipped number
		*/
		function clipNumber(value, downLimit, upLimit) {
			if (value <= downLimit) return downLimit;
			if (value >= upLimit) return upLimit;
			return value;
		}
		/**
		* Max save integer value
		*
		* @ignore
		* @type {number}
		*/
		var MAX_SAFE_INTEGER$3 = 9007199254740991;
		/**
		* Transforms `value` to an integer.
		*
		* @ignore
		* @function toInteger
		* @param {number} value The number to transform.
		* @returns {number} Returns the transformed integer.
		*/
		function toInteger$3(value) {
			if (value === Infinity) return MAX_SAFE_INTEGER$3;
			if (value === -Infinity) return -MAX_SAFE_INTEGER$3;
			return ~~value;
		}
		/**
		* Truncates `subject` to a new `length`.
		*
		* @function truncate
		* @static
		* @since 1.0.0
		* @memberOf Chop
		* @param  {string} [subject=''] The string to truncate.
		* @param  {int}    length       The length to truncate the string.
		* @param  {string} [end='...']  The string to be added at the end.
		* @return {string}              Returns the truncated string.
		* @example
		* v.truncate('Once upon a time', 7);
		* // => 'Once...'
		*
		* v.truncate('Good day, Little Red Riding Hood', 14, ' (...)');
		* // => 'Good day (...)'
		*
		* v.truncate('Once upon', 10);
		* // => 'Once upon'
		*/
		function truncate(subject, length, end) {
			var subjectString = coerceToString(subject);
			var lengthInt = isNil(length) ? subjectString.length : clipNumber(toInteger$3(length), 0, MAX_SAFE_INTEGER$3);
			var endString = coerceToString(end, "...");
			if (lengthInt >= subjectString.length) return subjectString;
			return subjectString.substr(0, length - endString.length) + endString;
		}
		/**
		* Access a character from `subject` at specified `position`.
		*
		* @function charAt
		* @static
		* @since 1.0.0
		* @memberOf Chop
		* @param  {string} [subject=''] The string to extract from.
		* @param  {numbers} position The position to get the character.
		* @return {string} Returns the character at specified position.
		* @example
		* v.charAt('helicopter', 0);
		* // => 'h'
		*
		* v.charAt('helicopter', 1);
		* // => 'e'
		*/
		function charAt(subject, position) {
			var subjectString = coerceToString(subject);
			return subjectString.charAt(position);
		}
		var HIGH_SURROGATE_START = 55296;
		var HIGH_SURROGATE_END = 56319;
		var LOW_SURROGATE_START = 56320;
		var LOW_SURROGATE_END = 57343;
		/**
		* Checks if `codePoint` is a high-surrogate number from range 0xD800 to 0xDBFF.
		*
		* @ignore
		* @param {number} codePoint The code point number to be verified
		* @return {boolean} Returns a boolean whether `codePoint` is a high-surrogate number.
		*/
		function isHighSurrogate(codePoint) {
			return codePoint >= HIGH_SURROGATE_START && codePoint <= HIGH_SURROGATE_END;
		}
		/**
		* Checks if `codePoint` is a low-surrogate number from range 0xDC00 to 0xDFFF.
		*
		* @ignore
		* @param {number} codePoint The code point number to be verified
		* @return {boolean} Returns a boolean whether `codePoint` is a low-surrogate number.
		*/
		function isLowSurrogate(codePoint) {
			return codePoint >= LOW_SURROGATE_START && codePoint <= LOW_SURROGATE_END;
		}
		/**
		* Get the astral code point number based on surrogate pair numbers.
		*
		* @ignore
		* @param {number} highSurrogate The high-surrogate code point number.
		* @param {number} lowSurrogate The low-surrogate code point number.
		* @return {number} Returns the astral symbol number.
		*/
		function getAstralNumberFromSurrogatePair(highSurrogate$1, lowSurrogate$1) {
			return (highSurrogate$1 - HIGH_SURROGATE_START) * 1024 + lowSurrogate$1 - LOW_SURROGATE_START + 65536;
		}
		/**
		* Get the number representation of the `value`.
		* Converts the `value` to number.
		* If `value` is `null` or `undefined`, return `defaultValue`.
		*
		* @ignore
		* @function toString
		* @param {*} value             The value to convert.
		* @param {*} [defaultValue=''] The default value to return.
		* @return {number|null}        Returns the number representation of `value`. Returns `defaultValue` if `value` is
		*                              `null` or `undefined`.
		*/
		function coerceToNumber(value) {
			var defaultValue = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
			if (isNil(value)) return defaultValue;
			if (typeof value === "number") return value;
			return Number(value);
		}
		/**
		* If `value` is `NaN`, return `defaultValue`. In other case returns `value`.
		*
		* @ignore
		* @function nanDefault
		* @param {*} value The value to verify.
		* @param {*} defaultValue The default value.
		* @return {*} Returns `defaultValue` if `value` is `NaN`, otherwise `defaultValue`.
		*/
		function nanDefault(value, defaultValue) {
			return value !== value ? defaultValue : value;
		}
		/**
		* Get the Unicode code point value of the character at `position`. <br/>
		* If a valid UTF-16 <a href="https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#24surrogatepairs">
		* surrogate pair</a> starts at `position`, the
		* <a href="https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#astralplanes">astral code point</a>
		* value at `position` is returned.
		*
		* @function codePointAt
		* @static
		* @since 1.0.0
		* @memberOf Chop
		* @param  {string} [subject=''] The string to extract from.
		* @param  {number} position The position to get the code point number.
		* @return {number} Returns a non-negative number less than or equal to `0x10FFFF`.
		* @example
		* v.codePointAt('rain', 1);
		* // => 97, or 0x0061
		*
		* v.codePointAt('\uD83D\uDE00 is smile', 0); // or '😀 is smile'
		* // => 128512, or 0x1F600
		*/
		function codePointAt(subject, position) {
			var subjectString = coerceToString(subject);
			var subjectStringLength = subjectString.length;
			var positionNumber = coerceToNumber(position);
			positionNumber = nanDefault(positionNumber, 0);
			if (positionNumber < 0 || positionNumber >= subjectStringLength) return void 0;
			var firstCodePoint = subjectString.charCodeAt(positionNumber);
			var secondCodePoint;
			if (isHighSurrogate(firstCodePoint) && subjectStringLength > positionNumber + 1) {
				secondCodePoint = subjectString.charCodeAt(positionNumber + 1);
				if (isLowSurrogate(secondCodePoint)) return getAstralNumberFromSurrogatePair(firstCodePoint, secondCodePoint);
			}
			return firstCodePoint;
		}
		/**
		* Extracts the first `length` characters from `subject`.
		*
		* @function first
		* @static
		* @since 1.0.0
		* @memberOf Chop
		* @param  {string} [subject=''] The string to extract from.
		* @param  {int}    [length=1]   The number of characters to extract.
		* @return {string}              Returns the first characters string.
		* @example
		* v.first('helicopter');
		* // => 'h'
		*
		* v.first('vehicle', 2);
		* // => 've'
		*
		* v.first('car', 5);
		* // => 'car'
		*/
		function first$1(subject, length) {
			var subjectString = coerceToString(subject);
			var lengthInt = isNil(length) ? 1 : clipNumber(toInteger$3(length), 0, MAX_SAFE_INTEGER$3);
			if (subjectString.length <= lengthInt) return subjectString;
			return subjectString.substr(0, lengthInt);
		}
		/**
		* Get a grapheme from `subject` at specified `position` taking care of
		* <a href="https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#24surrogatepairs">surrogate pairs</a> and
		* <a href="https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#25combiningmarks">combining marks</a>.
		*
		* @function graphemeAt
		* @static
		* @since 1.0.0
		* @memberOf Chop
		* @param  {string} [subject=''] The string to extract from.
		* @param  {number} position The position to get the grapheme.
		* @return {string} Returns the grapheme at specified position.
		* @example
		* v.graphemeAt('\uD835\uDC00\uD835\uDC01', 0); // or '𝐀𝐁'
		* // => 'A'
		*
		* v.graphemeAt('cafe\u0301', 3); // or 'café'
		* // => 'é'
		*/
		function graphemeAt(subject, position) {
			var subjectString = coerceToString(subject);
			var positionNumber = coerceToNumber(position);
			var graphemeMatch;
			var graphemeMatchIndex = 0;
			positionNumber = nanDefault(positionNumber, 0);
			while ((graphemeMatch = REGEXP_UNICODE_CHARACTER.exec(subjectString)) !== null) {
				if (graphemeMatchIndex === positionNumber) {
					REGEXP_UNICODE_CHARACTER.lastIndex = 0;
					return graphemeMatch[0];
				}
				graphemeMatchIndex++;
			}
			return "";
		}
		/**
		* Extracts the last `length` characters from `subject`.
		*
		* @function last
		* @static
		* @since 1.0.0
		* @memberOf Chop
		* @param  {string} [subject=''] The string to extract from.
		* @param  {int}    [length=1]   The number of characters to extract.
		* @return {string}              Returns the last characters string.
		* @example
		* v.last('helicopter');
		* // => 'r'
		*
		* v.last('vehicle', 2);
		* // => 'le'
		*
		* v.last('car', 5);
		* // => 'car'
		*/
		function last$1(subject, length) {
			var subjectString = coerceToString(subject);
			var lengthInt = isNil(length) ? 1 : clipNumber(toInteger$3(length), 0, MAX_SAFE_INTEGER$3);
			if (subjectString.length <= lengthInt) return subjectString;
			return subjectString.substr(subjectString.length - lengthInt, lengthInt);
		}
		/**
		* Truncates `subject` to a new `length` and does not break the words. Guarantees that the truncated string is no longer
		* than `length`.
		*
		* @static
		* @function prune
		* @since 1.0.0
		* @memberOf Chop
		* @param  {string} [subject=''] The string to prune.
		* @param  {int}    length       The length to prune the string.
		* @param  {string} [end='...']  The string to be added at the end.
		* @return {string}              Returns the pruned string.
		* @example
		* v.prune('Once upon a time', 7);
		* // => 'Once...'
		*
		* v.prune('Good day, Little Red Riding Hood', 16, ' (more)');
		* // => 'Good day (more)'
		*
		* v.prune('Once upon', 10);
		* // => 'Once upon'
		*/
		function prune(subject, length, end) {
			var subjectString = coerceToString(subject);
			var lengthInt = isNil(length) ? subjectString.length : clipNumber(toInteger$3(length), 0, MAX_SAFE_INTEGER$3);
			var endString = coerceToString(end, "...");
			if (lengthInt >= subjectString.length) return subjectString;
			var pattern = REGEXP_EXTENDED_ASCII.test(subjectString) ? REGEXP_LATIN_WORD : REGEXP_WORD;
			var truncatedLength = 0;
			subjectString.replace(pattern, function(word, offset) {
				var wordInsertLength = offset + word.length;
				if (wordInsertLength <= lengthInt - endString.length) truncatedLength = wordInsertLength;
			});
			return subjectString.substr(0, truncatedLength) + endString;
		}
		/**
		* Extracts from `subject` a string from `start` position up to `end` position. The character at `end` position is not
		* included.
		*
		* @function slice
		* @static
		* @since 1.0.0
		* @memberOf Chop
		* @param  {string} [subject='']         The string to extract from.
		* @param  {number} start                The position to start extraction. If negative use `subject.length + start`.
		* @param  {number} [end=subject.length] The position to end extraction. If negative use `subject.length + end`.
		* @return {string}                      Returns the extracted string.
		* @note Uses native `String.prototype.slice()`
		* @example
		* v.slice('miami', 1);
		* // => 'iami'
		*
		* v.slice('florida', -4);
		* // => 'rida'
		*
		* v.slice('florida', 1, 4);
		* // => "lor"
		*/
		function slice$1(subject, start, end) {
			return coerceToString(subject).slice(start, end);
		}
		/**
		* Extracts from `subject` a string from `start` position a number of `length` characters.
		*
		* @function substr
		* @static
		* @since 1.0.0
		* @memberOf Chop
		* @param  {string} [subject='']                 The string to extract from.
		* @param  {number} start                        The position to start extraction.
		* @param  {number} [length=subject.endOfString] The number of characters to extract. If omitted, extract to the end of `subject`.
		* @return {string}                              Returns the extracted string.
		* @note Uses native `String.prototype.substr()`
		* @example
		* v.substr('infinite loop', 9);
		* // => 'loop'
		*
		* v.substr('dreams', 2, 2);
		* // => 'ea'
		*/
		function substr(subject, start, length) {
			return coerceToString(subject).substr(start, length);
		}
		/**
		* Extracts from `subject` a string from `start` position up to `end` position. The character at `end` position is not
		* included.
		*
		* @function substring
		* @static
		* @since 1.0.0
		* @memberOf Chop
		* @param  {string} [subject='']         The string to extract from.
		* @param  {number} start                The position to start extraction.
		* @param  {number} [end=subject.length] The position to end extraction.
		* @return {string}                      Returns the extracted string.
		* @note Uses native `String.prototype.substring()`
		* @example
		* v.substring('beach', 1);
		* // => 'each'
		*
		* v.substring('ocean', 1, 3);
		* // => 'ea'
		*/
		function substring(subject, start, end) {
			return coerceToString(subject).substring(start, end);
		}
		/**
		* Counts the characters in `subject`.<br/>
		*
		* @function count
		* @static
		* @since 1.0.0
		* @memberOf Count
		* @param  {string} [subject=''] The string to count characters.
		* @return {number}              Returns the number of characters in `subject`.
		* @example
		* v.count('rain');
		* // => 4
		*/
		function count(subject) {
			return coerceToString(subject).length;
		}
		/**
		* Counts the graphemes in `subject` taking care of
		* <a href="https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#24surrogatepairs">surrogate pairs</a> and
		* <a href="https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#25combiningmarks">combining marks</a>.
		*
		* @function  countGraphemes
		* @static
		* @since 1.0.0
		* @memberOf Count
		* @param  {string} [subject=''] The string to count graphemes.
		* @return {number}              Returns the number of graphemes in `subject`.
		* @example
		* v.countGraphemes('cafe\u0301'); // or 'café'
		* // => 4
		*
		* v.countGraphemes('\uD835\uDC00\uD835\uDC01'); // or '𝐀𝐁'
		* // => 2
		*
		* v.countGraphemes('rain');
		* // => 4
		*/
		function countGrapheme(subject) {
			return coerceToString(subject).replace(REGEXP_COMBINING_MARKS, "*").replace(REGEXP_SURROGATE_PAIRS, "*").length;
		}
		/**
		* Counts the number of `substring` appearances in `subject`.
		*
		* @function countSubstrings
		* @static
		* @since 1.0.0
		* @memberOf Count
		* @param  {string} [subject=''] The string where to count.
		* @param  {string} substring    The substring to be counted.
		* @return {number}              Returns the number of `substring` appearances.
		* @example
		* v.countSubstrings('bad boys, bad boys whatcha gonna do?', 'boys');
		* // => 2
		*
		* v.countSubstrings('every dog has its day', 'cat');
		* // => 0
		*/
		function countSubstrings(subject, substring$1) {
			var subjectString = coerceToString(subject);
			var substringString = coerceToString(substring$1);
			var substringLength = substringString.length;
			var count$1 = 0;
			var matchIndex = 0;
			if (subjectString === "" || substringString === "") return count$1;
			do {
				matchIndex = subjectString.indexOf(substringString, matchIndex);
				if (matchIndex !== -1) {
					count$1++;
					matchIndex += substringLength;
				}
			} while (matchIndex !== -1);
			return count$1;
		}
		var reduce = Array.prototype.reduce;
		/**
		* Counts the characters in `subject` for which `predicate` returns truthy.
		*
		* @function  countWhere
		* @static
		* @since 1.0.0
		* @memberOf Count
		* @param  {string}   [subject=''] The string to count characters.
		* @param  {Function} predicate    The predicate function invoked on each character with parameters `(character, index, string)`.
		* @param  {Object}   [context]    The context to invoke the `predicate`.
		* @return {number}                Returns the number of characters for which `predicate` returns truthy.
		* @example
		* v.countWhere('hola!', v.isAlpha);
		* // => 4
		*
		* v.countWhere('2022', function(character, index, str) {
		*   return character === '2';
		* });
		* // => 3
		*/
		function countWhere(subject, predicate, context) {
			var subjectString = coerceToString(subject);
			if (subjectString === "" || typeof predicate !== "function") return 0;
			var predicateWithContext = predicate.bind(context);
			return reduce.call(subjectString, function(countTruthy, character, index) {
				return predicateWithContext(character, index, subjectString) ? countTruthy + 1 : countTruthy;
			}, 0);
		}
		/**
		* Counts the number of words in `subject`.
		*
		* @function countWords
		* @static
		* @since 1.0.0
		* @memberOf Count
		* @param {string} [subject=''] The string to split into words.
		* @param {string|RegExp} [pattern] The pattern to watch words. If `pattern` is not RegExp, it is transformed to `new RegExp(pattern, flags)`.
		* @param {string} [flags=''] The regular expression flags. Applies when `pattern` is string type.
		* @return {number} Returns the number of words.
		* @example
		* v.countWords('gravity can cross dimensions');
		* // => 4
		*
		* v.countWords('GravityCanCrossDimensions');
		* // => 4
		*
		* v.countWords('Gravity - can cross dimensions!');
		* // => 4
		*
		* v.words('Earth gravity', /[^\s]+/g);
		* // => 2
		*/
		function countWords(subject, pattern, flags) {
			return words(subject, pattern, flags).length;
		}
		/**
		* The current index.
		*
		* @ignore
		* @name ReplacementIndex#index
		* @type {number}
		* @return {ReplacementIndex} ReplacementIndex instance.
		*/
		function ReplacementIndex() {
			this.index = 0;
		}
		/**
		* Increment the current index.
		*
		* @ignore
		* @return {undefined}
		*/
		ReplacementIndex.prototype.increment = function() {
			this.index++;
		};
		/**
		* Increment the current index by position.
		*
		* @ignore
		* @param {number} [position] The replacement position.
		* @return {undefined}
		*/
		ReplacementIndex.prototype.incrementOnEmptyPosition = function(position) {
			if (isNil(position)) this.increment();
		};
		/**
		* Get the replacement index by position.
		*
		* @ignore
		* @param {number} [position] The replacement position.
		* @return {number} The replacement index.
		*/
		ReplacementIndex.prototype.getIndexByPosition = function(position) {
			return isNil(position) ? this.index : position - 1;
		};
		var TYPE_INTEGER = "i";
		var TYPE_INTEGER_BINARY = "b";
		var TYPE_INTEGER_ASCII_CHARACTER = "c";
		var TYPE_INTEGER_DECIMAL = "d";
		var TYPE_INTEGER_OCTAL = "o";
		var TYPE_INTEGER_UNSIGNED_DECIMAL = "u";
		var TYPE_INTEGER_HEXADECIMAL = "x";
		var TYPE_INTEGER_HEXADECIMAL_UPPERCASE = "X";
		var TYPE_FLOAT_SCIENTIFIC = "e";
		var TYPE_FLOAT_SCIENTIFIC_UPPERCASE = "E";
		var TYPE_FLOAT = "f";
		var TYPE_FLOAT_SHORT = "g";
		var TYPE_FLOAT_SHORT_UPPERCASE = "G";
		var TYPE_STRING = "s";
		var LITERAL_SINGLE_QUOTE = "'";
		var LITERAL_PLUS = "+";
		var LITERAL_MINUS = "-";
		var LITERAL_PERCENT_SPECIFIER = "%%";
		var RADIX_BINARY = 2;
		var RADIX_OCTAL = 8;
		var RADIX_HEXADECIMAL = 16;
		/**
		* Repeats the `subject` number of `times`.
		*
		* @function repeat
		* @static
		* @since 1.0.0
		* @memberOf Manipulate
		* @param {string} [subject=''] The string to repeat.
		* @param {number} [times=1] The number of times to repeat.
		* @return {string} Returns the repeated string.
		* @example
		* v.repeat('w', 3);
		* // => 'www'
		*
		* v.repeat('world', 0);
		* // => ''
		*/
		function repeat(subject, times) {
			var subjectString = coerceToString(subject);
			var timesInt = isNil(times) ? 1 : clipNumber(toInteger$3(times), 0, MAX_SAFE_INTEGER$3);
			var repeatString = "";
			while (timesInt) {
				if (timesInt & 1) repeatString += subjectString;
				if (timesInt > 1) subjectString += subjectString;
				timesInt >>= 1;
			}
			return repeatString;
		}
		/**
		* Creates the padding string.
		*
		* @ignore
		* @param {string} padCharacters The characters to create padding string.
		* @param {number} length The padding string length.
		* @return {string} The padding string.
		*/
		function buildPadding(padCharacters, length) {
			var padStringRepeat = toInteger$3(length / padCharacters.length);
			var padStringRest = length % padCharacters.length;
			return repeat(padCharacters, padStringRepeat + padStringRest).substr(0, length);
		}
		/**
		* Pads `subject` from left to a new `length`.
		*
		* @function padLeft
		* @static
		* @since 1.0.0
		* @memberOf Manipulate
		* @param {string} [subject=''] The string to pad.
		* @param {int} [length=0] The length to left pad the string. No changes are made if `length` is less than `subject.length`.
		* @param {string} [pad=' '] The string to be used for padding.
		* @return {string} Returns the left padded string.
		* @example
		* v.padLeft('dog', 5);
		* // => '  dog'
		*
		* v.padLeft('bird', 6, '-');
		* // => '--bird'
		*
		* v.padLeft('cat', 6, '-=');
		* // => '-=-cat'
		*/
		function padLeft(subject, length, pad$1) {
			var subjectString = coerceToString(subject);
			var lengthInt = isNil(length) ? 0 : clipNumber(toInteger$3(length), 0, MAX_SAFE_INTEGER$3);
			var padString = coerceToString(pad$1, " ");
			if (lengthInt <= subjectString.length) return subjectString;
			return buildPadding(padString, lengthInt - subjectString.length) + subjectString;
		}
		/**
		* Pads `subject` from right to a new `length`.
		*
		* @function padRight
		* @static
		* @since 1.0.0
		* @memberOf Manipulate
		* @param {string} [subject=''] The string to pad.
		* @param {int} [length=0] The length to right pad the string. No changes are made if `length` is less than `subject.length`.
		* @param {string} [pad=' '] The string to be used for padding.
		* @return {string} Returns the right padded string.
		* @example
		* v.padRight('dog', 5);
		* // => 'dog  '
		*
		* v.padRight('bird', 6, '-');
		* // => 'bird--'
		*
		* v.padRight('cat', 6, '-=');
		* // => 'cat-=-'
		*/
		function padRight(subject, length, pad$1) {
			var subjectString = coerceToString(subject);
			var lengthInt = isNil(length) ? 0 : clipNumber(toInteger$3(length), 0, MAX_SAFE_INTEGER$3);
			var padString = coerceToString(pad$1, " ");
			if (lengthInt <= subjectString.length) return subjectString;
			return subjectString + buildPadding(padString, lengthInt - subjectString.length);
		}
		/**
		* Aligns and pads `subject` string.
		*
		* @ignore
		* @param {string} subject The subject string.
		* @param {ConversionSpecification} conversion The conversion specification object.
		* @return {string} Returns the aligned and padded string.
		*/
		function alignAndPad(subject, conversion) {
			var width = conversion.width;
			if (isNil(width) || subject.length >= width) return subject;
			var padType = conversion.alignmentSpecifier === LITERAL_MINUS ? padRight : padLeft;
			return padType(subject, width, conversion.getPaddingCharacter());
		}
		/**
		* Add sign to the formatted number.
		*
		* @ignore
		* @name addSignToFormattedNumber
		* @param  {number} replacementNumber The number to be replaced.
		* @param  {string} formattedReplacement The formatted version of number.
		* @param  {ConversionSpecification} conversion The conversion specification object.
		* @return {string} Returns the formatted number string with a sign.
		*/
		function addSignToFormattedNumber(replacementNumber, formattedReplacement, conversion) {
			if (conversion.signSpecifier === LITERAL_PLUS && replacementNumber >= 0) formattedReplacement = LITERAL_PLUS + formattedReplacement;
			return formattedReplacement;
		}
		/**
		* Formats a float type according to specifiers.
		*
		* @ignore
		* @param  {string} replacement The string to be formatted.
		* @param  {ConversionSpecification} conversion The conversion specification object.
		* @return {string} Returns the formatted string.
		*/
		function float(replacement, conversion) {
			var replacementNumber = parseFloat(replacement);
			var formattedReplacement;
			if (isNaN(replacementNumber)) replacementNumber = 0;
			var precision = coerceToNumber(conversion.precision, 6);
			switch (conversion.typeSpecifier) {
				case TYPE_FLOAT:
					formattedReplacement = replacementNumber.toFixed(precision);
					break;
				case TYPE_FLOAT_SCIENTIFIC:
					formattedReplacement = replacementNumber.toExponential(precision);
					break;
				case TYPE_FLOAT_SCIENTIFIC_UPPERCASE:
					formattedReplacement = replacementNumber.toExponential(precision).toUpperCase();
					break;
				case TYPE_FLOAT_SHORT:
				case TYPE_FLOAT_SHORT_UPPERCASE:
					formattedReplacement = formatFloatAsShort(replacementNumber, precision, conversion);
					break;
			}
			formattedReplacement = addSignToFormattedNumber(replacementNumber, formattedReplacement, conversion);
			return coerceToString(formattedReplacement);
		}
		/**
		* Formats the short float.
		*
		* @ignore
		* @param  {number} replacementNumber The number to format.
		* @param  {number} precision The precision to format the float.
		* @param  {ConversionSpecification} conversion The conversion specification object.
		* @return {string}  Returns the formatted short float.
		*/
		function formatFloatAsShort(replacementNumber, precision, conversion) {
			if (replacementNumber === 0) return "0";
			var nonZeroPrecision = precision === 0 ? 1 : precision;
			var formattedReplacement = replacementNumber.toPrecision(nonZeroPrecision).replace(REGEXP_TRAILING_ZEROS, "");
			if (conversion.typeSpecifier === TYPE_FLOAT_SHORT_UPPERCASE) formattedReplacement = formattedReplacement.toUpperCase();
			return formattedReplacement;
		}
		/**
		* Formats an integer type according to specifiers.
		*
		* @ignore
		* @param  {string} replacement The string to be formatted.
		* @param  {ConversionSpecification} conversion The conversion specification object.
		* @return {string} Returns the formatted string.
		*/
		function integerBase(replacement, conversion) {
			var integer = parseInt(replacement);
			if (isNaN(integer)) integer = 0;
			integer = integer >>> 0;
			switch (conversion.typeSpecifier) {
				case TYPE_INTEGER_ASCII_CHARACTER:
					integer = String.fromCharCode(integer);
					break;
				case TYPE_INTEGER_BINARY:
					integer = integer.toString(RADIX_BINARY);
					break;
				case TYPE_INTEGER_OCTAL:
					integer = integer.toString(RADIX_OCTAL);
					break;
				case TYPE_INTEGER_HEXADECIMAL:
					integer = integer.toString(RADIX_HEXADECIMAL);
					break;
				case TYPE_INTEGER_HEXADECIMAL_UPPERCASE:
					integer = integer.toString(RADIX_HEXADECIMAL).toUpperCase();
					break;
			}
			return coerceToString(integer);
		}
		/**
		* Formats a decimal integer type according to specifiers.
		*
		* @ignore
		* @param  {string} replacement The string to be formatted.
		* @param  {ConversionSpecification} conversion The conversion specification object.
		* @return {string} Returns the formatted string.
		*/
		function integerDecimal(replacement, conversion) {
			var integer = parseInt(replacement);
			if (isNaN(integer)) integer = 0;
			return addSignToFormattedNumber(integer, toString$4(integer), conversion);
		}
		/**
		* Formats a string type according to specifiers.
		*
		* @ignore
		* @param {string} replacement The string to be formatted.
		* @param {ConversionSpecification} conversion The conversion specification object.
		* @return {string} Returns the formatted string.
		*/
		function stringFormat(replacement, conversion) {
			var formattedReplacement = replacement;
			var precision = conversion.precision;
			if (!isNil(precision) && formattedReplacement.length > precision) formattedReplacement = truncate(formattedReplacement, precision, "");
			return formattedReplacement;
		}
		/**
		* Returns the computed string based on format specifiers.
		*
		* @ignore
		* @name computeReplacement
		* @param {string} replacement The replacement value.
		* @param {ConversionSpecification} conversion The conversion specification object.
		* @return {string} Returns the computed string.
		*/
		function compute(replacement, conversion) {
			var formatFunction;
			switch (conversion.typeSpecifier) {
				case TYPE_STRING:
					formatFunction = stringFormat;
					break;
				case TYPE_INTEGER_DECIMAL:
				case TYPE_INTEGER:
					formatFunction = integerDecimal;
					break;
				case TYPE_INTEGER_ASCII_CHARACTER:
				case TYPE_INTEGER_BINARY:
				case TYPE_INTEGER_OCTAL:
				case TYPE_INTEGER_HEXADECIMAL:
				case TYPE_INTEGER_HEXADECIMAL_UPPERCASE:
				case TYPE_INTEGER_UNSIGNED_DECIMAL:
					formatFunction = integerBase;
					break;
				case TYPE_FLOAT:
				case TYPE_FLOAT_SCIENTIFIC:
				case TYPE_FLOAT_SCIENTIFIC_UPPERCASE:
				case TYPE_FLOAT_SHORT:
				case TYPE_FLOAT_SHORT_UPPERCASE:
					formatFunction = float;
					break;
			}
			var formattedString = formatFunction(replacement, conversion);
			return alignAndPad(formattedString, conversion);
		}
		/**
		* Construct the new conversion specification object.
		*
		* @ignore
		* @param {Object} properties An object with properties to initialize.
		* @return {ConversionSpecification} ConversionSpecification instance.
		*/
		function ConversionSpecification(properties) {
			/**
			* The percent characters from conversion specification.
			*
			* @ignore
			* @name ConversionSpecification#percent
			* @type {string}
			*/
			this.percent = properties.percent;
			/**
			*  The sign specifier to force a sign to be used on a number.
			*
			* @ignore
			* @name ConversionSpecification#signSpecifier
			* @type {string}
			*/
			this.signSpecifier = properties.signSpecifier;
			/**
			* The padding specifier that says what padding character will be used.
			*
			* @ignore
			* @name ConversionSpecification#paddingSpecifier
			* @type {string}
			*/
			this.paddingSpecifier = properties.paddingSpecifier;
			/**
			* The alignment specifier that says if the result should be left-justified or right-justified.
			*
			* @ignore
			* @name ConversionSpecification#alignmentSpecifier
			* @type {string}
			*/
			this.alignmentSpecifier = properties.alignmentSpecifier;
			/**
			* The width specifier how many characters this conversion should result in.
			*
			* @ignore
			* @name ConversionSpecification#width
			* @type {number}
			*/
			this.width = properties.width;
			/**
			* The precision specifier says how many decimal digits should be displayed for floating-point numbers.
			*
			* @ignore
			* @name ConversionSpecification#precision
			* @type {number}
			*/
			this.precision = properties.precision;
			/**
			* The type specifier says what type the argument data should be treated as.
			*
			* @ignore
			* @name ConversionSpecification#typeSpecifier
			* @type {string}
			*/
			this.typeSpecifier = properties.typeSpecifier;
		}
		/**
		* Check if the conversion specification is a percent literal "%%".
		*
		* @ignore
		* @return {boolean} Returns true if the conversion is a percent literal, false otherwise.
		*/
		ConversionSpecification.prototype.isPercentLiteral = function() {
			return LITERAL_PERCENT_SPECIFIER === this.percent;
		};
		/**
		* Get the padding character from padding specifier.
		*
		* @ignore
		* @returns {string} Returns the padding character.
		*/
		ConversionSpecification.prototype.getPaddingCharacter = function() {
			var paddingCharacter = nilDefault(this.paddingSpecifier, " ");
			if (paddingCharacter.length === 2 && paddingCharacter[0] === LITERAL_SINGLE_QUOTE) paddingCharacter = paddingCharacter[1];
			return paddingCharacter;
		};
		/**
		* Validates the specifier type and replacement position.
		*
		* @ignore
		* @throws {Error} Throws an exception on insufficient arguments or unknown specifier.
		* @param  {number} index The index of the matched specifier.
		* @param  {number} replacementsLength The number of replacements.
		* @param  {ConversionSpecification} conversion The conversion specification object.
		* @return {undefined}
		*/
		function validate$1(index, replacementsLength, conversion) {
			if (isNil(conversion.typeSpecifier)) throw new Error("sprintf(): Unknown type specifier");
			if (index > replacementsLength - 1) throw new Error("sprintf(): Too few arguments");
			if (index < 0) throw new Error("sprintf(): Argument number must be greater than zero");
		}
		/**
		* Return the replacement for regular expression match of the conversion specification.
		*
		* @ignore
		* @name matchReplacement
		* @param {ReplacementIndex} replacementIndex The replacement index object.
		* @param {string[]} replacements The array of replacements.
		* @param {string} conversionSpecification The conversion specification.
		* @param {string} percent The percent characters from conversion specification.
		* @param {string} position The position to insert the replacement.
		* @param {string} signSpecifier The sign specifier to force a sign to be used on a number.
		* @param {string} paddingSpecifier The padding specifier that says what padding character will be used.
		* @param {string} alignmentSpecifier The alignment specifier that says if the result should be left-justified or right-justified.
		* @param {string} widthSpecifier The width specifier how many characters this conversion should result in.
		* @param {string} precisionSpecifier The precision specifier says how many decimal digits should be displayed for floating-point numbers.
		* @param {string} typeSpecifier The type specifier says what type the argument data should be treated as.
		* @return {string} Returns the computed replacement.
		*/
		function match(replacementIndex, replacements, conversionSpecification, percent, position, signSpecifier, paddingSpecifier, alignmentSpecifier, widthSpecifier, precisionSpecifier, typeSpecifier) {
			var conversion = new ConversionSpecification({
				percent,
				signSpecifier,
				paddingSpecifier,
				alignmentSpecifier,
				width: coerceToNumber(widthSpecifier, null),
				precision: coerceToNumber(precisionSpecifier, null),
				typeSpecifier
			});
			if (conversion.isPercentLiteral()) return conversionSpecification.slice(1);
			var actualReplacementIndex = replacementIndex.getIndexByPosition(position);
			replacementIndex.incrementOnEmptyPosition(position);
			validate$1(actualReplacementIndex, replacements.length, conversion);
			return compute(replacements[actualReplacementIndex], conversion);
		}
		/**
		* Produces a string according to `format`.
		*
		* <div id="sprintf-format" class="smaller">
		* `format` string is composed of zero or more directives: ordinary characters (not <code>%</code>), which are  copied  unchanged
		* to  the  output string and <i>conversion specifications</i>, each of which results in fetching zero or more subsequent
		* arguments. <br/> <br/>
		*
		* Each <b>conversion specification</b> is introduced by the character <code>%</code>, and ends with a <b>conversion
		* specifier</b>. In between there may be (in this order) zero or more <b>flags</b>, an optional <b>minimum field width</b>
		* and an optional <b>precision</b>.<br/>
		* The syntax is: <b>ConversionSpecification</b> = <b>"%"</b> { <b>Flags</b> }
		* [ <b>MinimumFieldWidth</b> ] [ <b>Precision</b> ] <b>ConversionSpecifier</b>, where curly braces { } denote repetition
		* and square brackets [ ] optionality. <br/><br/>
		*
		* By default, the arguments are used in the given order.<br/>
		* For argument numbering and swapping, `%m$` (where `m` is a number indicating the argument order)
		* is used instead of `%` to specify explicitly which argument is taken. For instance `%1$s` fetches the 1st argument,
		* `%2$s` the 2nd and so on, no matter what position  the conversion specification has in `format`.
		* <br/><br/>
		*
		* <b>The flags</b><br/>
		* The character <code>%</code> is followed by zero or more of the following flags:<br/>
		* <table class="light-params">
		*   <tr>
		*     <td><code>+</code></td>
		*     <td>
		*       A  sign (<code>+</code> or <code>-</code>) should always be placed before a number produced by a
		*       signed conversion. By default a sign is used only for negative numbers.
		*     </td>
		*   </tr>
		*   <tr>
		*     <td><code>0</code></td>
		*     <td>The value should be zero padded.</td>
		*   </tr>
		*   <tr>
		*     <td><code>&blank;</code></td>
		*     <td>(a space) The value should be space padded.</td>
		*   </tr>
		*   <tr>
		*    <td><code>'</code></td>
		*    <td>Indicates alternate padding character, specified by prefixing it with a single quote <code>'</code>.</td>
		*   </tr>
		*   <tr>
		*     <td><code>-</code></td>
		*     <td>The converted value is to be left adjusted on the field boundary (the default is right justification).</td>
		*   </tr>
		* </table>
		*
		* <b>The minimum field width</b><br/>
		* An  optional decimal digit string (with nonzero first digit) specifying a minimum field width.  If the converted
		* value has fewer characters than the field width, it will be padded with spaces on the left (or right, if the
		* left-adjustment flag has been given).<br/><br/>
		*
		* <b>The precision</b><br/>
		* An optional precision, in the form of a period `.` followed by an optional decimal digit string.<br/>
		* This gives the number of digits to appear after the radix character for `e`, `E`, `f` and `F` conversions, the
		* maximum number of significant digits for `g` and `G` conversions or the maximum number of characters to be printed
		* from a string for `s` conversion.<br/><br/>
		*
		* <b>The conversion specifier</b><br/>
		* A specifier that mentions what type the argument should be treated as:
		*
		* <table class="light-params">
		*   <tr>
		*     <td>`s`</td>
		*     <td>The string argument is treated as and presented as a string.</td>
		*   </tr>
		*   <tr>
		*     <td>`d` `i`</td>
		*     <td>The integer argument is converted to signed decimal notation.</td>
		*   </tr>
		*   <tr>
		*     <td>`b`</td>
		*     <td>The unsigned integer argument is converted to unsigned binary.</td>
		*   </tr>
		*   <tr>
		*     <td>`c`</td>
		*     <td>The unsigned integer argument is converted to an ASCII character with that number.</td>
		*   </tr>
		*   <tr>
		*     <td>`o`</td>
		*     <td>The unsigned integer argument is converted to unsigned octal.</td>
		*   </tr>
		*   <tr>
		*     <td>`u`</td>
		*     <td>The unsigned integer argument is converted to unsigned decimal.</td>
		*   </tr>
		*   <tr>
		*     <td>`x` `X`</td>
		*     <td>The unsigned integer argument is converted to unsigned hexadecimal. The letters `abcdef` are used for `x`
		*     conversions; the letters `ABCDEF` are used for `X` conversions.</td>
		*   </tr>
		*   <tr>
		*     <td>`f`</td>
		*     <td>
		*      The float argument is rounded and converted to decimal notation in the style `[-]ddd.ddd`, where the number of
		*      digits after the decimal-point character is equal to the precision specification. If the precision is missing,
		*      it is taken as 6; if the precision is explicitly zero, no decimal-point character appears.
		*      If a decimal point appears, at least one digit appears before it.
		*     </td>
		*   </tr>
		*   <tr>
		*     <td>`e` `E`</td>
		*     <td>
		*       The float argument is rounded and converted in the style `[-]d.ddde±dd`, where there is one digit
		*       before the decimal-point character and the number of digits after it is equal to the precision. If
		*       the precision is missing, it is taken as `6`; if the precision is zero, no decimal-point character
		*       appears. An `E` conversion uses the letter `E` (rather than `e`) to introduce the exponent.
		*     </td>
		*   </tr>
		*   <tr>
		*     <td>`g` `G`</td>
		*     <td>
		*       The float argument is converted in style `f` or `e` (or `F` or `E` for `G` conversions). The precision specifies
		*       the number of significant digits. If the precision is missing, `6` digits are given; if the
		*       precision is zero, it is treated as `1`. Style `e` is used if the exponent from its conversion is less
		*       than `-6` or greater than or equal to the precision. Trailing zeros are removed from the fractional
		*       part of the result; a decimal point appears only if it is followed by at least one digit.
		*     </td>
		*   </tr>
		*   <tr>
		*     <td>`%`</td>
		*     <td>A literal `%` is written. No argument is converted. The complete conversion specification is `%%`.</td>
		*   </tr>
		*
		* </table>
		* </div>
		*
		* @function sprintf
		* @static
		* @since 1.0.0
		* @memberOf Format
		* @param  {string} [format=''] The format string.
		* @param  {...*}               replacements The replacements to produce the string.
		* @return {string}             Returns the produced string.
		* @example
		* v.sprintf('%s, %s!', 'Hello', 'World');
		* // => 'Hello World!'
		*
		* v.sprintf('%s costs $%d', 'coffee', 2);
		* // => 'coffee costs $2'
		*
		* v.sprintf('%1$s %2$s %1$s %2$s, watcha gonna %3$s', 'bad', 'boys', 'do')
		* // => 'bad boys bad boys, watcha gonna do'
		*
		* v.sprintf('% 6s', 'bird');
		* // => '  bird'
		*
		* v.sprintf('% -6s', 'crab');
		* // => 'crab  '
		*
		* v.sprintf("%'*5s", 'cat');
		* // => '**cat'
		*
		* v.sprintf("%'*-6s", 'duck');
		* // => 'duck**'
		*
		* v.sprintf('%d %i %+d', 15, -2, 25);
		* // => '15 -2 +25'
		*
		* v.sprintf("%06d", 15);
		* // => '000015'
		*
		* v.sprintf('0b%b 0o%o 0x%X', 12, 9, 155);
		* // => '0b1100 0o11 0x9B'
		*
		* v.sprintf('%.2f', 10.469);
		* // => '10.47'
		*
		* v.sprintf('%.2e %g', 100.5, 0.455);
		* // => '1.01e+2 0.455'
		*
		*/
		function sprintf$1(format$14) {
			var formatString = coerceToString(format$14);
			if (formatString === "") return formatString;
			for (var _len = arguments.length, replacements = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) replacements[_key - 1] = arguments[_key];
			var boundReplacementMatch = match.bind(void 0, new ReplacementIndex(), replacements);
			return formatString.replace(REGEXP_CONVERSION_SPECIFICATION, boundReplacementMatch);
		}
		/**
		* Produces a string according to `format`. Works exactly like <a href="#sprintf"><code>sprintf()</code></a>,
		* with the only difference that accepts the formatting arguments in an array `values`.<br/>
		* See <a href="#sprintf-format">here</a> `format` string specifications.
		*
		* @function vprintf
		* @static
		* @since 1.0.0
		* @memberOf Format
		* @param  {string} format='']  The format string.
		* @param  {Array} replacements The array of replacements to produce the string.
		* @return {string}             Returns the produced string.
		* @example
		* v.vprintf('%s', ['Welcome'])
		* // => 'Welcome'
		*
		* v.vprintf('%s has %d apples', ['Alexandra', 3]);
		* // => 'Alexandra has 3 apples'
		*/
		function vprintf(format$14, replacements) {
			return sprintf$1.apply(void 0, [format$14].concat(_toConsumableArray(nilDefault(replacements, []))));
		}
		var escapeCharactersMap = {
			"<": "&lt;",
			">": "&gt;",
			"&": "&amp;",
			"\"": "&quot;",
			"'": "&#x27;",
			"`": "&#x60;"
		};
		/**
		* Return the escaped version of `character`.
		*
		* @ignore
		* @param  {string} character The character to be escape.
		* @return {string}           The escaped version of character.
		*/
		function replaceSpecialCharacter(character) {
			return escapeCharactersMap[character];
		}
		/**
		* Escapes HTML special characters  <code>< > & ' " `</code> in <code>subject</code>.
		*
		* @function escapeHtml
		* @static
		* @since 1.0.0
		* @memberOf Escape
		* @param {string} [subject=''] The string to escape.
		* @return {string} Returns the escaped string.
		* @example
		* v.escapeHtml('<p>wonderful world</p>');
		* // => '&lt;p&gt;wonderful world&lt;/p&gt;'
		*/
		function escapeHtml(subject) {
			return coerceToString(subject).replace(REGEXP_HTML_SPECIAL_CHARACTERS, replaceSpecialCharacter);
		}
		/**
		* Escapes the regular expression special characters `- [ ] / { } ( ) * + ? . \ ^ $ |` in `subject`.
		*
		* @function escapeRegExp
		* @static
		* @since 1.0.0
		* @memberOf Escape
		* @param {string} [subject=''] The string to escape.
		* @return {string} Returns the escaped string.
		* @example
		* v.escapeRegExp('(hours)[minutes]{seconds}');
		* // => '\(hours\)\[minutes\]\{seconds\}'
		*/
		function escapeRegExp(subject) {
			return coerceToString(subject).replace(REGEXP_SPECIAL_CHARACTERS, "\\$&");
		}
		var unescapeCharactersMap = {
			"<": /(&lt;)|(&#x0*3c;)|(&#0*60;)/gi,
			">": /(&gt;)|(&#x0*3e;)|(&#0*62;)/gi,
			"&": /(&amp;)|(&#x0*26;)|(&#0*38;)/gi,
			"\"": /(&quot;)|(&#x0*22;)|(&#0*34;)/gi,
			"'": /(&#x0*27;)|(&#0*39;)/gi,
			"`": /(&#x0*60;)|(&#0*96;)/gi
		};
		var characters = Object.keys(unescapeCharactersMap);
		/**
		* Replaces the HTML entities with corresponding characters.
		*
		* @ignore
		* @param  {string} string The accumulator string.
		* @param  {string} key    The character.
		* @return {string}        The string with replaced HTML entity
		*/
		function reduceUnescapedString(string, key$1) {
			return string.replace(unescapeCharactersMap[key$1], key$1);
		}
		/**
		* Unescapes HTML special characters from <code>&amp;lt; &amp;gt; &amp;amp; &amp;quot; &amp;#x27; &amp;#x60;</code>
		* to corresponding <code>< > & ' " `</code> in <code>subject</code>.
		*
		* @function unescapeHtml
		* @static
		* @since 1.0.0
		* @memberOf Escape
		* @param  {string} [subject=''] The string to unescape.
		* @return {string}              Returns the unescaped string.
		* @example
		* v.unescapeHtml('&lt;p&gt;wonderful world&lt;/p&gt;');
		* // => '<p>wonderful world</p>'
		*/
		function unescapeHtml(subject) {
			var subjectString = coerceToString(subject);
			return characters.reduce(reduceUnescapedString, subjectString);
		}
		/**
		* Returns the first occurrence index of `search` in `subject`.
		*
		* @function indexOf
		* @static
		* @since 1.0.0
		* @memberOf Index
		* @param {string} [subject=''] The string where to search.
		* @param {string} search The string to search.
		* @param {number} [fromIndex=0] The index to start searching.
		* @return {number} Returns the first occurrence index or `-1` if not found.
		* @example
		* v.indexOf('morning', 'n');
		* // => 3
		*
		* v.indexOf('evening', 'o');
		* // => -1
		*/
		function indexOf$1(subject, search$1, fromIndex) {
			var subjectString = coerceToString(subject);
			return subjectString.indexOf(search$1, fromIndex);
		}
		/**
		* Returns the last occurrence index of `search` in `subject`.
		*
		* @function lastIndexOf
		* @static
		* @since 1.0.0
		* @memberOf Index
		* @param {string} [subject=''] The string where to search.
		* @param {string} search The string to search.
		* @param {number} [fromIndex=subject.length - 1] The index to start searching backward in the string.
		* @return {number} Returns the last occurrence index or `-1` if not found.
		* @example
		* v.lastIndexOf('morning', 'n');
		* // => 5
		*
		* v.lastIndexOf('evening', 'o');
		* // => -1
		*/
		function lastIndexOf(subject, search$1, fromIndex) {
			var subjectString = coerceToString(subject);
			return subjectString.lastIndexOf(search$1, fromIndex);
		}
		/**
		* Returns the first index of a `pattern` match in `subject`.
		*
		* @function search
		* @static
		* @since 1.0.0
		* @memberOf Index
		* @param {string} [subject=''] The string where to search.
		* @param {string|RegExp} pattern The pattern to match. If `pattern` is not RegExp, it is transformed to `new RegExp(pattern)`.
		* @param {number} [fromIndex=0] The index to start searching.
		* @return {number} Returns the first match index or `-1` if not found.
		* @example
		* v.search('morning', /rn/);
		* // => 2
		*
		* v.search('evening', '/\d/');
		* // => -1
		*/
		function search(subject, pattern, fromIndex) {
			var subjectString = coerceToString(subject);
			var fromIndexNumber = isNil(fromIndex) ? 0 : clipNumber(toInteger$3(fromIndex), 0, subjectString.length);
			var matchIndex = subjectString.substr(fromIndexNumber).search(pattern);
			if (matchIndex !== -1 && !isNaN(fromIndexNumber)) matchIndex += fromIndexNumber;
			return matchIndex;
		}
		/**
		* Inserts into `subject` a string `toInsert` at specified `position`.
		*
		* @function insert
		* @static
		* @since 1.0.0
		* @memberOf Manipulate
		* @param {string} [subject=''] The string where to insert.
		* @param {string} [toInsert=''] The string to be inserted.
		* @param {number} [position=0] The position to insert.
		* @return {string} Returns the string after insertion.
		* @example
		* v.insert('ct', 'a', 1);
		* // => 'cat'
		*
		* v.insert('sunny', ' day', 5);
		* // => 'sunny day'
		*/
		function insert(subject, toInsert, position) {
			var subjectString = coerceToString(subject);
			var toInsertString = coerceToString(toInsert);
			var positionNumber = coerceToNumber(position);
			if (positionNumber < 0 || positionNumber > subjectString.length || toInsertString === "") return subjectString;
			return subjectString.slice(0, positionNumber) + toInsertString + subjectString.slice(positionNumber);
		}
		/**
		* Generated diacritics map. See bellow the base code.
		* @ignore
		* @type Object
		*/
		var diacritics = {
			"3": "Ξξ",
			"8": "Θθ",
			A: "AÀÁÂÃÄÅĀĂĄǍǞǠǺȀȂȦȺΆΑА",
			B: "BƁƂɃΒБ",
			C: "CÇĆĈĊČƇȻЦ",
			D: "DĎĐƉƊƋÐΔД",
			E: "EÈÉÊËĒĔĖĘĚƎƐȄȆȨΈΕЕЭ",
			F: "FƑΦФ",
			G: "GĜĞĠĢƓǤǦǴΓГҐ",
			H: "HĤĦȞΉΗХ",
			I: "IÌÍÎÏĨĪĬĮİƗǏȈȊΊΙΪІИ",
			J: "JĴɈЙ",
			K: "KĶƘǨΚК",
			L: "LĹĻĽĿŁȽΛЛ",
			M: "MƜΜМ",
			N: "NÑŃŅŇƝǸȠΝН",
			O: "OÒÓÔÕÖØŌŎŐƆƟƠǑǪǬǾȌȎȪȬȮȰΌΟО",
			P: "PƤΠП",
			Q: "QɊ",
			R: "RŔŖŘȐȒɌΡР",
			S: "SŚŜŞŠȘΣС",
			T: "TŢŤŦƬƮȚȾΤТ",
			U: "UÙÚÛÜŨŪŬŮŰŲƯǓǕǗǙǛȔȖɄУЪ",
			V: "VƲɅВ",
			W: "WŴΏΩ",
			X: "XΧ",
			Y: "YÝŶŸƳȲɎΎΥΫЫ",
			Z: "ZŹŻŽƵȤΖЗ",
			a: "aàáâãäåāăąǎǟǡǻȁȃȧɐάαа",
			b: "bƀƃɓβб",
			c: "cçćĉċčƈȼц",
			d: "dďđƌɖɗðδд",
			e: "eèéêëēĕėęěǝȅȇȩɇɛέεеэ",
			f: "fƒφф",
			g: "gĝğġģǥǧǵɠγгґ",
			h: "hĥħȟɥήηх",
			i: "iìíîïĩīĭįıǐȉȋɨΐίιϊиі",
			j: "jĵǰɉй",
			k: "kķƙǩκк",
			l: "lĺļľŀłſƚɫλл",
			m: "mɯɱμм",
			n: "nñńņňŉƞǹɲνн",
			o: "oòóôõöøōŏőơǒǫǭǿȍȏȫȭȯȱɔɵοόо",
			p: "pƥπп",
			q: "qɋ",
			r: "rŕŗřȑȓɍɽρр",
			s: "sßśŝşšșȿςσс",
			t: "tţťŧƭțʈτт",
			u: "uùúûüũūŭůűųưǔǖǘǚǜȕȗʉуъ",
			v: "vʋʌв",
			w: "wŵωώ",
			x: "xχ",
			y: "yýÿŷƴȳɏΰυϋύы",
			z: "zźżžƶȥɀζз",
			OE: "Œ",
			oe: "œ",
			AE: "ÆǢǼ",
			ae: "æǣǽ",
			hv: "ƕ",
			OI: "Ƣ",
			oi: "ƣ",
			DZ: "ǄǱ",
			Dz: "ǅǲ",
			dz: "ǆǳ",
			LJ: "Ǉ",
			Lj: "ǈ",
			lj: "ǉ",
			NJ: "Ǌ",
			Nj: "ǋ",
			nj: "ǌ",
			OU: "Ȣ",
			ou: "ȣ",
			TH: "Þ",
			th: "þ",
			PS: "Ψ",
			ps: "ψ",
			Yo: "Ё",
			Ye: "Є",
			Yi: "Ї",
			Zh: "Ж",
			Ch: "Ч",
			Sh: "ШЩ",
			"": "ЪЬь",
			Yu: "Ю",
			Ya: "Я",
			zh: "ж",
			ch: "ч",
			sh: "шщ",
			yu: "ю",
			ya: "я",
			yo: "ё",
			ye: "є",
			yi: "ї"
		};
		var diacriticsMap = null;
		/**
		* Creates a map of the diacritics.
		*
		* @ignore
		* @returns {Object} Returns the diacritics map.
		*/
		function getDiacriticsMap() {
			if (diacriticsMap !== null) return diacriticsMap;
			diacriticsMap = {};
			Object.keys(diacritics).forEach(function(key$1) {
				var characters$1 = diacritics[key$1];
				for (var index = 0; index < characters$1.length; index++) {
					var character = characters$1[index];
					diacriticsMap[character] = key$1;
				}
			});
			return diacriticsMap;
		}
		/**
		* Get the latin character from character with diacritics.
		*
		* @ignore
		* @param   {string} character The character with diacritics.
		* @returns {string}           Returns the character without diacritics.
		*/
		function getLatinCharacter(character) {
			var characterWithoutDiacritic = getDiacriticsMap()[character];
			return characterWithoutDiacritic ? characterWithoutDiacritic : character;
		}
		/**
		* Returns the `cleanCharacter` from combining marks regular expression match.
		*
		* @ignore
		* @param {string} character The character with combining marks
		* @param {string} cleanCharacter The character without combining marks.
		* @return {string} The character without combining marks.
		*/
		function removeCombiningMarks(character, cleanCharacter) {
			return cleanCharacter;
		}
		/**
		* Latinises the `subject` by removing diacritic characters.
		*
		* @function latinise
		* @static
		* @since 1.0.0
		* @memberOf Manipulate
		* @param {string} [subject=''] The string to latinise.
		* @return {string} Returns the latinised string.
		* @example
		* v.latinise('cafe\u0301'); // or 'café'
		* // => 'cafe'
		*
		* v.latinise('août décembre');
		* // => 'aout decembre'
		*
		* v.latinise('как прекрасен этот мир');
		* // => 'kak prekrasen etot mir'
		*/
		function latinise(subject) {
			var subjectString = coerceToString(subject);
			if (subjectString === "") return "";
			return subjectString.replace(REGEXP_NON_LATIN, getLatinCharacter).replace(REGEXP_COMBINING_MARKS, removeCombiningMarks);
		}
		/**
		* Pads `subject` to a new `length`.
		*
		* @function pad
		* @static
		* @since 1.0.0
		* @memberOf Manipulate
		* @param {string} [subject=''] The string to pad.
		* @param {int} [length=0] The length to pad the string. No changes are made if `length` is less than `subject.length`.
		* @param {string} [pad=' '] The string to be used for padding.
		* @return {string} Returns the padded string.
		* @example
		* v.pad('dog', 5);
		* // => ' dog '
		*
		* v.pad('bird', 6, '-');
		* // => '-bird-'
		*
		* v.pad('cat', 6, '-=');
		* // => '-cat-='
		*/
		function pad(subject, length, pad$1) {
			var subjectString = coerceToString(subject);
			var lengthInt = isNil(length) ? 0 : clipNumber(toInteger$3(length), 0, MAX_SAFE_INTEGER$3);
			var padString = coerceToString(pad$1, " ");
			if (lengthInt <= subjectString.length) return subjectString;
			var paddingLength = lengthInt - subjectString.length;
			var paddingSideLength = toInteger$3(paddingLength / 2);
			var paddingSideRemainingLength = paddingLength % 2;
			return buildPadding(padString, paddingSideLength) + subjectString + buildPadding(padString, paddingSideLength + paddingSideRemainingLength);
		}
		/**
		* Replaces the matches of `search` with `replace`. <br/>
		*
		* @function replace
		* @static
		* @since 1.0.0
		* @memberOf Manipulate
		* @param {string} [subject=''] The string to verify.
		* @param {string|RegExp} search The search pattern to replace. If `search` is a string,
		* a simple string match is evaluated and only the first occurrence replaced.
		* @param {string|Function} replace The string or function which invocation result replaces `search` match.
		* @return {string} Returns the replacement result.
		* @example
		* v.replace('swan', 'wa', 'u');
		* // => 'sun'
		*
		* v.replace('domestic duck', /domestic\s/, '');
		* // => 'duck'
		*
		* v.replace('nice duck', /(nice)(duck)/, function(match, nice, duck) {
		*   return 'the ' + duck + ' is ' + nice;
		* });
		* // => 'the duck is nice'
		*/
		function replace(subject, search$1, replace$1) {
			var subjectString = coerceToString(subject);
			return subjectString.replace(search$1, replace$1);
		}
		/**
		* Replaces all occurrences of `search` with `replace`. <br/>
		*
		* @function replaceAll
		* @static
		* @since 1.0.0
		* @memberOf Manipulate
		* @param {string} [subject=''] The string to verify.
		* @param {string|RegExp} search The search pattern to replace. If `search` is a string, a simple string match is evaluated.
		* All matches are replaced.
		* @param {string|Function} replace The string or function which invocation result replaces all `search` matches.
		* @return {string} Returns the replacement result.
		* @example
		* v.replaceAll('good morning', 'o', '*');
		* // => 'g**d m*rning'
		* v.replaceAll('evening', /n/g, 's');
		* // => 'evesisg'
		*
		*/
		function replaceAll(subject, search$1, replace$1) {
			var subjectString = coerceToString(subject);
			if (search$1 instanceof RegExp) {
				if (search$1.flags.indexOf("g") === -1) throw new TypeError("search argument is a non-global regular expression");
				return subjectString.replace(search$1, replace$1);
			}
			var searchString = coerceToString(search$1);
			var isFunctionalReplace = typeof replace$1 === "function";
			if (!isFunctionalReplace) replace$1 = coerceToString(replace$1);
			var searchLength = searchString.length;
			if (searchLength === 0) return replaceAll(subject, /(?:)/g, replace$1);
			var advanceBy = searchLength > 1 ? searchLength : 1;
			var matchPositions = [];
			var position = subjectString.indexOf(searchString, 0);
			while (position !== -1) {
				matchPositions.push(position);
				position = subjectString.indexOf(searchString, position + advanceBy);
			}
			var endOfLastMatch = 0;
			var result = "";
			for (var i = 0; i < matchPositions.length; i++) {
				var _position = matchPositions[i];
				var replacement = replace$1;
				if (isFunctionalReplace) replacement = coerceToString(replace$1.call(void 0, searchString, _position, subjectString));
				result += subjectString.slice(endOfLastMatch, _position) + replacement;
				endOfLastMatch = _position + searchLength;
			}
			if (endOfLastMatch < subjectString.length) result += subjectString.slice(endOfLastMatch);
			return result;
		}
		/**
		* Reverses the `subject`.
		*
		* @function reverse
		* @static
		* @since 1.0.0
		* @memberOf Manipulate
		* @param {string} [subject=''] The string to reverse.
		* @return {string} Returns the reversed string.
		* @example
		* v.reverse('winter');
		* // => 'retniw'
		*/
		function reverse(subject) {
			var subjectString = coerceToString(subject);
			return subjectString.split("").reverse().join("");
		}
		/**
		* Reverses the `subject` taking care of
		* <a href="https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#24surrogatepairs">surrogate pairs</a> and
		* <a href="https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#25combiningmarks">combining marks</a>.
		*
		* @function reverseGrapheme
		* @static
		* @since 1.0.0
		* @memberOf Manipulate
		* @param {string} [subject=''] The string to reverse.
		* @return {string} Returns the reversed string.
		* @example
		* v.reverseGrapheme('summer');
		* // => 'remmus'
		*
		* v.reverseGrapheme('𝌆 bar mañana mañana');
		* // => 'anañam anañam rab 𝌆'
		*/
		function reverseGrapheme(subject) {
			var subjectString = coerceToString(subject);
			/**
			* @see https://github.com/mathiasbynens/esrever
			*/
			subjectString = subjectString.replace(REGEXP_COMBINING_MARKS, function($0, $1, $2) {
				return reverseGrapheme($2) + $1;
			}).replace(REGEXP_SURROGATE_PAIRS, "$2$1");
			var reversedString = "";
			var index = subjectString.length;
			while (index--) reversedString += subjectString.charAt(index);
			return reversedString;
		}
		/**
		* Slugifies the `subject`. Cleans the `subject` by replacing diacritics with corresponding latin characters.
		*
		* @function slugify
		* @static
		* @since 1.0.0
		* @memberOf Manipulate
		* @param {string} [subject=''] The string to slugify.
		* @return {string} Returns the slugified string.
		* @example
		* v.slugify('Italian cappuccino drink');
		* // => 'italian-cappuccino-drink'
		*
		* v.slugify('caffé latté');
		* // => 'caffe-latte'
		*
		* v.slugify('хорошая погода');
		* // => 'horoshaya-pogoda'
		*/
		function slugify(subject) {
			var subjectString = coerceToString(subject);
			if (subjectString === "") return "";
			var cleanSubjectString = latinise(subjectString).replace(REGEXP_NON_LATIN, "-");
			return kebabCase$1(cleanSubjectString);
		}
		/**
		* Changes `subject` by deleting `deleteCount` of characters starting at position `start`. Places a new string
		* `toAdd` instead of deleted characters.
		*
		* @function splice
		* @static
		* @since 1.0.0
		* @memberOf Manipulate
		* @param {string} [subject=''] The string where to insert.
		* @param {string} start The position to start changing the string. For a negative position will start from the end of
		* the string.
		* @param {number} [deleteCount=subject.length-start] The number of characters to delete from string.
		* @param {string} [toAdd=''] The string to be added instead of deleted characters.
		* @return {string} Returns the modified string.
		* @example
		* v.splice('new year', 0, 4);
		* // => 'year'
		*
		* v.splice('new year', 0, 3, 'happy');
		* // => 'happy year'
		*
		* v.splice('new year', -4, 4, 'day');
		* // => 'new day'
		*/
		function splice(subject, start, deleteCount, toAdd) {
			var subjectString = coerceToString(subject);
			var toAddString = coerceToString(toAdd);
			var startPosition = coerceToNumber(start);
			if (startPosition < 0) {
				startPosition = subjectString.length + startPosition;
				if (startPosition < 0) startPosition = 0;
			} else if (startPosition > subjectString.length) startPosition = subjectString.length;
			var deleteCountNumber = coerceToNumber(deleteCount, subjectString.length - startPosition);
			if (deleteCountNumber < 0) deleteCountNumber = 0;
			return subjectString.slice(0, startPosition) + toAddString + subjectString.slice(startPosition + deleteCountNumber);
		}
		/**
		* Translates characters or replaces substrings in `subject`.
		*
		* @function tr
		* @static
		* @since 1.3.0
		* @memberOf Manipulate
		* @param  {string} [subject=''] The string to translate.
		* @param  {string|Object} from The string of characters to translate from. Or an object, then the object keys are replaced with corresponding values (longest keys are tried first).
		* @param  {string} to The string of characters to translate to. Ignored when `from` is an object.
		* @return {string} Returns the translated string.
		* @example
		* v.tr('hello', 'el', 'ip');
		* // => 'hippo'
		*
		* v.tr('légèreté', 'éè', 'ee');
		* // => 'legerete'
		*
		* v.tr('Yes. The fire rises.', {
		*   'Yes': 'Awesome',
		*   'fire': 'flame'
		* })
		* // => 'Awesome. The flame rises.'
		*
		* v.tr(':where is the birthplace of :what', {
		*   ':where': 'Africa',
		*   ':what': 'Humanity'
		* });
		* // => 'Africa is the birthplace of Humanity'
		*
		*/
		function tr$1(subject, from$2, to) {
			var subjectString = coerceToString(subject);
			var keys$2;
			var values$1;
			if (isString$6(from$2) && isString$6(to)) {
				keys$2 = from$2.split("");
				values$1 = to.split("");
			} else {
				var _extractKeysAndValues = extractKeysAndValues(nilDefault(from$2, {}));
				var _extractKeysAndValues2 = _slicedToArray(_extractKeysAndValues, 2);
				keys$2 = _extractKeysAndValues2[0];
				values$1 = _extractKeysAndValues2[1];
			}
			var keysLength = keys$2.length;
			if (keysLength === 0) return subjectString;
			var result = "";
			var valuesLength = values$1.length;
			for (var index = 0; index < subjectString.length; index++) {
				var isMatch = false;
				var matchValue$2 = void 0;
				for (var keyIndex = 0; keyIndex < keysLength && keyIndex < valuesLength; keyIndex++) {
					var key$1 = keys$2[keyIndex];
					if (subjectString.substr(index, key$1.length) === key$1) {
						isMatch = true;
						matchValue$2 = values$1[keyIndex];
						index = index + key$1.length - 1;
						break;
					}
				}
				result += isMatch ? matchValue$2 : subjectString[index];
			}
			return result;
		}
		function extractKeysAndValues(object) {
			var keys$2 = Object.keys(object);
			var values$1 = keys$2.sort(sortStringByLength).map(function(key$1) {
				return object[key$1];
			});
			return [keys$2, values$1];
		}
		function sortStringByLength(str1, str2) {
			if (str1.length === str2.length) return 0;
			return str1.length < str2.length ? 1 : -1;
		}
		/**
		* Checks whether `subject` includes `search` starting from `position`.
		*
		* @function includes
		* @static
		* @since 1.0.0
		* @memberOf Query
		* @param {string} [subject=''] The string where to search.
		* @param {string} search The string to search.
		* @param {number} [position=0] The position to start searching.
		* @return {boolean} Returns `true` if `subject` includes `search` or `false` otherwise.
		* @example
		* v.includes('starship', 'star');
		* // => true
		*
		* v.includes('galaxy', 'g', 1);
		* // => false
		*/
		function includes$3(subject, search$1, position) {
			var subjectString = coerceToString(subject);
			var searchString = toString$4(search$1);
			if (searchString === null) return false;
			if (searchString === "") return true;
			position = isNil(position) ? 0 : clipNumber(toInteger$3(position), 0, subjectString.length);
			return subjectString.indexOf(searchString, position) !== -1;
		}
		var reduce$1 = Array.prototype.reduce;
		/**
		* Removes whitespaces from the left side of the `subject`.
		*
		* @function trimLeft
		* @static
		* @since 1.0.0
		* @memberOf Manipulate
		* @param {string} [subject=''] The string to trim.
		* @param {string} [whitespace=whitespace] The whitespace characters to trim. List all characters that you want to be stripped.
		* @return {string} Returns the trimmed string.
		* @example
		* v.trimLeft('  Starship Troopers');
		* // => 'Starship Troopers'
		*
		* v.trimLeft('***Mobile Infantry', '*');
		* // => 'Mobile Infantry'
		*/
		function trimLeft$1(subject, whitespace$1) {
			var subjectString = coerceToString(subject);
			if (whitespace$1 === "" || subjectString === "") return subjectString;
			var whitespaceString = toString$4(whitespace$1);
			if (isNil(whitespaceString)) return subjectString.replace(REGEXP_TRIM_LEFT, "");
			var matchWhitespace = true;
			return reduce$1.call(subjectString, function(trimmed, character) {
				if (matchWhitespace && includes$3(whitespaceString, character)) return trimmed;
				matchWhitespace = false;
				return trimmed + character;
			}, "");
		}
		var reduceRight = Array.prototype.reduceRight;
		/**
		* Removes whitespaces from the right side of the `subject`.
		*
		* @function trimRight
		* @static
		* @since 1.0.0
		* @memberOf Manipulate
		* @param {string} [subject=''] The string to trim.
		* @param {string} [whitespace=whitespace] The whitespace characters to trim. List all characters that you want to be stripped.
		* @return {string} Returns the trimmed string.
		* @example
		* v.trimRight('the fire rises   ');
		* // => 'the fire rises'
		*
		* v.trimRight('do you feel in charge?!!!', '!');
		* // => 'do you feel in charge?'
		*/
		function trimRight$1(subject, whitespace$1) {
			var subjectString = coerceToString(subject);
			if (whitespace$1 === "" || subjectString === "") return subjectString;
			var whitespaceString = toString$4(whitespace$1);
			if (isNil(whitespaceString)) return subjectString.replace(REGEXP_TRIM_RIGHT, "");
			var matchWhitespace = true;
			return reduceRight.call(subjectString, function(trimmed, character) {
				if (matchWhitespace && includes$3(whitespaceString, character)) return trimmed;
				matchWhitespace = false;
				return character + trimmed;
			}, "");
		}
		/**
		* Removes whitespaces from left and right sides of the `subject`.
		*
		* @function trim
		* @static
		* @since 1.0.0
		* @memberOf Manipulate
		* @param {string} [subject=''] The string to trim.
		* @param {string} [whitespace=whitespace] The whitespace characters to trim. List all characters that you want to be stripped.
		* @return {string} Returns the trimmed string.
		* @example
		* v.trim(' Mother nature ');
		* // => 'Mother nature'
		*
		* v.trim('--Earth--', '-');
		* // => 'Earth'
		*/
		function trim$2(subject, whitespace$1) {
			var subjectString = coerceToString(subject);
			if (whitespace$1 === "" || subjectString === "") return subjectString;
			var whitespaceString = toString$4(whitespace$1);
			if (isNil(whitespaceString)) return subjectString.trim();
			return trimRight$1(trimLeft$1(subjectString, whitespaceString), whitespaceString);
		}
		var OPTION_WIDTH = "width";
		var OPTION_NEW_LINE = "newLine";
		var OPTION_INDENT = "indent";
		var OPTION_CUT = "cut";
		/**
		* Wraps `subject` to a given number of characters using a string break character.
		*
		* @function wordWrap
		* @static
		* @since 1.0.0
		* @memberOf Manipulate
		* @param  {string} [subject=''] The string to wrap.
		* @param  {Object} [options={}] The wrap options.
		* @param  {number} [options.width=75] The number of characters at which to wrap.
		* @param  {string} [options.newLine='\n'] The string to add at the end of line.
		* @param  {string} [options.indent='']  The string to intend the line.
		* @param  {boolean} [options.cut=false] When `false` (default) does not split the word even if word length is bigger than `width`. <br/>
		*                                       When `true` breaks the word that has length bigger than `width`.
		*
		* @return {string} Returns wrapped string.
		* @example
		* v.wordWrap('Hello world', {
		*   width: 5
		* });
		* // => 'Hello\nworld'
		*
		* v.wordWrap('Hello world', {
		*   width: 5,
		*   newLine: '<br/>',
		*   indent: '__'
		* });
		* // => '__Hello<br/>__world'
		*
		* v.wordWrap('Wonderful world', {
		*   width: 5,
		*   cut: true
		* });
		* // => 'Wonde\nrful\nworld'
		*
		*/
		function wordWrap(subject) {
			var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
			var subjectString = coerceToString(subject);
			var _determineOptions = determineOptions(options), width = _determineOptions.width, newLine = _determineOptions.newLine, indent = _determineOptions.indent, cut = _determineOptions.cut;
			if (subjectString === "" || width <= 0) return indent;
			var subjectLength = subjectString.length;
			var substring$1 = subjectString.substring.bind(subjectString);
			var offset = 0;
			var wrappedLine = "";
			while (subjectLength - offset > width) {
				if (subjectString[offset] === " ") {
					offset++;
					continue;
				}
				var spaceToWrapAt = subjectString.lastIndexOf(" ", width + offset);
				if (spaceToWrapAt >= offset) {
					wrappedLine += indent + substring$1(offset, spaceToWrapAt) + newLine;
					offset = spaceToWrapAt + 1;
				} else if (cut) {
					wrappedLine += indent + substring$1(offset, width + offset) + newLine;
					offset += width;
				} else {
					spaceToWrapAt = subjectString.indexOf(" ", width + offset);
					if (spaceToWrapAt >= 0) {
						wrappedLine += indent + substring$1(offset, spaceToWrapAt) + newLine;
						offset = spaceToWrapAt + 1;
					} else {
						wrappedLine += indent + substring$1(offset);
						offset = subjectLength;
					}
				}
			}
			if (offset < subjectLength) wrappedLine += indent + substring$1(offset);
			return wrappedLine;
		}
		/**
		* Determine the word wrap options. The missing values are filled with defaults.
		*
		* @param  {Object} options  The options object.
		* @return {Object}          The word wrap options, with default settings if necessary.
		* @ignore
		*/
		function determineOptions(options) {
			return {
				width: coerceToNumber(options[OPTION_WIDTH], 75),
				newLine: coerceToString(options[OPTION_NEW_LINE], "\n"),
				indent: coerceToString(options[OPTION_INDENT], ""),
				cut: coerceToBoolean(options[OPTION_CUT], false)
			};
		}
		/**
		* Checks whether `subject` ends with `end`.
		*
		* @function endsWith
		* @static
		* @since 1.0.0
		* @memberOf Query
		* @param {string} [subject=''] The string to verify.
		* @param {string} end The ending string.
		* @param {number} [position=subject.length] Search within `subject` as if the string were only `position` long.
		* @return {boolean} Returns `true` if `subject` ends with `end` or `false` otherwise.
		* @example
		* v.endsWith('red alert', 'alert');
		* // => true
		*
		* v.endsWith('metro south', 'metro');
		* // => false
		*
		* v.endsWith('Murphy', 'ph', 5);
		* // => true
		*/
		function endsWith$2(subject, end, position) {
			if (isNil(end)) return false;
			var subjectString = coerceToString(subject);
			var endString = coerceToString(end);
			if (endString === "") return true;
			position = isNil(position) ? subjectString.length : clipNumber(toInteger$3(position), 0, subjectString.length);
			position -= endString.length;
			var lastIndex = subjectString.indexOf(endString, position);
			return lastIndex !== -1 && lastIndex === position;
		}
		/**
		* Checks whether `subject` contains only alpha characters.
		*
		* @function isAlpha
		* @static
		* @since 1.0.0
		* @memberOf Query
		* @param {string} [subject=''] The string to verify.
		* @return {boolean} Returns `true` if `subject` contains only alpha characters or `false` otherwise.
		* @example
		* v.isAlpha('bart');
		* // => true
		*
		* v.isAlpha('lisa!');
		* // => false
		*
		* v.isAlpha('lisa and bart');
		* // => false
		*/
		function isAlpha(subject) {
			var subjectString = coerceToString(subject);
			return REGEXP_ALPHA.test(subjectString);
		}
		/**
		* Checks whether `subject` contains only alpha and digit characters.
		*
		* @function isAlphaDigit
		* @static
		* @since 1.0.0
		* @memberOf Query
		* @param {string} [subject=''] The string to verify.
		* @return {boolean} Returns `true` if `subject` contains only alpha and digit characters or `false` otherwise.
		* @example
		* v.isAlphaDigit('year2020');
		* // => true
		*
		* v.isAlphaDigit('1448');
		* // => true
		*
		* v.isAlphaDigit('40-20');
		* // => false
		*/
		function isAlphaDigit(subject) {
			var subjectString = coerceToString(subject);
			return REGEXP_ALPHA_DIGIT.test(subjectString);
		}
		/**
		* Checks whether `subject` is empty or contains only whitespaces.
		*
		* @function isBlank
		* @static
		* @since 1.0.0
		* @memberOf Query
		* @param {string} [subject=''] The string to verify.
		* @return {boolean} Returns `true` if `subject` is empty or contains only whitespaces or `false` otherwise.
		* @example
		* v.isBlank('');
		* // => true
		*
		* v.isBlank('  ');
		* // => true
		*
		* v.isBlank('World');
		* // => false
		*/
		function isBlank(subject) {
			var subjectString = coerceToString(subject);
			return subjectString.trim().length === 0;
		}
		/**
		* Checks whether `subject` contains only digit characters.
		*
		* @function isDigit
		* @static
		* @since 1.0.0
		* @memberOf Query
		* @param {string} [subject=''] The string to verify.
		* @return {boolean} Returns `true` if `subject` contains only digit characters or `false` otherwise.
		* @example
		* v.isDigit('35');
		* // => true
		*
		* v.isDigit('1.5');
		* // => false
		*
		* v.isDigit('ten');
		* // => false
		*/
		function isDigit(subject) {
			var subjectString = coerceToString(subject);
			return REGEXP_DIGIT.test(subjectString);
		}
		/**
		* Checks whether `subject` is empty.
		*
		* @function isEmpty
		* @static
		* @since 1.0.0
		* @memberOf Query
		* @param {string} [subject=''] The string to verify.
		* @return {boolean} Returns `true` if `subject` is empty or `false` otherwise
		* @example
		* v.isEmpty('');
		* // => true
		*
		* v.isEmpty('  ');
		* // => false
		*
		* v.isEmpty('sun');
		* // => false
		*/
		function isEmpty(subject) {
			var subjectString = coerceToString(subject);
			return subjectString.length === 0;
		}
		/**
		* Checks whether `subject` has only lower case characters.
		*
		* @function isLowerCase
		* @static
		* @since 1.0.0
		* @memberOf Query
		* @param {string} [subject=''] The string to verify.
		* @return {boolean} Returns `true` if `subject` is lower case or `false` otherwise.
		* @example
		* v.isLowerCase('motorcycle');
		* // => true
		*
		* v.isLowerCase('John');
		* // => false
		*
		* v.isLowerCase('T1000');
		* // => false
		*/
		function isLowerCase(subject) {
			var valueString = coerceToString(subject);
			return isAlpha(valueString) && valueString.toLowerCase() === valueString;
		}
		/**
		* Checks whether `subject` is numeric.
		*
		* @function isNumeric
		* @static
		* @since 1.0.0
		* @memberOf Query
		* @param {string} [subject=''] The string to verify.
		* @return {boolean} Returns `true` if `subject` is numeric or `false` otherwise.
		* @example
		* v.isNumeric('350');
		* // => true
		*
		* v.isNumeric('-20.5');
		* // => true
		*
		* v.isNumeric('1.5E+2');
		* // => true
		*
		* v.isNumeric('five');
		* // => false
		*/
		function isNumeric(subject) {
			var valueNumeric = typeof subject === "object" && !isNil(subject) ? Number(subject) : subject;
			return (typeof valueNumeric === "number" || typeof valueNumeric === "string") && !isNaN(valueNumeric - parseFloat(valueNumeric));
		}
		/**
		* Checks whether `subject` contains only upper case characters.
		*
		* @function isUpperCase
		* @static
		* @since 1.0.0
		* @memberOf Query
		* @param {string} [subject=''] The string to verify.
		* @return {boolean} Returns `true` if `subject` is upper case or `false` otherwise.
		* @example
		* v.isUpperCase('ACDC');
		* // => true
		*
		* v.isUpperCase('Morning');
		* // => false
		*/
		function isUpperCase(subject) {
			var subjectString = coerceToString(subject);
			return isAlpha(subjectString) && subjectString.toUpperCase() === subjectString;
		}
		/**
		* Checks whether `subject` matches the regular expression `pattern`.
		*
		* @function matches
		* @static
		* @since 1.0.0
		* @memberOf Query
		* @param {string} [subject=''] The string to verify.
		* @param {RegExp|string} pattern The pattern to match. If `pattern` is not RegExp, it is transformed to `new RegExp(pattern, flags)`.
		* @param {string} [flags=''] The regular expression flags. Applies when `pattern` is string type.
		* @return {boolean} Returns `true` if `subject` matches `pattern` or `false` otherwise.
		* @example
		* v.matches('pluto', /plu.{2}/);
		* // => true
		*
		* v.matches('sun', 'S', 'i');
		* // => true
		*
		* v.matches('apollo 11', '\\d{3}');
		* // => false
		*/
		function matches(subject, pattern, flags) {
			var subjectString = coerceToString(subject);
			var flagsString = coerceToString(flags);
			var patternString;
			if (!(pattern instanceof RegExp)) {
				patternString = toString$4(pattern);
				if (patternString === null) return false;
				pattern = new RegExp(patternString, flagsString);
			}
			return pattern.test(subjectString);
		}
		/**
		* Checks whether `subject` starts with `start`.
		*
		* @function startsWith
		* @static
		* @since 1.0.0
		* @memberOf Query
		* @param {string} [subject=''] The string to verify.
		* @param {string} start The starting string.
		* @param {number} [position=0] The position to start searching.
		* @return {boolean} Returns `true` if `subject` starts with `start` or `false` otherwise.
		* @example
		* v.startsWith('say hello to my little friend', 'say hello');
		* // => true
		*
		* v.startsWith('tony', 'on', 1);
		* // => true
		*
		* v.startsWith('the world is yours', 'world');
		* // => false
		*/
		function startsWith$1(subject, start, position) {
			var subjectString = coerceToString(subject);
			var startString = toString$4(start);
			if (startString === null) return false;
			if (startString === "") return true;
			position = isNil(position) ? 0 : clipNumber(toInteger$3(position), 0, subjectString.length);
			return subjectString.substr(position, startString.length) === startString;
		}
		/**
		* Splits `subject` into an array of characters.
		*
		* @function chars
		* @static
		* @since 1.0.0
		* @memberOf Split
		* @param {string} [subject=''] The string to split into characters.
		* @return {Array} Returns the array of characters.
		* @example
		* v.chars('cloud');
		* // => ['c', 'l', 'o', 'u', 'd']
		*/
		function chars(subject) {
			var subjectString = coerceToString(subject);
			return subjectString.split("");
		}
		/**
		* Returns an array of Unicode code point values from characters of `subject`.
		*
		* @function codePoints
		* @static
		* @since 1.0.0
		* @memberOf Split
		* @param  {string} [subject=''] The string to extract from.
		* @return {Array} Returns an array of non-negative numbers less than or equal to `0x10FFFF`.
		* @example
		* v.codePoints('rain');
		* // => [114, 97, 105, 110], or
		* //    [0x72, 0x61, 0x69, 0x6E]
		*
		* v.codePoints('\uD83D\uDE00 smile'); // or '😀 smile'
		* // => [128512, 32, 115, 109, 105, 108, 101], or
		* //    [0x1F600, 0x20, 0x73, 0x6D, 0x69, 0x6C, 0x65]
		*/
		function codePoints(subject) {
			var subjectString = coerceToString(subject);
			var subjectStringLength = subjectString.length;
			var codePointArray = [];
			var index = 0;
			var codePointNumber;
			while (index < subjectStringLength) {
				codePointNumber = codePointAt(subjectString, index);
				codePointArray.push(codePointNumber);
				index += codePointNumber > 65535 ? 2 : 1;
			}
			return codePointArray;
		}
		/**
		* Splits `subject` into an array of graphemes taking care of
		* <a href="https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#24surrogatepairs">surrogate pairs</a> and
		* <a href="https://rainsoft.io/what-every-javascript-developer-should-know-about-unicode/#25combiningmarks">combining marks</a>.
		*
		* @function graphemes
		* @static
		* @since 1.0.0
		* @memberOf Split
		* @param {string} [subject=''] The string to split into characters.
		* @return {Array} Returns the array of graphemes.
		* @example
		* v.graphemes('\uD835\uDC00\uD835\uDC01'); // or '𝐀𝐁'
		* // => ['\uD835\uDC00', '\uD835\uDC01'], or
		* //    ['𝐀', '𝐁']
		*
		* v.graphemes('cafe\u0301'); // or 'café'
		* // => ['c', 'a', 'f', 'e\u0301'], or
		* //    ['c', 'a', 'f', 'é']
		*/
		function graphemes(subject) {
			var subjectString = coerceToString(subject);
			return nilDefault(subjectString.match(REGEXP_UNICODE_CHARACTER), []);
		}
		/**
		* Splits `subject` into an array of chunks by `separator`.
		*
		* @function split
		* @static
		* @since 1.0.0
		* @memberOf Split
		* @param {string} [subject=''] The string to split into characters.
		* @param {string|RegExp} [separator] The pattern to match the separator.
		* @param {number} [limit] Limit the number of chunks to be found.
		* @return {Array} Returns the array of chunks.
		* @example
		* v.split('rage against the dying of the light', ' ');
		* // => ['rage', 'against', 'the', 'dying', 'of', 'the', 'light']
		*
		* v.split('the dying of the light', /\s/, 3);
		* // => ['the', 'dying', 'of']
		*/
		function split(subject, separator, limit) {
			var subjectString = coerceToString(subject);
			return subjectString.split(separator, limit);
		}
		var BYRE_ORDER_MARK = "﻿";
		/**
		* Strips the byte order mark (BOM) from the beginning of `subject`.
		*
		* @function stripBom
		* @static
		* @since 1.2.0
		* @memberOf Strip
		* @param {string} [subject=''] The string to strip from.
		* @return {string} Returns the stripped string.
		* @example
		*
		* v.stripBom('\uFEFFsummertime sadness');
		* // => 'summertime sadness'
		*
		* v.stripBom('summertime happiness');
		* // => 'summertime happiness'
		*
		*/
		function trim$1$1(subject) {
			var subjectString = coerceToString(subject);
			if (subjectString === "") return "";
			if (subjectString[0] === BYRE_ORDER_MARK) return subjectString.substring(1);
			return subjectString;
		}
		/**
		* Checks whether `subject` contains substring at specific `index`.
		*
		* @ignore
		* @param {string} subject The subject to search in.
		* @param {string} substring The substring to search/
		* @param {number} index The index to search substring.
		* @param {boolean} lookBehind Whether to look behind (true) or ahead (false).
		* @return {boolean} Returns a boolean whether the substring exists.
		*/
		function hasSubstringAtIndex(subject, substring$1, index) {
			var lookBehind = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
			var indexOffset = 0;
			if (lookBehind) indexOffset = -substring$1.length + 1;
			var extractedSubstring = subject.substr(index + indexOffset, substring$1.length);
			return extractedSubstring.toLowerCase() === substring$1;
		}
		/**
		* Parses the tags from the string '<tag1><tag2>...<tagN>'.
		*
		* @ignore
		* @param {string} tags The string that contains the tags.
		* @return {string[]} Returns the array of tag names.
		*/
		function parseTagList(tags) {
			var tagsList = [];
			var match$1;
			while ((match$1 = REGEXP_TAG_LIST.exec(tags)) !== null) tagsList.push(match$1[1]);
			return tagsList;
		}
		var STATE_START_TAG = 0;
		var STATE_NON_WHITESPACE = 1;
		var STATE_DONE = 2;
		/**
		* Parses the tag name from html content.
		*
		* @ignore
		* @param {string} tagContent The tag content.
		* @return {string} Returns the tag name.
		*/
		function parseTagName(tagContent) {
			var state$1 = STATE_START_TAG;
			var tagName = "";
			var index = 0;
			while (state$1 !== STATE_DONE) {
				var char = tagContent[index++].toLowerCase();
				switch (char) {
					case "<": break;
					case ">":
						state$1 = STATE_DONE;
						break;
					default:
						if (REGEXP_WHITESPACE.test(char)) {
							if (state$1 === STATE_NON_WHITESPACE) state$1 = STATE_DONE;
						} else {
							if (state$1 === STATE_START_TAG) state$1 = STATE_NON_WHITESPACE;
							if (char !== "/") tagName += char;
						}
						break;
				}
			}
			return tagName;
		}
		var STATE_OUTPUT = 0;
		var STATE_HTML = 1;
		var STATE_EXCLAMATION = 2;
		var STATE_COMMENT = 3;
		/**
		* Strips HTML tags from `subject`.
		*
		* @function stripTags
		* @static
		* @since 1.1.0
		* @memberOf Strip
		* @param {string} [subject=''] The string to strip from.
		* @param {string|Array} [allowableTags] The string `'<tag1><tag2>'` or array `['tag1', 'tag2']` of tags that should not be stripped.
		* @param {string} [replacement=''] The string to replace the stripped tag.
		* @return {string} Returns the stripped string.
		* @example
		*
		* v.stripTags('<span><a href="#">Summer</a> is nice</span>');
		* // => 'Summer is nice'
		*
		* v.stripTags('<span><i>Winter</i> is <b>cold</b></span>', ['b', 'i']);
		* // => '<i>Winter</i> is <b>cold</b>'
		*
		* v.stripTags('Sun<br/>set', '', '-');
		* // => 'Sun-set'
		*/
		function trim$2$1(subject, allowableTags, replacement) {
			subject = coerceToString(subject);
			if (subject === "") return "";
			if (!Array.isArray(allowableTags)) {
				var allowableTagsString = coerceToString(allowableTags);
				allowableTags = allowableTagsString === "" ? [] : parseTagList(allowableTagsString);
			}
			var replacementString = coerceToString(replacement);
			var length = subject.length;
			var hasAllowableTags = allowableTags.length > 0;
			var hasSubstring = hasSubstringAtIndex.bind(null, subject);
			var state$1 = STATE_OUTPUT;
			var depth = 0;
			var output = "";
			var tagContent = "";
			var quote = null;
			for (var index = 0; index < length; index++) {
				var char = subject[index];
				var advance = false;
				switch (char) {
					case "<":
						if (quote) break;
						if (hasSubstring("< ", index, false)) {
							advance = true;
							break;
						}
						if (state$1 === STATE_OUTPUT) {
							advance = true;
							state$1 = STATE_HTML;
							break;
						}
						if (state$1 === STATE_HTML) {
							depth++;
							break;
						}
						advance = true;
						break;
					case "!":
						if (state$1 === STATE_HTML && hasSubstring("<!", index)) {
							state$1 = STATE_EXCLAMATION;
							break;
						}
						advance = true;
						break;
					case "-":
						if (state$1 === STATE_EXCLAMATION && hasSubstring("!--", index)) {
							state$1 = STATE_COMMENT;
							break;
						}
						advance = true;
						break;
					case "\"":
					case "'":
						if (state$1 === STATE_HTML) {
							if (quote === char) quote = null;
							else if (!quote) quote = char;
						}
						advance = true;
						break;
					case "E":
					case "e":
						if (state$1 === STATE_EXCLAMATION && hasSubstring("doctype", index)) {
							state$1 = STATE_HTML;
							break;
						}
						advance = true;
						break;
					case ">":
						if (depth > 0) {
							depth--;
							break;
						}
						if (quote) break;
						if (state$1 === STATE_HTML) {
							quote = null;
							state$1 = STATE_OUTPUT;
							if (hasAllowableTags) {
								tagContent += ">";
								var tagName = parseTagName(tagContent);
								if (allowableTags.indexOf(tagName.toLowerCase()) !== -1) output += tagContent;
								else output += replacementString;
								tagContent = "";
							} else output += replacementString;
							break;
						}
						if (state$1 === STATE_EXCLAMATION || state$1 === STATE_COMMENT && hasSubstring("-->", index)) {
							quote = null;
							state$1 = STATE_OUTPUT;
							tagContent = "";
							break;
						}
						advance = true;
						break;
					default: advance = true;
				}
				if (advance) switch (state$1) {
					case STATE_OUTPUT:
						output += char;
						break;
					case STATE_HTML:
						if (hasAllowableTags) tagContent += char;
						break;
				}
			}
			return output;
		}
		var globalObject = null;
		function getGlobalObject() {
			if (globalObject !== null) return globalObject;
			/* istanbul ignore next */
			if (typeof global === "object" && global.Object === Object) globalObject = global;
			else if (typeof self === "object" && self.Object === Object) globalObject = self;
			else globalObject = new Function("return this")();
			return globalObject;
		}
		var globalObject$1 = getGlobalObject();
		var previousV = globalObject$1.v;
		/**
		* Restores `v` variable to previous value and returns Voca library instance.
		*
		* @function noConflict
		* @static
		* @since 1.0.0
		* @memberOf Util
		* @return {Object} Returns Voca library instance.
		* @example
		* var voca = v.noConflict();
		* voca.isAlpha('Hello');
		* // => true
		*/
		function noConflict() {
			if (this === globalObject$1.v) globalObject$1.v = previousV;
			return this;
		}
		/**
		* A property that contains the library <a href="http://semver.org/">semantic version number</a>.
		* @name version
		* @static
		* @since 1.0.0
		* @memberOf Util
		* @type string
		* @example
		* v.version
		* // => '1.4.0'
		*/
		var version = "1.4.0";
		var functions = {
			camelCase: camelCase$1,
			capitalize,
			decapitalize,
			kebabCase: kebabCase$1,
			lowerCase,
			snakeCase,
			swapCase,
			titleCase,
			upperCase,
			count,
			countGraphemes: countGrapheme,
			countSubstrings,
			countWhere,
			countWords,
			escapeHtml,
			escapeRegExp,
			unescapeHtml,
			sprintf: sprintf$1,
			vprintf,
			indexOf: indexOf$1,
			lastIndexOf,
			search,
			charAt,
			codePointAt,
			first: first$1,
			graphemeAt,
			last: last$1,
			prune,
			slice: slice$1,
			substr,
			substring,
			truncate,
			insert,
			latinise,
			pad,
			padLeft,
			padRight,
			repeat,
			replace,
			replaceAll,
			reverse,
			reverseGrapheme,
			slugify,
			splice,
			tr: tr$1,
			trim: trim$2,
			trimLeft: trimLeft$1,
			trimRight: trimRight$1,
			wordWrap,
			endsWith: endsWith$2,
			includes: includes$3,
			isAlpha,
			isAlphaDigit,
			isBlank,
			isDigit,
			isEmpty,
			isLowerCase,
			isNumeric,
			isString: isString$6,
			isUpperCase,
			matches,
			startsWith: startsWith$1,
			chars,
			codePoints,
			graphemes,
			split,
			words,
			stripBom: trim$1$1,
			stripTags: trim$2$1,
			noConflict,
			version
		};
		/**
		* The chain wrapper constructor.
		*
		* @ignore
		* @param  {string}       subject               The string to be wrapped.
		* @param  {boolean}      [explicitChain=false] A boolean that indicates if the chain sequence is explicit or implicit.
		* @return {ChainWrapper}                       Returns a new instance of `ChainWrapper`
		* @constructor
		*/
		function ChainWrapper(subject, explicitChain) {
			this._wrappedValue = subject;
			this._explicitChain = explicitChain;
		}
		/**
		* Unwraps the chain sequence wrapped value.
		*
		* @memberof Chain
		* @since 1.0.0
		* @function __proto__value
		* @return {*} Returns the unwrapped value.
		* @example
		* v
		*  .chain('Hello world')
		*  .replace('Hello', 'Hi')
		*  .lowerCase()
		*  .slugify()
		*  .value()
		* // => 'hi-world'
		*
		* v(' Space travel ')
		*  .trim()
		*  .truncate(8)
		*  .value()
		* // => 'Space...'
		*/
		ChainWrapper.prototype.value = function() {
			return this._wrappedValue;
		};
		/**
		* Override the default object valueOf().
		*
		* @ignore
		* @return {*} Returns the wrapped value.
		*/
		ChainWrapper.prototype.valueOf = function() {
			return this.value();
		};
		/**
		* Returns the wrapped value to be used in JSON.stringify().
		*
		* @ignore
		* @return {*} Returns the wrapped value.
		*/
		ChainWrapper.prototype.toJSON = function() {
			return this.value();
		};
		/**
		* Returns the string representation of the wrapped value.
		*
		* @ignore
		* @return {string} Returns the string representation.
		*/
		ChainWrapper.prototype.toString = function() {
			return String(this.value());
		};
		/**
		* Creates a new chain object that enables <i>explicit</i> chain sequences.
		* Use `v.prototype.value()` to unwrap the result. <br/>
		* Does not modify the wrapped value.
		*
		* @memberof Chain
		* @since 1.0.0
		* @function __proto__chain
		* @return {Object} Returns the wrapper in <i>explicit</i> mode.
		* @example
		* v('Back to School')
		*  .chain()
		*  .lowerCase()
		*  .words()
		*  .value()
		* // => ['back', 'to', 'school']
		*
		* v(" Back to School ")
		*  .chain()
		*  .trim()
		*  .truncate(7)
		*  .value()
		* // => 'Back...'
		*/
		ChainWrapper.prototype.chain = function() {
			return new ChainWrapper(this._wrappedValue, true);
		};
		/**
		* Modifies the wrapped value with the invocation result of `changer` function. The current wrapped value is the
		* argument of `changer` invocation.
		*
		* @memberof Chain
		* @since 1.0.0
		* @function __proto__thru
		* @param  {Function} changer The function to invoke.
		* @return {Object}           Returns the new wrapper that wraps the invocation result of `changer`.
		* @example
		* v
		*  .chain('sun is shining')
		*  .words()
		*  .thru(function(words) {
		*    return words[0];
		*  })
		*  .value()
		* // => 'sun'
		*
		*/
		ChainWrapper.prototype.thru = function(changer) {
			if (typeof changer === "function") return new ChainWrapper(changer(this._wrappedValue), this._explicitChain);
			return this;
		};
		/**
		* A boolean that indicates if the chain sequence is explicit or implicit.
		* @ignore
		* @type {boolean}
		* @private
		*/
		ChainWrapper.prototype._explicitChain = true;
		/**
		* Make a voca function chainable.
		*
		* @ignore
		* @param  {Function} functionInstance The function to make chainable
		* @return {Function}                  Returns the chainable function
		*/
		function makeFunctionChainable(functionInstance) {
			return function() {
				for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) args[_key] = arguments[_key];
				var result = functionInstance.apply(void 0, [this._wrappedValue].concat(args));
				if (this._explicitChain || typeof result === "string") return new ChainWrapper(result, this._explicitChain);
				else return result;
			};
		}
		Object.keys(functions).forEach(function(name$2) {
			ChainWrapper.prototype[name$2] = makeFunctionChainable(functions[name$2]);
		});
		/**
		* Creates a chain object that wraps `subject`, enabling <i>explicit</i> chain sequences. <br/>
		* Use `v.prototype.value()` to unwrap the result.
		*
		* @memberOf Chain
		* @since 1.0.0
		* @function chain
		* @param  {string} subject The string to wrap.
		* @return {Object}         Returns the new wrapper object.
		* @example
		* v
		*  .chain('Back to School')
		*  .lowerCase()
		*  .words()
		*  .value()
		* // => ['back', 'to', 'school']
		*/
		function chain(subject) {
			return new ChainWrapper(subject, true);
		}
		/**
		* Creates a chain object that wraps `subject`, enabling <i>implicit</i> chain sequences.<br/>
		* A function that returns `number`, `boolean` or `array` type <i>terminates</i> the chain sequence and returns the unwrapped value.
		* Otherwise use `v.prototype.value()` to unwrap the result.
		*
		* @memberOf Chain
		* @since 1.0.0
		* @function v
		* @param {string} subject The string to wrap.
		* @return {Object}  Returns the new wrapper object.
		* @example
		* v('Back to School')
		*  .lowerCase()
		*  .words()
		* // => ['back', 'to', 'school']
		*
		* v(" Back to School ")
		*  .trim()
		*  .truncate(7)
		*  .value()
		* // => 'Back...'
		*/
		function Voca(subject) {
			return new ChainWrapper(subject, false);
		}
		_extends(Voca, functions, { chain });
		return Voca;
	});
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/string-formatter.js
var require_string_formatter = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/string-formatter.js"(exports) {
	var __importDefault$7 = exports && exports.__importDefault || function(mod) {
		return mod && mod.__esModule ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.webEOL = exports.unixEOL = void 0;
	exports.upperCaseSnakeCase = upperCaseSnakeCase;
	exports.camelCase = camelCase;
	exports.titleFormat = titleFormat;
	exports.pascalCase = pascalCase;
	exports.kebabCase = kebabCase;
	exports.formatJson = formatJson;
	const voca_1 = __importDefault$7(require_voca());
	/**
	* Within all files generated by the SDK we use the unix style end of line delimiter.
	* We do not consider if the generator is executed on windows or unix systems.
	* It will always be `\n` to have consistent clients between operating systems.
	*/
	exports.unixEOL = "\n";
	/**
	* For request payloads, etc., it is convention to use the `\r\n` new line.
	*/
	exports.webEOL = "\r\n";
	/**
	* Convert a string to the uppercase snake case. This format is used e.g. for static properties on entity classes.
	* @param str - The string to be transformed.
	* @returns The input string in the case used by static methods on entity-classes.
	*/
	function upperCaseSnakeCase(str) {
		return voca_1.default.upperCase(voca_1.default.snakeCase(str));
	}
	/**
	* Convert a string to camelCase. This format used e.g. for properties on entity class instances.
	* @param str - The string to be transformed.
	* @returns The transformed string.
	*/
	function camelCase(str) {
		return voca_1.default.camelCase(str);
	}
	/**
	* Convert a string to a human readable format, e.g. it transforms `to_BusinessPartner` to `To Business Partner`.
	* @param str - The string to be transformed.
	* @returns The transformed string.
	*/
	function titleFormat(str) {
		return voca_1.default.titleCase(voca_1.default.words(str).join(" "));
	}
	/**
	* Convert a string to pascal case. This format is used e.g. for types.
	* @param str - The string to be transformed.
	* @returns The transformed string.
	*/
	function pascalCase(str) {
		return voca_1.default.words(str).map((word) => voca_1.default.capitalize(word)).join("");
	}
	/**
	* Convert a string to kebab case. This format is used e.g. for file names.
	* @param str - The string to be transformed.
	* @returns The transformed string.
	*/
	function kebabCase(str) {
		return voca_1.default.kebabCase(str);
	}
	/**
	* Convert a JSON object to a string using formatting in line with the prettier with indentation and new line at the end.
	* @param json - Object to be stringified.
	* @returns The JSON object as string.
	*/
	function formatJson(json$1) {
		return JSON.stringify(json$1, null, 2) + exports.unixEOL;
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/string.js
var require_string = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/string.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.encodeBase64 = encodeBase64;
	exports.trimLeft = trimLeft;
	exports.trimRight = trimRight;
	exports.trim = trim$1;
	exports.removeFileExtension = removeFileExtension;
	const string_formatter_1$3 = require_string_formatter();
	/**
	* Encode a string to a base64 encoded string.
	* @param str - String to encode.
	* @returns Base64 encoded string.
	*/
	function encodeBase64(str) {
		return Buffer.from(str).toString("base64");
	}
	/**
	* Remove whitespace from the left side of a string.
	* @param string - String to trim.
	* @returns String without whitespace on the left side.
	*/
	function trimLeft(string) {
		const subStrings = string.split(string_formatter_1$3.unixEOL);
		const leftTrimmed = subStrings[0].trimStart();
		if (!leftTrimmed) subStrings.shift();
		else subStrings[0] = leftTrimmed;
		return subStrings.join(string_formatter_1$3.unixEOL);
	}
	/**
	* Remove whitespace from the right side of a string.
	* @param string - String to trim.
	* @returns String without whitespace on the right side.
	*/
	function trimRight(string) {
		const subStrings = string.split(string_formatter_1$3.unixEOL);
		const rightTrimmed = subStrings[subStrings.length - 1].trimEnd();
		if (!rightTrimmed) subStrings.pop();
		else subStrings[subStrings.length - 1] = rightTrimmed;
		return subStrings.join(string_formatter_1$3.unixEOL);
	}
	/**
	* Remove whitespace from the left and right side of a string.
	* @param string - String to trim.
	* @returns String without outer whitespace.
	*/
	function trim$1(string) {
		return trimRight(trimLeft(string));
	}
	/**
	* Remove file extension from a string, e.g. remove 'test.jpg' would return 'test'.
	* @param fileName - File name to remove the file extension from.
	* @returns File name without extension.
	*/
	function removeFileExtension(fileName) {
		return fileName.includes(".") ? fileName.split(".").slice(0, -1).join(".") : fileName;
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/code-block.js
var require_code_block = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/code-block.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.codeBlock = codeBlock;
	const string_formatter_1$2 = require_string_formatter();
	const array_1$1 = require_array();
	const string_1 = require_string();
	/**
	* @experimental This API is experimental and might change in newer versions. Use with caution.
	* Transform strings and arguments to a string formatted as a code block, keeping the indentation of sub code blocks.
	* Use in tagged templates, e.g.:
	* ```
	* codeBlock`Code with ${arguments} and more code;`
	* ```
	* @param strings - Strings in the tagged template. In the example above that would be ['Code with ', ' and more code;'].
	* @param args - Arguments in the tagged template. In the example above that would be the resolved value for `arguments`;.
	* @returns A string formatted as code block.
	*/
	function codeBlock(strings, ...args) {
		const pre = strings.slice(0, -1).map((string) => {
			const trimmed = trimRightNewlines(string);
			return trimmed.length === string.length ? string : trimmed + string_formatter_1$2.unixEOL;
		});
		pre.push(strings[strings.length - 1]);
		const indents = strings.slice(0, -1).map((s$1) => {
			const indentation = s$1.split(string_formatter_1$2.unixEOL).pop();
			return !indentation.trim() ? indentation : "";
		});
		const post = args.map((arg, i) => ("" + arg).split(string_formatter_1$2.unixEOL).map((subArg) => indents[i] + subArg).join(string_formatter_1$2.unixEOL));
		const zipped = (0, array_1$1.zip)(pre, post);
		return (0, string_1.trim)(zipped.join(""));
	}
	function trimRightNewlines(string) {
		let subStrings = string.split(string_formatter_1$2.unixEOL);
		if (!subStrings[subStrings.length - 1].trim()) subStrings = subStrings.slice(0, -1);
		return subStrings.join(string_formatter_1$2.unixEOL);
	}
} });

//#endregion
//#region node_modules/.pnpm/logform@2.7.0/node_modules/logform/format.js
var require_format$1 = __commonJS({ "node_modules/.pnpm/logform@2.7.0/node_modules/logform/format.js"(exports, module) {
	var InvalidFormatError = class InvalidFormatError extends Error {
		constructor(formatFn) {
			super(`Format functions must be synchronous taking a two arguments: (info, opts)
Found: ${formatFn.toString().split("\n")[0]}\n`);
			Error.captureStackTrace(this, InvalidFormatError);
		}
	};
	module.exports = (formatFn) => {
		if (formatFn.length > 2) throw new InvalidFormatError(formatFn);
		function Format(options = {}) {
			this.options = options;
		}
		Format.prototype.transform = formatFn;
		function createFormatWrap(opts) {
			return new Format(opts);
		}
		createFormatWrap.Format = Format;
		return createFormatWrap;
	};
} });

//#endregion
//#region node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/styles.js
var require_styles = __commonJS({ "node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/styles.js"(exports, module) {
	var styles$2 = {};
	module["exports"] = styles$2;
	var codes$1 = {
		reset: [0, 0],
		bold: [1, 22],
		dim: [2, 22],
		italic: [3, 23],
		underline: [4, 24],
		inverse: [7, 27],
		hidden: [8, 28],
		strikethrough: [9, 29],
		black: [30, 39],
		red: [31, 39],
		green: [32, 39],
		yellow: [33, 39],
		blue: [34, 39],
		magenta: [35, 39],
		cyan: [36, 39],
		white: [37, 39],
		gray: [90, 39],
		grey: [90, 39],
		brightRed: [91, 39],
		brightGreen: [92, 39],
		brightYellow: [93, 39],
		brightBlue: [94, 39],
		brightMagenta: [95, 39],
		brightCyan: [96, 39],
		brightWhite: [97, 39],
		bgBlack: [40, 49],
		bgRed: [41, 49],
		bgGreen: [42, 49],
		bgYellow: [43, 49],
		bgBlue: [44, 49],
		bgMagenta: [45, 49],
		bgCyan: [46, 49],
		bgWhite: [47, 49],
		bgGray: [100, 49],
		bgGrey: [100, 49],
		bgBrightRed: [101, 49],
		bgBrightGreen: [102, 49],
		bgBrightYellow: [103, 49],
		bgBrightBlue: [104, 49],
		bgBrightMagenta: [105, 49],
		bgBrightCyan: [106, 49],
		bgBrightWhite: [107, 49],
		blackBG: [40, 49],
		redBG: [41, 49],
		greenBG: [42, 49],
		yellowBG: [43, 49],
		blueBG: [44, 49],
		magentaBG: [45, 49],
		cyanBG: [46, 49],
		whiteBG: [47, 49]
	};
	Object.keys(codes$1).forEach(function(key$1) {
		var val = codes$1[key$1];
		var style = styles$2[key$1] = [];
		style.open = "\x1B[" + val[0] + "m";
		style.close = "\x1B[" + val[1] + "m";
	});
} });

//#endregion
//#region node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/system/has-flag.js
var require_has_flag$1 = __commonJS({ "node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/system/has-flag.js"(exports, module) {
	module.exports = function(flag, argv) {
		argv = argv || process.argv || [];
		var terminatorPos = argv.indexOf("--");
		var prefix = /^-{1,2}/.test(flag) ? "" : "--";
		var pos = argv.indexOf(prefix + flag);
		return pos !== -1 && (terminatorPos === -1 ? true : pos < terminatorPos);
	};
} });

//#endregion
//#region node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/system/supports-colors.js
var require_supports_colors = __commonJS({ "node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/system/supports-colors.js"(exports, module) {
	var os$6 = __require("os");
	var hasFlag$1 = require_has_flag$1();
	var env$1 = process.env;
	var forceColor$1 = void 0;
	if (hasFlag$1("no-color") || hasFlag$1("no-colors") || hasFlag$1("color=false")) forceColor$1 = false;
	else if (hasFlag$1("color") || hasFlag$1("colors") || hasFlag$1("color=true") || hasFlag$1("color=always")) forceColor$1 = true;
	if ("FORCE_COLOR" in env$1) forceColor$1 = env$1.FORCE_COLOR.length === 0 || parseInt(env$1.FORCE_COLOR, 10) !== 0;
	function translateLevel$1(level) {
		if (level === 0) return false;
		return {
			level,
			hasBasic: true,
			has256: level >= 2,
			has16m: level >= 3
		};
	}
	function supportsColor$1(stream$3) {
		if (forceColor$1 === false) return 0;
		if (hasFlag$1("color=16m") || hasFlag$1("color=full") || hasFlag$1("color=truecolor")) return 3;
		if (hasFlag$1("color=256")) return 2;
		if (stream$3 && !stream$3.isTTY && forceColor$1 !== true) return 0;
		var min$1 = forceColor$1 ? 1 : 0;
		if (process.platform === "win32") {
			var osRelease = os$6.release().split(".");
			if (Number(process.versions.node.split(".")[0]) >= 8 && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) return Number(osRelease[2]) >= 14931 ? 3 : 2;
			return 1;
		}
		if ("CI" in env$1) {
			if ([
				"TRAVIS",
				"CIRCLECI",
				"APPVEYOR",
				"GITLAB_CI"
			].some(function(sign$1) {
				return sign$1 in env$1;
			}) || env$1.CI_NAME === "codeship") return 1;
			return min$1;
		}
		if ("TEAMCITY_VERSION" in env$1) return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env$1.TEAMCITY_VERSION) ? 1 : 0;
		if ("TERM_PROGRAM" in env$1) {
			var version = parseInt((env$1.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
			switch (env$1.TERM_PROGRAM) {
				case "iTerm.app": return version >= 3 ? 3 : 2;
				case "Hyper": return 3;
				case "Apple_Terminal": return 2;
			}
		}
		if (/-256(color)?$/i.test(env$1.TERM)) return 2;
		if (/^screen|^xterm|^vt100|^rxvt|color|ansi|cygwin|linux/i.test(env$1.TERM)) return 1;
		if ("COLORTERM" in env$1) return 1;
		if (env$1.TERM === "dumb") return min$1;
		return min$1;
	}
	function getSupportLevel$1(stream$3) {
		var level = supportsColor$1(stream$3);
		return translateLevel$1(level);
	}
	module.exports = {
		supportsColor: getSupportLevel$1,
		stdout: getSupportLevel$1(process.stdout),
		stderr: getSupportLevel$1(process.stderr)
	};
} });

//#endregion
//#region node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/custom/trap.js
var require_trap = __commonJS({ "node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/custom/trap.js"(exports, module) {
	module["exports"] = function runTheTrap(text, options) {
		var result = "";
		text = text || "Run the trap, drop the bass";
		text = text.split("");
		var trap = {
			a: [
				"@",
				"Ą",
				"Ⱥ",
				"Ʌ",
				"Δ",
				"Λ",
				"Д"
			],
			b: [
				"ß",
				"Ɓ",
				"Ƀ",
				"ɮ",
				"β",
				"฿"
			],
			c: [
				"©",
				"Ȼ",
				"Ͼ"
			],
			d: [
				"Ð",
				"Ɗ",
				"Ԁ",
				"ԁ",
				"Ԃ",
				"ԃ"
			],
			e: [
				"Ë",
				"ĕ",
				"Ǝ",
				"ɘ",
				"Σ",
				"ξ",
				"Ҽ",
				"੬"
			],
			f: ["Ӻ"],
			g: ["ɢ"],
			h: [
				"Ħ",
				"ƕ",
				"Ң",
				"Һ",
				"Ӈ",
				"Ԋ"
			],
			i: ["༏"],
			j: ["Ĵ"],
			k: [
				"ĸ",
				"Ҡ",
				"Ӄ",
				"Ԟ"
			],
			l: ["Ĺ"],
			m: [
				"ʍ",
				"Ӎ",
				"ӎ",
				"Ԡ",
				"ԡ",
				"൩"
			],
			n: [
				"Ñ",
				"ŋ",
				"Ɲ",
				"Ͷ",
				"Π",
				"Ҋ"
			],
			o: [
				"Ø",
				"õ",
				"ø",
				"Ǿ",
				"ʘ",
				"Ѻ",
				"ם",
				"۝",
				"๏"
			],
			p: ["Ƿ", "Ҏ"],
			q: ["্"],
			r: [
				"®",
				"Ʀ",
				"Ȑ",
				"Ɍ",
				"ʀ",
				"Я"
			],
			s: [
				"§",
				"Ϟ",
				"ϟ",
				"Ϩ"
			],
			t: [
				"Ł",
				"Ŧ",
				"ͳ"
			],
			u: ["Ʊ", "Ս"],
			v: ["ט"],
			w: [
				"Ш",
				"Ѡ",
				"Ѽ",
				"൰"
			],
			x: [
				"Ҳ",
				"Ӿ",
				"Ӽ",
				"ӽ"
			],
			y: [
				"¥",
				"Ұ",
				"Ӌ"
			],
			z: ["Ƶ", "ɀ"]
		};
		text.forEach(function(c) {
			c = c.toLowerCase();
			var chars = trap[c] || [" "];
			var rand = Math.floor(Math.random() * chars.length);
			if (typeof trap[c] !== "undefined") result += trap[c][rand];
			else result += c;
		});
		return result;
	};
} });

//#endregion
//#region node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/custom/zalgo.js
var require_zalgo = __commonJS({ "node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/custom/zalgo.js"(exports, module) {
	module["exports"] = function zalgo(text, options) {
		text = text || "   he is here   ";
		var soul = {
			"up": [
				"̍",
				"̎",
				"̄",
				"̅",
				"̿",
				"̑",
				"̆",
				"̐",
				"͒",
				"͗",
				"͑",
				"̇",
				"̈",
				"̊",
				"͂",
				"̓",
				"̈",
				"͊",
				"͋",
				"͌",
				"̃",
				"̂",
				"̌",
				"͐",
				"̀",
				"́",
				"̋",
				"̏",
				"̒",
				"̓",
				"̔",
				"̽",
				"̉",
				"ͣ",
				"ͤ",
				"ͥ",
				"ͦ",
				"ͧ",
				"ͨ",
				"ͩ",
				"ͪ",
				"ͫ",
				"ͬ",
				"ͭ",
				"ͮ",
				"ͯ",
				"̾",
				"͛",
				"͆",
				"̚"
			],
			"down": [
				"̖",
				"̗",
				"̘",
				"̙",
				"̜",
				"̝",
				"̞",
				"̟",
				"̠",
				"̤",
				"̥",
				"̦",
				"̩",
				"̪",
				"̫",
				"̬",
				"̭",
				"̮",
				"̯",
				"̰",
				"̱",
				"̲",
				"̳",
				"̹",
				"̺",
				"̻",
				"̼",
				"ͅ",
				"͇",
				"͈",
				"͉",
				"͍",
				"͎",
				"͓",
				"͔",
				"͕",
				"͖",
				"͙",
				"͚",
				"̣"
			],
			"mid": [
				"̕",
				"̛",
				"̀",
				"́",
				"͘",
				"̡",
				"̢",
				"̧",
				"̨",
				"̴",
				"̵",
				"̶",
				"͜",
				"͝",
				"͞",
				"͟",
				"͠",
				"͢",
				"̸",
				"̷",
				"͡",
				" ҉"
			]
		};
		var all = [].concat(soul.up, soul.down, soul.mid);
		function randomNumber(range) {
			var r = Math.floor(Math.random() * range);
			return r;
		}
		function isChar(character) {
			var bool = false;
			all.filter(function(i) {
				bool = i === character;
			});
			return bool;
		}
		function heComes(text$1, options$1) {
			var result = "";
			var counts;
			var l;
			options$1 = options$1 || {};
			options$1["up"] = typeof options$1["up"] !== "undefined" ? options$1["up"] : true;
			options$1["mid"] = typeof options$1["mid"] !== "undefined" ? options$1["mid"] : true;
			options$1["down"] = typeof options$1["down"] !== "undefined" ? options$1["down"] : true;
			options$1["size"] = typeof options$1["size"] !== "undefined" ? options$1["size"] : "maxi";
			text$1 = text$1.split("");
			for (l in text$1) {
				if (isChar(l)) continue;
				result = result + text$1[l];
				counts = {
					"up": 0,
					"down": 0,
					"mid": 0
				};
				switch (options$1.size) {
					case "mini":
						counts.up = randomNumber(8);
						counts.mid = randomNumber(2);
						counts.down = randomNumber(8);
						break;
					case "maxi":
						counts.up = randomNumber(16) + 3;
						counts.mid = randomNumber(4) + 1;
						counts.down = randomNumber(64) + 3;
						break;
					default:
						counts.up = randomNumber(8) + 1;
						counts.mid = randomNumber(6) / 2;
						counts.down = randomNumber(8) + 1;
						break;
				}
				var arr = [
					"up",
					"mid",
					"down"
				];
				for (var d$1 in arr) {
					var index = arr[d$1];
					for (var i = 0; i <= counts[index]; i++) if (options$1[index]) result = result + soul[index][randomNumber(soul[index].length)];
				}
			}
			return result;
		}
		return heComes(text, options);
	};
} });

//#endregion
//#region node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/maps/america.js
var require_america = __commonJS({ "node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/maps/america.js"(exports, module) {
	module["exports"] = function(colors$4) {
		return function(letter, i, exploded) {
			if (letter === " ") return letter;
			switch (i % 3) {
				case 0: return colors$4.red(letter);
				case 1: return colors$4.white(letter);
				case 2: return colors$4.blue(letter);
			}
		};
	};
} });

//#endregion
//#region node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/maps/zebra.js
var require_zebra = __commonJS({ "node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/maps/zebra.js"(exports, module) {
	module["exports"] = function(colors$4) {
		return function(letter, i, exploded) {
			return i % 2 === 0 ? letter : colors$4.inverse(letter);
		};
	};
} });

//#endregion
//#region node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/maps/rainbow.js
var require_rainbow = __commonJS({ "node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/maps/rainbow.js"(exports, module) {
	module["exports"] = function(colors$4) {
		var rainbowColors = [
			"red",
			"yellow",
			"green",
			"blue",
			"magenta"
		];
		return function(letter, i, exploded) {
			if (letter === " ") return letter;
			else return colors$4[rainbowColors[i++ % rainbowColors.length]](letter);
		};
	};
} });

//#endregion
//#region node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/maps/random.js
var require_random = __commonJS({ "node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/maps/random.js"(exports, module) {
	module["exports"] = function(colors$4) {
		var available = [
			"underline",
			"inverse",
			"grey",
			"yellow",
			"red",
			"green",
			"blue",
			"white",
			"cyan",
			"magenta",
			"brightYellow",
			"brightRed",
			"brightGreen",
			"brightBlue",
			"brightWhite",
			"brightCyan",
			"brightMagenta"
		];
		return function(letter, i, exploded) {
			return letter === " " ? letter : colors$4[available[Math.round(Math.random() * (available.length - 2))]](letter);
		};
	};
} });

//#endregion
//#region node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/colors.js
var require_colors = __commonJS({ "node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/lib/colors.js"(exports, module) {
	var colors$3 = {};
	module["exports"] = colors$3;
	colors$3.themes = {};
	var util$15 = __require("util");
	var ansiStyles$1 = colors$3.styles = require_styles();
	var defineProps = Object.defineProperties;
	var newLineRegex = new RegExp(/[\r\n]+/g);
	colors$3.supportsColor = require_supports_colors().supportsColor;
	if (typeof colors$3.enabled === "undefined") colors$3.enabled = colors$3.supportsColor() !== false;
	colors$3.enable = function() {
		colors$3.enabled = true;
	};
	colors$3.disable = function() {
		colors$3.enabled = false;
	};
	colors$3.stripColors = colors$3.strip = function(str) {
		return ("" + str).replace(/\x1B\[\d+m/g, "");
	};
	var stylize = colors$3.stylize = function stylize$1(str, style) {
		if (!colors$3.enabled) return str + "";
		var styleMap = ansiStyles$1[style];
		if (!styleMap && style in colors$3) return colors$3[style](str);
		return styleMap.open + str + styleMap.close;
	};
	var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
	var escapeStringRegexp = function(str) {
		if (typeof str !== "string") throw new TypeError("Expected a string");
		return str.replace(matchOperatorsRe, "\\$&");
	};
	function build(_styles) {
		var builder = function builder$1() {
			return applyStyle$1.apply(builder$1, arguments);
		};
		builder._styles = _styles;
		builder.__proto__ = proto$1;
		return builder;
	}
	var styles$1 = function() {
		var ret = {};
		ansiStyles$1.grey = ansiStyles$1.gray;
		Object.keys(ansiStyles$1).forEach(function(key$1) {
			ansiStyles$1[key$1].closeRe = new RegExp(escapeStringRegexp(ansiStyles$1[key$1].close), "g");
			ret[key$1] = { get: function() {
				return build(this._styles.concat(key$1));
			} };
		});
		return ret;
	}();
	var proto$1 = defineProps(function colors$4() {}, styles$1);
	function applyStyle$1() {
		var args = Array.prototype.slice.call(arguments);
		var str = args.map(function(arg) {
			if (arg != null && arg.constructor === String) return arg;
			else return util$15.inspect(arg);
		}).join(" ");
		if (!colors$3.enabled || !str) return str;
		var newLinesPresent = str.indexOf("\n") != -1;
		var nestedStyles = this._styles;
		var i = nestedStyles.length;
		while (i--) {
			var code = ansiStyles$1[nestedStyles[i]];
			str = code.open + str.replace(code.closeRe, code.open) + code.close;
			if (newLinesPresent) str = str.replace(newLineRegex, function(match) {
				return code.close + match + code.open;
			});
		}
		return str;
	}
	colors$3.setTheme = function(theme) {
		if (typeof theme === "string") {
			console.log("colors.setTheme now only accepts an object, not a string.  If you are trying to set a theme from a file, it is now your (the caller's) responsibility to require the file.  The old syntax looked like colors.setTheme(__dirname + '/../themes/generic-logging.js'); The new syntax looks like colors.setTheme(require(__dirname + '/../themes/generic-logging.js'));");
			return;
		}
		for (var style in theme) (function(style$1) {
			colors$3[style$1] = function(str) {
				if (typeof theme[style$1] === "object") {
					var out = str;
					for (var i in theme[style$1]) out = colors$3[theme[style$1][i]](out);
					return out;
				}
				return colors$3[theme[style$1]](str);
			};
		})(style);
	};
	function init$1() {
		var ret = {};
		Object.keys(styles$1).forEach(function(name$2) {
			ret[name$2] = { get: function() {
				return build([name$2]);
			} };
		});
		return ret;
	}
	var sequencer = function sequencer$1(map$1, str) {
		var exploded = str.split("");
		exploded = exploded.map(map$1);
		return exploded.join("");
	};
	colors$3.trap = require_trap();
	colors$3.zalgo = require_zalgo();
	colors$3.maps = {};
	colors$3.maps.america = require_america()(colors$3);
	colors$3.maps.zebra = require_zebra()(colors$3);
	colors$3.maps.rainbow = require_rainbow()(colors$3);
	colors$3.maps.random = require_random()(colors$3);
	for (var map in colors$3.maps) (function(map$1) {
		colors$3[map$1] = function(str) {
			return sequencer(colors$3.maps[map$1], str);
		};
	})(map);
	defineProps(colors$3, init$1());
} });

//#endregion
//#region node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/safe.js
var require_safe = __commonJS({ "node_modules/.pnpm/@colors+colors@1.6.0/node_modules/@colors/colors/safe.js"(exports, module) {
	var colors$2 = require_colors();
	module["exports"] = colors$2;
} });

//#endregion
//#region node_modules/.pnpm/triple-beam@1.4.1/node_modules/triple-beam/config/cli.js
var require_cli$1 = __commonJS({ "node_modules/.pnpm/triple-beam@1.4.1/node_modules/triple-beam/config/cli.js"(exports) {
	/**
	* Default levels for the CLI configuration.
	* @type {Object}
	*/
	exports.levels = {
		error: 0,
		warn: 1,
		help: 2,
		data: 3,
		info: 4,
		debug: 5,
		prompt: 6,
		verbose: 7,
		input: 8,
		silly: 9
	};
	/**
	* Default colors for the CLI configuration.
	* @type {Object}
	*/
	exports.colors = {
		error: "red",
		warn: "yellow",
		help: "cyan",
		data: "grey",
		info: "green",
		debug: "blue",
		prompt: "grey",
		verbose: "cyan",
		input: "grey",
		silly: "magenta"
	};
} });

//#endregion
//#region node_modules/.pnpm/triple-beam@1.4.1/node_modules/triple-beam/config/npm.js
var require_npm = __commonJS({ "node_modules/.pnpm/triple-beam@1.4.1/node_modules/triple-beam/config/npm.js"(exports) {
	/**
	* Default levels for the npm configuration.
	* @type {Object}
	*/
	exports.levels = {
		error: 0,
		warn: 1,
		info: 2,
		http: 3,
		verbose: 4,
		debug: 5,
		silly: 6
	};
	/**
	* Default levels for the npm configuration.
	* @type {Object}
	*/
	exports.colors = {
		error: "red",
		warn: "yellow",
		info: "green",
		http: "green",
		verbose: "cyan",
		debug: "blue",
		silly: "magenta"
	};
} });

//#endregion
//#region node_modules/.pnpm/triple-beam@1.4.1/node_modules/triple-beam/config/syslog.js
var require_syslog = __commonJS({ "node_modules/.pnpm/triple-beam@1.4.1/node_modules/triple-beam/config/syslog.js"(exports) {
	/**
	* Default levels for the syslog configuration.
	* @type {Object}
	*/
	exports.levels = {
		emerg: 0,
		alert: 1,
		crit: 2,
		error: 3,
		warning: 4,
		notice: 5,
		info: 6,
		debug: 7
	};
	/**
	* Default levels for the syslog configuration.
	* @type {Object}
	*/
	exports.colors = {
		emerg: "red",
		alert: "yellow",
		crit: "red",
		error: "red",
		warning: "red",
		notice: "yellow",
		info: "green",
		debug: "blue"
	};
} });

//#endregion
//#region node_modules/.pnpm/triple-beam@1.4.1/node_modules/triple-beam/config/index.js
var require_config$1 = __commonJS({ "node_modules/.pnpm/triple-beam@1.4.1/node_modules/triple-beam/config/index.js"(exports) {
	/**
	* Export config set for the CLI.
	* @type {Object}
	*/
	Object.defineProperty(exports, "cli", { value: require_cli$1() });
	/**
	* Export config set for npm.
	* @type {Object}
	*/
	Object.defineProperty(exports, "npm", { value: require_npm() });
	/**
	* Export config set for the syslog.
	* @type {Object}
	*/
	Object.defineProperty(exports, "syslog", { value: require_syslog() });
} });

//#endregion
//#region node_modules/.pnpm/triple-beam@1.4.1/node_modules/triple-beam/index.js
var require_triple_beam = __commonJS({ "node_modules/.pnpm/triple-beam@1.4.1/node_modules/triple-beam/index.js"(exports) {
	/**
	* A shareable symbol constant that can be used
	* as a non-enumerable / semi-hidden level identifier
	* to allow the readable level property to be mutable for
	* operations like colorization
	*
	* @type {Symbol}
	*/
	Object.defineProperty(exports, "LEVEL", { value: Symbol.for("level") });
	/**
	* A shareable symbol constant that can be used
	* as a non-enumerable / semi-hidden message identifier
	* to allow the final message property to not have
	* side effects on another.
	*
	* @type {Symbol}
	*/
	Object.defineProperty(exports, "MESSAGE", { value: Symbol.for("message") });
	/**
	* A shareable symbol constant that can be used
	* as a non-enumerable / semi-hidden message identifier
	* to allow the extracted splat property be hidden
	*
	* @type {Symbol}
	*/
	Object.defineProperty(exports, "SPLAT", { value: Symbol.for("splat") });
	/**
	* A shareable object constant  that can be used
	* as a standard configuration for winston@3.
	*
	* @type {Object}
	*/
	Object.defineProperty(exports, "configs", { value: require_config$1() });
} });

//#endregion
//#region node_modules/.pnpm/logform@2.7.0/node_modules/logform/colorize.js
var require_colorize = __commonJS({ "node_modules/.pnpm/logform@2.7.0/node_modules/logform/colorize.js"(exports, module) {
	const colors$1 = require_safe();
	const { LEVEL: LEVEL$8, MESSAGE: MESSAGE$12 } = require_triple_beam();
	colors$1.enabled = true;
	/**
	* @property {RegExp} hasSpace
	* Simple regex to check for presence of spaces.
	*/
	const hasSpace = /\s+/;
	var Colorizer$2 = class Colorizer$2 {
		constructor(opts = {}) {
			if (opts.colors) this.addColors(opts.colors);
			this.options = opts;
		}
		static addColors(clrs) {
			const nextColors = Object.keys(clrs).reduce((acc, level) => {
				acc[level] = hasSpace.test(clrs[level]) ? clrs[level].split(hasSpace) : clrs[level];
				return acc;
			}, {});
			Colorizer$2.allColors = Object.assign({}, Colorizer$2.allColors || {}, nextColors);
			return Colorizer$2.allColors;
		}
		addColors(clrs) {
			return Colorizer$2.addColors(clrs);
		}
		colorize(lookup$1, level, message) {
			if (typeof message === "undefined") message = level;
			if (!Array.isArray(Colorizer$2.allColors[lookup$1])) return colors$1[Colorizer$2.allColors[lookup$1]](message);
			for (let i = 0, len = Colorizer$2.allColors[lookup$1].length; i < len; i++) message = colors$1[Colorizer$2.allColors[lookup$1][i]](message);
			return message;
		}
		transform(info$1, opts) {
			if (opts.all && typeof info$1[MESSAGE$12] === "string") info$1[MESSAGE$12] = this.colorize(info$1[LEVEL$8], info$1.level, info$1[MESSAGE$12]);
			if (opts.level || opts.all || !opts.message) info$1.level = this.colorize(info$1[LEVEL$8], info$1.level);
			if (opts.all || opts.message) info$1.message = this.colorize(info$1[LEVEL$8], info$1.level, info$1.message);
			return info$1;
		}
	};
	module.exports = (opts) => new Colorizer$2(opts);
	module.exports.Colorizer = module.exports.Format = Colorizer$2;
} });

//#endregion
//#region node_modules/.pnpm/logform@2.7.0/node_modules/logform/levels.js
var require_levels = __commonJS({ "node_modules/.pnpm/logform@2.7.0/node_modules/logform/levels.js"(exports, module) {
	const { Colorizer: Colorizer$1 } = require_colorize();
	module.exports = (config$2) => {
		Colorizer$1.addColors(config$2.colors || config$2);
		return config$2;
	};
} });

//#endregion
//#region node_modules/.pnpm/logform@2.7.0/node_modules/logform/align.js
var require_align = __commonJS({ "node_modules/.pnpm/logform@2.7.0/node_modules/logform/align.js"(exports, module) {
	const format$13 = require_format$1();
	module.exports = format$13((info$1) => {
		info$1.message = `\t${info$1.message}`;
		return info$1;
	});
} });

//#endregion
//#region node_modules/.pnpm/logform@2.7.0/node_modules/logform/errors.js
var require_errors$1 = __commonJS({ "node_modules/.pnpm/logform@2.7.0/node_modules/logform/errors.js"(exports, module) {
	const format$12 = require_format$1();
	const { LEVEL: LEVEL$7, MESSAGE: MESSAGE$11 } = require_triple_beam();
	module.exports = format$12((einfo, { stack, cause }) => {
		if (einfo instanceof Error) {
			const info$1 = Object.assign({}, einfo, {
				level: einfo.level,
				[LEVEL$7]: einfo[LEVEL$7] || einfo.level,
				message: einfo.message,
				[MESSAGE$11]: einfo[MESSAGE$11] || einfo.message
			});
			if (stack) info$1.stack = einfo.stack;
			if (cause) info$1.cause = einfo.cause;
			return info$1;
		}
		if (!(einfo.message instanceof Error)) return einfo;
		const err = einfo.message;
		Object.assign(einfo, err);
		einfo.message = err.message;
		einfo[MESSAGE$11] = err.message;
		if (stack) einfo.stack = err.stack;
		if (cause) einfo.cause = err.cause;
		return einfo;
	});
} });

//#endregion
//#region node_modules/.pnpm/logform@2.7.0/node_modules/logform/pad-levels.js
var require_pad_levels = __commonJS({ "node_modules/.pnpm/logform@2.7.0/node_modules/logform/pad-levels.js"(exports, module) {
	const { configs: configs$2, LEVEL: LEVEL$6, MESSAGE: MESSAGE$10 } = require_triple_beam();
	var Padder$1 = class Padder$1 {
		constructor(opts = { levels: configs$2.npm.levels }) {
			this.paddings = Padder$1.paddingForLevels(opts.levels, opts.filler);
			this.options = opts;
		}
		/**
		* Returns the maximum length of keys in the specified `levels` Object.
		* @param  {Object} levels Set of all levels to calculate longest level against.
		* @returns {Number} Maximum length of the longest level string.
		*/
		static getLongestLevel(levels) {
			const lvls = Object.keys(levels).map((level) => level.length);
			return Math.max(...lvls);
		}
		/**
		* Returns the padding for the specified `level` assuming that the
		* maximum length of all levels it's associated with is `maxLength`.
		* @param  {String} level Level to calculate padding for.
		* @param  {String} filler Repeatable text to use for padding.
		* @param  {Number} maxLength Length of the longest level
		* @returns {String} Padding string for the `level`
		*/
		static paddingForLevel(level, filler, maxLength) {
			const targetLen = maxLength + 1 - level.length;
			const rep = Math.floor(targetLen / filler.length);
			const padding = `${filler}${filler.repeat(rep)}`;
			return padding.slice(0, targetLen);
		}
		/**
		* Returns an object with the string paddings for the given `levels`
		* using the specified `filler`.
		* @param  {Object} levels Set of all levels to calculate padding for.
		* @param  {String} filler Repeatable text to use for padding.
		* @returns {Object} Mapping of level to desired padding.
		*/
		static paddingForLevels(levels, filler = " ") {
			const maxLength = Padder$1.getLongestLevel(levels);
			return Object.keys(levels).reduce((acc, level) => {
				acc[level] = Padder$1.paddingForLevel(level, filler, maxLength);
				return acc;
			}, {});
		}
		/**
		* Prepends the padding onto the `message` based on the `LEVEL` of
		* the `info`. This is based on the behavior of `winston@2` which also
		* prepended the level onto the message.
		*
		* See: https://github.com/winstonjs/winston/blob/2.x/lib/winston/logger.js#L198-L201
		*
		* @param  {Info} info Logform info object
		* @param  {Object} opts Options passed along to this instance.
		* @returns {Info} Modified logform info object.
		*/
		transform(info$1, opts) {
			info$1.message = `${this.paddings[info$1[LEVEL$6]]}${info$1.message}`;
			if (info$1[MESSAGE$10]) info$1[MESSAGE$10] = `${this.paddings[info$1[LEVEL$6]]}${info$1[MESSAGE$10]}`;
			return info$1;
		}
	};
	module.exports = (opts) => new Padder$1(opts);
	module.exports.Padder = module.exports.Format = Padder$1;
} });

//#endregion
//#region node_modules/.pnpm/logform@2.7.0/node_modules/logform/cli.js
var require_cli = __commonJS({ "node_modules/.pnpm/logform@2.7.0/node_modules/logform/cli.js"(exports, module) {
	const { Colorizer } = require_colorize();
	const { Padder } = require_pad_levels();
	const { configs: configs$1, MESSAGE: MESSAGE$9 } = require_triple_beam();
	/**
	* Cli format class that handles initial state for a a separate
	* Colorizer and Padder instance.
	*/
	var CliFormat = class {
		constructor(opts = {}) {
			if (!opts.levels) opts.levels = configs$1.cli.levels;
			this.colorizer = new Colorizer(opts);
			this.padder = new Padder(opts);
			this.options = opts;
		}
		transform(info$1, opts) {
			this.colorizer.transform(this.padder.transform(info$1, opts), opts);
			info$1[MESSAGE$9] = `${info$1.level}:${info$1.message}`;
			return info$1;
		}
	};
	module.exports = (opts) => new CliFormat(opts);
	module.exports.Format = CliFormat;
} });

//#endregion
//#region node_modules/.pnpm/logform@2.7.0/node_modules/logform/combine.js
var require_combine = __commonJS({ "node_modules/.pnpm/logform@2.7.0/node_modules/logform/combine.js"(exports, module) {
	const format$11 = require_format$1();
	function cascade(formats) {
		if (!formats.every(isValidFormat)) return;
		return (info$1) => {
			let obj = info$1;
			for (let i = 0; i < formats.length; i++) {
				obj = formats[i].transform(obj, formats[i].options);
				if (!obj) return false;
			}
			return obj;
		};
	}
	function isValidFormat(fmt) {
		if (typeof fmt.transform !== "function") throw new Error([
			"No transform function found on format. Did you create a format instance?",
			"const myFormat = format(formatFn);",
			"const instance = myFormat();"
		].join("\n"));
		return true;
	}
	module.exports = (...formats) => {
		const combinedFormat = format$11(cascade(formats));
		const instance = combinedFormat();
		instance.Format = combinedFormat.Format;
		return instance;
	};
	module.exports.cascade = cascade;
} });

//#endregion
//#region node_modules/.pnpm/safe-stable-stringify@2.5.0/node_modules/safe-stable-stringify/index.js
var require_safe_stable_stringify = __commonJS({ "node_modules/.pnpm/safe-stable-stringify@2.5.0/node_modules/safe-stable-stringify/index.js"(exports, module) {
	const { hasOwnProperty: hasOwnProperty$4 } = Object.prototype;
	const stringify$1 = configure$1();
	stringify$1.configure = configure$1;
	stringify$1.stringify = stringify$1;
	stringify$1.default = stringify$1;
	exports.stringify = stringify$1;
	exports.configure = configure$1;
	module.exports = stringify$1;
	const strEscapeSequencesRegExp = /[\u0000-\u001f\u0022\u005c\ud800-\udfff]/;
	function strEscape(str) {
		if (str.length < 5e3 && !strEscapeSequencesRegExp.test(str)) return `"${str}"`;
		return JSON.stringify(str);
	}
	function sort$2(array, comparator) {
		if (array.length > 200 || comparator) return array.sort(comparator);
		for (let i = 1; i < array.length; i++) {
			const currentValue = array[i];
			let position = i;
			while (position !== 0 && array[position - 1] > currentValue) {
				array[position] = array[position - 1];
				position--;
			}
			array[position] = currentValue;
		}
		return array;
	}
	const typedArrayPrototypeGetSymbolToStringTag = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(Object.getPrototypeOf(new Int8Array())), Symbol.toStringTag).get;
	function isTypedArrayWithEntries(value) {
		return typedArrayPrototypeGetSymbolToStringTag.call(value) !== void 0 && value.length !== 0;
	}
	function stringifyTypedArray(array, separator, maximumBreadth) {
		if (array.length < maximumBreadth) maximumBreadth = array.length;
		const whitespace = separator === "," ? "" : " ";
		let res = `"0":${whitespace}${array[0]}`;
		for (let i = 1; i < maximumBreadth; i++) res += `${separator}"${i}":${whitespace}${array[i]}`;
		return res;
	}
	function getCircularValueOption(options) {
		if (hasOwnProperty$4.call(options, "circularValue")) {
			const circularValue = options.circularValue;
			if (typeof circularValue === "string") return `"${circularValue}"`;
			if (circularValue == null) return circularValue;
			if (circularValue === Error || circularValue === TypeError) return { toString() {
				throw new TypeError("Converting circular structure to JSON");
			} };
			throw new TypeError("The \"circularValue\" argument must be of type string or the value null or undefined");
		}
		return "\"[Circular]\"";
	}
	function getDeterministicOption(options) {
		let value;
		if (hasOwnProperty$4.call(options, "deterministic")) {
			value = options.deterministic;
			if (typeof value !== "boolean" && typeof value !== "function") throw new TypeError("The \"deterministic\" argument must be of type boolean or comparator function");
		}
		return value === void 0 ? true : value;
	}
	function getBooleanOption(options, key$1) {
		let value;
		if (hasOwnProperty$4.call(options, key$1)) {
			value = options[key$1];
			if (typeof value !== "boolean") throw new TypeError(`The "${key$1}" argument must be of type boolean`);
		}
		return value === void 0 ? true : value;
	}
	function getPositiveIntegerOption(options, key$1) {
		let value;
		if (hasOwnProperty$4.call(options, key$1)) {
			value = options[key$1];
			if (typeof value !== "number") throw new TypeError(`The "${key$1}" argument must be of type number`);
			if (!Number.isInteger(value)) throw new TypeError(`The "${key$1}" argument must be an integer`);
			if (value < 1) throw new RangeError(`The "${key$1}" argument must be >= 1`);
		}
		return value === void 0 ? Infinity : value;
	}
	function getItemCount(number) {
		if (number === 1) return "1 item";
		return `${number} items`;
	}
	function getUniqueReplacerSet(replacerArray) {
		const replacerSet = new Set();
		for (const value of replacerArray) if (typeof value === "string" || typeof value === "number") replacerSet.add(String(value));
		return replacerSet;
	}
	function getStrictOption(options) {
		if (hasOwnProperty$4.call(options, "strict")) {
			const value = options.strict;
			if (typeof value !== "boolean") throw new TypeError("The \"strict\" argument must be of type boolean");
			if (value) return (value$1) => {
				let message = `Object can not safely be stringified. Received type ${typeof value$1}`;
				if (typeof value$1 !== "function") message += ` (${value$1.toString()})`;
				throw new Error(message);
			};
		}
	}
	function configure$1(options) {
		options = { ...options };
		const fail$1 = getStrictOption(options);
		if (fail$1) {
			if (options.bigint === void 0) options.bigint = false;
			if (!("circularValue" in options)) options.circularValue = Error;
		}
		const circularValue = getCircularValueOption(options);
		const bigint = getBooleanOption(options, "bigint");
		const deterministic = getDeterministicOption(options);
		const comparator = typeof deterministic === "function" ? deterministic : void 0;
		const maximumDepth = getPositiveIntegerOption(options, "maximumDepth");
		const maximumBreadth = getPositiveIntegerOption(options, "maximumBreadth");
		function stringifyFnReplacer(key$1, parent, stack, replacer$1, spacer, indentation) {
			let value = parent[key$1];
			if (typeof value === "object" && value !== null && typeof value.toJSON === "function") value = value.toJSON(key$1);
			value = replacer$1.call(parent, key$1, value);
			switch (typeof value) {
				case "string": return strEscape(value);
				case "object": {
					if (value === null) return "null";
					if (stack.indexOf(value) !== -1) return circularValue;
					let res = "";
					let join$1 = ",";
					const originalIndentation = indentation;
					if (Array.isArray(value)) {
						if (value.length === 0) return "[]";
						if (maximumDepth < stack.length + 1) return "\"[Array]\"";
						stack.push(value);
						if (spacer !== "") {
							indentation += spacer;
							res += `\n${indentation}`;
							join$1 = `,\n${indentation}`;
						}
						const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
						let i = 0;
						for (; i < maximumValuesToStringify - 1; i++) {
							const tmp$1 = stringifyFnReplacer(String(i), value, stack, replacer$1, spacer, indentation);
							res += tmp$1 !== void 0 ? tmp$1 : "null";
							res += join$1;
						}
						const tmp = stringifyFnReplacer(String(i), value, stack, replacer$1, spacer, indentation);
						res += tmp !== void 0 ? tmp : "null";
						if (value.length - 1 > maximumBreadth) {
							const removedKeys = value.length - maximumBreadth - 1;
							res += `${join$1}"... ${getItemCount(removedKeys)} not stringified"`;
						}
						if (spacer !== "") res += `\n${originalIndentation}`;
						stack.pop();
						return `[${res}]`;
					}
					let keys$2 = Object.keys(value);
					const keyLength = keys$2.length;
					if (keyLength === 0) return "{}";
					if (maximumDepth < stack.length + 1) return "\"[Object]\"";
					let whitespace = "";
					let separator = "";
					if (spacer !== "") {
						indentation += spacer;
						join$1 = `,\n${indentation}`;
						whitespace = " ";
					}
					const maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
					if (deterministic && !isTypedArrayWithEntries(value)) keys$2 = sort$2(keys$2, comparator);
					stack.push(value);
					for (let i = 0; i < maximumPropertiesToStringify; i++) {
						const key$2 = keys$2[i];
						const tmp = stringifyFnReplacer(key$2, value, stack, replacer$1, spacer, indentation);
						if (tmp !== void 0) {
							res += `${separator}${strEscape(key$2)}:${whitespace}${tmp}`;
							separator = join$1;
						}
					}
					if (keyLength > maximumBreadth) {
						const removedKeys = keyLength - maximumBreadth;
						res += `${separator}"...":${whitespace}"${getItemCount(removedKeys)} not stringified"`;
						separator = join$1;
					}
					if (spacer !== "" && separator.length > 1) res = `\n${indentation}${res}\n${originalIndentation}`;
					stack.pop();
					return `{${res}}`;
				}
				case "number": return isFinite(value) ? String(value) : fail$1 ? fail$1(value) : "null";
				case "boolean": return value === true ? "true" : "false";
				case "undefined": return void 0;
				case "bigint": if (bigint) return String(value);
				default: return fail$1 ? fail$1(value) : void 0;
			}
		}
		function stringifyArrayReplacer(key$1, value, stack, replacer$1, spacer, indentation) {
			if (typeof value === "object" && value !== null && typeof value.toJSON === "function") value = value.toJSON(key$1);
			switch (typeof value) {
				case "string": return strEscape(value);
				case "object": {
					if (value === null) return "null";
					if (stack.indexOf(value) !== -1) return circularValue;
					const originalIndentation = indentation;
					let res = "";
					let join$1 = ",";
					if (Array.isArray(value)) {
						if (value.length === 0) return "[]";
						if (maximumDepth < stack.length + 1) return "\"[Array]\"";
						stack.push(value);
						if (spacer !== "") {
							indentation += spacer;
							res += `\n${indentation}`;
							join$1 = `,\n${indentation}`;
						}
						const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
						let i = 0;
						for (; i < maximumValuesToStringify - 1; i++) {
							const tmp$1 = stringifyArrayReplacer(String(i), value[i], stack, replacer$1, spacer, indentation);
							res += tmp$1 !== void 0 ? tmp$1 : "null";
							res += join$1;
						}
						const tmp = stringifyArrayReplacer(String(i), value[i], stack, replacer$1, spacer, indentation);
						res += tmp !== void 0 ? tmp : "null";
						if (value.length - 1 > maximumBreadth) {
							const removedKeys = value.length - maximumBreadth - 1;
							res += `${join$1}"... ${getItemCount(removedKeys)} not stringified"`;
						}
						if (spacer !== "") res += `\n${originalIndentation}`;
						stack.pop();
						return `[${res}]`;
					}
					stack.push(value);
					let whitespace = "";
					if (spacer !== "") {
						indentation += spacer;
						join$1 = `,\n${indentation}`;
						whitespace = " ";
					}
					let separator = "";
					for (const key$2 of replacer$1) {
						const tmp = stringifyArrayReplacer(key$2, value[key$2], stack, replacer$1, spacer, indentation);
						if (tmp !== void 0) {
							res += `${separator}${strEscape(key$2)}:${whitespace}${tmp}`;
							separator = join$1;
						}
					}
					if (spacer !== "" && separator.length > 1) res = `\n${indentation}${res}\n${originalIndentation}`;
					stack.pop();
					return `{${res}}`;
				}
				case "number": return isFinite(value) ? String(value) : fail$1 ? fail$1(value) : "null";
				case "boolean": return value === true ? "true" : "false";
				case "undefined": return void 0;
				case "bigint": if (bigint) return String(value);
				default: return fail$1 ? fail$1(value) : void 0;
			}
		}
		function stringifyIndent(key$1, value, stack, spacer, indentation) {
			switch (typeof value) {
				case "string": return strEscape(value);
				case "object": {
					if (value === null) return "null";
					if (typeof value.toJSON === "function") {
						value = value.toJSON(key$1);
						if (typeof value !== "object") return stringifyIndent(key$1, value, stack, spacer, indentation);
						if (value === null) return "null";
					}
					if (stack.indexOf(value) !== -1) return circularValue;
					const originalIndentation = indentation;
					if (Array.isArray(value)) {
						if (value.length === 0) return "[]";
						if (maximumDepth < stack.length + 1) return "\"[Array]\"";
						stack.push(value);
						indentation += spacer;
						let res$1 = `\n${indentation}`;
						const join$2 = `,\n${indentation}`;
						const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
						let i = 0;
						for (; i < maximumValuesToStringify - 1; i++) {
							const tmp$1 = stringifyIndent(String(i), value[i], stack, spacer, indentation);
							res$1 += tmp$1 !== void 0 ? tmp$1 : "null";
							res$1 += join$2;
						}
						const tmp = stringifyIndent(String(i), value[i], stack, spacer, indentation);
						res$1 += tmp !== void 0 ? tmp : "null";
						if (value.length - 1 > maximumBreadth) {
							const removedKeys = value.length - maximumBreadth - 1;
							res$1 += `${join$2}"... ${getItemCount(removedKeys)} not stringified"`;
						}
						res$1 += `\n${originalIndentation}`;
						stack.pop();
						return `[${res$1}]`;
					}
					let keys$2 = Object.keys(value);
					const keyLength = keys$2.length;
					if (keyLength === 0) return "{}";
					if (maximumDepth < stack.length + 1) return "\"[Object]\"";
					indentation += spacer;
					const join$1 = `,\n${indentation}`;
					let res = "";
					let separator = "";
					let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
					if (isTypedArrayWithEntries(value)) {
						res += stringifyTypedArray(value, join$1, maximumBreadth);
						keys$2 = keys$2.slice(value.length);
						maximumPropertiesToStringify -= value.length;
						separator = join$1;
					}
					if (deterministic) keys$2 = sort$2(keys$2, comparator);
					stack.push(value);
					for (let i = 0; i < maximumPropertiesToStringify; i++) {
						const key$2 = keys$2[i];
						const tmp = stringifyIndent(key$2, value[key$2], stack, spacer, indentation);
						if (tmp !== void 0) {
							res += `${separator}${strEscape(key$2)}: ${tmp}`;
							separator = join$1;
						}
					}
					if (keyLength > maximumBreadth) {
						const removedKeys = keyLength - maximumBreadth;
						res += `${separator}"...": "${getItemCount(removedKeys)} not stringified"`;
						separator = join$1;
					}
					if (separator !== "") res = `\n${indentation}${res}\n${originalIndentation}`;
					stack.pop();
					return `{${res}}`;
				}
				case "number": return isFinite(value) ? String(value) : fail$1 ? fail$1(value) : "null";
				case "boolean": return value === true ? "true" : "false";
				case "undefined": return void 0;
				case "bigint": if (bigint) return String(value);
				default: return fail$1 ? fail$1(value) : void 0;
			}
		}
		function stringifySimple(key$1, value, stack) {
			switch (typeof value) {
				case "string": return strEscape(value);
				case "object": {
					if (value === null) return "null";
					if (typeof value.toJSON === "function") {
						value = value.toJSON(key$1);
						if (typeof value !== "object") return stringifySimple(key$1, value, stack);
						if (value === null) return "null";
					}
					if (stack.indexOf(value) !== -1) return circularValue;
					let res = "";
					const hasLength = value.length !== void 0;
					if (hasLength && Array.isArray(value)) {
						if (value.length === 0) return "[]";
						if (maximumDepth < stack.length + 1) return "\"[Array]\"";
						stack.push(value);
						const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
						let i = 0;
						for (; i < maximumValuesToStringify - 1; i++) {
							const tmp$1 = stringifySimple(String(i), value[i], stack);
							res += tmp$1 !== void 0 ? tmp$1 : "null";
							res += ",";
						}
						const tmp = stringifySimple(String(i), value[i], stack);
						res += tmp !== void 0 ? tmp : "null";
						if (value.length - 1 > maximumBreadth) {
							const removedKeys = value.length - maximumBreadth - 1;
							res += `,"... ${getItemCount(removedKeys)} not stringified"`;
						}
						stack.pop();
						return `[${res}]`;
					}
					let keys$2 = Object.keys(value);
					const keyLength = keys$2.length;
					if (keyLength === 0) return "{}";
					if (maximumDepth < stack.length + 1) return "\"[Object]\"";
					let separator = "";
					let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
					if (hasLength && isTypedArrayWithEntries(value)) {
						res += stringifyTypedArray(value, ",", maximumBreadth);
						keys$2 = keys$2.slice(value.length);
						maximumPropertiesToStringify -= value.length;
						separator = ",";
					}
					if (deterministic) keys$2 = sort$2(keys$2, comparator);
					stack.push(value);
					for (let i = 0; i < maximumPropertiesToStringify; i++) {
						const key$2 = keys$2[i];
						const tmp = stringifySimple(key$2, value[key$2], stack);
						if (tmp !== void 0) {
							res += `${separator}${strEscape(key$2)}:${tmp}`;
							separator = ",";
						}
					}
					if (keyLength > maximumBreadth) {
						const removedKeys = keyLength - maximumBreadth;
						res += `${separator}"...":"${getItemCount(removedKeys)} not stringified"`;
					}
					stack.pop();
					return `{${res}}`;
				}
				case "number": return isFinite(value) ? String(value) : fail$1 ? fail$1(value) : "null";
				case "boolean": return value === true ? "true" : "false";
				case "undefined": return void 0;
				case "bigint": if (bigint) return String(value);
				default: return fail$1 ? fail$1(value) : void 0;
			}
		}
		function stringify$5(value, replacer$1, space) {
			if (arguments.length > 1) {
				let spacer = "";
				if (typeof space === "number") spacer = " ".repeat(Math.min(space, 10));
				else if (typeof space === "string") spacer = space.slice(0, 10);
				if (replacer$1 != null) {
					if (typeof replacer$1 === "function") return stringifyFnReplacer("", { "": value }, [], replacer$1, spacer, "");
					if (Array.isArray(replacer$1)) return stringifyArrayReplacer("", value, [], getUniqueReplacerSet(replacer$1), spacer, "");
				}
				if (spacer.length !== 0) return stringifyIndent("", value, [], spacer, "");
			}
			return stringifySimple("", value, []);
		}
		return stringify$5;
	}
} });

//#endregion
//#region node_modules/.pnpm/logform@2.7.0/node_modules/logform/json.js
var require_json = __commonJS({ "node_modules/.pnpm/logform@2.7.0/node_modules/logform/json.js"(exports, module) {
	const format$10 = require_format$1();
	const { MESSAGE: MESSAGE$8 } = require_triple_beam();
	const stringify = require_safe_stable_stringify();
	function replacer(key$1, value) {
		if (typeof value === "bigint") return value.toString();
		return value;
	}
	module.exports = format$10((info$1, opts) => {
		const jsonStringify$2 = stringify.configure(opts);
		info$1[MESSAGE$8] = jsonStringify$2(info$1, opts.replacer || replacer, opts.space);
		return info$1;
	});
} });

//#endregion
//#region node_modules/.pnpm/logform@2.7.0/node_modules/logform/label.js
var require_label = __commonJS({ "node_modules/.pnpm/logform@2.7.0/node_modules/logform/label.js"(exports, module) {
	const format$9 = require_format$1();
	module.exports = format$9((info$1, opts) => {
		if (opts.message) {
			info$1.message = `[${opts.label}] ${info$1.message}`;
			return info$1;
		}
		info$1.label = opts.label;
		return info$1;
	});
} });

//#endregion
//#region node_modules/.pnpm/logform@2.7.0/node_modules/logform/logstash.js
var require_logstash = __commonJS({ "node_modules/.pnpm/logform@2.7.0/node_modules/logform/logstash.js"(exports, module) {
	const format$8 = require_format$1();
	const { MESSAGE: MESSAGE$7 } = require_triple_beam();
	const jsonStringify$1 = require_safe_stable_stringify();
	module.exports = format$8((info$1) => {
		const logstash = {};
		if (info$1.message) {
			logstash["@message"] = info$1.message;
			delete info$1.message;
		}
		if (info$1.timestamp) {
			logstash["@timestamp"] = info$1.timestamp;
			delete info$1.timestamp;
		}
		logstash["@fields"] = info$1;
		info$1[MESSAGE$7] = jsonStringify$1(logstash);
		return info$1;
	});
} });

//#endregion
//#region node_modules/.pnpm/logform@2.7.0/node_modules/logform/metadata.js
var require_metadata = __commonJS({ "node_modules/.pnpm/logform@2.7.0/node_modules/logform/metadata.js"(exports, module) {
	const format$7 = require_format$1();
	function fillExcept(info$1, fillExceptKeys, metadataKey) {
		const savedKeys = fillExceptKeys.reduce((acc, key$1) => {
			acc[key$1] = info$1[key$1];
			delete info$1[key$1];
			return acc;
		}, {});
		const metadata = Object.keys(info$1).reduce((acc, key$1) => {
			acc[key$1] = info$1[key$1];
			delete info$1[key$1];
			return acc;
		}, {});
		Object.assign(info$1, savedKeys, { [metadataKey]: metadata });
		return info$1;
	}
	function fillWith(info$1, fillWithKeys, metadataKey) {
		info$1[metadataKey] = fillWithKeys.reduce((acc, key$1) => {
			acc[key$1] = info$1[key$1];
			delete info$1[key$1];
			return acc;
		}, {});
		return info$1;
	}
	/**
	* Adds in a "metadata" object to collect extraneous data, similar to the metadata
	* object in winston 2.x.
	*/
	module.exports = format$7((info$1, opts = {}) => {
		let metadataKey = "metadata";
		if (opts.key) metadataKey = opts.key;
		let fillExceptKeys = [];
		if (!opts.fillExcept && !opts.fillWith) {
			fillExceptKeys.push("level");
			fillExceptKeys.push("message");
		}
		if (opts.fillExcept) fillExceptKeys = opts.fillExcept;
		if (fillExceptKeys.length > 0) return fillExcept(info$1, fillExceptKeys, metadataKey);
		if (opts.fillWith) return fillWith(info$1, opts.fillWith, metadataKey);
		return info$1;
	});
} });

//#endregion
//#region node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js
var require_ms$1 = __commonJS({ "node_modules/.pnpm/ms@2.1.3/node_modules/ms/index.js"(exports, module) {
	/**
	* Helpers.
	*/
	var s = 1e3;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var w = d * 7;
	var y = d * 365.25;
	/**
	* Parse or format the given `val`.
	*
	* Options:
	*
	*  - `long` verbose formatting [false]
	*
	* @param {String|Number} val
	* @param {Object} [options]
	* @throws {Error} throw an error if val is not a non-empty string or a number
	* @return {String|Number}
	* @api public
	*/
	module.exports = function(val, options) {
		options = options || {};
		var type = typeof val;
		if (type === "string" && val.length > 0) return parse$7(val);
		else if (type === "number" && isFinite(val)) return options.long ? fmtLong(val) : fmtShort(val);
		throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
	};
	/**
	* Parse the given `str` and return milliseconds.
	*
	* @param {String} str
	* @return {Number}
	* @api private
	*/
	function parse$7(str) {
		str = String(str);
		if (str.length > 100) return;
		var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
		if (!match) return;
		var n = parseFloat(match[1]);
		var type = (match[2] || "ms").toLowerCase();
		switch (type) {
			case "years":
			case "year":
			case "yrs":
			case "yr":
			case "y": return n * y;
			case "weeks":
			case "week":
			case "w": return n * w;
			case "days":
			case "day":
			case "d": return n * d;
			case "hours":
			case "hour":
			case "hrs":
			case "hr":
			case "h": return n * h;
			case "minutes":
			case "minute":
			case "mins":
			case "min":
			case "m": return n * m;
			case "seconds":
			case "second":
			case "secs":
			case "sec":
			case "s": return n * s;
			case "milliseconds":
			case "millisecond":
			case "msecs":
			case "msec":
			case "ms": return n;
			default: return void 0;
		}
	}
	/**
	* Short format for `ms`.
	*
	* @param {Number} ms
	* @return {String}
	* @api private
	*/
	function fmtShort(ms$2) {
		var msAbs = Math.abs(ms$2);
		if (msAbs >= d) return Math.round(ms$2 / d) + "d";
		if (msAbs >= h) return Math.round(ms$2 / h) + "h";
		if (msAbs >= m) return Math.round(ms$2 / m) + "m";
		if (msAbs >= s) return Math.round(ms$2 / s) + "s";
		return ms$2 + "ms";
	}
	/**
	* Long format for `ms`.
	*
	* @param {Number} ms
	* @return {String}
	* @api private
	*/
	function fmtLong(ms$2) {
		var msAbs = Math.abs(ms$2);
		if (msAbs >= d) return plural(ms$2, msAbs, d, "day");
		if (msAbs >= h) return plural(ms$2, msAbs, h, "hour");
		if (msAbs >= m) return plural(ms$2, msAbs, m, "minute");
		if (msAbs >= s) return plural(ms$2, msAbs, s, "second");
		return ms$2 + " ms";
	}
	/**
	* Pluralization helper.
	*/
	function plural(ms$2, msAbs, n, name$2) {
		var isPlural = msAbs >= n * 1.5;
		return Math.round(ms$2 / n) + " " + name$2 + (isPlural ? "s" : "");
	}
} });

//#endregion
//#region node_modules/.pnpm/logform@2.7.0/node_modules/logform/ms.js
var require_ms = __commonJS({ "node_modules/.pnpm/logform@2.7.0/node_modules/logform/ms.js"(exports, module) {
	const format$6 = require_format$1();
	const ms$1 = require_ms$1();
	module.exports = format$6((info$1) => {
		const curr = +new Date();
		exports.diff = curr - (exports.prevTime || curr);
		exports.prevTime = curr;
		info$1.ms = `+${ms$1(exports.diff)}`;
		return info$1;
	});
} });

//#endregion
//#region node_modules/.pnpm/logform@2.7.0/node_modules/logform/pretty-print.js
var require_pretty_print = __commonJS({ "node_modules/.pnpm/logform@2.7.0/node_modules/logform/pretty-print.js"(exports, module) {
	const inspect$1 = __require("util").inspect;
	const format$5 = require_format$1();
	const { LEVEL: LEVEL$5, MESSAGE: MESSAGE$6, SPLAT: SPLAT$2 } = require_triple_beam();
	module.exports = format$5((info$1, opts = {}) => {
		const stripped = Object.assign({}, info$1);
		delete stripped[LEVEL$5];
		delete stripped[MESSAGE$6];
		delete stripped[SPLAT$2];
		info$1[MESSAGE$6] = inspect$1(stripped, false, opts.depth || null, opts.colorize);
		return info$1;
	});
} });

//#endregion
//#region node_modules/.pnpm/logform@2.7.0/node_modules/logform/printf.js
var require_printf = __commonJS({ "node_modules/.pnpm/logform@2.7.0/node_modules/logform/printf.js"(exports, module) {
	const { MESSAGE: MESSAGE$5 } = require_triple_beam();
	var Printf = class {
		constructor(templateFn) {
			this.template = templateFn;
		}
		transform(info$1) {
			info$1[MESSAGE$5] = this.template(info$1);
			return info$1;
		}
	};
	module.exports = (opts) => new Printf(opts);
	module.exports.Printf = module.exports.Format = Printf;
} });

//#endregion
//#region node_modules/.pnpm/logform@2.7.0/node_modules/logform/simple.js
var require_simple = __commonJS({ "node_modules/.pnpm/logform@2.7.0/node_modules/logform/simple.js"(exports, module) {
	const format$4 = require_format$1();
	const { MESSAGE: MESSAGE$4 } = require_triple_beam();
	const jsonStringify = require_safe_stable_stringify();
	module.exports = format$4((info$1) => {
		const stringifiedRest = jsonStringify(Object.assign({}, info$1, {
			level: void 0,
			message: void 0,
			splat: void 0
		}));
		const padding = info$1.padding && info$1.padding[info$1.level] || "";
		if (stringifiedRest !== "{}") info$1[MESSAGE$4] = `${info$1.level}:${padding} ${info$1.message} ${stringifiedRest}`;
		else info$1[MESSAGE$4] = `${info$1.level}:${padding} ${info$1.message}`;
		return info$1;
	});
} });

//#endregion
//#region node_modules/.pnpm/logform@2.7.0/node_modules/logform/splat.js
var require_splat = __commonJS({ "node_modules/.pnpm/logform@2.7.0/node_modules/logform/splat.js"(exports, module) {
	const util$14 = __require("util");
	const { SPLAT: SPLAT$1 } = require_triple_beam();
	/**
	* Captures the number of format (i.e. %s strings) in a given string.
	* Based on `util.format`, see Node.js source:
	* https://github.com/nodejs/node/blob/b1c8f15c5f169e021f7c46eb7b219de95fe97603/lib/util.js#L201-L230
	* @type {RegExp}
	*/
	const formatRegExp$1 = /%[scdjifoO%]/g;
	/**
	* Captures the number of escaped % signs in a format string (i.e. %s strings).
	* @type {RegExp}
	*/
	const escapedPercent = /%%/g;
	var Splatter = class {
		constructor(opts) {
			this.options = opts;
		}
		/**
		* Check to see if tokens <= splat.length, assign { splat, meta } into the
		* `info` accordingly, and write to this instance.
		*
		* @param  {Info} info Logform info message.
		* @param  {String[]} tokens Set of string interpolation tokens.
		* @returns {Info} Modified info message
		* @private
		*/
		_splat(info$1, tokens) {
			const msg = info$1.message;
			const splat = info$1[SPLAT$1] || info$1.splat || [];
			const percents = msg.match(escapedPercent);
			const escapes = percents && percents.length || 0;
			const expectedSplat = tokens.length - escapes;
			const extraSplat = expectedSplat - splat.length;
			const metas = extraSplat < 0 ? splat.splice(extraSplat, -1 * extraSplat) : [];
			const metalen = metas.length;
			if (metalen) for (let i = 0; i < metalen; i++) Object.assign(info$1, metas[i]);
			info$1.message = util$14.format(msg, ...splat);
			return info$1;
		}
		/**
		* Transforms the `info` message by using `util.format` to complete
		* any `info.message` provided it has string interpolation tokens.
		* If no tokens exist then `info` is immutable.
		*
		* @param  {Info} info Logform info message.
		* @param  {Object} opts Options for this instance.
		* @returns {Info} Modified info message
		*/
		transform(info$1) {
			const msg = info$1.message;
			const splat = info$1[SPLAT$1] || info$1.splat;
			if (!splat || !splat.length) return info$1;
			const tokens = msg && msg.match && msg.match(formatRegExp$1);
			if (!tokens && (splat || splat.length)) {
				const metas = splat.length > 1 ? splat.splice(0) : splat;
				const metalen = metas.length;
				if (metalen) for (let i = 0; i < metalen; i++) Object.assign(info$1, metas[i]);
				return info$1;
			}
			if (tokens) return this._splat(info$1, tokens);
			return info$1;
		}
	};
	module.exports = (opts) => new Splatter(opts);
} });

//#endregion
//#region node_modules/.pnpm/fecha@4.2.3/node_modules/fecha/lib/fecha.umd.js
var require_fecha_umd = __commonJS({ "node_modules/.pnpm/fecha@4.2.3/node_modules/fecha/lib/fecha.umd.js"(exports, module) {
	(function(global$1, factory) {
		typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : factory(global$1.fecha = {});
	})(exports, function(exports$1) {
		"use strict";
		var token = /d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|Z|([HhMsDm])\1?|[aA]|"[^"]*"|'[^']*'/g;
		var twoDigitsOptional = "\\d\\d?";
		var twoDigits = "\\d\\d";
		var threeDigits = "\\d{3}";
		var fourDigits = "\\d{4}";
		var word = "[^\\s]+";
		var literal = /\[([^]*?)\]/gm;
		function shorten(arr, sLen) {
			var newArr = [];
			for (var i = 0, len = arr.length; i < len; i++) newArr.push(arr[i].substr(0, sLen));
			return newArr;
		}
		var monthUpdate = function(arrName) {
			return function(v$1, i18n) {
				var lowerCaseArr = i18n[arrName].map(function(v$2) {
					return v$2.toLowerCase();
				});
				var index = lowerCaseArr.indexOf(v$1.toLowerCase());
				if (index > -1) return index;
				return null;
			};
		};
		function assign(origObj) {
			var args = [];
			for (var _i = 1; _i < arguments.length; _i++) args[_i - 1] = arguments[_i];
			for (var _a$1 = 0, args_1 = args; _a$1 < args_1.length; _a$1++) {
				var obj = args_1[_a$1];
				for (var key$1 in obj) origObj[key$1] = obj[key$1];
			}
			return origObj;
		}
		var dayNames = [
			"Sunday",
			"Monday",
			"Tuesday",
			"Wednesday",
			"Thursday",
			"Friday",
			"Saturday"
		];
		var monthNames = [
			"January",
			"February",
			"March",
			"April",
			"May",
			"June",
			"July",
			"August",
			"September",
			"October",
			"November",
			"December"
		];
		var monthNamesShort = shorten(monthNames, 3);
		var dayNamesShort = shorten(dayNames, 3);
		var defaultI18n = {
			dayNamesShort,
			dayNames,
			monthNamesShort,
			monthNames,
			amPm: ["am", "pm"],
			DoFn: function(dayOfMonth) {
				return dayOfMonth + [
					"th",
					"st",
					"nd",
					"rd"
				][dayOfMonth % 10 > 3 ? 0 : (dayOfMonth - dayOfMonth % 10 !== 10 ? 1 : 0) * dayOfMonth % 10];
			}
		};
		var globalI18n = assign({}, defaultI18n);
		var setGlobalDateI18n = function(i18n) {
			return globalI18n = assign(globalI18n, i18n);
		};
		var regexEscape = function(str) {
			return str.replace(/[|\\{()[^$+*?.-]/g, "\\$&");
		};
		var pad = function(val, len) {
			if (len === void 0) len = 2;
			val = String(val);
			while (val.length < len) val = "0" + val;
			return val;
		};
		var formatFlags = {
			D: function(dateObj) {
				return String(dateObj.getDate());
			},
			DD: function(dateObj) {
				return pad(dateObj.getDate());
			},
			Do: function(dateObj, i18n) {
				return i18n.DoFn(dateObj.getDate());
			},
			d: function(dateObj) {
				return String(dateObj.getDay());
			},
			dd: function(dateObj) {
				return pad(dateObj.getDay());
			},
			ddd: function(dateObj, i18n) {
				return i18n.dayNamesShort[dateObj.getDay()];
			},
			dddd: function(dateObj, i18n) {
				return i18n.dayNames[dateObj.getDay()];
			},
			M: function(dateObj) {
				return String(dateObj.getMonth() + 1);
			},
			MM: function(dateObj) {
				return pad(dateObj.getMonth() + 1);
			},
			MMM: function(dateObj, i18n) {
				return i18n.monthNamesShort[dateObj.getMonth()];
			},
			MMMM: function(dateObj, i18n) {
				return i18n.monthNames[dateObj.getMonth()];
			},
			YY: function(dateObj) {
				return pad(String(dateObj.getFullYear()), 4).substr(2);
			},
			YYYY: function(dateObj) {
				return pad(dateObj.getFullYear(), 4);
			},
			h: function(dateObj) {
				return String(dateObj.getHours() % 12 || 12);
			},
			hh: function(dateObj) {
				return pad(dateObj.getHours() % 12 || 12);
			},
			H: function(dateObj) {
				return String(dateObj.getHours());
			},
			HH: function(dateObj) {
				return pad(dateObj.getHours());
			},
			m: function(dateObj) {
				return String(dateObj.getMinutes());
			},
			mm: function(dateObj) {
				return pad(dateObj.getMinutes());
			},
			s: function(dateObj) {
				return String(dateObj.getSeconds());
			},
			ss: function(dateObj) {
				return pad(dateObj.getSeconds());
			},
			S: function(dateObj) {
				return String(Math.round(dateObj.getMilliseconds() / 100));
			},
			SS: function(dateObj) {
				return pad(Math.round(dateObj.getMilliseconds() / 10), 2);
			},
			SSS: function(dateObj) {
				return pad(dateObj.getMilliseconds(), 3);
			},
			a: function(dateObj, i18n) {
				return dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1];
			},
			A: function(dateObj, i18n) {
				return dateObj.getHours() < 12 ? i18n.amPm[0].toUpperCase() : i18n.amPm[1].toUpperCase();
			},
			ZZ: function(dateObj) {
				var offset = dateObj.getTimezoneOffset();
				return (offset > 0 ? "-" : "+") + pad(Math.floor(Math.abs(offset) / 60) * 100 + Math.abs(offset) % 60, 4);
			},
			Z: function(dateObj) {
				var offset = dateObj.getTimezoneOffset();
				return (offset > 0 ? "-" : "+") + pad(Math.floor(Math.abs(offset) / 60), 2) + ":" + pad(Math.abs(offset) % 60, 2);
			}
		};
		var monthParse = function(v$1) {
			return +v$1 - 1;
		};
		var emptyDigits = [null, twoDigitsOptional];
		var emptyWord = [null, word];
		var amPm = [
			"isPm",
			word,
			function(v$1, i18n) {
				var val = v$1.toLowerCase();
				if (val === i18n.amPm[0]) return 0;
				else if (val === i18n.amPm[1]) return 1;
				return null;
			}
		];
		var timezoneOffset = [
			"timezoneOffset",
			"[^\\s]*?[\\+\\-]\\d\\d:?\\d\\d|[^\\s]*?Z?",
			function(v$1) {
				var parts = (v$1 + "").match(/([+-]|\d\d)/gi);
				if (parts) {
					var minutes = +parts[1] * 60 + parseInt(parts[2], 10);
					return parts[0] === "+" ? minutes : -minutes;
				}
				return 0;
			}
		];
		var parseFlags = {
			D: ["day", twoDigitsOptional],
			DD: ["day", twoDigits],
			Do: [
				"day",
				twoDigitsOptional + word,
				function(v$1) {
					return parseInt(v$1, 10);
				}
			],
			M: [
				"month",
				twoDigitsOptional,
				monthParse
			],
			MM: [
				"month",
				twoDigits,
				monthParse
			],
			YY: [
				"year",
				twoDigits,
				function(v$1) {
					var now = new Date();
					var cent = +("" + now.getFullYear()).substr(0, 2);
					return +("" + (+v$1 > 68 ? cent - 1 : cent) + v$1);
				}
			],
			h: [
				"hour",
				twoDigitsOptional,
				void 0,
				"isPm"
			],
			hh: [
				"hour",
				twoDigits,
				void 0,
				"isPm"
			],
			H: ["hour", twoDigitsOptional],
			HH: ["hour", twoDigits],
			m: ["minute", twoDigitsOptional],
			mm: ["minute", twoDigits],
			s: ["second", twoDigitsOptional],
			ss: ["second", twoDigits],
			YYYY: ["year", fourDigits],
			S: [
				"millisecond",
				"\\d",
				function(v$1) {
					return +v$1 * 100;
				}
			],
			SS: [
				"millisecond",
				twoDigits,
				function(v$1) {
					return +v$1 * 10;
				}
			],
			SSS: ["millisecond", threeDigits],
			d: emptyDigits,
			dd: emptyDigits,
			ddd: emptyWord,
			dddd: emptyWord,
			MMM: [
				"month",
				word,
				monthUpdate("monthNamesShort")
			],
			MMMM: [
				"month",
				word,
				monthUpdate("monthNames")
			],
			a: amPm,
			A: amPm,
			ZZ: timezoneOffset,
			Z: timezoneOffset
		};
		var globalMasks = {
			default: "ddd MMM DD YYYY HH:mm:ss",
			shortDate: "M/D/YY",
			mediumDate: "MMM D, YYYY",
			longDate: "MMMM D, YYYY",
			fullDate: "dddd, MMMM D, YYYY",
			isoDate: "YYYY-MM-DD",
			isoDateTime: "YYYY-MM-DDTHH:mm:ssZ",
			shortTime: "HH:mm",
			mediumTime: "HH:mm:ss",
			longTime: "HH:mm:ss.SSS"
		};
		var setGlobalDateMasks = function(masks) {
			return assign(globalMasks, masks);
		};
		/***
		* Format a date
		* @method format
		* @param {Date|number} dateObj
		* @param {string} mask Format of the date, i.e. 'mm-dd-yy' or 'shortDate'
		* @returns {string} Formatted date string
		*/
		var format$14 = function(dateObj, mask, i18n) {
			if (mask === void 0) mask = globalMasks["default"];
			if (i18n === void 0) i18n = {};
			if (typeof dateObj === "number") dateObj = new Date(dateObj);
			if (Object.prototype.toString.call(dateObj) !== "[object Date]" || isNaN(dateObj.getTime())) throw new Error("Invalid Date pass to format");
			mask = globalMasks[mask] || mask;
			var literals = [];
			mask = mask.replace(literal, function($0, $1) {
				literals.push($1);
				return "@@@";
			});
			var combinedI18nSettings = assign(assign({}, globalI18n), i18n);
			mask = mask.replace(token, function($0) {
				return formatFlags[$0](dateObj, combinedI18nSettings);
			});
			return mask.replace(/@@@/g, function() {
				return literals.shift();
			});
		};
		/**
		* Parse a date string into a Javascript Date object /
		* @method parse
		* @param {string} dateStr Date string
		* @param {string} format Date parse format
		* @param {i18n} I18nSettingsOptional Full or subset of I18N settings
		* @returns {Date|null} Returns Date object. Returns null what date string is invalid or doesn't match format
		*/
		function parse$8(dateStr, format$15, i18n) {
			if (i18n === void 0) i18n = {};
			if (typeof format$15 !== "string") throw new Error("Invalid format in fecha parse");
			format$15 = globalMasks[format$15] || format$15;
			if (dateStr.length > 1e3) return null;
			var today = new Date();
			var dateInfo = {
				year: today.getFullYear(),
				month: 0,
				day: 1,
				hour: 0,
				minute: 0,
				second: 0,
				millisecond: 0,
				isPm: null,
				timezoneOffset: null
			};
			var parseInfo = [];
			var literals = [];
			var newFormat = format$15.replace(literal, function($0, $1) {
				literals.push(regexEscape($1));
				return "@@@";
			});
			var specifiedFields = {};
			var requiredFields = {};
			newFormat = regexEscape(newFormat).replace(token, function($0) {
				var info$1 = parseFlags[$0];
				var field$1 = info$1[0], regex = info$1[1], requiredField = info$1[3];
				if (specifiedFields[field$1]) throw new Error("Invalid format. " + field$1 + " specified twice in format");
				specifiedFields[field$1] = true;
				if (requiredField) requiredFields[requiredField] = true;
				parseInfo.push(info$1);
				return "(" + regex + ")";
			});
			Object.keys(requiredFields).forEach(function(field$1) {
				if (!specifiedFields[field$1]) throw new Error("Invalid format. " + field$1 + " is required in specified format");
			});
			newFormat = newFormat.replace(/@@@/g, function() {
				return literals.shift();
			});
			var matches = dateStr.match(new RegExp(newFormat, "i"));
			if (!matches) return null;
			var combinedI18nSettings = assign(assign({}, globalI18n), i18n);
			for (var i = 1; i < matches.length; i++) {
				var _a$1 = parseInfo[i - 1], field = _a$1[0], parser = _a$1[2];
				var value = parser ? parser(matches[i], combinedI18nSettings) : +matches[i];
				if (value == null) return null;
				dateInfo[field] = value;
			}
			if (dateInfo.isPm === 1 && dateInfo.hour != null && +dateInfo.hour !== 12) dateInfo.hour = +dateInfo.hour + 12;
			else if (dateInfo.isPm === 0 && +dateInfo.hour === 12) dateInfo.hour = 0;
			var dateTZ;
			if (dateInfo.timezoneOffset == null) {
				dateTZ = new Date(dateInfo.year, dateInfo.month, dateInfo.day, dateInfo.hour, dateInfo.minute, dateInfo.second, dateInfo.millisecond);
				var validateFields = [
					["month", "getMonth"],
					["day", "getDate"],
					["hour", "getHours"],
					["minute", "getMinutes"],
					["second", "getSeconds"]
				];
				for (var i = 0, len = validateFields.length; i < len; i++) if (specifiedFields[validateFields[i][0]] && dateInfo[validateFields[i][0]] !== dateTZ[validateFields[i][1]]()) return null;
			} else {
				dateTZ = new Date(Date.UTC(dateInfo.year, dateInfo.month, dateInfo.day, dateInfo.hour, dateInfo.minute - dateInfo.timezoneOffset, dateInfo.second, dateInfo.millisecond));
				if (dateInfo.month > 11 || dateInfo.month < 0 || dateInfo.day > 31 || dateInfo.day < 1 || dateInfo.hour > 23 || dateInfo.hour < 0 || dateInfo.minute > 59 || dateInfo.minute < 0 || dateInfo.second > 59 || dateInfo.second < 0) return null;
			}
			return dateTZ;
		}
		var fecha$1 = {
			format: format$14,
			parse: parse$8,
			defaultI18n,
			setGlobalDateI18n,
			setGlobalDateMasks
		};
		exports$1.assign = assign;
		exports$1.default = fecha$1;
		exports$1.format = format$14;
		exports$1.parse = parse$8;
		exports$1.defaultI18n = defaultI18n;
		exports$1.setGlobalDateI18n = setGlobalDateI18n;
		exports$1.setGlobalDateMasks = setGlobalDateMasks;
		Object.defineProperty(exports$1, "__esModule", { value: true });
	});
} });

//#endregion
//#region node_modules/.pnpm/logform@2.7.0/node_modules/logform/timestamp.js
var require_timestamp = __commonJS({ "node_modules/.pnpm/logform@2.7.0/node_modules/logform/timestamp.js"(exports, module) {
	const fecha = require_fecha_umd();
	const format$3 = require_format$1();
	module.exports = format$3((info$1, opts = {}) => {
		if (opts.format) info$1.timestamp = typeof opts.format === "function" ? opts.format() : fecha.format(new Date(), opts.format);
		if (!info$1.timestamp) info$1.timestamp = new Date().toISOString();
		if (opts.alias) info$1[opts.alias] = info$1.timestamp;
		return info$1;
	});
} });

//#endregion
//#region node_modules/.pnpm/logform@2.7.0/node_modules/logform/uncolorize.js
var require_uncolorize = __commonJS({ "node_modules/.pnpm/logform@2.7.0/node_modules/logform/uncolorize.js"(exports, module) {
	const colors = require_safe();
	const format$2 = require_format$1();
	const { MESSAGE: MESSAGE$3 } = require_triple_beam();
	module.exports = format$2((info$1, opts) => {
		if (opts.level !== false) info$1.level = colors.strip(info$1.level);
		if (opts.message !== false) info$1.message = colors.strip(String(info$1.message));
		if (opts.raw !== false && info$1[MESSAGE$3]) info$1[MESSAGE$3] = colors.strip(String(info$1[MESSAGE$3]));
		return info$1;
	});
} });

//#endregion
//#region node_modules/.pnpm/logform@2.7.0/node_modules/logform/index.js
var require_logform = __commonJS({ "node_modules/.pnpm/logform@2.7.0/node_modules/logform/index.js"(exports) {
	const format$1 = exports.format = require_format$1();
	exports.levels = require_levels();
	function exposeFormat(name$2, requireFormat) {
		Object.defineProperty(format$1, name$2, {
			get() {
				return requireFormat();
			},
			configurable: true
		});
	}
	exposeFormat("align", function() {
		return require_align();
	});
	exposeFormat("errors", function() {
		return require_errors$1();
	});
	exposeFormat("cli", function() {
		return require_cli();
	});
	exposeFormat("combine", function() {
		return require_combine();
	});
	exposeFormat("colorize", function() {
		return require_colorize();
	});
	exposeFormat("json", function() {
		return require_json();
	});
	exposeFormat("label", function() {
		return require_label();
	});
	exposeFormat("logstash", function() {
		return require_logstash();
	});
	exposeFormat("metadata", function() {
		return require_metadata();
	});
	exposeFormat("ms", function() {
		return require_ms();
	});
	exposeFormat("padLevels", function() {
		return require_pad_levels();
	});
	exposeFormat("prettyPrint", function() {
		return require_pretty_print();
	});
	exposeFormat("printf", function() {
		return require_printf();
	});
	exposeFormat("simple", function() {
		return require_simple();
	});
	exposeFormat("splat", function() {
		return require_splat();
	});
	exposeFormat("timestamp", function() {
		return require_timestamp();
	});
	exposeFormat("uncolorize", function() {
		return require_uncolorize();
	});
} });

//#endregion
//#region node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/common.js
var require_common$1 = __commonJS({ "node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/common.js"(exports) {
	const { format } = __require("util");
	/**
	* Set of simple deprecation notices and a way to expose them for a set of
	* properties.
	* @type {Object}
	* @private
	*/
	exports.warn = {
		deprecated(prop) {
			return () => {
				throw new Error(format("{ %s } was removed in winston@3.0.0.", prop));
			};
		},
		useFormat(prop) {
			return () => {
				throw new Error([format("{ %s } was removed in winston@3.0.0.", prop), "Use a custom winston.format = winston.format(function) instead."].join("\n"));
			};
		},
		forFunctions(obj, type, props) {
			props.forEach((prop) => {
				obj[prop] = exports.warn[type](prop);
			});
		},
		forProperties(obj, type, props) {
			props.forEach((prop) => {
				const notice$1 = exports.warn[type](prop);
				Object.defineProperty(obj, prop, {
					get: notice$1,
					set: notice$1
				});
			});
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/winston@3.17.0/node_modules/winston/package.json
var require_package = __commonJS({ "node_modules/.pnpm/winston@3.17.0/node_modules/winston/package.json"(exports, module) {
	module.exports = {
		"name": "winston",
		"description": "A logger for just about everything.",
		"version": "3.17.0",
		"author": "Charlie Robbins <charlie.robbins@gmail.com>",
		"maintainers": ["David Hyde <dabh@alumni.stanford.edu>"],
		"repository": {
			"type": "git",
			"url": "https://github.com/winstonjs/winston.git"
		},
		"keywords": [
			"winston",
			"logger",
			"logging",
			"logs",
			"sysadmin",
			"bunyan",
			"pino",
			"loglevel",
			"tools",
			"json",
			"stream"
		],
		"dependencies": {
			"@dabh/diagnostics": "^2.0.2",
			"@colors/colors": "^1.6.0",
			"async": "^3.2.3",
			"is-stream": "^2.0.0",
			"logform": "^2.7.0",
			"one-time": "^1.0.0",
			"readable-stream": "^3.4.0",
			"safe-stable-stringify": "^2.3.1",
			"stack-trace": "0.0.x",
			"triple-beam": "^1.3.0",
			"winston-transport": "^4.9.0"
		},
		"devDependencies": {
			"@babel/cli": "^7.23.9",
			"@babel/core": "^7.24.0",
			"@babel/preset-env": "^7.24.0",
			"@dabh/eslint-config-populist": "^4.4.0",
			"@types/node": "^20.11.24",
			"abstract-winston-transport": "^0.5.1",
			"assume": "^2.2.0",
			"cross-spawn-async": "^2.2.5",
			"eslint": "^8.57.0",
			"hock": "^1.4.1",
			"mocha": "^10.3.0",
			"nyc": "^17.1.0",
			"rimraf": "5.0.1",
			"split2": "^4.1.0",
			"std-mocks": "^2.0.0",
			"through2": "^4.0.2",
			"winston-compat": "^0.1.5"
		},
		"main": "./lib/winston.js",
		"browser": "./dist/winston",
		"types": "./index.d.ts",
		"scripts": {
			"lint": "eslint lib/*.js lib/winston/*.js lib/winston/**/*.js --resolve-plugins-relative-to ./node_modules/@dabh/eslint-config-populist",
			"test": "rimraf test/fixtures/logs/* && mocha",
			"test:coverage": "nyc npm run test:unit",
			"test:unit": "mocha test/unit",
			"test:integration": "mocha test/integration",
			"build": "rimraf dist && babel lib -d dist",
			"prepublishOnly": "npm run build"
		},
		"engines": { "node": ">= 12.0.0" },
		"license": "MIT"
	};
} });

//#endregion
//#region node_modules/.pnpm/util-deprecate@1.0.2/node_modules/util-deprecate/node.js
var require_node$2 = __commonJS({ "node_modules/.pnpm/util-deprecate@1.0.2/node_modules/util-deprecate/node.js"(exports, module) {
	/**
	* For Node.js, simply re-export the core `util.deprecate` function.
	*/
	module.exports = __require("util").deprecate;
} });

//#endregion
//#region node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/stream.js
var require_stream$1 = __commonJS({ "node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/stream.js"(exports, module) {
	module.exports = __require("stream");
} });

//#endregion
//#region node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/destroy.js
var require_destroy = __commonJS({ "node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/destroy.js"(exports, module) {
	function destroy$1(err, cb) {
		var _this = this;
		var readableDestroyed = this._readableState && this._readableState.destroyed;
		var writableDestroyed = this._writableState && this._writableState.destroyed;
		if (readableDestroyed || writableDestroyed) {
			if (cb) cb(err);
			else if (err) {
				if (!this._writableState) process.nextTick(emitErrorNT, this, err);
				else if (!this._writableState.errorEmitted) {
					this._writableState.errorEmitted = true;
					process.nextTick(emitErrorNT, this, err);
				}
			}
			return this;
		}
		if (this._readableState) this._readableState.destroyed = true;
		if (this._writableState) this._writableState.destroyed = true;
		this._destroy(err || null, function(err$1) {
			if (!cb && err$1) if (!_this._writableState) process.nextTick(emitErrorAndCloseNT, _this, err$1);
			else if (!_this._writableState.errorEmitted) {
				_this._writableState.errorEmitted = true;
				process.nextTick(emitErrorAndCloseNT, _this, err$1);
			} else process.nextTick(emitCloseNT, _this);
			else if (cb) {
				process.nextTick(emitCloseNT, _this);
				cb(err$1);
			} else process.nextTick(emitCloseNT, _this);
		});
		return this;
	}
	function emitErrorAndCloseNT(self$1, err) {
		emitErrorNT(self$1, err);
		emitCloseNT(self$1);
	}
	function emitCloseNT(self$1) {
		if (self$1._writableState && !self$1._writableState.emitClose) return;
		if (self$1._readableState && !self$1._readableState.emitClose) return;
		self$1.emit("close");
	}
	function undestroy() {
		if (this._readableState) {
			this._readableState.destroyed = false;
			this._readableState.reading = false;
			this._readableState.ended = false;
			this._readableState.endEmitted = false;
		}
		if (this._writableState) {
			this._writableState.destroyed = false;
			this._writableState.ended = false;
			this._writableState.ending = false;
			this._writableState.finalCalled = false;
			this._writableState.prefinished = false;
			this._writableState.finished = false;
			this._writableState.errorEmitted = false;
		}
	}
	function emitErrorNT(self$1, err) {
		self$1.emit("error", err);
	}
	function errorOrDestroy$2(stream$3, err) {
		var rState = stream$3._readableState;
		var wState = stream$3._writableState;
		if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream$3.destroy(err);
		else stream$3.emit("error", err);
	}
	module.exports = {
		destroy: destroy$1,
		undestroy,
		errorOrDestroy: errorOrDestroy$2
	};
} });

//#endregion
//#region node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/errors.js
var require_errors = __commonJS({ "node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/errors.js"(exports, module) {
	const codes = {};
	function createErrorType$1(code, message, Base) {
		if (!Base) Base = Error;
		function getMessage(arg1, arg2, arg3) {
			if (typeof message === "string") return message;
			else return message(arg1, arg2, arg3);
		}
		class NodeError extends Base {
			constructor(arg1, arg2, arg3) {
				super(getMessage(arg1, arg2, arg3));
			}
		}
		NodeError.prototype.name = Base.name;
		NodeError.prototype.code = code;
		codes[code] = NodeError;
	}
	function oneOf(expected, thing) {
		if (Array.isArray(expected)) {
			const len = expected.length;
			expected = expected.map((i) => String(i));
			if (len > 2) return `one of ${thing} ${expected.slice(0, len - 1).join(", ")}, or ` + expected[len - 1];
			else if (len === 2) return `one of ${thing} ${expected[0]} or ${expected[1]}`;
			else return `of ${thing} ${expected[0]}`;
		} else return `of ${thing} ${String(expected)}`;
	}
	function startsWith(str, search, pos) {
		return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
	}
	function endsWith$1(str, search, this_len) {
		if (this_len === void 0 || this_len > str.length) this_len = str.length;
		return str.substring(this_len - search.length, this_len) === search;
	}
	function includes$2(str, search, start) {
		if (typeof start !== "number") start = 0;
		if (start + search.length > str.length) return false;
		else return str.indexOf(search, start) !== -1;
	}
	createErrorType$1("ERR_INVALID_OPT_VALUE", function(name$2, value) {
		return "The value \"" + value + "\" is invalid for option \"" + name$2 + "\"";
	}, TypeError);
	createErrorType$1("ERR_INVALID_ARG_TYPE", function(name$2, expected, actual) {
		let determiner;
		if (typeof expected === "string" && startsWith(expected, "not ")) {
			determiner = "must not be";
			expected = expected.replace(/^not /, "");
		} else determiner = "must be";
		let msg;
		if (endsWith$1(name$2, " argument")) msg = `The ${name$2} ${determiner} ${oneOf(expected, "type")}`;
		else {
			const type = includes$2(name$2, ".") ? "property" : "argument";
			msg = `The "${name$2}" ${type} ${determiner} ${oneOf(expected, "type")}`;
		}
		msg += `. Received type ${typeof actual}`;
		return msg;
	}, TypeError);
	createErrorType$1("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
	createErrorType$1("ERR_METHOD_NOT_IMPLEMENTED", function(name$2) {
		return "The " + name$2 + " method is not implemented";
	});
	createErrorType$1("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
	createErrorType$1("ERR_STREAM_DESTROYED", function(name$2) {
		return "Cannot call " + name$2 + " after a stream was destroyed";
	});
	createErrorType$1("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
	createErrorType$1("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
	createErrorType$1("ERR_STREAM_WRITE_AFTER_END", "write after end");
	createErrorType$1("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
	createErrorType$1("ERR_UNKNOWN_ENCODING", function(arg) {
		return "Unknown encoding: " + arg;
	}, TypeError);
	createErrorType$1("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
	module.exports.codes = codes;
} });

//#endregion
//#region node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/state.js
var require_state$1 = __commonJS({ "node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/state.js"(exports, module) {
	var ERR_INVALID_OPT_VALUE = require_errors().codes.ERR_INVALID_OPT_VALUE;
	function highWaterMarkFrom(options, isDuplex, duplexKey) {
		return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
	}
	function getHighWaterMark$2(state$1, options, duplexKey, isDuplex) {
		var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
		if (hwm != null) {
			if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
				var name$2 = isDuplex ? duplexKey : "highWaterMark";
				throw new ERR_INVALID_OPT_VALUE(name$2, hwm);
			}
			return Math.floor(hwm);
		}
		return state$1.objectMode ? 16 : 16 * 1024;
	}
	module.exports = { getHighWaterMark: getHighWaterMark$2 };
} });

//#endregion
//#region node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({ "node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits_browser.js"(exports, module) {
	if (typeof Object.create === "function") module.exports = function inherits$7(ctor, superCtor) {
		if (superCtor) {
			ctor.super_ = superCtor;
			ctor.prototype = Object.create(superCtor.prototype, { constructor: {
				value: ctor,
				enumerable: false,
				writable: true,
				configurable: true
			} });
		}
	};
	else module.exports = function inherits$7(ctor, superCtor) {
		if (superCtor) {
			ctor.super_ = superCtor;
			var TempCtor = function() {};
			TempCtor.prototype = superCtor.prototype;
			ctor.prototype = new TempCtor();
			ctor.prototype.constructor = ctor;
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits.js
var require_inherits = __commonJS({ "node_modules/.pnpm/inherits@2.0.4/node_modules/inherits/inherits.js"(exports, module) {
	try {
		var util$13 = __require("util");
		/* istanbul ignore next */
		if (typeof util$13.inherits !== "function") throw "";
		module.exports = util$13.inherits;
	} catch (e) {
		/* istanbul ignore next */
		module.exports = require_inherits_browser();
	}
} });

//#endregion
//#region node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/buffer_list.js
var require_buffer_list = __commonJS({ "node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/buffer_list.js"(exports, module) {
	function ownKeys$1(object, enumerableOnly) {
		var keys$2 = Object.keys(object);
		if (Object.getOwnPropertySymbols) {
			var symbols = Object.getOwnPropertySymbols(object);
			enumerableOnly && (symbols = symbols.filter(function(sym) {
				return Object.getOwnPropertyDescriptor(object, sym).enumerable;
			})), keys$2.push.apply(keys$2, symbols);
		}
		return keys$2;
	}
	function _objectSpread$1(target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = null != arguments[i] ? arguments[i] : {};
			i % 2 ? ownKeys$1(Object(source), !0).forEach(function(key$1) {
				_defineProperty$2(target, key$1, source[key$1]);
			}) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function(key$1) {
				Object.defineProperty(target, key$1, Object.getOwnPropertyDescriptor(source, key$1));
			});
		}
		return target;
	}
	function _defineProperty$2(obj, key$1, value) {
		key$1 = _toPropertyKey$2(key$1);
		if (key$1 in obj) Object.defineProperty(obj, key$1, {
			value,
			enumerable: true,
			configurable: true,
			writable: true
		});
		else obj[key$1] = value;
		return obj;
	}
	function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
	}
	function _defineProperties(target, props) {
		for (var i = 0; i < props.length; i++) {
			var descriptor = props[i];
			descriptor.enumerable = descriptor.enumerable || false;
			descriptor.configurable = true;
			if ("value" in descriptor) descriptor.writable = true;
			Object.defineProperty(target, _toPropertyKey$2(descriptor.key), descriptor);
		}
	}
	function _createClass(Constructor, protoProps, staticProps) {
		if (protoProps) _defineProperties(Constructor.prototype, protoProps);
		if (staticProps) _defineProperties(Constructor, staticProps);
		Object.defineProperty(Constructor, "prototype", { writable: false });
		return Constructor;
	}
	function _toPropertyKey$2(arg) {
		var key$1 = _toPrimitive$2(arg, "string");
		return typeof key$1 === "symbol" ? key$1 : String(key$1);
	}
	function _toPrimitive$2(input, hint) {
		if (typeof input !== "object" || input === null) return input;
		var prim = input[Symbol.toPrimitive];
		if (prim !== void 0) {
			var res = prim.call(input, hint || "default");
			if (typeof res !== "object") return res;
			throw new TypeError("@@toPrimitive must return a primitive value.");
		}
		return (hint === "string" ? String : Number)(input);
	}
	var _require$2 = __require("buffer"), Buffer$12 = _require$2.Buffer;
	var _require2 = __require("util"), inspect = _require2.inspect;
	var custom = inspect && inspect.custom || "inspect";
	function copyBuffer(src$2, target, offset) {
		Buffer$12.prototype.copy.call(src$2, target, offset);
	}
	module.exports = /* @__PURE__ */ function() {
		function BufferList$1() {
			_classCallCheck(this, BufferList$1);
			this.head = null;
			this.tail = null;
			this.length = 0;
		}
		_createClass(BufferList$1, [
			{
				key: "push",
				value: function push(v$1) {
					var entry = {
						data: v$1,
						next: null
					};
					if (this.length > 0) this.tail.next = entry;
					else this.head = entry;
					this.tail = entry;
					++this.length;
				}
			},
			{
				key: "unshift",
				value: function unshift(v$1) {
					var entry = {
						data: v$1,
						next: this.head
					};
					if (this.length === 0) this.tail = entry;
					this.head = entry;
					++this.length;
				}
			},
			{
				key: "shift",
				value: function shift() {
					if (this.length === 0) return;
					var ret = this.head.data;
					if (this.length === 1) this.head = this.tail = null;
					else this.head = this.head.next;
					--this.length;
					return ret;
				}
			},
			{
				key: "clear",
				value: function clear() {
					this.head = this.tail = null;
					this.length = 0;
				}
			},
			{
				key: "join",
				value: function join$1(s$1) {
					if (this.length === 0) return "";
					var p = this.head;
					var ret = "" + p.data;
					while (p = p.next) ret += s$1 + p.data;
					return ret;
				}
			},
			{
				key: "concat",
				value: function concat$1(n) {
					if (this.length === 0) return Buffer$12.alloc(0);
					var ret = Buffer$12.allocUnsafe(n >>> 0);
					var p = this.head;
					var i = 0;
					while (p) {
						copyBuffer(p.data, ret, i);
						i += p.data.length;
						p = p.next;
					}
					return ret;
				}
			},
			{
				key: "consume",
				value: function consume$1(n, hasStrings) {
					var ret;
					if (n < this.head.data.length) {
						ret = this.head.data.slice(0, n);
						this.head.data = this.head.data.slice(n);
					} else if (n === this.head.data.length) ret = this.shift();
					else ret = hasStrings ? this._getString(n) : this._getBuffer(n);
					return ret;
				}
			},
			{
				key: "first",
				value: function first$1() {
					return this.head.data;
				}
			},
			{
				key: "_getString",
				value: function _getString(n) {
					var p = this.head;
					var c = 1;
					var ret = p.data;
					n -= ret.length;
					while (p = p.next) {
						var str = p.data;
						var nb = n > str.length ? str.length : n;
						if (nb === str.length) ret += str;
						else ret += str.slice(0, n);
						n -= nb;
						if (n === 0) {
							if (nb === str.length) {
								++c;
								if (p.next) this.head = p.next;
								else this.head = this.tail = null;
							} else {
								this.head = p;
								p.data = str.slice(nb);
							}
							break;
						}
						++c;
					}
					this.length -= c;
					return ret;
				}
			},
			{
				key: "_getBuffer",
				value: function _getBuffer(n) {
					var ret = Buffer$12.allocUnsafe(n);
					var p = this.head;
					var c = 1;
					p.data.copy(ret);
					n -= p.data.length;
					while (p = p.next) {
						var buf = p.data;
						var nb = n > buf.length ? buf.length : n;
						buf.copy(ret, ret.length - n, 0, nb);
						n -= nb;
						if (n === 0) {
							if (nb === buf.length) {
								++c;
								if (p.next) this.head = p.next;
								else this.head = this.tail = null;
							} else {
								this.head = p;
								p.data = buf.slice(nb);
							}
							break;
						}
						++c;
					}
					this.length -= c;
					return ret;
				}
			},
			{
				key: custom,
				value: function value(_, options) {
					return inspect(this, _objectSpread$1(_objectSpread$1({}, options), {}, {
						depth: 0,
						customInspect: false
					}));
				}
			}
		]);
		return BufferList$1;
	}();
} });

//#endregion
//#region node_modules/.pnpm/safe-buffer@5.2.1/node_modules/safe-buffer/index.js
var require_safe_buffer = __commonJS({ "node_modules/.pnpm/safe-buffer@5.2.1/node_modules/safe-buffer/index.js"(exports, module) {
	/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
	var buffer = __require("buffer");
	var Buffer$11 = buffer.Buffer;
	function copyProps(src$2, dst) {
		for (var key$1 in src$2) dst[key$1] = src$2[key$1];
	}
	if (Buffer$11.from && Buffer$11.alloc && Buffer$11.allocUnsafe && Buffer$11.allocUnsafeSlow) module.exports = buffer;
	else {
		copyProps(buffer, exports);
		exports.Buffer = SafeBuffer;
	}
	function SafeBuffer(arg, encodingOrOffset, length) {
		return Buffer$11(arg, encodingOrOffset, length);
	}
	SafeBuffer.prototype = Object.create(Buffer$11.prototype);
	copyProps(Buffer$11, SafeBuffer);
	SafeBuffer.from = function(arg, encodingOrOffset, length) {
		if (typeof arg === "number") throw new TypeError("Argument must not be a number");
		return Buffer$11(arg, encodingOrOffset, length);
	};
	SafeBuffer.alloc = function(size, fill$2, encoding) {
		if (typeof size !== "number") throw new TypeError("Argument must be a number");
		var buf = Buffer$11(size);
		if (fill$2 !== void 0) if (typeof encoding === "string") buf.fill(fill$2, encoding);
		else buf.fill(fill$2);
		else buf.fill(0);
		return buf;
	};
	SafeBuffer.allocUnsafe = function(size) {
		if (typeof size !== "number") throw new TypeError("Argument must be a number");
		return Buffer$11(size);
	};
	SafeBuffer.allocUnsafeSlow = function(size) {
		if (typeof size !== "number") throw new TypeError("Argument must be a number");
		return buffer.SlowBuffer(size);
	};
} });

//#endregion
//#region node_modules/.pnpm/string_decoder@1.3.0/node_modules/string_decoder/lib/string_decoder.js
var require_string_decoder = __commonJS({ "node_modules/.pnpm/string_decoder@1.3.0/node_modules/string_decoder/lib/string_decoder.js"(exports) {
	var Buffer$10 = require_safe_buffer().Buffer;
	var isEncoding = Buffer$10.isEncoding || function(encoding) {
		encoding = "" + encoding;
		switch (encoding && encoding.toLowerCase()) {
			case "hex":
			case "utf8":
			case "utf-8":
			case "ascii":
			case "binary":
			case "base64":
			case "ucs2":
			case "ucs-2":
			case "utf16le":
			case "utf-16le":
			case "raw": return true;
			default: return false;
		}
	};
	function _normalizeEncoding(enc) {
		if (!enc) return "utf8";
		var retried;
		while (true) switch (enc) {
			case "utf8":
			case "utf-8": return "utf8";
			case "ucs2":
			case "ucs-2":
			case "utf16le":
			case "utf-16le": return "utf16le";
			case "latin1":
			case "binary": return "latin1";
			case "base64":
			case "ascii":
			case "hex": return enc;
			default:
				if (retried) return;
				enc = ("" + enc).toLowerCase();
				retried = true;
		}
	}
	function normalizeEncoding(enc) {
		var nenc = _normalizeEncoding(enc);
		if (typeof nenc !== "string" && (Buffer$10.isEncoding === isEncoding || !isEncoding(enc))) throw new Error("Unknown encoding: " + enc);
		return nenc || enc;
	}
	exports.StringDecoder = StringDecoder$2;
	function StringDecoder$2(encoding) {
		this.encoding = normalizeEncoding(encoding);
		var nb;
		switch (this.encoding) {
			case "utf16le":
				this.text = utf16Text;
				this.end = utf16End;
				nb = 4;
				break;
			case "utf8":
				this.fillLast = utf8FillLast;
				nb = 4;
				break;
			case "base64":
				this.text = base64Text;
				this.end = base64End;
				nb = 3;
				break;
			default:
				this.write = simpleWrite;
				this.end = simpleEnd;
				return;
		}
		this.lastNeed = 0;
		this.lastTotal = 0;
		this.lastChar = Buffer$10.allocUnsafe(nb);
	}
	StringDecoder$2.prototype.write = function(buf) {
		if (buf.length === 0) return "";
		var r;
		var i;
		if (this.lastNeed) {
			r = this.fillLast(buf);
			if (r === void 0) return "";
			i = this.lastNeed;
			this.lastNeed = 0;
		} else i = 0;
		if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
		return r || "";
	};
	StringDecoder$2.prototype.end = utf8End;
	StringDecoder$2.prototype.text = utf8Text;
	StringDecoder$2.prototype.fillLast = function(buf) {
		if (this.lastNeed <= buf.length) {
			buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
			return this.lastChar.toString(this.encoding, 0, this.lastTotal);
		}
		buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
		this.lastNeed -= buf.length;
	};
	function utf8CheckByte(byte) {
		if (byte <= 127) return 0;
		else if (byte >> 5 === 6) return 2;
		else if (byte >> 4 === 14) return 3;
		else if (byte >> 3 === 30) return 4;
		return byte >> 6 === 2 ? -1 : -2;
	}
	function utf8CheckIncomplete(self$1, buf, i) {
		var j = buf.length - 1;
		if (j < i) return 0;
		var nb = utf8CheckByte(buf[j]);
		if (nb >= 0) {
			if (nb > 0) self$1.lastNeed = nb - 1;
			return nb;
		}
		if (--j < i || nb === -2) return 0;
		nb = utf8CheckByte(buf[j]);
		if (nb >= 0) {
			if (nb > 0) self$1.lastNeed = nb - 2;
			return nb;
		}
		if (--j < i || nb === -2) return 0;
		nb = utf8CheckByte(buf[j]);
		if (nb >= 0) {
			if (nb > 0) if (nb === 2) nb = 0;
			else self$1.lastNeed = nb - 3;
			return nb;
		}
		return 0;
	}
	function utf8CheckExtraBytes(self$1, buf, p) {
		if ((buf[0] & 192) !== 128) {
			self$1.lastNeed = 0;
			return "�";
		}
		if (self$1.lastNeed > 1 && buf.length > 1) {
			if ((buf[1] & 192) !== 128) {
				self$1.lastNeed = 1;
				return "�";
			}
			if (self$1.lastNeed > 2 && buf.length > 2) {
				if ((buf[2] & 192) !== 128) {
					self$1.lastNeed = 2;
					return "�";
				}
			}
		}
	}
	function utf8FillLast(buf) {
		var p = this.lastTotal - this.lastNeed;
		var r = utf8CheckExtraBytes(this, buf, p);
		if (r !== void 0) return r;
		if (this.lastNeed <= buf.length) {
			buf.copy(this.lastChar, p, 0, this.lastNeed);
			return this.lastChar.toString(this.encoding, 0, this.lastTotal);
		}
		buf.copy(this.lastChar, p, 0, buf.length);
		this.lastNeed -= buf.length;
	}
	function utf8Text(buf, i) {
		var total = utf8CheckIncomplete(this, buf, i);
		if (!this.lastNeed) return buf.toString("utf8", i);
		this.lastTotal = total;
		var end = buf.length - (total - this.lastNeed);
		buf.copy(this.lastChar, 0, end);
		return buf.toString("utf8", i, end);
	}
	function utf8End(buf) {
		var r = buf && buf.length ? this.write(buf) : "";
		if (this.lastNeed) return r + "�";
		return r;
	}
	function utf16Text(buf, i) {
		if ((buf.length - i) % 2 === 0) {
			var r = buf.toString("utf16le", i);
			if (r) {
				var c = r.charCodeAt(r.length - 1);
				if (c >= 55296 && c <= 56319) {
					this.lastNeed = 2;
					this.lastTotal = 4;
					this.lastChar[0] = buf[buf.length - 2];
					this.lastChar[1] = buf[buf.length - 1];
					return r.slice(0, -1);
				}
			}
			return r;
		}
		this.lastNeed = 1;
		this.lastTotal = 2;
		this.lastChar[0] = buf[buf.length - 1];
		return buf.toString("utf16le", i, buf.length - 1);
	}
	function utf16End(buf) {
		var r = buf && buf.length ? this.write(buf) : "";
		if (this.lastNeed) {
			var end = this.lastTotal - this.lastNeed;
			return r + this.lastChar.toString("utf16le", 0, end);
		}
		return r;
	}
	function base64Text(buf, i) {
		var n = (buf.length - i) % 3;
		if (n === 0) return buf.toString("base64", i);
		this.lastNeed = 3 - n;
		this.lastTotal = 3;
		if (n === 1) this.lastChar[0] = buf[buf.length - 1];
		else {
			this.lastChar[0] = buf[buf.length - 2];
			this.lastChar[1] = buf[buf.length - 1];
		}
		return buf.toString("base64", i, buf.length - n);
	}
	function base64End(buf) {
		var r = buf && buf.length ? this.write(buf) : "";
		if (this.lastNeed) return r + this.lastChar.toString("base64", 0, 3 - this.lastNeed);
		return r;
	}
	function simpleWrite(buf) {
		return buf.toString(this.encoding);
	}
	function simpleEnd(buf) {
		return buf && buf.length ? this.write(buf) : "";
	}
} });

//#endregion
//#region node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/end-of-stream.js
var require_end_of_stream = __commonJS({ "node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/end-of-stream.js"(exports, module) {
	var ERR_STREAM_PREMATURE_CLOSE = require_errors().codes.ERR_STREAM_PREMATURE_CLOSE;
	function once$6(callback) {
		var called = false;
		return function() {
			if (called) return;
			called = true;
			for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) args[_key] = arguments[_key];
			callback.apply(this, args);
		};
	}
	function noop$5() {}
	function isRequest$2(stream$3) {
		return stream$3.setHeader && typeof stream$3.abort === "function";
	}
	function eos$1(stream$3, opts, callback) {
		if (typeof opts === "function") return eos$1(stream$3, null, opts);
		if (!opts) opts = {};
		callback = once$6(callback || noop$5);
		var readable = opts.readable || opts.readable !== false && stream$3.readable;
		var writable = opts.writable || opts.writable !== false && stream$3.writable;
		var onlegacyfinish = function onlegacyfinish$1() {
			if (!stream$3.writable) onfinish();
		};
		var writableEnded = stream$3._writableState && stream$3._writableState.finished;
		var onfinish = function onfinish$1() {
			writable = false;
			writableEnded = true;
			if (!readable) callback.call(stream$3);
		};
		var readableEnded = stream$3._readableState && stream$3._readableState.endEmitted;
		var onend$1 = function onend$2() {
			readable = false;
			readableEnded = true;
			if (!writable) callback.call(stream$3);
		};
		var onerror = function onerror$1(err) {
			callback.call(stream$3, err);
		};
		var onclose = function onclose$1() {
			var err;
			if (readable && !readableEnded) {
				if (!stream$3._readableState || !stream$3._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
				return callback.call(stream$3, err);
			}
			if (writable && !writableEnded) {
				if (!stream$3._writableState || !stream$3._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
				return callback.call(stream$3, err);
			}
		};
		var onrequest = function onrequest$1() {
			stream$3.req.on("finish", onfinish);
		};
		if (isRequest$2(stream$3)) {
			stream$3.on("complete", onfinish);
			stream$3.on("abort", onclose);
			if (stream$3.req) onrequest();
			else stream$3.on("request", onrequest);
		} else if (writable && !stream$3._writableState) {
			stream$3.on("end", onlegacyfinish);
			stream$3.on("close", onlegacyfinish);
		}
		stream$3.on("end", onend$1);
		stream$3.on("finish", onfinish);
		if (opts.error !== false) stream$3.on("error", onerror);
		stream$3.on("close", onclose);
		return function() {
			stream$3.removeListener("complete", onfinish);
			stream$3.removeListener("abort", onclose);
			stream$3.removeListener("request", onrequest);
			if (stream$3.req) stream$3.req.removeListener("finish", onfinish);
			stream$3.removeListener("end", onlegacyfinish);
			stream$3.removeListener("close", onlegacyfinish);
			stream$3.removeListener("finish", onfinish);
			stream$3.removeListener("end", onend$1);
			stream$3.removeListener("error", onerror);
			stream$3.removeListener("close", onclose);
		};
	}
	module.exports = eos$1;
} });

//#endregion
//#region node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/async_iterator.js
var require_async_iterator = __commonJS({ "node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/async_iterator.js"(exports, module) {
	var _Object$setPrototypeO;
	function _defineProperty$1(obj, key$1, value) {
		key$1 = _toPropertyKey$1(key$1);
		if (key$1 in obj) Object.defineProperty(obj, key$1, {
			value,
			enumerable: true,
			configurable: true,
			writable: true
		});
		else obj[key$1] = value;
		return obj;
	}
	function _toPropertyKey$1(arg) {
		var key$1 = _toPrimitive$1(arg, "string");
		return typeof key$1 === "symbol" ? key$1 : String(key$1);
	}
	function _toPrimitive$1(input, hint) {
		if (typeof input !== "object" || input === null) return input;
		var prim = input[Symbol.toPrimitive];
		if (prim !== void 0) {
			var res = prim.call(input, hint || "default");
			if (typeof res !== "object") return res;
			throw new TypeError("@@toPrimitive must return a primitive value.");
		}
		return (hint === "string" ? String : Number)(input);
	}
	var finished = require_end_of_stream();
	var kLastResolve = Symbol("lastResolve");
	var kLastReject = Symbol("lastReject");
	var kError = Symbol("error");
	var kEnded = Symbol("ended");
	var kLastPromise = Symbol("lastPromise");
	var kHandlePromise = Symbol("handlePromise");
	var kStream = Symbol("stream");
	function createIterResult(value, done$1) {
		return {
			value,
			done: done$1
		};
	}
	function readAndResolve(iter) {
		var resolve = iter[kLastResolve];
		if (resolve !== null) {
			var data = iter[kStream].read();
			if (data !== null) {
				iter[kLastPromise] = null;
				iter[kLastResolve] = null;
				iter[kLastReject] = null;
				resolve(createIterResult(data, false));
			}
		}
	}
	function onReadable(iter) {
		process.nextTick(readAndResolve, iter);
	}
	function wrapForNext(lastPromise, iter) {
		return function(resolve, reject) {
			lastPromise.then(function() {
				if (iter[kEnded]) {
					resolve(createIterResult(void 0, true));
					return;
				}
				iter[kHandlePromise](resolve, reject);
			}, reject);
		};
	}
	var AsyncIteratorPrototype = Object.getPrototypeOf(function() {});
	var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
		get stream() {
			return this[kStream];
		},
		next: function next() {
			var _this = this;
			var error$1 = this[kError];
			if (error$1 !== null) return Promise.reject(error$1);
			if (this[kEnded]) return Promise.resolve(createIterResult(void 0, true));
			if (this[kStream].destroyed) return new Promise(function(resolve, reject) {
				process.nextTick(function() {
					if (_this[kError]) reject(_this[kError]);
					else resolve(createIterResult(void 0, true));
				});
			});
			var lastPromise = this[kLastPromise];
			var promise;
			if (lastPromise) promise = new Promise(wrapForNext(lastPromise, this));
			else {
				var data = this[kStream].read();
				if (data !== null) return Promise.resolve(createIterResult(data, false));
				promise = new Promise(this[kHandlePromise]);
			}
			this[kLastPromise] = promise;
			return promise;
		}
	}, _defineProperty$1(_Object$setPrototypeO, Symbol.asyncIterator, function() {
		return this;
	}), _defineProperty$1(_Object$setPrototypeO, "return", function _return() {
		var _this2 = this;
		return new Promise(function(resolve, reject) {
			_this2[kStream].destroy(null, function(err) {
				if (err) {
					reject(err);
					return;
				}
				resolve(createIterResult(void 0, true));
			});
		});
	}), _Object$setPrototypeO), AsyncIteratorPrototype);
	var createReadableStreamAsyncIterator$1 = function createReadableStreamAsyncIterator$2(stream$3) {
		var _Object$create;
		var iterator$1 = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty$1(_Object$create, kStream, {
			value: stream$3,
			writable: true
		}), _defineProperty$1(_Object$create, kLastResolve, {
			value: null,
			writable: true
		}), _defineProperty$1(_Object$create, kLastReject, {
			value: null,
			writable: true
		}), _defineProperty$1(_Object$create, kError, {
			value: null,
			writable: true
		}), _defineProperty$1(_Object$create, kEnded, {
			value: stream$3._readableState.endEmitted,
			writable: true
		}), _defineProperty$1(_Object$create, kHandlePromise, {
			value: function value(resolve, reject) {
				var data = iterator$1[kStream].read();
				if (data) {
					iterator$1[kLastPromise] = null;
					iterator$1[kLastResolve] = null;
					iterator$1[kLastReject] = null;
					resolve(createIterResult(data, false));
				} else {
					iterator$1[kLastResolve] = resolve;
					iterator$1[kLastReject] = reject;
				}
			},
			writable: true
		}), _Object$create));
		iterator$1[kLastPromise] = null;
		finished(stream$3, function(err) {
			if (err && err.code !== "ERR_STREAM_PREMATURE_CLOSE") {
				var reject = iterator$1[kLastReject];
				if (reject !== null) {
					iterator$1[kLastPromise] = null;
					iterator$1[kLastResolve] = null;
					iterator$1[kLastReject] = null;
					reject(err);
				}
				iterator$1[kError] = err;
				return;
			}
			var resolve = iterator$1[kLastResolve];
			if (resolve !== null) {
				iterator$1[kLastPromise] = null;
				iterator$1[kLastResolve] = null;
				iterator$1[kLastReject] = null;
				resolve(createIterResult(void 0, true));
			}
			iterator$1[kEnded] = true;
		});
		stream$3.on("readable", onReadable.bind(null, iterator$1));
		return iterator$1;
	};
	module.exports = createReadableStreamAsyncIterator$1;
} });

//#endregion
//#region node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/from.js
var require_from = __commonJS({ "node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/from.js"(exports, module) {
	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key$1, arg) {
		try {
			var info$1 = gen[key$1](arg);
			var value = info$1.value;
		} catch (error$1) {
			reject(error$1);
			return;
		}
		if (info$1.done) resolve(value);
		else Promise.resolve(value).then(_next, _throw);
	}
	function _asyncToGenerator(fn) {
		return function() {
			var self$1 = this, args = arguments;
			return new Promise(function(resolve, reject) {
				var gen = fn.apply(self$1, args);
				function _next(value) {
					asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
				}
				function _throw(err) {
					asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
				}
				_next(void 0);
			});
		};
	}
	function ownKeys(object, enumerableOnly) {
		var keys$2 = Object.keys(object);
		if (Object.getOwnPropertySymbols) {
			var symbols = Object.getOwnPropertySymbols(object);
			enumerableOnly && (symbols = symbols.filter(function(sym) {
				return Object.getOwnPropertyDescriptor(object, sym).enumerable;
			})), keys$2.push.apply(keys$2, symbols);
		}
		return keys$2;
	}
	function _objectSpread(target) {
		for (var i = 1; i < arguments.length; i++) {
			var source = null != arguments[i] ? arguments[i] : {};
			i % 2 ? ownKeys(Object(source), !0).forEach(function(key$1) {
				_defineProperty(target, key$1, source[key$1]);
			}) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key$1) {
				Object.defineProperty(target, key$1, Object.getOwnPropertyDescriptor(source, key$1));
			});
		}
		return target;
	}
	function _defineProperty(obj, key$1, value) {
		key$1 = _toPropertyKey(key$1);
		if (key$1 in obj) Object.defineProperty(obj, key$1, {
			value,
			enumerable: true,
			configurable: true,
			writable: true
		});
		else obj[key$1] = value;
		return obj;
	}
	function _toPropertyKey(arg) {
		var key$1 = _toPrimitive(arg, "string");
		return typeof key$1 === "symbol" ? key$1 : String(key$1);
	}
	function _toPrimitive(input, hint) {
		if (typeof input !== "object" || input === null) return input;
		var prim = input[Symbol.toPrimitive];
		if (prim !== void 0) {
			var res = prim.call(input, hint || "default");
			if (typeof res !== "object") return res;
			throw new TypeError("@@toPrimitive must return a primitive value.");
		}
		return (hint === "string" ? String : Number)(input);
	}
	var ERR_INVALID_ARG_TYPE$2 = require_errors().codes.ERR_INVALID_ARG_TYPE;
	function from$1(Readable$7, iterable, opts) {
		var iterator$1;
		if (iterable && typeof iterable.next === "function") iterator$1 = iterable;
		else if (iterable && iterable[Symbol.asyncIterator]) iterator$1 = iterable[Symbol.asyncIterator]();
		else if (iterable && iterable[Symbol.iterator]) iterator$1 = iterable[Symbol.iterator]();
		else throw new ERR_INVALID_ARG_TYPE$2("iterable", ["Iterable"], iterable);
		var readable = new Readable$7(_objectSpread({ objectMode: true }, opts));
		var reading = false;
		readable._read = function() {
			if (!reading) {
				reading = true;
				next();
			}
		};
		function next() {
			return _next2.apply(this, arguments);
		}
		function _next2() {
			_next2 = _asyncToGenerator(function* () {
				try {
					var _yield$iterator$next = yield iterator$1.next(), value = _yield$iterator$next.value, done$1 = _yield$iterator$next.done;
					if (done$1) readable.push(null);
					else if (readable.push(yield value)) next();
					else reading = false;
				} catch (err) {
					readable.destroy(err);
				}
			});
			return _next2.apply(this, arguments);
		}
		return readable;
	}
	module.exports = from$1;
} });

//#endregion
//#region node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_readable.js
var require__stream_readable = __commonJS({ "node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_readable.js"(exports, module) {
	module.exports = Readable$1;
	var Duplex$3;
	Readable$1.ReadableState = ReadableState;
	var EE = __require("events").EventEmitter;
	var EElistenerCount = function EElistenerCount$1(emitter, type) {
		return emitter.listeners(type).length;
	};
	var Stream$13 = require_stream$1();
	var Buffer$9 = __require("buffer").Buffer;
	var OurUint8Array$1 = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {};
	function _uint8ArrayToBuffer$1(chunk) {
		return Buffer$9.from(chunk);
	}
	function _isUint8Array$1(obj) {
		return Buffer$9.isBuffer(obj) || obj instanceof OurUint8Array$1;
	}
	var debugUtil = __require("util");
	var debug$18;
	if (debugUtil && debugUtil.debuglog) debug$18 = debugUtil.debuglog("stream");
	else debug$18 = function debug$21() {};
	var BufferList = require_buffer_list();
	var destroyImpl$1 = require_destroy();
	var _require$1 = require_state$1(), getHighWaterMark$1 = _require$1.getHighWaterMark;
	var _require$codes$3 = require_errors().codes, ERR_INVALID_ARG_TYPE$1 = _require$codes$3.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes$3.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED$2 = _require$codes$3.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes$3.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;
	var StringDecoder$1;
	var createReadableStreamAsyncIterator;
	var from;
	require_inherits()(Readable$1, Stream$13);
	var errorOrDestroy$1 = destroyImpl$1.errorOrDestroy;
	var kProxyEvents = [
		"error",
		"close",
		"destroy",
		"pause",
		"resume"
	];
	function prependListener(emitter, event, fn) {
		if (typeof emitter.prependListener === "function") return emitter.prependListener(event, fn);
		if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
		else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
		else emitter._events[event] = [fn, emitter._events[event]];
	}
	function ReadableState(options, stream$3, isDuplex) {
		Duplex$3 = Duplex$3 || require__stream_duplex();
		options = options || {};
		if (typeof isDuplex !== "boolean") isDuplex = stream$3 instanceof Duplex$3;
		this.objectMode = !!options.objectMode;
		if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;
		this.highWaterMark = getHighWaterMark$1(this, options, "readableHighWaterMark", isDuplex);
		this.buffer = new BufferList();
		this.length = 0;
		this.pipes = null;
		this.pipesCount = 0;
		this.flowing = null;
		this.ended = false;
		this.endEmitted = false;
		this.reading = false;
		this.sync = true;
		this.needReadable = false;
		this.emittedReadable = false;
		this.readableListening = false;
		this.resumeScheduled = false;
		this.paused = true;
		this.emitClose = options.emitClose !== false;
		this.autoDestroy = !!options.autoDestroy;
		this.destroyed = false;
		this.defaultEncoding = options.defaultEncoding || "utf8";
		this.awaitDrain = 0;
		this.readingMore = false;
		this.decoder = null;
		this.encoding = null;
		if (options.encoding) {
			if (!StringDecoder$1) StringDecoder$1 = require_string_decoder().StringDecoder;
			this.decoder = new StringDecoder$1(options.encoding);
			this.encoding = options.encoding;
		}
	}
	function Readable$1(options) {
		Duplex$3 = Duplex$3 || require__stream_duplex();
		if (!(this instanceof Readable$1)) return new Readable$1(options);
		var isDuplex = this instanceof Duplex$3;
		this._readableState = new ReadableState(options, this, isDuplex);
		this.readable = true;
		if (options) {
			if (typeof options.read === "function") this._read = options.read;
			if (typeof options.destroy === "function") this._destroy = options.destroy;
		}
		Stream$13.call(this);
	}
	Object.defineProperty(Readable$1.prototype, "destroyed", {
		enumerable: false,
		get: function get() {
			if (this._readableState === void 0) return false;
			return this._readableState.destroyed;
		},
		set: function set$1(value) {
			if (!this._readableState) return;
			this._readableState.destroyed = value;
		}
	});
	Readable$1.prototype.destroy = destroyImpl$1.destroy;
	Readable$1.prototype._undestroy = destroyImpl$1.undestroy;
	Readable$1.prototype._destroy = function(err, cb) {
		cb(err);
	};
	Readable$1.prototype.push = function(chunk, encoding) {
		var state$1 = this._readableState;
		var skipChunkCheck;
		if (!state$1.objectMode) {
			if (typeof chunk === "string") {
				encoding = encoding || state$1.defaultEncoding;
				if (encoding !== state$1.encoding) {
					chunk = Buffer$9.from(chunk, encoding);
					encoding = "";
				}
				skipChunkCheck = true;
			}
		} else skipChunkCheck = true;
		return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
	};
	Readable$1.prototype.unshift = function(chunk) {
		return readableAddChunk(this, chunk, null, true, false);
	};
	function readableAddChunk(stream$3, chunk, encoding, addToFront, skipChunkCheck) {
		debug$18("readableAddChunk", chunk);
		var state$1 = stream$3._readableState;
		if (chunk === null) {
			state$1.reading = false;
			onEofChunk(stream$3, state$1);
		} else {
			var er;
			if (!skipChunkCheck) er = chunkInvalid(state$1, chunk);
			if (er) errorOrDestroy$1(stream$3, er);
			else if (state$1.objectMode || chunk && chunk.length > 0) {
				if (typeof chunk !== "string" && !state$1.objectMode && Object.getPrototypeOf(chunk) !== Buffer$9.prototype) chunk = _uint8ArrayToBuffer$1(chunk);
				if (addToFront) if (state$1.endEmitted) errorOrDestroy$1(stream$3, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
				else addChunk(stream$3, state$1, chunk, true);
				else if (state$1.ended) errorOrDestroy$1(stream$3, new ERR_STREAM_PUSH_AFTER_EOF());
				else if (state$1.destroyed) return false;
				else {
					state$1.reading = false;
					if (state$1.decoder && !encoding) {
						chunk = state$1.decoder.write(chunk);
						if (state$1.objectMode || chunk.length !== 0) addChunk(stream$3, state$1, chunk, false);
						else maybeReadMore(stream$3, state$1);
					} else addChunk(stream$3, state$1, chunk, false);
				}
			} else if (!addToFront) {
				state$1.reading = false;
				maybeReadMore(stream$3, state$1);
			}
		}
		return !state$1.ended && (state$1.length < state$1.highWaterMark || state$1.length === 0);
	}
	function addChunk(stream$3, state$1, chunk, addToFront) {
		if (state$1.flowing && state$1.length === 0 && !state$1.sync) {
			state$1.awaitDrain = 0;
			stream$3.emit("data", chunk);
		} else {
			state$1.length += state$1.objectMode ? 1 : chunk.length;
			if (addToFront) state$1.buffer.unshift(chunk);
			else state$1.buffer.push(chunk);
			if (state$1.needReadable) emitReadable(stream$3);
		}
		maybeReadMore(stream$3, state$1);
	}
	function chunkInvalid(state$1, chunk) {
		var er;
		if (!_isUint8Array$1(chunk) && typeof chunk !== "string" && chunk !== void 0 && !state$1.objectMode) er = new ERR_INVALID_ARG_TYPE$1("chunk", [
			"string",
			"Buffer",
			"Uint8Array"
		], chunk);
		return er;
	}
	Readable$1.prototype.isPaused = function() {
		return this._readableState.flowing === false;
	};
	Readable$1.prototype.setEncoding = function(enc) {
		if (!StringDecoder$1) StringDecoder$1 = require_string_decoder().StringDecoder;
		var decoder = new StringDecoder$1(enc);
		this._readableState.decoder = decoder;
		this._readableState.encoding = this._readableState.decoder.encoding;
		var p = this._readableState.buffer.head;
		var content = "";
		while (p !== null) {
			content += decoder.write(p.data);
			p = p.next;
		}
		this._readableState.buffer.clear();
		if (content !== "") this._readableState.buffer.push(content);
		this._readableState.length = content.length;
		return this;
	};
	var MAX_HWM = 1073741824;
	function computeNewHighWaterMark(n) {
		if (n >= MAX_HWM) n = MAX_HWM;
		else {
			n--;
			n |= n >>> 1;
			n |= n >>> 2;
			n |= n >>> 4;
			n |= n >>> 8;
			n |= n >>> 16;
			n++;
		}
		return n;
	}
	function howMuchToRead(n, state$1) {
		if (n <= 0 || state$1.length === 0 && state$1.ended) return 0;
		if (state$1.objectMode) return 1;
		if (n !== n) if (state$1.flowing && state$1.length) return state$1.buffer.head.data.length;
		else return state$1.length;
		if (n > state$1.highWaterMark) state$1.highWaterMark = computeNewHighWaterMark(n);
		if (n <= state$1.length) return n;
		if (!state$1.ended) {
			state$1.needReadable = true;
			return 0;
		}
		return state$1.length;
	}
	Readable$1.prototype.read = function(n) {
		debug$18("read", n);
		n = parseInt(n, 10);
		var state$1 = this._readableState;
		var nOrig = n;
		if (n !== 0) state$1.emittedReadable = false;
		if (n === 0 && state$1.needReadable && ((state$1.highWaterMark !== 0 ? state$1.length >= state$1.highWaterMark : state$1.length > 0) || state$1.ended)) {
			debug$18("read: emitReadable", state$1.length, state$1.ended);
			if (state$1.length === 0 && state$1.ended) endReadable(this);
			else emitReadable(this);
			return null;
		}
		n = howMuchToRead(n, state$1);
		if (n === 0 && state$1.ended) {
			if (state$1.length === 0) endReadable(this);
			return null;
		}
		var doRead = state$1.needReadable;
		debug$18("need readable", doRead);
		if (state$1.length === 0 || state$1.length - n < state$1.highWaterMark) {
			doRead = true;
			debug$18("length less than watermark", doRead);
		}
		if (state$1.ended || state$1.reading) {
			doRead = false;
			debug$18("reading or ended", doRead);
		} else if (doRead) {
			debug$18("do read");
			state$1.reading = true;
			state$1.sync = true;
			if (state$1.length === 0) state$1.needReadable = true;
			this._read(state$1.highWaterMark);
			state$1.sync = false;
			if (!state$1.reading) n = howMuchToRead(nOrig, state$1);
		}
		var ret;
		if (n > 0) ret = fromList(n, state$1);
		else ret = null;
		if (ret === null) {
			state$1.needReadable = state$1.length <= state$1.highWaterMark;
			n = 0;
		} else {
			state$1.length -= n;
			state$1.awaitDrain = 0;
		}
		if (state$1.length === 0) {
			if (!state$1.ended) state$1.needReadable = true;
			if (nOrig !== n && state$1.ended) endReadable(this);
		}
		if (ret !== null) this.emit("data", ret);
		return ret;
	};
	function onEofChunk(stream$3, state$1) {
		debug$18("onEofChunk");
		if (state$1.ended) return;
		if (state$1.decoder) {
			var chunk = state$1.decoder.end();
			if (chunk && chunk.length) {
				state$1.buffer.push(chunk);
				state$1.length += state$1.objectMode ? 1 : chunk.length;
			}
		}
		state$1.ended = true;
		if (state$1.sync) emitReadable(stream$3);
		else {
			state$1.needReadable = false;
			if (!state$1.emittedReadable) {
				state$1.emittedReadable = true;
				emitReadable_(stream$3);
			}
		}
	}
	function emitReadable(stream$3) {
		var state$1 = stream$3._readableState;
		debug$18("emitReadable", state$1.needReadable, state$1.emittedReadable);
		state$1.needReadable = false;
		if (!state$1.emittedReadable) {
			debug$18("emitReadable", state$1.flowing);
			state$1.emittedReadable = true;
			process.nextTick(emitReadable_, stream$3);
		}
	}
	function emitReadable_(stream$3) {
		var state$1 = stream$3._readableState;
		debug$18("emitReadable_", state$1.destroyed, state$1.length, state$1.ended);
		if (!state$1.destroyed && (state$1.length || state$1.ended)) {
			stream$3.emit("readable");
			state$1.emittedReadable = false;
		}
		state$1.needReadable = !state$1.flowing && !state$1.ended && state$1.length <= state$1.highWaterMark;
		flow(stream$3);
	}
	function maybeReadMore(stream$3, state$1) {
		if (!state$1.readingMore) {
			state$1.readingMore = true;
			process.nextTick(maybeReadMore_, stream$3, state$1);
		}
	}
	function maybeReadMore_(stream$3, state$1) {
		while (!state$1.reading && !state$1.ended && (state$1.length < state$1.highWaterMark || state$1.flowing && state$1.length === 0)) {
			var len = state$1.length;
			debug$18("maybeReadMore read 0");
			stream$3.read(0);
			if (len === state$1.length) break;
		}
		state$1.readingMore = false;
	}
	Readable$1.prototype._read = function(n) {
		errorOrDestroy$1(this, new ERR_METHOD_NOT_IMPLEMENTED$2("_read()"));
	};
	Readable$1.prototype.pipe = function(dest, pipeOpts) {
		var src$2 = this;
		var state$1 = this._readableState;
		switch (state$1.pipesCount) {
			case 0:
				state$1.pipes = dest;
				break;
			case 1:
				state$1.pipes = [state$1.pipes, dest];
				break;
			default:
				state$1.pipes.push(dest);
				break;
		}
		state$1.pipesCount += 1;
		debug$18("pipe count=%d opts=%j", state$1.pipesCount, pipeOpts);
		var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
		var endFn = doEnd ? onend$1 : unpipe;
		if (state$1.endEmitted) process.nextTick(endFn);
		else src$2.once("end", endFn);
		dest.on("unpipe", onunpipe);
		function onunpipe(readable, unpipeInfo) {
			debug$18("onunpipe");
			if (readable === src$2) {
				if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
					unpipeInfo.hasUnpiped = true;
					cleanup();
				}
			}
		}
		function onend$1() {
			debug$18("onend");
			dest.end();
		}
		var ondrain = pipeOnDrain(src$2);
		dest.on("drain", ondrain);
		var cleanedUp = false;
		function cleanup() {
			debug$18("cleanup");
			dest.removeListener("close", onclose);
			dest.removeListener("finish", onfinish);
			dest.removeListener("drain", ondrain);
			dest.removeListener("error", onerror);
			dest.removeListener("unpipe", onunpipe);
			src$2.removeListener("end", onend$1);
			src$2.removeListener("end", unpipe);
			src$2.removeListener("data", ondata);
			cleanedUp = true;
			if (state$1.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
		}
		src$2.on("data", ondata);
		function ondata(chunk) {
			debug$18("ondata");
			var ret = dest.write(chunk);
			debug$18("dest.write", ret);
			if (ret === false) {
				if ((state$1.pipesCount === 1 && state$1.pipes === dest || state$1.pipesCount > 1 && indexOf(state$1.pipes, dest) !== -1) && !cleanedUp) {
					debug$18("false write response, pause", state$1.awaitDrain);
					state$1.awaitDrain++;
				}
				src$2.pause();
			}
		}
		function onerror(er) {
			debug$18("onerror", er);
			unpipe();
			dest.removeListener("error", onerror);
			if (EElistenerCount(dest, "error") === 0) errorOrDestroy$1(dest, er);
		}
		prependListener(dest, "error", onerror);
		function onclose() {
			dest.removeListener("finish", onfinish);
			unpipe();
		}
		dest.once("close", onclose);
		function onfinish() {
			debug$18("onfinish");
			dest.removeListener("close", onclose);
			unpipe();
		}
		dest.once("finish", onfinish);
		function unpipe() {
			debug$18("unpipe");
			src$2.unpipe(dest);
		}
		dest.emit("pipe", src$2);
		if (!state$1.flowing) {
			debug$18("pipe resume");
			src$2.resume();
		}
		return dest;
	};
	function pipeOnDrain(src$2) {
		return function pipeOnDrainFunctionResult() {
			var state$1 = src$2._readableState;
			debug$18("pipeOnDrain", state$1.awaitDrain);
			if (state$1.awaitDrain) state$1.awaitDrain--;
			if (state$1.awaitDrain === 0 && EElistenerCount(src$2, "data")) {
				state$1.flowing = true;
				flow(src$2);
			}
		};
	}
	Readable$1.prototype.unpipe = function(dest) {
		var state$1 = this._readableState;
		var unpipeInfo = { hasUnpiped: false };
		if (state$1.pipesCount === 0) return this;
		if (state$1.pipesCount === 1) {
			if (dest && dest !== state$1.pipes) return this;
			if (!dest) dest = state$1.pipes;
			state$1.pipes = null;
			state$1.pipesCount = 0;
			state$1.flowing = false;
			if (dest) dest.emit("unpipe", this, unpipeInfo);
			return this;
		}
		if (!dest) {
			var dests = state$1.pipes;
			var len = state$1.pipesCount;
			state$1.pipes = null;
			state$1.pipesCount = 0;
			state$1.flowing = false;
			for (var i = 0; i < len; i++) dests[i].emit("unpipe", this, { hasUnpiped: false });
			return this;
		}
		var index = indexOf(state$1.pipes, dest);
		if (index === -1) return this;
		state$1.pipes.splice(index, 1);
		state$1.pipesCount -= 1;
		if (state$1.pipesCount === 1) state$1.pipes = state$1.pipes[0];
		dest.emit("unpipe", this, unpipeInfo);
		return this;
	};
	Readable$1.prototype.on = function(ev, fn) {
		var res = Stream$13.prototype.on.call(this, ev, fn);
		var state$1 = this._readableState;
		if (ev === "data") {
			state$1.readableListening = this.listenerCount("readable") > 0;
			if (state$1.flowing !== false) this.resume();
		} else if (ev === "readable") {
			if (!state$1.endEmitted && !state$1.readableListening) {
				state$1.readableListening = state$1.needReadable = true;
				state$1.flowing = false;
				state$1.emittedReadable = false;
				debug$18("on readable", state$1.length, state$1.reading);
				if (state$1.length) emitReadable(this);
				else if (!state$1.reading) process.nextTick(nReadingNextTick, this);
			}
		}
		return res;
	};
	Readable$1.prototype.addListener = Readable$1.prototype.on;
	Readable$1.prototype.removeListener = function(ev, fn) {
		var res = Stream$13.prototype.removeListener.call(this, ev, fn);
		if (ev === "readable") process.nextTick(updateReadableListening, this);
		return res;
	};
	Readable$1.prototype.removeAllListeners = function(ev) {
		var res = Stream$13.prototype.removeAllListeners.apply(this, arguments);
		if (ev === "readable" || ev === void 0) process.nextTick(updateReadableListening, this);
		return res;
	};
	function updateReadableListening(self$1) {
		var state$1 = self$1._readableState;
		state$1.readableListening = self$1.listenerCount("readable") > 0;
		if (state$1.resumeScheduled && !state$1.paused) state$1.flowing = true;
		else if (self$1.listenerCount("data") > 0) self$1.resume();
	}
	function nReadingNextTick(self$1) {
		debug$18("readable nexttick read 0");
		self$1.read(0);
	}
	Readable$1.prototype.resume = function() {
		var state$1 = this._readableState;
		if (!state$1.flowing) {
			debug$18("resume");
			state$1.flowing = !state$1.readableListening;
			resume(this, state$1);
		}
		state$1.paused = false;
		return this;
	};
	function resume(stream$3, state$1) {
		if (!state$1.resumeScheduled) {
			state$1.resumeScheduled = true;
			process.nextTick(resume_, stream$3, state$1);
		}
	}
	function resume_(stream$3, state$1) {
		debug$18("resume", state$1.reading);
		if (!state$1.reading) stream$3.read(0);
		state$1.resumeScheduled = false;
		stream$3.emit("resume");
		flow(stream$3);
		if (state$1.flowing && !state$1.reading) stream$3.read(0);
	}
	Readable$1.prototype.pause = function() {
		debug$18("call pause flowing=%j", this._readableState.flowing);
		if (this._readableState.flowing !== false) {
			debug$18("pause");
			this._readableState.flowing = false;
			this.emit("pause");
		}
		this._readableState.paused = true;
		return this;
	};
	function flow(stream$3) {
		var state$1 = stream$3._readableState;
		debug$18("flow", state$1.flowing);
		while (state$1.flowing && stream$3.read() !== null);
	}
	Readable$1.prototype.wrap = function(stream$3) {
		var _this = this;
		var state$1 = this._readableState;
		var paused = false;
		stream$3.on("end", function() {
			debug$18("wrapped end");
			if (state$1.decoder && !state$1.ended) {
				var chunk = state$1.decoder.end();
				if (chunk && chunk.length) _this.push(chunk);
			}
			_this.push(null);
		});
		stream$3.on("data", function(chunk) {
			debug$18("wrapped data");
			if (state$1.decoder) chunk = state$1.decoder.write(chunk);
			if (state$1.objectMode && (chunk === null || chunk === void 0)) return;
			else if (!state$1.objectMode && (!chunk || !chunk.length)) return;
			var ret = _this.push(chunk);
			if (!ret) {
				paused = true;
				stream$3.pause();
			}
		});
		for (var i in stream$3) if (this[i] === void 0 && typeof stream$3[i] === "function") this[i] = function methodWrap(method$1) {
			return function methodWrapReturnFunction() {
				return stream$3[method$1].apply(stream$3, arguments);
			};
		}(i);
		for (var n = 0; n < kProxyEvents.length; n++) stream$3.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
		this._read = function(n$1) {
			debug$18("wrapped _read", n$1);
			if (paused) {
				paused = false;
				stream$3.resume();
			}
		};
		return this;
	};
	if (typeof Symbol === "function") Readable$1.prototype[Symbol.asyncIterator] = function() {
		if (createReadableStreamAsyncIterator === void 0) createReadableStreamAsyncIterator = require_async_iterator();
		return createReadableStreamAsyncIterator(this);
	};
	Object.defineProperty(Readable$1.prototype, "readableHighWaterMark", {
		enumerable: false,
		get: function get() {
			return this._readableState.highWaterMark;
		}
	});
	Object.defineProperty(Readable$1.prototype, "readableBuffer", {
		enumerable: false,
		get: function get() {
			return this._readableState && this._readableState.buffer;
		}
	});
	Object.defineProperty(Readable$1.prototype, "readableFlowing", {
		enumerable: false,
		get: function get() {
			return this._readableState.flowing;
		},
		set: function set$1(state$1) {
			if (this._readableState) this._readableState.flowing = state$1;
		}
	});
	Readable$1._fromList = fromList;
	Object.defineProperty(Readable$1.prototype, "readableLength", {
		enumerable: false,
		get: function get() {
			return this._readableState.length;
		}
	});
	function fromList(n, state$1) {
		if (state$1.length === 0) return null;
		var ret;
		if (state$1.objectMode) ret = state$1.buffer.shift();
		else if (!n || n >= state$1.length) {
			if (state$1.decoder) ret = state$1.buffer.join("");
			else if (state$1.buffer.length === 1) ret = state$1.buffer.first();
			else ret = state$1.buffer.concat(state$1.length);
			state$1.buffer.clear();
		} else ret = state$1.buffer.consume(n, state$1.decoder);
		return ret;
	}
	function endReadable(stream$3) {
		var state$1 = stream$3._readableState;
		debug$18("endReadable", state$1.endEmitted);
		if (!state$1.endEmitted) {
			state$1.ended = true;
			process.nextTick(endReadableNT, state$1, stream$3);
		}
	}
	function endReadableNT(state$1, stream$3) {
		debug$18("endReadableNT", state$1.endEmitted, state$1.length);
		if (!state$1.endEmitted && state$1.length === 0) {
			state$1.endEmitted = true;
			stream$3.readable = false;
			stream$3.emit("end");
			if (state$1.autoDestroy) {
				var wState = stream$3._writableState;
				if (!wState || wState.autoDestroy && wState.finished) stream$3.destroy();
			}
		}
	}
	if (typeof Symbol === "function") Readable$1.from = function(iterable, opts) {
		if (from === void 0) from = require_from();
		return from(Readable$1, iterable, opts);
	};
	function indexOf(xs, x) {
		for (var i = 0, l = xs.length; i < l; i++) if (xs[i] === x) return i;
		return -1;
	}
} });

//#endregion
//#region node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_duplex.js
var require__stream_duplex = __commonJS({ "node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_duplex.js"(exports, module) {
	var objectKeys = Object.keys || function(obj) {
		var keys$2 = [];
		for (var key$1 in obj) keys$2.push(key$1);
		return keys$2;
	};
	module.exports = Duplex$2;
	var Readable = require__stream_readable();
	var Writable$5 = require__stream_writable();
	require_inherits()(Duplex$2, Readable);
	{
		var keys$1 = objectKeys(Writable$5.prototype);
		for (var v = 0; v < keys$1.length; v++) {
			var method = keys$1[v];
			if (!Duplex$2.prototype[method]) Duplex$2.prototype[method] = Writable$5.prototype[method];
		}
	}
	function Duplex$2(options) {
		if (!(this instanceof Duplex$2)) return new Duplex$2(options);
		Readable.call(this, options);
		Writable$5.call(this, options);
		this.allowHalfOpen = true;
		if (options) {
			if (options.readable === false) this.readable = false;
			if (options.writable === false) this.writable = false;
			if (options.allowHalfOpen === false) {
				this.allowHalfOpen = false;
				this.once("end", onend);
			}
		}
	}
	Object.defineProperty(Duplex$2.prototype, "writableHighWaterMark", {
		enumerable: false,
		get: function get() {
			return this._writableState.highWaterMark;
		}
	});
	Object.defineProperty(Duplex$2.prototype, "writableBuffer", {
		enumerable: false,
		get: function get() {
			return this._writableState && this._writableState.getBuffer();
		}
	});
	Object.defineProperty(Duplex$2.prototype, "writableLength", {
		enumerable: false,
		get: function get() {
			return this._writableState.length;
		}
	});
	function onend() {
		if (this._writableState.ended) return;
		process.nextTick(onEndNT, this);
	}
	function onEndNT(self$1) {
		self$1.end();
	}
	Object.defineProperty(Duplex$2.prototype, "destroyed", {
		enumerable: false,
		get: function get() {
			if (this._readableState === void 0 || this._writableState === void 0) return false;
			return this._readableState.destroyed && this._writableState.destroyed;
		},
		set: function set$1(value) {
			if (this._readableState === void 0 || this._writableState === void 0) return;
			this._readableState.destroyed = value;
			this._writableState.destroyed = value;
		}
	});
} });

//#endregion
//#region node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_writable.js
var require__stream_writable = __commonJS({ "node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_writable.js"(exports, module) {
	module.exports = Writable$4;
	function CorkedRequest(state$1) {
		var _this = this;
		this.next = null;
		this.entry = null;
		this.finish = function() {
			onCorkedFinish(_this, state$1);
		};
	}
	var Duplex$1;
	Writable$4.WritableState = WritableState;
	var internalUtil = { deprecate: require_node$2() };
	var Stream$12 = require_stream$1();
	var Buffer$8 = __require("buffer").Buffer;
	var OurUint8Array = (typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : typeof self !== "undefined" ? self : {}).Uint8Array || function() {};
	function _uint8ArrayToBuffer(chunk) {
		return Buffer$8.from(chunk);
	}
	function _isUint8Array(obj) {
		return Buffer$8.isBuffer(obj) || obj instanceof OurUint8Array;
	}
	var destroyImpl = require_destroy();
	var _require = require_state$1(), getHighWaterMark = _require.getHighWaterMark;
	var _require$codes$2 = require_errors().codes, ERR_INVALID_ARG_TYPE = _require$codes$2.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED$1 = _require$codes$2.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK$1 = _require$codes$2.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes$2.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED$1 = _require$codes$2.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes$2.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes$2.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes$2.ERR_UNKNOWN_ENCODING;
	var errorOrDestroy = destroyImpl.errorOrDestroy;
	require_inherits()(Writable$4, Stream$12);
	function nop() {}
	function WritableState(options, stream$3, isDuplex) {
		Duplex$1 = Duplex$1 || require__stream_duplex();
		options = options || {};
		if (typeof isDuplex !== "boolean") isDuplex = stream$3 instanceof Duplex$1;
		this.objectMode = !!options.objectMode;
		if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;
		this.highWaterMark = getHighWaterMark(this, options, "writableHighWaterMark", isDuplex);
		this.finalCalled = false;
		this.needDrain = false;
		this.ending = false;
		this.ended = false;
		this.finished = false;
		this.destroyed = false;
		var noDecode = options.decodeStrings === false;
		this.decodeStrings = !noDecode;
		this.defaultEncoding = options.defaultEncoding || "utf8";
		this.length = 0;
		this.writing = false;
		this.corked = 0;
		this.sync = true;
		this.bufferProcessing = false;
		this.onwrite = function(er) {
			onwrite(stream$3, er);
		};
		this.writecb = null;
		this.writelen = 0;
		this.bufferedRequest = null;
		this.lastBufferedRequest = null;
		this.pendingcb = 0;
		this.prefinished = false;
		this.errorEmitted = false;
		this.emitClose = options.emitClose !== false;
		this.autoDestroy = !!options.autoDestroy;
		this.bufferedRequestCount = 0;
		this.corkedRequestsFree = new CorkedRequest(this);
	}
	WritableState.prototype.getBuffer = function getBuffer() {
		var current = this.bufferedRequest;
		var out = [];
		while (current) {
			out.push(current);
			current = current.next;
		}
		return out;
	};
	(function() {
		try {
			Object.defineProperty(WritableState.prototype, "buffer", { get: internalUtil.deprecate(function writableStateBufferGetter() {
				return this.getBuffer();
			}, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003") });
		} catch (_) {}
	})();
	var realHasInstance;
	if (typeof Symbol === "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === "function") {
		realHasInstance = Function.prototype[Symbol.hasInstance];
		Object.defineProperty(Writable$4, Symbol.hasInstance, { value: function value(object) {
			if (realHasInstance.call(this, object)) return true;
			if (this !== Writable$4) return false;
			return object && object._writableState instanceof WritableState;
		} });
	} else realHasInstance = function realHasInstance$1(object) {
		return object instanceof this;
	};
	function Writable$4(options) {
		Duplex$1 = Duplex$1 || require__stream_duplex();
		var isDuplex = this instanceof Duplex$1;
		if (!isDuplex && !realHasInstance.call(Writable$4, this)) return new Writable$4(options);
		this._writableState = new WritableState(options, this, isDuplex);
		this.writable = true;
		if (options) {
			if (typeof options.write === "function") this._write = options.write;
			if (typeof options.writev === "function") this._writev = options.writev;
			if (typeof options.destroy === "function") this._destroy = options.destroy;
			if (typeof options.final === "function") this._final = options.final;
		}
		Stream$12.call(this);
	}
	Writable$4.prototype.pipe = function() {
		errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
	};
	function writeAfterEnd(stream$3, cb) {
		var er = new ERR_STREAM_WRITE_AFTER_END();
		errorOrDestroy(stream$3, er);
		process.nextTick(cb, er);
	}
	function validChunk(stream$3, state$1, chunk, cb) {
		var er;
		if (chunk === null) er = new ERR_STREAM_NULL_VALUES();
		else if (typeof chunk !== "string" && !state$1.objectMode) er = new ERR_INVALID_ARG_TYPE("chunk", ["string", "Buffer"], chunk);
		if (er) {
			errorOrDestroy(stream$3, er);
			process.nextTick(cb, er);
			return false;
		}
		return true;
	}
	Writable$4.prototype.write = function(chunk, encoding, cb) {
		var state$1 = this._writableState;
		var ret = false;
		var isBuf = !state$1.objectMode && _isUint8Array(chunk);
		if (isBuf && !Buffer$8.isBuffer(chunk)) chunk = _uint8ArrayToBuffer(chunk);
		if (typeof encoding === "function") {
			cb = encoding;
			encoding = null;
		}
		if (isBuf) encoding = "buffer";
		else if (!encoding) encoding = state$1.defaultEncoding;
		if (typeof cb !== "function") cb = nop;
		if (state$1.ending) writeAfterEnd(this, cb);
		else if (isBuf || validChunk(this, state$1, chunk, cb)) {
			state$1.pendingcb++;
			ret = writeOrBuffer(this, state$1, isBuf, chunk, encoding, cb);
		}
		return ret;
	};
	Writable$4.prototype.cork = function() {
		this._writableState.corked++;
	};
	Writable$4.prototype.uncork = function() {
		var state$1 = this._writableState;
		if (state$1.corked) {
			state$1.corked--;
			if (!state$1.writing && !state$1.corked && !state$1.bufferProcessing && state$1.bufferedRequest) clearBuffer(this, state$1);
		}
	};
	Writable$4.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
		if (typeof encoding === "string") encoding = encoding.toLowerCase();
		if (!([
			"hex",
			"utf8",
			"utf-8",
			"ascii",
			"binary",
			"base64",
			"ucs2",
			"ucs-2",
			"utf16le",
			"utf-16le",
			"raw"
		].indexOf((encoding + "").toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
		this._writableState.defaultEncoding = encoding;
		return this;
	};
	Object.defineProperty(Writable$4.prototype, "writableBuffer", {
		enumerable: false,
		get: function get() {
			return this._writableState && this._writableState.getBuffer();
		}
	});
	function decodeChunk(state$1, chunk, encoding) {
		if (!state$1.objectMode && state$1.decodeStrings !== false && typeof chunk === "string") chunk = Buffer$8.from(chunk, encoding);
		return chunk;
	}
	Object.defineProperty(Writable$4.prototype, "writableHighWaterMark", {
		enumerable: false,
		get: function get() {
			return this._writableState.highWaterMark;
		}
	});
	function writeOrBuffer(stream$3, state$1, isBuf, chunk, encoding, cb) {
		if (!isBuf) {
			var newChunk = decodeChunk(state$1, chunk, encoding);
			if (chunk !== newChunk) {
				isBuf = true;
				encoding = "buffer";
				chunk = newChunk;
			}
		}
		var len = state$1.objectMode ? 1 : chunk.length;
		state$1.length += len;
		var ret = state$1.length < state$1.highWaterMark;
		if (!ret) state$1.needDrain = true;
		if (state$1.writing || state$1.corked) {
			var last$1 = state$1.lastBufferedRequest;
			state$1.lastBufferedRequest = {
				chunk,
				encoding,
				isBuf,
				callback: cb,
				next: null
			};
			if (last$1) last$1.next = state$1.lastBufferedRequest;
			else state$1.bufferedRequest = state$1.lastBufferedRequest;
			state$1.bufferedRequestCount += 1;
		} else doWrite(stream$3, state$1, false, len, chunk, encoding, cb);
		return ret;
	}
	function doWrite(stream$3, state$1, writev, len, chunk, encoding, cb) {
		state$1.writelen = len;
		state$1.writecb = cb;
		state$1.writing = true;
		state$1.sync = true;
		if (state$1.destroyed) state$1.onwrite(new ERR_STREAM_DESTROYED$1("write"));
		else if (writev) stream$3._writev(chunk, state$1.onwrite);
		else stream$3._write(chunk, encoding, state$1.onwrite);
		state$1.sync = false;
	}
	function onwriteError(stream$3, state$1, sync, er, cb) {
		--state$1.pendingcb;
		if (sync) {
			process.nextTick(cb, er);
			process.nextTick(finishMaybe, stream$3, state$1);
			stream$3._writableState.errorEmitted = true;
			errorOrDestroy(stream$3, er);
		} else {
			cb(er);
			stream$3._writableState.errorEmitted = true;
			errorOrDestroy(stream$3, er);
			finishMaybe(stream$3, state$1);
		}
	}
	function onwriteStateUpdate(state$1) {
		state$1.writing = false;
		state$1.writecb = null;
		state$1.length -= state$1.writelen;
		state$1.writelen = 0;
	}
	function onwrite(stream$3, er) {
		var state$1 = stream$3._writableState;
		var sync = state$1.sync;
		var cb = state$1.writecb;
		if (typeof cb !== "function") throw new ERR_MULTIPLE_CALLBACK$1();
		onwriteStateUpdate(state$1);
		if (er) onwriteError(stream$3, state$1, sync, er, cb);
		else {
			var finished$2 = needFinish(state$1) || stream$3.destroyed;
			if (!finished$2 && !state$1.corked && !state$1.bufferProcessing && state$1.bufferedRequest) clearBuffer(stream$3, state$1);
			if (sync) process.nextTick(afterWrite, stream$3, state$1, finished$2, cb);
			else afterWrite(stream$3, state$1, finished$2, cb);
		}
	}
	function afterWrite(stream$3, state$1, finished$2, cb) {
		if (!finished$2) onwriteDrain(stream$3, state$1);
		state$1.pendingcb--;
		cb();
		finishMaybe(stream$3, state$1);
	}
	function onwriteDrain(stream$3, state$1) {
		if (state$1.length === 0 && state$1.needDrain) {
			state$1.needDrain = false;
			stream$3.emit("drain");
		}
	}
	function clearBuffer(stream$3, state$1) {
		state$1.bufferProcessing = true;
		var entry = state$1.bufferedRequest;
		if (stream$3._writev && entry && entry.next) {
			var l = state$1.bufferedRequestCount;
			var buffer$1 = new Array(l);
			var holder = state$1.corkedRequestsFree;
			holder.entry = entry;
			var count = 0;
			var allBuffers = true;
			while (entry) {
				buffer$1[count] = entry;
				if (!entry.isBuf) allBuffers = false;
				entry = entry.next;
				count += 1;
			}
			buffer$1.allBuffers = allBuffers;
			doWrite(stream$3, state$1, true, state$1.length, buffer$1, "", holder.finish);
			state$1.pendingcb++;
			state$1.lastBufferedRequest = null;
			if (holder.next) {
				state$1.corkedRequestsFree = holder.next;
				holder.next = null;
			} else state$1.corkedRequestsFree = new CorkedRequest(state$1);
			state$1.bufferedRequestCount = 0;
		} else {
			while (entry) {
				var chunk = entry.chunk;
				var encoding = entry.encoding;
				var cb = entry.callback;
				var len = state$1.objectMode ? 1 : chunk.length;
				doWrite(stream$3, state$1, false, len, chunk, encoding, cb);
				entry = entry.next;
				state$1.bufferedRequestCount--;
				if (state$1.writing) break;
			}
			if (entry === null) state$1.lastBufferedRequest = null;
		}
		state$1.bufferedRequest = entry;
		state$1.bufferProcessing = false;
	}
	Writable$4.prototype._write = function(chunk, encoding, cb) {
		cb(new ERR_METHOD_NOT_IMPLEMENTED$1("_write()"));
	};
	Writable$4.prototype._writev = null;
	Writable$4.prototype.end = function(chunk, encoding, cb) {
		var state$1 = this._writableState;
		if (typeof chunk === "function") {
			cb = chunk;
			chunk = null;
			encoding = null;
		} else if (typeof encoding === "function") {
			cb = encoding;
			encoding = null;
		}
		if (chunk !== null && chunk !== void 0) this.write(chunk, encoding);
		if (state$1.corked) {
			state$1.corked = 1;
			this.uncork();
		}
		if (!state$1.ending) endWritable(this, state$1, cb);
		return this;
	};
	Object.defineProperty(Writable$4.prototype, "writableLength", {
		enumerable: false,
		get: function get() {
			return this._writableState.length;
		}
	});
	function needFinish(state$1) {
		return state$1.ending && state$1.length === 0 && state$1.bufferedRequest === null && !state$1.finished && !state$1.writing;
	}
	function callFinal(stream$3, state$1) {
		stream$3._final(function(err) {
			state$1.pendingcb--;
			if (err) errorOrDestroy(stream$3, err);
			state$1.prefinished = true;
			stream$3.emit("prefinish");
			finishMaybe(stream$3, state$1);
		});
	}
	function prefinish$1(stream$3, state$1) {
		if (!state$1.prefinished && !state$1.finalCalled) if (typeof stream$3._final === "function" && !state$1.destroyed) {
			state$1.pendingcb++;
			state$1.finalCalled = true;
			process.nextTick(callFinal, stream$3, state$1);
		} else {
			state$1.prefinished = true;
			stream$3.emit("prefinish");
		}
	}
	function finishMaybe(stream$3, state$1) {
		var need = needFinish(state$1);
		if (need) {
			prefinish$1(stream$3, state$1);
			if (state$1.pendingcb === 0) {
				state$1.finished = true;
				stream$3.emit("finish");
				if (state$1.autoDestroy) {
					var rState = stream$3._readableState;
					if (!rState || rState.autoDestroy && rState.endEmitted) stream$3.destroy();
				}
			}
		}
		return need;
	}
	function endWritable(stream$3, state$1, cb) {
		state$1.ending = true;
		finishMaybe(stream$3, state$1);
		if (cb) if (state$1.finished) process.nextTick(cb);
		else stream$3.once("finish", cb);
		state$1.ended = true;
		stream$3.writable = false;
	}
	function onCorkedFinish(corkReq, state$1, err) {
		var entry = corkReq.entry;
		corkReq.entry = null;
		while (entry) {
			var cb = entry.callback;
			state$1.pendingcb--;
			cb(err);
			entry = entry.next;
		}
		state$1.corkedRequestsFree.next = corkReq;
	}
	Object.defineProperty(Writable$4.prototype, "destroyed", {
		enumerable: false,
		get: function get() {
			if (this._writableState === void 0) return false;
			return this._writableState.destroyed;
		},
		set: function set$1(value) {
			if (!this._writableState) return;
			this._writableState.destroyed = value;
		}
	});
	Writable$4.prototype.destroy = destroyImpl.destroy;
	Writable$4.prototype._undestroy = destroyImpl.undestroy;
	Writable$4.prototype._destroy = function(err, cb) {
		cb(err);
	};
} });

//#endregion
//#region node_modules/.pnpm/winston-transport@4.9.0/node_modules/winston-transport/modern.js
var require_modern = __commonJS({ "node_modules/.pnpm/winston-transport@4.9.0/node_modules/winston-transport/modern.js"(exports, module) {
	const util$12 = __require("util");
	const Writable$3 = require__stream_writable();
	const { LEVEL: LEVEL$4 } = require_triple_beam();
	/**
	* Constructor function for the TransportStream. This is the base prototype
	* that all `winston >= 3` transports should inherit from.
	* @param {Object} options - Options for this TransportStream instance
	* @param {String} options.level - Highest level according to RFC5424.
	* @param {Boolean} options.handleExceptions - If true, info with
	* { exception: true } will be written.
	* @param {Function} options.log - Custom log function for simple Transport
	* creation
	* @param {Function} options.close - Called on "unpipe" from parent.
	*/
	const TransportStream$5 = module.exports = function TransportStream$6(options = {}) {
		Writable$3.call(this, {
			objectMode: true,
			highWaterMark: options.highWaterMark
		});
		this.format = options.format;
		this.level = options.level;
		this.handleExceptions = options.handleExceptions;
		this.handleRejections = options.handleRejections;
		this.silent = options.silent;
		if (options.log) this.log = options.log;
		if (options.logv) this.logv = options.logv;
		if (options.close) this.close = options.close;
		this.once("pipe", (logger$29) => {
			this.levels = logger$29.levels;
			this.parent = logger$29;
		});
		this.once("unpipe", (src$2) => {
			if (src$2 === this.parent) {
				this.parent = null;
				if (this.close) this.close();
			}
		});
	};
	util$12.inherits(TransportStream$5, Writable$3);
	/**
	* Writes the info object to our transport instance.
	* @param {mixed} info - TODO: add param description.
	* @param {mixed} enc - TODO: add param description.
	* @param {function} callback - TODO: add param description.
	* @returns {undefined}
	* @private
	*/
	TransportStream$5.prototype._write = function _write(info$1, enc, callback) {
		if (this.silent || info$1.exception === true && !this.handleExceptions) return callback(null);
		const level = this.level || this.parent && this.parent.level;
		if (!level || this.levels[level] >= this.levels[info$1[LEVEL$4]]) {
			if (info$1 && !this.format) return this.log(info$1, callback);
			let errState;
			let transformed;
			try {
				transformed = this.format.transform(Object.assign({}, info$1), this.format.options);
			} catch (err) {
				errState = err;
			}
			if (errState || !transformed) {
				callback();
				if (errState) throw errState;
				return;
			}
			return this.log(transformed, callback);
		}
		this._writableState.sync = false;
		return callback(null);
	};
	/**
	* Writes the batch of info objects (i.e. "object chunks") to our transport
	* instance after performing any necessary filtering.
	* @param {mixed} chunks - TODO: add params description.
	* @param {function} callback - TODO: add params description.
	* @returns {mixed} - TODO: add returns description.
	* @private
	*/
	TransportStream$5.prototype._writev = function _writev(chunks, callback) {
		if (this.logv) {
			const infos = chunks.filter(this._accept, this);
			if (!infos.length) return callback(null);
			return this.logv(infos, callback);
		}
		for (let i = 0; i < chunks.length; i++) {
			if (!this._accept(chunks[i])) continue;
			if (chunks[i].chunk && !this.format) {
				this.log(chunks[i].chunk, chunks[i].callback);
				continue;
			}
			let errState;
			let transformed;
			try {
				transformed = this.format.transform(Object.assign({}, chunks[i].chunk), this.format.options);
			} catch (err) {
				errState = err;
			}
			if (errState || !transformed) {
				chunks[i].callback();
				if (errState) {
					callback(null);
					throw errState;
				}
			} else this.log(transformed, chunks[i].callback);
		}
		return callback(null);
	};
	/**
	* Predicate function that returns true if the specfied `info` on the
	* WriteReq, `write`, should be passed down into the derived
	* TransportStream's I/O via `.log(info, callback)`.
	* @param {WriteReq} write - winston@3 Node.js WriteReq for the `info` object
	* representing the log message.
	* @returns {Boolean} - Value indicating if the `write` should be accepted &
	* logged.
	*/
	TransportStream$5.prototype._accept = function _accept(write$2) {
		const info$1 = write$2.chunk;
		if (this.silent) return false;
		const level = this.level || this.parent && this.parent.level;
		if (info$1.exception === true || !level || this.levels[level] >= this.levels[info$1[LEVEL$4]]) {
			if (this.handleExceptions || info$1.exception !== true) return true;
		}
		return false;
	};
	/**
	* _nop is short for "No operation"
	* @returns {Boolean} Intentionally false.
	*/
	TransportStream$5.prototype._nop = function _nop() {
		return void 0;
	};
} });

//#endregion
//#region node_modules/.pnpm/winston-transport@4.9.0/node_modules/winston-transport/legacy.js
var require_legacy = __commonJS({ "node_modules/.pnpm/winston-transport@4.9.0/node_modules/winston-transport/legacy.js"(exports, module) {
	const util$11 = __require("util");
	const { LEVEL: LEVEL$3 } = require_triple_beam();
	const TransportStream$4 = require_modern();
	/**
	* Constructor function for the LegacyTransportStream. This is an internal
	* wrapper `winston >= 3` uses to wrap older transports implementing
	* log(level, message, meta).
	* @param {Object} options - Options for this TransportStream instance.
	* @param {Transpot} options.transport - winston@2 or older Transport to wrap.
	*/
	const LegacyTransportStream$1 = module.exports = function LegacyTransportStream$2(options = {}) {
		TransportStream$4.call(this, options);
		if (!options.transport || typeof options.transport.log !== "function") throw new Error("Invalid transport, must be an object with a log method.");
		this.transport = options.transport;
		this.level = this.level || options.transport.level;
		this.handleExceptions = this.handleExceptions || options.transport.handleExceptions;
		this._deprecated();
		function transportError(err) {
			this.emit("error", err, this.transport);
		}
		if (!this.transport.__winstonError) {
			this.transport.__winstonError = transportError.bind(this);
			this.transport.on("error", this.transport.__winstonError);
		}
	};
	util$11.inherits(LegacyTransportStream$1, TransportStream$4);
	/**
	* Writes the info object to our transport instance.
	* @param {mixed} info - TODO: add param description.
	* @param {mixed} enc - TODO: add param description.
	* @param {function} callback - TODO: add param description.
	* @returns {undefined}
	* @private
	*/
	LegacyTransportStream$1.prototype._write = function _write(info$1, enc, callback) {
		if (this.silent || info$1.exception === true && !this.handleExceptions) return callback(null);
		if (!this.level || this.levels[this.level] >= this.levels[info$1[LEVEL$3]]) this.transport.log(info$1[LEVEL$3], info$1.message, info$1, this._nop);
		callback(null);
	};
	/**
	* Writes the batch of info objects (i.e. "object chunks") to our transport
	* instance after performing any necessary filtering.
	* @param {mixed} chunks - TODO: add params description.
	* @param {function} callback - TODO: add params description.
	* @returns {mixed} - TODO: add returns description.
	* @private
	*/
	LegacyTransportStream$1.prototype._writev = function _writev(chunks, callback) {
		for (let i = 0; i < chunks.length; i++) if (this._accept(chunks[i])) {
			this.transport.log(chunks[i].chunk[LEVEL$3], chunks[i].chunk.message, chunks[i].chunk, this._nop);
			chunks[i].callback();
		}
		return callback(null);
	};
	/**
	* Displays a deprecation notice. Defined as a function so it can be
	* overriden in tests.
	* @returns {undefined}
	*/
	LegacyTransportStream$1.prototype._deprecated = function _deprecated() {
		console.error([`${this.transport.name} is a legacy winston transport. Consider upgrading: `, "- Upgrade docs: https://github.com/winstonjs/winston/blob/master/UPGRADE-3.0.md"].join("\n"));
	};
	/**
	* Clean up error handling state on the legacy transport associated
	* with this instance.
	* @returns {undefined}
	*/
	LegacyTransportStream$1.prototype.close = function close() {
		if (this.transport.close) this.transport.close();
		if (this.transport.__winstonError) {
			this.transport.removeListener("error", this.transport.__winstonError);
			this.transport.__winstonError = null;
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/winston-transport@4.9.0/node_modules/winston-transport/index.js
var require_winston_transport = __commonJS({ "node_modules/.pnpm/winston-transport@4.9.0/node_modules/winston-transport/index.js"(exports, module) {
	module.exports = require_modern();
	module.exports.LegacyTransportStream = require_legacy();
} });

//#endregion
//#region node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/transports/console.js
var require_console$1 = __commonJS({ "node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/transports/console.js"(exports, module) {
	const os$5 = __require("os");
	const { LEVEL: LEVEL$2, MESSAGE: MESSAGE$2 } = require_triple_beam();
	const TransportStream$3 = require_winston_transport();
	/**
	* Transport for outputting to the console.
	* @type {Console}
	* @extends {TransportStream}
	*/
	module.exports = class Console$1 extends TransportStream$3 {
		/**
		* Constructor function for the Console transport object responsible for
		* persisting log messages and metadata to a terminal or TTY.
		* @param {!Object} [options={}] - Options for this instance.
		*/
		constructor(options = {}) {
			super(options);
			this.name = options.name || "console";
			this.stderrLevels = this._stringArrayToSet(options.stderrLevels);
			this.consoleWarnLevels = this._stringArrayToSet(options.consoleWarnLevels);
			this.eol = typeof options.eol === "string" ? options.eol : os$5.EOL;
			this.forceConsole = options.forceConsole || false;
			this._consoleLog = console.log.bind(console);
			this._consoleWarn = console.warn.bind(console);
			this._consoleError = console.error.bind(console);
			this.setMaxListeners(30);
		}
		/**
		* Core logging method exposed to Winston.
		* @param {Object} info - TODO: add param description.
		* @param {Function} callback - TODO: add param description.
		* @returns {undefined}
		*/
		log(info$1, callback) {
			setImmediate(() => this.emit("logged", info$1));
			if (this.stderrLevels[info$1[LEVEL$2]]) {
				if (console._stderr && !this.forceConsole) console._stderr.write(`${info$1[MESSAGE$2]}${this.eol}`);
				else this._consoleError(info$1[MESSAGE$2]);
				if (callback) callback();
				return;
			} else if (this.consoleWarnLevels[info$1[LEVEL$2]]) {
				if (console._stderr && !this.forceConsole) console._stderr.write(`${info$1[MESSAGE$2]}${this.eol}`);
				else this._consoleWarn(info$1[MESSAGE$2]);
				if (callback) callback();
				return;
			}
			if (console._stdout && !this.forceConsole) console._stdout.write(`${info$1[MESSAGE$2]}${this.eol}`);
			else this._consoleLog(info$1[MESSAGE$2]);
			if (callback) callback();
		}
		/**
		* Returns a Set-like object with strArray's elements as keys (each with the
		* value true).
		* @param {Array} strArray - Array of Set-elements as strings.
		* @param {?string} [errMsg] - Custom error message thrown on invalid input.
		* @returns {Object} - TODO: add return description.
		* @private
		*/
		_stringArrayToSet(strArray, errMsg) {
			if (!strArray) return {};
			errMsg = errMsg || "Cannot make set from type other than Array of string elements";
			if (!Array.isArray(strArray)) throw new Error(errMsg);
			return strArray.reduce((set$1, el) => {
				if (typeof el !== "string") throw new Error(errMsg);
				set$1[el] = true;
				return set$1;
			}, {});
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/async@3.2.6/node_modules/async/internal/isArrayLike.js
var require_isArrayLike = __commonJS({ "node_modules/.pnpm/async@3.2.6/node_modules/async/internal/isArrayLike.js"(exports, module) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = isArrayLike$1;
	function isArrayLike$1(value) {
		return value && typeof value.length === "number" && value.length >= 0 && value.length % 1 === 0;
	}
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/.pnpm/async@3.2.6/node_modules/async/internal/initialParams.js
var require_initialParams = __commonJS({ "node_modules/.pnpm/async@3.2.6/node_modules/async/internal/initialParams.js"(exports, module) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = function(fn) {
		return function(...args) {
			var callback = args.pop();
			return fn.call(this, args, callback);
		};
	};
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/.pnpm/async@3.2.6/node_modules/async/internal/setImmediate.js
var require_setImmediate = __commonJS({ "node_modules/.pnpm/async@3.2.6/node_modules/async/internal/setImmediate.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.fallback = fallback$1;
	exports.wrap = wrap$1;
	/* istanbul ignore file */
	var hasQueueMicrotask = exports.hasQueueMicrotask = typeof queueMicrotask === "function" && queueMicrotask;
	var hasSetImmediate = exports.hasSetImmediate = typeof setImmediate === "function" && setImmediate;
	var hasNextTick = exports.hasNextTick = typeof process === "object" && typeof process.nextTick === "function";
	function fallback$1(fn) {
		setTimeout(fn, 0);
	}
	function wrap$1(defer$2) {
		return (fn, ...args) => defer$2(() => fn(...args));
	}
	var _defer;
	if (hasQueueMicrotask) _defer = queueMicrotask;
	else if (hasSetImmediate) _defer = setImmediate;
	else if (hasNextTick) _defer = process.nextTick;
	else _defer = fallback$1;
	exports.default = wrap$1(_defer);
} });

//#endregion
//#region node_modules/.pnpm/async@3.2.6/node_modules/async/asyncify.js
var require_asyncify = __commonJS({ "node_modules/.pnpm/async@3.2.6/node_modules/async/asyncify.js"(exports, module) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = asyncify;
	var _initialParams = require_initialParams();
	var _initialParams2 = _interopRequireDefault$10(_initialParams);
	var _setImmediate$1 = require_setImmediate();
	var _setImmediate2 = _interopRequireDefault$10(_setImmediate$1);
	var _wrapAsync$5 = require_wrapAsync();
	function _interopRequireDefault$10(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}
	/**
	* Take a sync function and make it async, passing its return value to a
	* callback. This is useful for plugging sync functions into a waterfall,
	* series, or other async functions. Any arguments passed to the generated
	* function will be passed to the wrapped function (except for the final
	* callback argument). Errors thrown will be passed to the callback.
	*
	* If the function passed to `asyncify` returns a Promise, that promises's
	* resolved/rejected state will be used to call the callback, rather than simply
	* the synchronous return value.
	*
	* This also means you can asyncify ES2017 `async` functions.
	*
	* @name asyncify
	* @static
	* @memberOf module:Utils
	* @method
	* @alias wrapSync
	* @category Util
	* @param {Function} func - The synchronous function, or Promise-returning
	* function to convert to an {@link AsyncFunction}.
	* @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be
	* invoked with `(args..., callback)`.
	* @example
	*
	* // passing a regular synchronous function
	* async.waterfall([
	*     async.apply(fs.readFile, filename, "utf8"),
	*     async.asyncify(JSON.parse),
	*     function (data, next) {
	*         // data is the result of parsing the text.
	*         // If there was a parsing error, it would have been caught.
	*     }
	* ], callback);
	*
	* // passing a function returning a promise
	* async.waterfall([
	*     async.apply(fs.readFile, filename, "utf8"),
	*     async.asyncify(function (contents) {
	*         return db.model.create(contents);
	*     }),
	*     function (model, next) {
	*         // `model` is the instantiated model object.
	*         // If there was an error, this function would be skipped.
	*     }
	* ], callback);
	*
	* // es2017 example, though `asyncify` is not needed if your JS environment
	* // supports async functions out of the box
	* var q = async.queue(async.asyncify(async function(file) {
	*     var intermediateStep = await processFile(file);
	*     return await somePromise(intermediateStep)
	* }));
	*
	* q.push(files);
	*/
	function asyncify(func) {
		if ((0, _wrapAsync$5.isAsync)(func)) return function(...args) {
			const callback = args.pop();
			const promise = func.apply(this, args);
			return handlePromise(promise, callback);
		};
		return (0, _initialParams2.default)(function(args, callback) {
			var result;
			try {
				result = func.apply(this, args);
			} catch (e) {
				return callback(e);
			}
			if (result && typeof result.then === "function") return handlePromise(result, callback);
			else callback(null, result);
		});
	}
	function handlePromise(promise, callback) {
		return promise.then((value) => {
			invokeCallback(callback, null, value);
		}, (err) => {
			invokeCallback(callback, err && (err instanceof Error || err.message) ? err : new Error(err));
		});
	}
	function invokeCallback(callback, error$1, value) {
		try {
			callback(error$1, value);
		} catch (err) {
			(0, _setImmediate2.default)((e) => {
				throw e;
			}, err);
		}
	}
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/.pnpm/async@3.2.6/node_modules/async/internal/wrapAsync.js
var require_wrapAsync = __commonJS({ "node_modules/.pnpm/async@3.2.6/node_modules/async/internal/wrapAsync.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.isAsyncIterable = exports.isAsyncGenerator = exports.isAsync = void 0;
	var _asyncify = require_asyncify();
	var _asyncify2 = _interopRequireDefault$9(_asyncify);
	function _interopRequireDefault$9(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}
	function isAsync(fn) {
		return fn[Symbol.toStringTag] === "AsyncFunction";
	}
	function isAsyncGenerator(fn) {
		return fn[Symbol.toStringTag] === "AsyncGenerator";
	}
	function isAsyncIterable(obj) {
		return typeof obj[Symbol.asyncIterator] === "function";
	}
	function wrapAsync$1(asyncFn) {
		if (typeof asyncFn !== "function") throw new Error("expected a function");
		return isAsync(asyncFn) ? (0, _asyncify2.default)(asyncFn) : asyncFn;
	}
	exports.default = wrapAsync$1;
	exports.isAsync = isAsync;
	exports.isAsyncGenerator = isAsyncGenerator;
	exports.isAsyncIterable = isAsyncIterable;
} });

//#endregion
//#region node_modules/.pnpm/async@3.2.6/node_modules/async/internal/awaitify.js
var require_awaitify = __commonJS({ "node_modules/.pnpm/async@3.2.6/node_modules/async/internal/awaitify.js"(exports, module) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = awaitify;
	function awaitify(asyncFn, arity) {
		if (!arity) arity = asyncFn.length;
		if (!arity) throw new Error("arity is undefined");
		function awaitable(...args) {
			if (typeof args[arity - 1] === "function") return asyncFn.apply(this, args);
			return new Promise((resolve, reject) => {
				args[arity - 1] = (err, ...cbArgs) => {
					if (err) return reject(err);
					resolve(cbArgs.length > 1 ? cbArgs : cbArgs[0]);
				};
				asyncFn.apply(this, args);
			});
		}
		return awaitable;
	}
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/.pnpm/async@3.2.6/node_modules/async/internal/parallel.js
var require_parallel$1 = __commonJS({ "node_modules/.pnpm/async@3.2.6/node_modules/async/internal/parallel.js"(exports, module) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var _isArrayLike$2 = require_isArrayLike();
	var _isArrayLike2$2 = _interopRequireDefault$8(_isArrayLike$2);
	var _wrapAsync$4 = require_wrapAsync();
	var _wrapAsync2$3 = _interopRequireDefault$8(_wrapAsync$4);
	var _awaitify$4 = require_awaitify();
	var _awaitify2$4 = _interopRequireDefault$8(_awaitify$4);
	function _interopRequireDefault$8(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}
	exports.default = (0, _awaitify2$4.default)((eachfn, tasks, callback) => {
		var results = (0, _isArrayLike2$2.default)(tasks) ? [] : {};
		eachfn(tasks, (task, key$1, taskCb) => {
			(0, _wrapAsync2$3.default)(task)((err, ...result) => {
				if (result.length < 2) [result] = result;
				results[key$1] = result;
				taskCb(err);
			});
		}, (err) => callback(err, results));
	}, 3);
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/.pnpm/async@3.2.6/node_modules/async/internal/once.js
var require_once = __commonJS({ "node_modules/.pnpm/async@3.2.6/node_modules/async/internal/once.js"(exports, module) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = once$5;
	function once$5(fn) {
		function wrapper(...args) {
			if (fn === null) return;
			var callFn = fn;
			fn = null;
			callFn.apply(this, args);
		}
		Object.assign(wrapper, fn);
		return wrapper;
	}
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/.pnpm/async@3.2.6/node_modules/async/internal/getIterator.js
var require_getIterator = __commonJS({ "node_modules/.pnpm/async@3.2.6/node_modules/async/internal/getIterator.js"(exports, module) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = function(coll) {
		return coll[Symbol.iterator] && coll[Symbol.iterator]();
	};
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/.pnpm/async@3.2.6/node_modules/async/internal/iterator.js
var require_iterator = __commonJS({ "node_modules/.pnpm/async@3.2.6/node_modules/async/internal/iterator.js"(exports, module) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = createIterator;
	var _isArrayLike$1 = require_isArrayLike();
	var _isArrayLike2$1 = _interopRequireDefault$7(_isArrayLike$1);
	var _getIterator = require_getIterator();
	var _getIterator2 = _interopRequireDefault$7(_getIterator);
	function _interopRequireDefault$7(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}
	function createArrayIterator(coll) {
		var i = -1;
		var len = coll.length;
		return function next() {
			return ++i < len ? {
				value: coll[i],
				key: i
			} : null;
		};
	}
	function createES2015Iterator(iterator$1) {
		var i = -1;
		return function next() {
			var item = iterator$1.next();
			if (item.done) return null;
			i++;
			return {
				value: item.value,
				key: i
			};
		};
	}
	function createObjectIterator(obj) {
		var okeys = obj ? Object.keys(obj) : [];
		var i = -1;
		var len = okeys.length;
		return function next() {
			var key$1 = okeys[++i];
			if (key$1 === "__proto__") return next();
			return i < len ? {
				value: obj[key$1],
				key: key$1
			} : null;
		};
	}
	function createIterator(coll) {
		if ((0, _isArrayLike2$1.default)(coll)) return createArrayIterator(coll);
		var iterator$1 = (0, _getIterator2.default)(coll);
		return iterator$1 ? createES2015Iterator(iterator$1) : createObjectIterator(coll);
	}
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/.pnpm/async@3.2.6/node_modules/async/internal/onlyOnce.js
var require_onlyOnce = __commonJS({ "node_modules/.pnpm/async@3.2.6/node_modules/async/internal/onlyOnce.js"(exports, module) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = onlyOnce;
	function onlyOnce(fn) {
		return function(...args) {
			if (fn === null) throw new Error("Callback was already called.");
			var callFn = fn;
			fn = null;
			callFn.apply(this, args);
		};
	}
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/.pnpm/async@3.2.6/node_modules/async/internal/breakLoop.js
var require_breakLoop = __commonJS({ "node_modules/.pnpm/async@3.2.6/node_modules/async/internal/breakLoop.js"(exports, module) {
	Object.defineProperty(exports, "__esModule", { value: true });
	const breakLoop = {};
	exports.default = breakLoop;
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/.pnpm/async@3.2.6/node_modules/async/internal/asyncEachOfLimit.js
var require_asyncEachOfLimit = __commonJS({ "node_modules/.pnpm/async@3.2.6/node_modules/async/internal/asyncEachOfLimit.js"(exports, module) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = asyncEachOfLimit;
	var _breakLoop$2 = require_breakLoop();
	var _breakLoop2$2 = _interopRequireDefault$6(_breakLoop$2);
	function _interopRequireDefault$6(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}
	function asyncEachOfLimit(generator, limit, iteratee, callback) {
		let done$1 = false;
		let canceled = false;
		let awaiting = false;
		let running = 0;
		let idx = 0;
		function replenish() {
			if (running >= limit || awaiting || done$1) return;
			awaiting = true;
			generator.next().then(({ value, done: iterDone }) => {
				if (canceled || done$1) return;
				awaiting = false;
				if (iterDone) {
					done$1 = true;
					if (running <= 0) callback(null);
					return;
				}
				running++;
				iteratee(value, idx, iterateeCallback);
				idx++;
				replenish();
			}).catch(handleError$1);
		}
		function iterateeCallback(err, result) {
			running -= 1;
			if (canceled) return;
			if (err) return handleError$1(err);
			if (err === false) {
				done$1 = true;
				canceled = true;
				return;
			}
			if (result === _breakLoop2$2.default || done$1 && running <= 0) {
				done$1 = true;
				return callback(null);
			}
			replenish();
		}
		function handleError$1(err) {
			if (canceled) return;
			awaiting = false;
			done$1 = true;
			callback(err);
		}
		replenish();
	}
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/.pnpm/async@3.2.6/node_modules/async/internal/eachOfLimit.js
var require_eachOfLimit$1 = __commonJS({ "node_modules/.pnpm/async@3.2.6/node_modules/async/internal/eachOfLimit.js"(exports, module) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var _once$1 = require_once();
	var _once2$1 = _interopRequireDefault$5(_once$1);
	var _iterator = require_iterator();
	var _iterator2 = _interopRequireDefault$5(_iterator);
	var _onlyOnce$1 = require_onlyOnce();
	var _onlyOnce2$1 = _interopRequireDefault$5(_onlyOnce$1);
	var _wrapAsync$3 = require_wrapAsync();
	var _asyncEachOfLimit = require_asyncEachOfLimit();
	var _asyncEachOfLimit2 = _interopRequireDefault$5(_asyncEachOfLimit);
	var _breakLoop$1 = require_breakLoop();
	var _breakLoop2$1 = _interopRequireDefault$5(_breakLoop$1);
	function _interopRequireDefault$5(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}
	exports.default = (limit) => {
		return (obj, iteratee, callback) => {
			callback = (0, _once2$1.default)(callback);
			if (limit <= 0) throw new RangeError("concurrency limit cannot be less than 1");
			if (!obj) return callback(null);
			if ((0, _wrapAsync$3.isAsyncGenerator)(obj)) return (0, _asyncEachOfLimit2.default)(obj, limit, iteratee, callback);
			if ((0, _wrapAsync$3.isAsyncIterable)(obj)) return (0, _asyncEachOfLimit2.default)(obj[Symbol.asyncIterator](), limit, iteratee, callback);
			var nextElem = (0, _iterator2.default)(obj);
			var done$1 = false;
			var canceled = false;
			var running = 0;
			var looping = false;
			function iterateeCallback(err, value) {
				if (canceled) return;
				running -= 1;
				if (err) {
					done$1 = true;
					callback(err);
				} else if (err === false) {
					done$1 = true;
					canceled = true;
				} else if (value === _breakLoop2$1.default || done$1 && running <= 0) {
					done$1 = true;
					return callback(null);
				} else if (!looping) replenish();
			}
			function replenish() {
				looping = true;
				while (running < limit && !done$1) {
					var elem = nextElem();
					if (elem === null) {
						done$1 = true;
						if (running <= 0) callback(null);
						return;
					}
					running += 1;
					iteratee(elem.value, elem.key, (0, _onlyOnce2$1.default)(iterateeCallback));
				}
				looping = false;
			}
			replenish();
		};
	};
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/.pnpm/async@3.2.6/node_modules/async/eachOfLimit.js
var require_eachOfLimit = __commonJS({ "node_modules/.pnpm/async@3.2.6/node_modules/async/eachOfLimit.js"(exports, module) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var _eachOfLimit2$2 = require_eachOfLimit$1();
	var _eachOfLimit3 = _interopRequireDefault$4(_eachOfLimit2$2);
	var _wrapAsync$2 = require_wrapAsync();
	var _wrapAsync2$2 = _interopRequireDefault$4(_wrapAsync$2);
	var _awaitify$3 = require_awaitify();
	var _awaitify2$3 = _interopRequireDefault$4(_awaitify$3);
	function _interopRequireDefault$4(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}
	/**
	* The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a
	* time.
	*
	* @name eachOfLimit
	* @static
	* @memberOf module:Collections
	* @method
	* @see [async.eachOf]{@link module:Collections.eachOf}
	* @alias forEachOfLimit
	* @category Collection
	* @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
	* @param {number} limit - The maximum number of async operations at a time.
	* @param {AsyncFunction} iteratee - An async function to apply to each
	* item in `coll`. The `key` is the item's key, or index in the case of an
	* array.
	* Invoked with (item, key, callback).
	* @param {Function} [callback] - A callback which is called when all
	* `iteratee` functions have finished, or an error occurs. Invoked with (err).
	* @returns {Promise} a promise, if a callback is omitted
	*/
	function eachOfLimit(coll, limit, iteratee, callback) {
		return (0, _eachOfLimit3.default)(limit)(coll, (0, _wrapAsync2$2.default)(iteratee), callback);
	}
	exports.default = (0, _awaitify2$3.default)(eachOfLimit, 4);
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/.pnpm/async@3.2.6/node_modules/async/eachOfSeries.js
var require_eachOfSeries = __commonJS({ "node_modules/.pnpm/async@3.2.6/node_modules/async/eachOfSeries.js"(exports, module) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var _eachOfLimit$1 = require_eachOfLimit();
	var _eachOfLimit2$1 = _interopRequireDefault$3(_eachOfLimit$1);
	var _awaitify$2 = require_awaitify();
	var _awaitify2$2 = _interopRequireDefault$3(_awaitify$2);
	function _interopRequireDefault$3(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}
	/**
	* The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.
	*
	* @name eachOfSeries
	* @static
	* @memberOf module:Collections
	* @method
	* @see [async.eachOf]{@link module:Collections.eachOf}
	* @alias forEachOfSeries
	* @category Collection
	* @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
	* @param {AsyncFunction} iteratee - An async function to apply to each item in
	* `coll`.
	* Invoked with (item, key, callback).
	* @param {Function} [callback] - A callback which is called when all `iteratee`
	* functions have finished, or an error occurs. Invoked with (err).
	* @returns {Promise} a promise, if a callback is omitted
	*/
	function eachOfSeries(coll, iteratee, callback) {
		return (0, _eachOfLimit2$1.default)(coll, 1, iteratee, callback);
	}
	exports.default = (0, _awaitify2$2.default)(eachOfSeries, 3);
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/.pnpm/async@3.2.6/node_modules/async/series.js
var require_series = __commonJS({ "node_modules/.pnpm/async@3.2.6/node_modules/async/series.js"(exports, module) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = series;
	var _parallel2 = require_parallel$1();
	var _parallel3 = _interopRequireDefault$2(_parallel2);
	var _eachOfSeries = require_eachOfSeries();
	var _eachOfSeries2 = _interopRequireDefault$2(_eachOfSeries);
	function _interopRequireDefault$2(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}
	/**
	* Run the functions in the `tasks` collection in series, each one running once
	* the previous function has completed. If any functions in the series pass an
	* error to its callback, no more functions are run, and `callback` is
	* immediately called with the value of the error. Otherwise, `callback`
	* receives an array of results when `tasks` have completed.
	*
	* It is also possible to use an object instead of an array. Each property will
	* be run as a function, and the results will be passed to the final `callback`
	* as an object instead of an array. This can be a more readable way of handling
	*  results from {@link async.series}.
	*
	* **Note** that while many implementations preserve the order of object
	* properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)
	* explicitly states that
	*
	* > The mechanics and order of enumerating the properties is not specified.
	*
	* So if you rely on the order in which your series of functions are executed,
	* and want this to work on all platforms, consider using an array.
	*
	* @name series
	* @static
	* @memberOf module:ControlFlow
	* @method
	* @category Control Flow
	* @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing
	* [async functions]{@link AsyncFunction} to run in series.
	* Each function can complete with any number of optional `result` values.
	* @param {Function} [callback] - An optional callback to run once all the
	* functions have completed. This function gets a results array (or object)
	* containing all the result arguments passed to the `task` callbacks. Invoked
	* with (err, result).
	* @return {Promise} a promise, if no callback is passed
	* @example
	*
	* //Using Callbacks
	* async.series([
	*     function(callback) {
	*         setTimeout(function() {
	*             // do some async task
	*             callback(null, 'one');
	*         }, 200);
	*     },
	*     function(callback) {
	*         setTimeout(function() {
	*             // then do another async task
	*             callback(null, 'two');
	*         }, 100);
	*     }
	* ], function(err, results) {
	*     console.log(results);
	*     // results is equal to ['one','two']
	* });
	*
	* // an example using objects instead of arrays
	* async.series({
	*     one: function(callback) {
	*         setTimeout(function() {
	*             // do some async task
	*             callback(null, 1);
	*         }, 200);
	*     },
	*     two: function(callback) {
	*         setTimeout(function() {
	*             // then do another async task
	*             callback(null, 2);
	*         }, 100);
	*     }
	* }, function(err, results) {
	*     console.log(results);
	*     // results is equal to: { one: 1, two: 2 }
	* });
	*
	* //Using Promises
	* async.series([
	*     function(callback) {
	*         setTimeout(function() {
	*             callback(null, 'one');
	*         }, 200);
	*     },
	*     function(callback) {
	*         setTimeout(function() {
	*             callback(null, 'two');
	*         }, 100);
	*     }
	* ]).then(results => {
	*     console.log(results);
	*     // results is equal to ['one','two']
	* }).catch(err => {
	*     console.log(err);
	* });
	*
	* // an example using an object instead of an array
	* async.series({
	*     one: function(callback) {
	*         setTimeout(function() {
	*             // do some async task
	*             callback(null, 1);
	*         }, 200);
	*     },
	*     two: function(callback) {
	*         setTimeout(function() {
	*             // then do another async task
	*             callback(null, 2);
	*         }, 100);
	*     }
	* }).then(results => {
	*     console.log(results);
	*     // results is equal to: { one: 1, two: 2 }
	* }).catch(err => {
	*     console.log(err);
	* });
	*
	* //Using async/await
	* async () => {
	*     try {
	*         let results = await async.series([
	*             function(callback) {
	*                 setTimeout(function() {
	*                     // do some async task
	*                     callback(null, 'one');
	*                 }, 200);
	*             },
	*             function(callback) {
	*                 setTimeout(function() {
	*                     // then do another async task
	*                     callback(null, 'two');
	*                 }, 100);
	*             }
	*         ]);
	*         console.log(results);
	*         // results is equal to ['one','two']
	*     }
	*     catch (err) {
	*         console.log(err);
	*     }
	* }
	*
	* // an example using an object instead of an array
	* async () => {
	*     try {
	*         let results = await async.parallel({
	*             one: function(callback) {
	*                 setTimeout(function() {
	*                     // do some async task
	*                     callback(null, 1);
	*                 }, 200);
	*             },
	*            two: function(callback) {
	*                 setTimeout(function() {
	*                     // then do another async task
	*                     callback(null, 2);
	*                 }, 100);
	*            }
	*         });
	*         console.log(results);
	*         // results is equal to: { one: 1, two: 2 }
	*     }
	*     catch (err) {
	*         console.log(err);
	*     }
	* }
	*
	*/
	function series(tasks, callback) {
		return (0, _parallel3.default)(_eachOfSeries2.default, tasks, callback);
	}
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_transform.js
var require__stream_transform = __commonJS({ "node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_transform.js"(exports, module) {
	module.exports = Transform$2;
	var _require$codes$1 = require_errors().codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes$1.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes$1.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes$1.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes$1.ERR_TRANSFORM_WITH_LENGTH_0;
	var Duplex = require__stream_duplex();
	require_inherits()(Transform$2, Duplex);
	function afterTransform(er, data) {
		var ts = this._transformState;
		ts.transforming = false;
		var cb = ts.writecb;
		if (cb === null) return this.emit("error", new ERR_MULTIPLE_CALLBACK());
		ts.writechunk = null;
		ts.writecb = null;
		if (data != null) this.push(data);
		cb(er);
		var rs = this._readableState;
		rs.reading = false;
		if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	}
	function Transform$2(options) {
		if (!(this instanceof Transform$2)) return new Transform$2(options);
		Duplex.call(this, options);
		this._transformState = {
			afterTransform: afterTransform.bind(this),
			needTransform: false,
			transforming: false,
			writecb: null,
			writechunk: null,
			writeencoding: null
		};
		this._readableState.needReadable = true;
		this._readableState.sync = false;
		if (options) {
			if (typeof options.transform === "function") this._transform = options.transform;
			if (typeof options.flush === "function") this._flush = options.flush;
		}
		this.on("prefinish", prefinish);
	}
	function prefinish() {
		var _this = this;
		if (typeof this._flush === "function" && !this._readableState.destroyed) this._flush(function(er, data) {
			done(_this, er, data);
		});
		else done(this, null, null);
	}
	Transform$2.prototype.push = function(chunk, encoding) {
		this._transformState.needTransform = false;
		return Duplex.prototype.push.call(this, chunk, encoding);
	};
	Transform$2.prototype._transform = function(chunk, encoding, cb) {
		cb(new ERR_METHOD_NOT_IMPLEMENTED("_transform()"));
	};
	Transform$2.prototype._write = function(chunk, encoding, cb) {
		var ts = this._transformState;
		ts.writecb = cb;
		ts.writechunk = chunk;
		ts.writeencoding = encoding;
		if (!ts.transforming) {
			var rs = this._readableState;
			if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
		}
	};
	Transform$2.prototype._read = function(n) {
		var ts = this._transformState;
		if (ts.writechunk !== null && !ts.transforming) {
			ts.transforming = true;
			this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
		} else ts.needTransform = true;
	};
	Transform$2.prototype._destroy = function(err, cb) {
		Duplex.prototype._destroy.call(this, err, function(err2) {
			cb(err2);
		});
	};
	function done(stream$3, er, data) {
		if (er) return stream$3.emit("error", er);
		if (data != null) stream$3.push(data);
		if (stream$3._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
		if (stream$3._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
		return stream$3.push(null);
	}
} });

//#endregion
//#region node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_passthrough.js
var require__stream_passthrough = __commonJS({ "node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/_stream_passthrough.js"(exports, module) {
	module.exports = PassThrough$1;
	var Transform$1 = require__stream_transform();
	require_inherits()(PassThrough$1, Transform$1);
	function PassThrough$1(options) {
		if (!(this instanceof PassThrough$1)) return new PassThrough$1(options);
		Transform$1.call(this, options);
	}
	PassThrough$1.prototype._transform = function(chunk, encoding, cb) {
		cb(null, chunk);
	};
} });

//#endregion
//#region node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/pipeline.js
var require_pipeline = __commonJS({ "node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/lib/internal/streams/pipeline.js"(exports, module) {
	var eos;
	function once$4(callback) {
		var called = false;
		return function() {
			if (called) return;
			called = true;
			callback.apply(void 0, arguments);
		};
	}
	var _require$codes = require_errors().codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
	function noop$4(err) {
		if (err) throw err;
	}
	function isRequest$1(stream$3) {
		return stream$3.setHeader && typeof stream$3.abort === "function";
	}
	function destroyer(stream$3, reading, writing, callback) {
		callback = once$4(callback);
		var closed = false;
		stream$3.on("close", function() {
			closed = true;
		});
		if (eos === void 0) eos = require_end_of_stream();
		eos(stream$3, {
			readable: reading,
			writable: writing
		}, function(err) {
			if (err) return callback(err);
			closed = true;
			callback();
		});
		var destroyed = false;
		return function(err) {
			if (closed) return;
			if (destroyed) return;
			destroyed = true;
			if (isRequest$1(stream$3)) return stream$3.abort();
			if (typeof stream$3.destroy === "function") return stream$3.destroy();
			callback(err || new ERR_STREAM_DESTROYED("pipe"));
		};
	}
	function call$1(fn) {
		fn();
	}
	function pipe(from$2, to) {
		return from$2.pipe(to);
	}
	function popCallback(streams) {
		if (!streams.length) return noop$4;
		if (typeof streams[streams.length - 1] !== "function") return noop$4;
		return streams.pop();
	}
	function pipeline() {
		for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) streams[_key] = arguments[_key];
		var callback = popCallback(streams);
		if (Array.isArray(streams[0])) streams = streams[0];
		if (streams.length < 2) throw new ERR_MISSING_ARGS("streams");
		var error$1;
		var destroys = streams.map(function(stream$3, i) {
			var reading = i < streams.length - 1;
			var writing = i > 0;
			return destroyer(stream$3, reading, writing, function(err) {
				if (!error$1) error$1 = err;
				if (err) destroys.forEach(call$1);
				if (reading) return;
				destroys.forEach(call$1);
				callback(error$1);
			});
		});
		return streams.reduce(pipe);
	}
	module.exports = pipeline;
} });

//#endregion
//#region node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/readable.js
var require_readable = __commonJS({ "node_modules/.pnpm/readable-stream@3.6.2/node_modules/readable-stream/readable.js"(exports, module) {
	var Stream$11 = __require("stream");
	if (process.env.READABLE_STREAM === "disable" && Stream$11) {
		module.exports = Stream$11.Readable;
		Object.assign(module.exports, Stream$11);
		module.exports.Stream = Stream$11;
	} else {
		exports = module.exports = require__stream_readable();
		exports.Stream = Stream$11 || exports;
		exports.Readable = exports;
		exports.Writable = require__stream_writable();
		exports.Duplex = require__stream_duplex();
		exports.Transform = require__stream_transform();
		exports.PassThrough = require__stream_passthrough();
		exports.finished = require_end_of_stream();
		exports.pipeline = require_pipeline();
	}
} });

//#endregion
//#region node_modules/.pnpm/@dabh+diagnostics@2.0.3/node_modules/@dabh/diagnostics/diagnostics.js
var require_diagnostics = __commonJS({ "node_modules/.pnpm/@dabh+diagnostics@2.0.3/node_modules/@dabh/diagnostics/diagnostics.js"(exports, module) {
	/**
	* Contains all configured adapters for the given environment.
	*
	* @type {Array}
	* @public
	*/
	var adapters$1 = [];
	/**
	* Contains all modifier functions.
	*
	* @typs {Array}
	* @public
	*/
	var modifiers = [];
	/**
	* Our default logger.
	*
	* @public
	*/
	var logger$28 = function devnull() {};
	/**
	* Register a new adapter that will used to find environments.
	*
	* @param {Function} adapter A function that will return the possible env.
	* @returns {Boolean} Indication of a successful add.
	* @public
	*/
	function use(adapter$1) {
		if (~adapters$1.indexOf(adapter$1)) return false;
		adapters$1.push(adapter$1);
		return true;
	}
	/**
	* Assign a new log method.
	*
	* @param {Function} custom The log method.
	* @public
	*/
	function set(custom$1) {
		logger$28 = custom$1;
	}
	/**
	* Check if the namespace is allowed by any of our adapters.
	*
	* @param {String} namespace The namespace that needs to be enabled
	* @returns {Boolean|Promise} Indication if the namespace is enabled by our adapters.
	* @public
	*/
	function enabled$1(namespace) {
		var async$3 = [];
		for (var i = 0; i < adapters$1.length; i++) {
			if (adapters$1[i].async) {
				async$3.push(adapters$1[i]);
				continue;
			}
			if (adapters$1[i](namespace)) return true;
		}
		if (!async$3.length) return false;
		return new Promise(function pinky(resolve) {
			Promise.all(async$3.map(function prebind(fn) {
				return fn(namespace);
			})).then(function resolved(values$1) {
				resolve(values$1.some(Boolean));
			});
		});
	}
	/**
	* Add a new message modifier to the debugger.
	*
	* @param {Function} fn Modification function.
	* @returns {Boolean} Indication of a successful add.
	* @public
	*/
	function modify(fn) {
		if (~modifiers.indexOf(fn)) return false;
		modifiers.push(fn);
		return true;
	}
	/**
	* Write data to the supplied logger.
	*
	* @param {Object} meta Meta information about the log.
	* @param {Array} args Arguments for console.log.
	* @public
	*/
	function write() {
		logger$28.apply(logger$28, arguments);
	}
	/**
	* Process the message with the modifiers.
	*
	* @param {Mixed} message The message to be transformed by modifers.
	* @returns {String} Transformed message.
	* @public
	*/
	function process$2(message) {
		for (var i = 0; i < modifiers.length; i++) message = modifiers[i].apply(modifiers[i], arguments);
		return message;
	}
	/**
	* Introduce options to the logger function.
	*
	* @param {Function} fn Calback function.
	* @param {Object} options Properties to introduce on fn.
	* @returns {Function} The passed function
	* @public
	*/
	function introduce(fn, options) {
		var has = Object.prototype.hasOwnProperty;
		for (var key$1 in options) if (has.call(options, key$1)) fn[key$1] = options[key$1];
		return fn;
	}
	/**
	* Nope, we're not allowed to write messages.
	*
	* @returns {Boolean} false
	* @public
	*/
	function nope(options) {
		options.enabled = false;
		options.modify = modify;
		options.set = set;
		options.use = use;
		return introduce(function diagnopes() {
			return false;
		}, options);
	}
	/**
	* Yep, we're allowed to write debug messages.
	*
	* @param {Object} options The options for the process.
	* @returns {Function} The function that does the logging.
	* @public
	*/
	function yep(options) {
		/**
		* The function that receives the actual debug information.
		*
		* @returns {Boolean} indication that we're logging.
		* @public
		*/
		function diagnostics$2() {
			var args = Array.prototype.slice.call(arguments, 0);
			write.call(write, options, process$2(args, options));
			return true;
		}
		options.enabled = true;
		options.modify = modify;
		options.set = set;
		options.use = use;
		return introduce(diagnostics$2, options);
	}
	/**
	* Simple helper function to introduce various of helper methods to our given
	* diagnostics function.
	*
	* @param {Function} diagnostics The diagnostics function.
	* @returns {Function} diagnostics
	* @public
	*/
	module.exports = function create$2(diagnostics$2) {
		diagnostics$2.introduce = introduce;
		diagnostics$2.enabled = enabled$1;
		diagnostics$2.process = process$2;
		diagnostics$2.modify = modify;
		diagnostics$2.write = write;
		diagnostics$2.nope = nope;
		diagnostics$2.yep = yep;
		diagnostics$2.set = set;
		diagnostics$2.use = use;
		return diagnostics$2;
	};
} });

//#endregion
//#region node_modules/.pnpm/@dabh+diagnostics@2.0.3/node_modules/@dabh/diagnostics/node/production.js
var require_production = __commonJS({ "node_modules/.pnpm/@dabh+diagnostics@2.0.3/node_modules/@dabh/diagnostics/node/production.js"(exports, module) {
	var create$1 = require_diagnostics();
	/**
	* Create a new diagnostics logger.
	*
	* @param {String} namespace The namespace it should enable.
	* @param {Object} options Additional options.
	* @returns {Function} The logger.
	* @public
	*/
	var diagnostics$1 = create$1(function prod(namespace, options) {
		options = options || {};
		options.namespace = namespace;
		options.prod = true;
		options.dev = false;
		if (!(options.force || prod.force)) return prod.nope(options);
		return prod.yep(options);
	});
	module.exports = diagnostics$1;
} });

//#endregion
//#region node_modules/.pnpm/color-name@1.1.4/node_modules/color-name/index.js
var require_color_name$1 = __commonJS({ "node_modules/.pnpm/color-name@1.1.4/node_modules/color-name/index.js"(exports, module) {
	module.exports = {
		"aliceblue": [
			240,
			248,
			255
		],
		"antiquewhite": [
			250,
			235,
			215
		],
		"aqua": [
			0,
			255,
			255
		],
		"aquamarine": [
			127,
			255,
			212
		],
		"azure": [
			240,
			255,
			255
		],
		"beige": [
			245,
			245,
			220
		],
		"bisque": [
			255,
			228,
			196
		],
		"black": [
			0,
			0,
			0
		],
		"blanchedalmond": [
			255,
			235,
			205
		],
		"blue": [
			0,
			0,
			255
		],
		"blueviolet": [
			138,
			43,
			226
		],
		"brown": [
			165,
			42,
			42
		],
		"burlywood": [
			222,
			184,
			135
		],
		"cadetblue": [
			95,
			158,
			160
		],
		"chartreuse": [
			127,
			255,
			0
		],
		"chocolate": [
			210,
			105,
			30
		],
		"coral": [
			255,
			127,
			80
		],
		"cornflowerblue": [
			100,
			149,
			237
		],
		"cornsilk": [
			255,
			248,
			220
		],
		"crimson": [
			220,
			20,
			60
		],
		"cyan": [
			0,
			255,
			255
		],
		"darkblue": [
			0,
			0,
			139
		],
		"darkcyan": [
			0,
			139,
			139
		],
		"darkgoldenrod": [
			184,
			134,
			11
		],
		"darkgray": [
			169,
			169,
			169
		],
		"darkgreen": [
			0,
			100,
			0
		],
		"darkgrey": [
			169,
			169,
			169
		],
		"darkkhaki": [
			189,
			183,
			107
		],
		"darkmagenta": [
			139,
			0,
			139
		],
		"darkolivegreen": [
			85,
			107,
			47
		],
		"darkorange": [
			255,
			140,
			0
		],
		"darkorchid": [
			153,
			50,
			204
		],
		"darkred": [
			139,
			0,
			0
		],
		"darksalmon": [
			233,
			150,
			122
		],
		"darkseagreen": [
			143,
			188,
			143
		],
		"darkslateblue": [
			72,
			61,
			139
		],
		"darkslategray": [
			47,
			79,
			79
		],
		"darkslategrey": [
			47,
			79,
			79
		],
		"darkturquoise": [
			0,
			206,
			209
		],
		"darkviolet": [
			148,
			0,
			211
		],
		"deeppink": [
			255,
			20,
			147
		],
		"deepskyblue": [
			0,
			191,
			255
		],
		"dimgray": [
			105,
			105,
			105
		],
		"dimgrey": [
			105,
			105,
			105
		],
		"dodgerblue": [
			30,
			144,
			255
		],
		"firebrick": [
			178,
			34,
			34
		],
		"floralwhite": [
			255,
			250,
			240
		],
		"forestgreen": [
			34,
			139,
			34
		],
		"fuchsia": [
			255,
			0,
			255
		],
		"gainsboro": [
			220,
			220,
			220
		],
		"ghostwhite": [
			248,
			248,
			255
		],
		"gold": [
			255,
			215,
			0
		],
		"goldenrod": [
			218,
			165,
			32
		],
		"gray": [
			128,
			128,
			128
		],
		"green": [
			0,
			128,
			0
		],
		"greenyellow": [
			173,
			255,
			47
		],
		"grey": [
			128,
			128,
			128
		],
		"honeydew": [
			240,
			255,
			240
		],
		"hotpink": [
			255,
			105,
			180
		],
		"indianred": [
			205,
			92,
			92
		],
		"indigo": [
			75,
			0,
			130
		],
		"ivory": [
			255,
			255,
			240
		],
		"khaki": [
			240,
			230,
			140
		],
		"lavender": [
			230,
			230,
			250
		],
		"lavenderblush": [
			255,
			240,
			245
		],
		"lawngreen": [
			124,
			252,
			0
		],
		"lemonchiffon": [
			255,
			250,
			205
		],
		"lightblue": [
			173,
			216,
			230
		],
		"lightcoral": [
			240,
			128,
			128
		],
		"lightcyan": [
			224,
			255,
			255
		],
		"lightgoldenrodyellow": [
			250,
			250,
			210
		],
		"lightgray": [
			211,
			211,
			211
		],
		"lightgreen": [
			144,
			238,
			144
		],
		"lightgrey": [
			211,
			211,
			211
		],
		"lightpink": [
			255,
			182,
			193
		],
		"lightsalmon": [
			255,
			160,
			122
		],
		"lightseagreen": [
			32,
			178,
			170
		],
		"lightskyblue": [
			135,
			206,
			250
		],
		"lightslategray": [
			119,
			136,
			153
		],
		"lightslategrey": [
			119,
			136,
			153
		],
		"lightsteelblue": [
			176,
			196,
			222
		],
		"lightyellow": [
			255,
			255,
			224
		],
		"lime": [
			0,
			255,
			0
		],
		"limegreen": [
			50,
			205,
			50
		],
		"linen": [
			250,
			240,
			230
		],
		"magenta": [
			255,
			0,
			255
		],
		"maroon": [
			128,
			0,
			0
		],
		"mediumaquamarine": [
			102,
			205,
			170
		],
		"mediumblue": [
			0,
			0,
			205
		],
		"mediumorchid": [
			186,
			85,
			211
		],
		"mediumpurple": [
			147,
			112,
			219
		],
		"mediumseagreen": [
			60,
			179,
			113
		],
		"mediumslateblue": [
			123,
			104,
			238
		],
		"mediumspringgreen": [
			0,
			250,
			154
		],
		"mediumturquoise": [
			72,
			209,
			204
		],
		"mediumvioletred": [
			199,
			21,
			133
		],
		"midnightblue": [
			25,
			25,
			112
		],
		"mintcream": [
			245,
			255,
			250
		],
		"mistyrose": [
			255,
			228,
			225
		],
		"moccasin": [
			255,
			228,
			181
		],
		"navajowhite": [
			255,
			222,
			173
		],
		"navy": [
			0,
			0,
			128
		],
		"oldlace": [
			253,
			245,
			230
		],
		"olive": [
			128,
			128,
			0
		],
		"olivedrab": [
			107,
			142,
			35
		],
		"orange": [
			255,
			165,
			0
		],
		"orangered": [
			255,
			69,
			0
		],
		"orchid": [
			218,
			112,
			214
		],
		"palegoldenrod": [
			238,
			232,
			170
		],
		"palegreen": [
			152,
			251,
			152
		],
		"paleturquoise": [
			175,
			238,
			238
		],
		"palevioletred": [
			219,
			112,
			147
		],
		"papayawhip": [
			255,
			239,
			213
		],
		"peachpuff": [
			255,
			218,
			185
		],
		"peru": [
			205,
			133,
			63
		],
		"pink": [
			255,
			192,
			203
		],
		"plum": [
			221,
			160,
			221
		],
		"powderblue": [
			176,
			224,
			230
		],
		"purple": [
			128,
			0,
			128
		],
		"rebeccapurple": [
			102,
			51,
			153
		],
		"red": [
			255,
			0,
			0
		],
		"rosybrown": [
			188,
			143,
			143
		],
		"royalblue": [
			65,
			105,
			225
		],
		"saddlebrown": [
			139,
			69,
			19
		],
		"salmon": [
			250,
			128,
			114
		],
		"sandybrown": [
			244,
			164,
			96
		],
		"seagreen": [
			46,
			139,
			87
		],
		"seashell": [
			255,
			245,
			238
		],
		"sienna": [
			160,
			82,
			45
		],
		"silver": [
			192,
			192,
			192
		],
		"skyblue": [
			135,
			206,
			235
		],
		"slateblue": [
			106,
			90,
			205
		],
		"slategray": [
			112,
			128,
			144
		],
		"slategrey": [
			112,
			128,
			144
		],
		"snow": [
			255,
			250,
			250
		],
		"springgreen": [
			0,
			255,
			127
		],
		"steelblue": [
			70,
			130,
			180
		],
		"tan": [
			210,
			180,
			140
		],
		"teal": [
			0,
			128,
			128
		],
		"thistle": [
			216,
			191,
			216
		],
		"tomato": [
			255,
			99,
			71
		],
		"turquoise": [
			64,
			224,
			208
		],
		"violet": [
			238,
			130,
			238
		],
		"wheat": [
			245,
			222,
			179
		],
		"white": [
			255,
			255,
			255
		],
		"whitesmoke": [
			245,
			245,
			245
		],
		"yellow": [
			255,
			255,
			0
		],
		"yellowgreen": [
			154,
			205,
			50
		]
	};
} });

//#endregion
//#region node_modules/.pnpm/is-arrayish@0.3.2/node_modules/is-arrayish/index.js
var require_is_arrayish = __commonJS({ "node_modules/.pnpm/is-arrayish@0.3.2/node_modules/is-arrayish/index.js"(exports, module) {
	module.exports = function isArrayish$1(obj) {
		if (!obj || typeof obj === "string") return false;
		return obj instanceof Array || Array.isArray(obj) || obj.length >= 0 && (obj.splice instanceof Function || Object.getOwnPropertyDescriptor(obj, obj.length - 1) && obj.constructor.name !== "String");
	};
} });

//#endregion
//#region node_modules/.pnpm/simple-swizzle@0.2.2/node_modules/simple-swizzle/index.js
var require_simple_swizzle = __commonJS({ "node_modules/.pnpm/simple-swizzle@0.2.2/node_modules/simple-swizzle/index.js"(exports, module) {
	var isArrayish = require_is_arrayish();
	var concat = Array.prototype.concat;
	var slice = Array.prototype.slice;
	var swizzle$1 = module.exports = function swizzle$2(args) {
		var results = [];
		for (var i = 0, len = args.length; i < len; i++) {
			var arg = args[i];
			if (isArrayish(arg)) results = concat.call(results, slice.call(arg));
			else results.push(arg);
		}
		return results;
	};
	swizzle$1.wrap = function(fn) {
		return function() {
			return fn(swizzle$1(arguments));
		};
	};
} });

//#endregion
//#region node_modules/.pnpm/color-string@1.9.1/node_modules/color-string/index.js
var require_color_string = __commonJS({ "node_modules/.pnpm/color-string@1.9.1/node_modules/color-string/index.js"(exports, module) {
	var colorNames = require_color_name$1();
	var swizzle = require_simple_swizzle();
	var hasOwnProperty$3 = Object.hasOwnProperty;
	var reverseNames = Object.create(null);
	for (var name$1 in colorNames) if (hasOwnProperty$3.call(colorNames, name$1)) reverseNames[colorNames[name$1]] = name$1;
	var cs = module.exports = {
		to: {},
		get: {}
	};
	cs.get = function(string) {
		var prefix = string.substring(0, 3).toLowerCase();
		var val;
		var model$1;
		switch (prefix) {
			case "hsl":
				val = cs.get.hsl(string);
				model$1 = "hsl";
				break;
			case "hwb":
				val = cs.get.hwb(string);
				model$1 = "hwb";
				break;
			default:
				val = cs.get.rgb(string);
				model$1 = "rgb";
				break;
		}
		if (!val) return null;
		return {
			model: model$1,
			value: val
		};
	};
	cs.get.rgb = function(string) {
		if (!string) return null;
		var abbr = /^#([a-f0-9]{3,4})$/i;
		var hex$1 = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;
		var rgba = /^rgba?\(\s*([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)(?=[\s,])\s*(?:,\s*)?([+-]?\d+)\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
		var per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*,?\s*([+-]?[\d\.]+)\%\s*(?:[,|\/]\s*([+-]?[\d\.]+)(%?)\s*)?\)$/;
		var keyword = /^(\w+)$/;
		var rgb = [
			0,
			0,
			0,
			1
		];
		var match;
		var i;
		var hexAlpha;
		if (match = string.match(hex$1)) {
			hexAlpha = match[2];
			match = match[1];
			for (i = 0; i < 3; i++) {
				var i2 = i * 2;
				rgb[i] = parseInt(match.slice(i2, i2 + 2), 16);
			}
			if (hexAlpha) rgb[3] = parseInt(hexAlpha, 16) / 255;
		} else if (match = string.match(abbr)) {
			match = match[1];
			hexAlpha = match[3];
			for (i = 0; i < 3; i++) rgb[i] = parseInt(match[i] + match[i], 16);
			if (hexAlpha) rgb[3] = parseInt(hexAlpha + hexAlpha, 16) / 255;
		} else if (match = string.match(rgba)) {
			for (i = 0; i < 3; i++) rgb[i] = parseInt(match[i + 1], 0);
			if (match[4]) if (match[5]) rgb[3] = parseFloat(match[4]) * .01;
			else rgb[3] = parseFloat(match[4]);
		} else if (match = string.match(per)) {
			for (i = 0; i < 3; i++) rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
			if (match[4]) if (match[5]) rgb[3] = parseFloat(match[4]) * .01;
			else rgb[3] = parseFloat(match[4]);
		} else if (match = string.match(keyword)) {
			if (match[1] === "transparent") return [
				0,
				0,
				0,
				0
			];
			if (!hasOwnProperty$3.call(colorNames, match[1])) return null;
			rgb = colorNames[match[1]];
			rgb[3] = 1;
			return rgb;
		} else return null;
		for (i = 0; i < 3; i++) rgb[i] = clamp(rgb[i], 0, 255);
		rgb[3] = clamp(rgb[3], 0, 1);
		return rgb;
	};
	cs.get.hsl = function(string) {
		if (!string) return null;
		var hsl = /^hsla?\(\s*([+-]?(?:\d{0,3}\.)?\d+)(?:deg)?\s*,?\s*([+-]?[\d\.]+)%\s*,?\s*([+-]?[\d\.]+)%\s*(?:[,|\/]\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
		var match = string.match(hsl);
		if (match) {
			var alpha = parseFloat(match[4]);
			var h$1 = (parseFloat(match[1]) % 360 + 360) % 360;
			var s$1 = clamp(parseFloat(match[2]), 0, 100);
			var l = clamp(parseFloat(match[3]), 0, 100);
			var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
			return [
				h$1,
				s$1,
				l,
				a
			];
		}
		return null;
	};
	cs.get.hwb = function(string) {
		if (!string) return null;
		var hwb = /^hwb\(\s*([+-]?\d{0,3}(?:\.\d+)?)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?(?=\.\d|\d)(?:0|[1-9]\d*)?(?:\.\d*)?(?:[eE][+-]?\d+)?)\s*)?\)$/;
		var match = string.match(hwb);
		if (match) {
			var alpha = parseFloat(match[4]);
			var h$1 = (parseFloat(match[1]) % 360 + 360) % 360;
			var w$1 = clamp(parseFloat(match[2]), 0, 100);
			var b = clamp(parseFloat(match[3]), 0, 100);
			var a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);
			return [
				h$1,
				w$1,
				b,
				a
			];
		}
		return null;
	};
	cs.to.hex = function() {
		var rgba = swizzle(arguments);
		return "#" + hexDouble(rgba[0]) + hexDouble(rgba[1]) + hexDouble(rgba[2]) + (rgba[3] < 1 ? hexDouble(Math.round(rgba[3] * 255)) : "");
	};
	cs.to.rgb = function() {
		var rgba = swizzle(arguments);
		return rgba.length < 4 || rgba[3] === 1 ? "rgb(" + Math.round(rgba[0]) + ", " + Math.round(rgba[1]) + ", " + Math.round(rgba[2]) + ")" : "rgba(" + Math.round(rgba[0]) + ", " + Math.round(rgba[1]) + ", " + Math.round(rgba[2]) + ", " + rgba[3] + ")";
	};
	cs.to.rgb.percent = function() {
		var rgba = swizzle(arguments);
		var r = Math.round(rgba[0] / 255 * 100);
		var g = Math.round(rgba[1] / 255 * 100);
		var b = Math.round(rgba[2] / 255 * 100);
		return rgba.length < 4 || rgba[3] === 1 ? "rgb(" + r + "%, " + g + "%, " + b + "%)" : "rgba(" + r + "%, " + g + "%, " + b + "%, " + rgba[3] + ")";
	};
	cs.to.hsl = function() {
		var hsla = swizzle(arguments);
		return hsla.length < 4 || hsla[3] === 1 ? "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)" : "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, " + hsla[3] + ")";
	};
	cs.to.hwb = function() {
		var hwba = swizzle(arguments);
		var a = "";
		if (hwba.length >= 4 && hwba[3] !== 1) a = ", " + hwba[3];
		return "hwb(" + hwba[0] + ", " + hwba[1] + "%, " + hwba[2] + "%" + a + ")";
	};
	cs.to.keyword = function(rgb) {
		return reverseNames[rgb.slice(0, 3)];
	};
	function clamp(num, min$1, max$2) {
		return Math.min(Math.max(min$1, num), max$2);
	}
	function hexDouble(num) {
		var str = Math.round(num).toString(16).toUpperCase();
		return str.length < 2 ? "0" + str : str;
	}
} });

//#endregion
//#region node_modules/.pnpm/color-name@1.1.3/node_modules/color-name/index.js
var require_color_name = __commonJS({ "node_modules/.pnpm/color-name@1.1.3/node_modules/color-name/index.js"(exports, module) {
	module.exports = {
		"aliceblue": [
			240,
			248,
			255
		],
		"antiquewhite": [
			250,
			235,
			215
		],
		"aqua": [
			0,
			255,
			255
		],
		"aquamarine": [
			127,
			255,
			212
		],
		"azure": [
			240,
			255,
			255
		],
		"beige": [
			245,
			245,
			220
		],
		"bisque": [
			255,
			228,
			196
		],
		"black": [
			0,
			0,
			0
		],
		"blanchedalmond": [
			255,
			235,
			205
		],
		"blue": [
			0,
			0,
			255
		],
		"blueviolet": [
			138,
			43,
			226
		],
		"brown": [
			165,
			42,
			42
		],
		"burlywood": [
			222,
			184,
			135
		],
		"cadetblue": [
			95,
			158,
			160
		],
		"chartreuse": [
			127,
			255,
			0
		],
		"chocolate": [
			210,
			105,
			30
		],
		"coral": [
			255,
			127,
			80
		],
		"cornflowerblue": [
			100,
			149,
			237
		],
		"cornsilk": [
			255,
			248,
			220
		],
		"crimson": [
			220,
			20,
			60
		],
		"cyan": [
			0,
			255,
			255
		],
		"darkblue": [
			0,
			0,
			139
		],
		"darkcyan": [
			0,
			139,
			139
		],
		"darkgoldenrod": [
			184,
			134,
			11
		],
		"darkgray": [
			169,
			169,
			169
		],
		"darkgreen": [
			0,
			100,
			0
		],
		"darkgrey": [
			169,
			169,
			169
		],
		"darkkhaki": [
			189,
			183,
			107
		],
		"darkmagenta": [
			139,
			0,
			139
		],
		"darkolivegreen": [
			85,
			107,
			47
		],
		"darkorange": [
			255,
			140,
			0
		],
		"darkorchid": [
			153,
			50,
			204
		],
		"darkred": [
			139,
			0,
			0
		],
		"darksalmon": [
			233,
			150,
			122
		],
		"darkseagreen": [
			143,
			188,
			143
		],
		"darkslateblue": [
			72,
			61,
			139
		],
		"darkslategray": [
			47,
			79,
			79
		],
		"darkslategrey": [
			47,
			79,
			79
		],
		"darkturquoise": [
			0,
			206,
			209
		],
		"darkviolet": [
			148,
			0,
			211
		],
		"deeppink": [
			255,
			20,
			147
		],
		"deepskyblue": [
			0,
			191,
			255
		],
		"dimgray": [
			105,
			105,
			105
		],
		"dimgrey": [
			105,
			105,
			105
		],
		"dodgerblue": [
			30,
			144,
			255
		],
		"firebrick": [
			178,
			34,
			34
		],
		"floralwhite": [
			255,
			250,
			240
		],
		"forestgreen": [
			34,
			139,
			34
		],
		"fuchsia": [
			255,
			0,
			255
		],
		"gainsboro": [
			220,
			220,
			220
		],
		"ghostwhite": [
			248,
			248,
			255
		],
		"gold": [
			255,
			215,
			0
		],
		"goldenrod": [
			218,
			165,
			32
		],
		"gray": [
			128,
			128,
			128
		],
		"green": [
			0,
			128,
			0
		],
		"greenyellow": [
			173,
			255,
			47
		],
		"grey": [
			128,
			128,
			128
		],
		"honeydew": [
			240,
			255,
			240
		],
		"hotpink": [
			255,
			105,
			180
		],
		"indianred": [
			205,
			92,
			92
		],
		"indigo": [
			75,
			0,
			130
		],
		"ivory": [
			255,
			255,
			240
		],
		"khaki": [
			240,
			230,
			140
		],
		"lavender": [
			230,
			230,
			250
		],
		"lavenderblush": [
			255,
			240,
			245
		],
		"lawngreen": [
			124,
			252,
			0
		],
		"lemonchiffon": [
			255,
			250,
			205
		],
		"lightblue": [
			173,
			216,
			230
		],
		"lightcoral": [
			240,
			128,
			128
		],
		"lightcyan": [
			224,
			255,
			255
		],
		"lightgoldenrodyellow": [
			250,
			250,
			210
		],
		"lightgray": [
			211,
			211,
			211
		],
		"lightgreen": [
			144,
			238,
			144
		],
		"lightgrey": [
			211,
			211,
			211
		],
		"lightpink": [
			255,
			182,
			193
		],
		"lightsalmon": [
			255,
			160,
			122
		],
		"lightseagreen": [
			32,
			178,
			170
		],
		"lightskyblue": [
			135,
			206,
			250
		],
		"lightslategray": [
			119,
			136,
			153
		],
		"lightslategrey": [
			119,
			136,
			153
		],
		"lightsteelblue": [
			176,
			196,
			222
		],
		"lightyellow": [
			255,
			255,
			224
		],
		"lime": [
			0,
			255,
			0
		],
		"limegreen": [
			50,
			205,
			50
		],
		"linen": [
			250,
			240,
			230
		],
		"magenta": [
			255,
			0,
			255
		],
		"maroon": [
			128,
			0,
			0
		],
		"mediumaquamarine": [
			102,
			205,
			170
		],
		"mediumblue": [
			0,
			0,
			205
		],
		"mediumorchid": [
			186,
			85,
			211
		],
		"mediumpurple": [
			147,
			112,
			219
		],
		"mediumseagreen": [
			60,
			179,
			113
		],
		"mediumslateblue": [
			123,
			104,
			238
		],
		"mediumspringgreen": [
			0,
			250,
			154
		],
		"mediumturquoise": [
			72,
			209,
			204
		],
		"mediumvioletred": [
			199,
			21,
			133
		],
		"midnightblue": [
			25,
			25,
			112
		],
		"mintcream": [
			245,
			255,
			250
		],
		"mistyrose": [
			255,
			228,
			225
		],
		"moccasin": [
			255,
			228,
			181
		],
		"navajowhite": [
			255,
			222,
			173
		],
		"navy": [
			0,
			0,
			128
		],
		"oldlace": [
			253,
			245,
			230
		],
		"olive": [
			128,
			128,
			0
		],
		"olivedrab": [
			107,
			142,
			35
		],
		"orange": [
			255,
			165,
			0
		],
		"orangered": [
			255,
			69,
			0
		],
		"orchid": [
			218,
			112,
			214
		],
		"palegoldenrod": [
			238,
			232,
			170
		],
		"palegreen": [
			152,
			251,
			152
		],
		"paleturquoise": [
			175,
			238,
			238
		],
		"palevioletred": [
			219,
			112,
			147
		],
		"papayawhip": [
			255,
			239,
			213
		],
		"peachpuff": [
			255,
			218,
			185
		],
		"peru": [
			205,
			133,
			63
		],
		"pink": [
			255,
			192,
			203
		],
		"plum": [
			221,
			160,
			221
		],
		"powderblue": [
			176,
			224,
			230
		],
		"purple": [
			128,
			0,
			128
		],
		"rebeccapurple": [
			102,
			51,
			153
		],
		"red": [
			255,
			0,
			0
		],
		"rosybrown": [
			188,
			143,
			143
		],
		"royalblue": [
			65,
			105,
			225
		],
		"saddlebrown": [
			139,
			69,
			19
		],
		"salmon": [
			250,
			128,
			114
		],
		"sandybrown": [
			244,
			164,
			96
		],
		"seagreen": [
			46,
			139,
			87
		],
		"seashell": [
			255,
			245,
			238
		],
		"sienna": [
			160,
			82,
			45
		],
		"silver": [
			192,
			192,
			192
		],
		"skyblue": [
			135,
			206,
			235
		],
		"slateblue": [
			106,
			90,
			205
		],
		"slategray": [
			112,
			128,
			144
		],
		"slategrey": [
			112,
			128,
			144
		],
		"snow": [
			255,
			250,
			250
		],
		"springgreen": [
			0,
			255,
			127
		],
		"steelblue": [
			70,
			130,
			180
		],
		"tan": [
			210,
			180,
			140
		],
		"teal": [
			0,
			128,
			128
		],
		"thistle": [
			216,
			191,
			216
		],
		"tomato": [
			255,
			99,
			71
		],
		"turquoise": [
			64,
			224,
			208
		],
		"violet": [
			238,
			130,
			238
		],
		"wheat": [
			245,
			222,
			179
		],
		"white": [
			255,
			255,
			255
		],
		"whitesmoke": [
			245,
			245,
			245
		],
		"yellow": [
			255,
			255,
			0
		],
		"yellowgreen": [
			154,
			205,
			50
		]
	};
} });

//#endregion
//#region node_modules/.pnpm/color-convert@1.9.3/node_modules/color-convert/conversions.js
var require_conversions$1 = __commonJS({ "node_modules/.pnpm/color-convert@1.9.3/node_modules/color-convert/conversions.js"(exports, module) {
	var cssKeywords$1 = require_color_name();
	var reverseKeywords$1 = {};
	for (var key in cssKeywords$1) if (cssKeywords$1.hasOwnProperty(key)) reverseKeywords$1[cssKeywords$1[key]] = key;
	var convert$4 = module.exports = {
		rgb: {
			channels: 3,
			labels: "rgb"
		},
		hsl: {
			channels: 3,
			labels: "hsl"
		},
		hsv: {
			channels: 3,
			labels: "hsv"
		},
		hwb: {
			channels: 3,
			labels: "hwb"
		},
		cmyk: {
			channels: 4,
			labels: "cmyk"
		},
		xyz: {
			channels: 3,
			labels: "xyz"
		},
		lab: {
			channels: 3,
			labels: "lab"
		},
		lch: {
			channels: 3,
			labels: "lch"
		},
		hex: {
			channels: 1,
			labels: ["hex"]
		},
		keyword: {
			channels: 1,
			labels: ["keyword"]
		},
		ansi16: {
			channels: 1,
			labels: ["ansi16"]
		},
		ansi256: {
			channels: 1,
			labels: ["ansi256"]
		},
		hcg: {
			channels: 3,
			labels: [
				"h",
				"c",
				"g"
			]
		},
		apple: {
			channels: 3,
			labels: [
				"r16",
				"g16",
				"b16"
			]
		},
		gray: {
			channels: 1,
			labels: ["gray"]
		}
	};
	for (var model in convert$4) if (convert$4.hasOwnProperty(model)) {
		if (!("channels" in convert$4[model])) throw new Error("missing channels property: " + model);
		if (!("labels" in convert$4[model])) throw new Error("missing channel labels property: " + model);
		if (convert$4[model].labels.length !== convert$4[model].channels) throw new Error("channel and label counts mismatch: " + model);
		var channels = convert$4[model].channels;
		var labels = convert$4[model].labels;
		delete convert$4[model].channels;
		delete convert$4[model].labels;
		Object.defineProperty(convert$4[model], "channels", { value: channels });
		Object.defineProperty(convert$4[model], "labels", { value: labels });
	}
	convert$4.rgb.hsl = function(rgb) {
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		var min$1 = Math.min(r, g, b);
		var max$2 = Math.max(r, g, b);
		var delta = max$2 - min$1;
		var h$1;
		var s$1;
		var l;
		if (max$2 === min$1) h$1 = 0;
		else if (r === max$2) h$1 = (g - b) / delta;
		else if (g === max$2) h$1 = 2 + (b - r) / delta;
		else if (b === max$2) h$1 = 4 + (r - g) / delta;
		h$1 = Math.min(h$1 * 60, 360);
		if (h$1 < 0) h$1 += 360;
		l = (min$1 + max$2) / 2;
		if (max$2 === min$1) s$1 = 0;
		else if (l <= .5) s$1 = delta / (max$2 + min$1);
		else s$1 = delta / (2 - max$2 - min$1);
		return [
			h$1,
			s$1 * 100,
			l * 100
		];
	};
	convert$4.rgb.hsv = function(rgb) {
		var rdif;
		var gdif;
		var bdif;
		var h$1;
		var s$1;
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		var v$1 = Math.max(r, g, b);
		var diff$2 = v$1 - Math.min(r, g, b);
		var diffc = function(c) {
			return (v$1 - c) / 6 / diff$2 + 1 / 2;
		};
		if (diff$2 === 0) h$1 = s$1 = 0;
		else {
			s$1 = diff$2 / v$1;
			rdif = diffc(r);
			gdif = diffc(g);
			bdif = diffc(b);
			if (r === v$1) h$1 = bdif - gdif;
			else if (g === v$1) h$1 = 1 / 3 + rdif - bdif;
			else if (b === v$1) h$1 = 2 / 3 + gdif - rdif;
			if (h$1 < 0) h$1 += 1;
			else if (h$1 > 1) h$1 -= 1;
		}
		return [
			h$1 * 360,
			s$1 * 100,
			v$1 * 100
		];
	};
	convert$4.rgb.hwb = function(rgb) {
		var r = rgb[0];
		var g = rgb[1];
		var b = rgb[2];
		var h$1 = convert$4.rgb.hsl(rgb)[0];
		var w$1 = 1 / 255 * Math.min(r, Math.min(g, b));
		b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
		return [
			h$1,
			w$1 * 100,
			b * 100
		];
	};
	convert$4.rgb.cmyk = function(rgb) {
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		var c;
		var m$1;
		var y$1;
		var k;
		k = Math.min(1 - r, 1 - g, 1 - b);
		c = (1 - r - k) / (1 - k) || 0;
		m$1 = (1 - g - k) / (1 - k) || 0;
		y$1 = (1 - b - k) / (1 - k) || 0;
		return [
			c * 100,
			m$1 * 100,
			y$1 * 100,
			k * 100
		];
	};
	/**
	* See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
	* */
	function comparativeDistance$1(x, y$1) {
		return Math.pow(x[0] - y$1[0], 2) + Math.pow(x[1] - y$1[1], 2) + Math.pow(x[2] - y$1[2], 2);
	}
	convert$4.rgb.keyword = function(rgb) {
		var reversed = reverseKeywords$1[rgb];
		if (reversed) return reversed;
		var currentClosestDistance = Infinity;
		var currentClosestKeyword;
		for (var keyword in cssKeywords$1) if (cssKeywords$1.hasOwnProperty(keyword)) {
			var value = cssKeywords$1[keyword];
			var distance = comparativeDistance$1(rgb, value);
			if (distance < currentClosestDistance) {
				currentClosestDistance = distance;
				currentClosestKeyword = keyword;
			}
		}
		return currentClosestKeyword;
	};
	convert$4.keyword.rgb = function(keyword) {
		return cssKeywords$1[keyword];
	};
	convert$4.rgb.xyz = function(rgb) {
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		r = r > .04045 ? Math.pow((r + .055) / 1.055, 2.4) : r / 12.92;
		g = g > .04045 ? Math.pow((g + .055) / 1.055, 2.4) : g / 12.92;
		b = b > .04045 ? Math.pow((b + .055) / 1.055, 2.4) : b / 12.92;
		var x = r * .4124 + g * .3576 + b * .1805;
		var y$1 = r * .2126 + g * .7152 + b * .0722;
		var z = r * .0193 + g * .1192 + b * .9505;
		return [
			x * 100,
			y$1 * 100,
			z * 100
		];
	};
	convert$4.rgb.lab = function(rgb) {
		var xyz = convert$4.rgb.xyz(rgb);
		var x = xyz[0];
		var y$1 = xyz[1];
		var z = xyz[2];
		var l;
		var a;
		var b;
		x /= 95.047;
		y$1 /= 100;
		z /= 108.883;
		x = x > .008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
		y$1 = y$1 > .008856 ? Math.pow(y$1, 1 / 3) : 7.787 * y$1 + 16 / 116;
		z = z > .008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
		l = 116 * y$1 - 16;
		a = 500 * (x - y$1);
		b = 200 * (y$1 - z);
		return [
			l,
			a,
			b
		];
	};
	convert$4.hsl.rgb = function(hsl) {
		var h$1 = hsl[0] / 360;
		var s$1 = hsl[1] / 100;
		var l = hsl[2] / 100;
		var t1;
		var t2;
		var t3;
		var rgb;
		var val;
		if (s$1 === 0) {
			val = l * 255;
			return [
				val,
				val,
				val
			];
		}
		if (l < .5) t2 = l * (1 + s$1);
		else t2 = l + s$1 - l * s$1;
		t1 = 2 * l - t2;
		rgb = [
			0,
			0,
			0
		];
		for (var i = 0; i < 3; i++) {
			t3 = h$1 + 1 / 3 * -(i - 1);
			if (t3 < 0) t3++;
			if (t3 > 1) t3--;
			if (6 * t3 < 1) val = t1 + (t2 - t1) * 6 * t3;
			else if (2 * t3 < 1) val = t2;
			else if (3 * t3 < 2) val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
			else val = t1;
			rgb[i] = val * 255;
		}
		return rgb;
	};
	convert$4.hsl.hsv = function(hsl) {
		var h$1 = hsl[0];
		var s$1 = hsl[1] / 100;
		var l = hsl[2] / 100;
		var smin = s$1;
		var lmin = Math.max(l, .01);
		var sv;
		var v$1;
		l *= 2;
		s$1 *= l <= 1 ? l : 2 - l;
		smin *= lmin <= 1 ? lmin : 2 - lmin;
		v$1 = (l + s$1) / 2;
		sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s$1 / (l + s$1);
		return [
			h$1,
			sv * 100,
			v$1 * 100
		];
	};
	convert$4.hsv.rgb = function(hsv) {
		var h$1 = hsv[0] / 60;
		var s$1 = hsv[1] / 100;
		var v$1 = hsv[2] / 100;
		var hi = Math.floor(h$1) % 6;
		var f = h$1 - Math.floor(h$1);
		var p = 255 * v$1 * (1 - s$1);
		var q = 255 * v$1 * (1 - s$1 * f);
		var t$5 = 255 * v$1 * (1 - s$1 * (1 - f));
		v$1 *= 255;
		switch (hi) {
			case 0: return [
				v$1,
				t$5,
				p
			];
			case 1: return [
				q,
				v$1,
				p
			];
			case 2: return [
				p,
				v$1,
				t$5
			];
			case 3: return [
				p,
				q,
				v$1
			];
			case 4: return [
				t$5,
				p,
				v$1
			];
			case 5: return [
				v$1,
				p,
				q
			];
		}
	};
	convert$4.hsv.hsl = function(hsv) {
		var h$1 = hsv[0];
		var s$1 = hsv[1] / 100;
		var v$1 = hsv[2] / 100;
		var vmin = Math.max(v$1, .01);
		var lmin;
		var sl;
		var l;
		l = (2 - s$1) * v$1;
		lmin = (2 - s$1) * vmin;
		sl = s$1 * vmin;
		sl /= lmin <= 1 ? lmin : 2 - lmin;
		sl = sl || 0;
		l /= 2;
		return [
			h$1,
			sl * 100,
			l * 100
		];
	};
	convert$4.hwb.rgb = function(hwb) {
		var h$1 = hwb[0] / 360;
		var wh = hwb[1] / 100;
		var bl = hwb[2] / 100;
		var ratio = wh + bl;
		var i;
		var v$1;
		var f;
		var n;
		if (ratio > 1) {
			wh /= ratio;
			bl /= ratio;
		}
		i = Math.floor(6 * h$1);
		v$1 = 1 - bl;
		f = 6 * h$1 - i;
		if ((i & 1) !== 0) f = 1 - f;
		n = wh + f * (v$1 - wh);
		var r;
		var g;
		var b;
		switch (i) {
			default:
			case 6:
			case 0:
				r = v$1;
				g = n;
				b = wh;
				break;
			case 1:
				r = n;
				g = v$1;
				b = wh;
				break;
			case 2:
				r = wh;
				g = v$1;
				b = n;
				break;
			case 3:
				r = wh;
				g = n;
				b = v$1;
				break;
			case 4:
				r = n;
				g = wh;
				b = v$1;
				break;
			case 5:
				r = v$1;
				g = wh;
				b = n;
				break;
		}
		return [
			r * 255,
			g * 255,
			b * 255
		];
	};
	convert$4.cmyk.rgb = function(cmyk) {
		var c = cmyk[0] / 100;
		var m$1 = cmyk[1] / 100;
		var y$1 = cmyk[2] / 100;
		var k = cmyk[3] / 100;
		var r;
		var g;
		var b;
		r = 1 - Math.min(1, c * (1 - k) + k);
		g = 1 - Math.min(1, m$1 * (1 - k) + k);
		b = 1 - Math.min(1, y$1 * (1 - k) + k);
		return [
			r * 255,
			g * 255,
			b * 255
		];
	};
	convert$4.xyz.rgb = function(xyz) {
		var x = xyz[0] / 100;
		var y$1 = xyz[1] / 100;
		var z = xyz[2] / 100;
		var r;
		var g;
		var b;
		r = x * 3.2406 + y$1 * -1.5372 + z * -.4986;
		g = x * -.9689 + y$1 * 1.8758 + z * .0415;
		b = x * .0557 + y$1 * -.204 + z * 1.057;
		r = r > .0031308 ? 1.055 * Math.pow(r, 1 / 2.4) - .055 : r * 12.92;
		g = g > .0031308 ? 1.055 * Math.pow(g, 1 / 2.4) - .055 : g * 12.92;
		b = b > .0031308 ? 1.055 * Math.pow(b, 1 / 2.4) - .055 : b * 12.92;
		r = Math.min(Math.max(0, r), 1);
		g = Math.min(Math.max(0, g), 1);
		b = Math.min(Math.max(0, b), 1);
		return [
			r * 255,
			g * 255,
			b * 255
		];
	};
	convert$4.xyz.lab = function(xyz) {
		var x = xyz[0];
		var y$1 = xyz[1];
		var z = xyz[2];
		var l;
		var a;
		var b;
		x /= 95.047;
		y$1 /= 100;
		z /= 108.883;
		x = x > .008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
		y$1 = y$1 > .008856 ? Math.pow(y$1, 1 / 3) : 7.787 * y$1 + 16 / 116;
		z = z > .008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
		l = 116 * y$1 - 16;
		a = 500 * (x - y$1);
		b = 200 * (y$1 - z);
		return [
			l,
			a,
			b
		];
	};
	convert$4.lab.xyz = function(lab) {
		var l = lab[0];
		var a = lab[1];
		var b = lab[2];
		var x;
		var y$1;
		var z;
		y$1 = (l + 16) / 116;
		x = a / 500 + y$1;
		z = y$1 - b / 200;
		var y2 = Math.pow(y$1, 3);
		var x2 = Math.pow(x, 3);
		var z2 = Math.pow(z, 3);
		y$1 = y2 > .008856 ? y2 : (y$1 - 16 / 116) / 7.787;
		x = x2 > .008856 ? x2 : (x - 16 / 116) / 7.787;
		z = z2 > .008856 ? z2 : (z - 16 / 116) / 7.787;
		x *= 95.047;
		y$1 *= 100;
		z *= 108.883;
		return [
			x,
			y$1,
			z
		];
	};
	convert$4.lab.lch = function(lab) {
		var l = lab[0];
		var a = lab[1];
		var b = lab[2];
		var hr;
		var h$1;
		var c;
		hr = Math.atan2(b, a);
		h$1 = hr * 360 / 2 / Math.PI;
		if (h$1 < 0) h$1 += 360;
		c = Math.sqrt(a * a + b * b);
		return [
			l,
			c,
			h$1
		];
	};
	convert$4.lch.lab = function(lch) {
		var l = lch[0];
		var c = lch[1];
		var h$1 = lch[2];
		var a;
		var b;
		var hr;
		hr = h$1 / 360 * 2 * Math.PI;
		a = c * Math.cos(hr);
		b = c * Math.sin(hr);
		return [
			l,
			a,
			b
		];
	};
	convert$4.rgb.ansi16 = function(args) {
		var r = args[0];
		var g = args[1];
		var b = args[2];
		var value = 1 in arguments ? arguments[1] : convert$4.rgb.hsv(args)[2];
		value = Math.round(value / 50);
		if (value === 0) return 30;
		var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
		if (value === 2) ansi += 60;
		return ansi;
	};
	convert$4.hsv.ansi16 = function(args) {
		return convert$4.rgb.ansi16(convert$4.hsv.rgb(args), args[2]);
	};
	convert$4.rgb.ansi256 = function(args) {
		var r = args[0];
		var g = args[1];
		var b = args[2];
		if (r === g && g === b) {
			if (r < 8) return 16;
			if (r > 248) return 231;
			return Math.round((r - 8) / 247 * 24) + 232;
		}
		var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
		return ansi;
	};
	convert$4.ansi16.rgb = function(args) {
		var color$1 = args % 10;
		if (color$1 === 0 || color$1 === 7) {
			if (args > 50) color$1 += 3.5;
			color$1 = color$1 / 10.5 * 255;
			return [
				color$1,
				color$1,
				color$1
			];
		}
		var mult = (~~(args > 50) + 1) * .5;
		var r = (color$1 & 1) * mult * 255;
		var g = (color$1 >> 1 & 1) * mult * 255;
		var b = (color$1 >> 2 & 1) * mult * 255;
		return [
			r,
			g,
			b
		];
	};
	convert$4.ansi256.rgb = function(args) {
		if (args >= 232) {
			var c = (args - 232) * 10 + 8;
			return [
				c,
				c,
				c
			];
		}
		args -= 16;
		var rem;
		var r = Math.floor(args / 36) / 5 * 255;
		var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
		var b = rem % 6 / 5 * 255;
		return [
			r,
			g,
			b
		];
	};
	convert$4.rgb.hex = function(args) {
		var integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
		var string = integer.toString(16).toUpperCase();
		return "000000".substring(string.length) + string;
	};
	convert$4.hex.rgb = function(args) {
		var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
		if (!match) return [
			0,
			0,
			0
		];
		var colorString$1 = match[0];
		if (match[0].length === 3) colorString$1 = colorString$1.split("").map(function(char) {
			return char + char;
		}).join("");
		var integer = parseInt(colorString$1, 16);
		var r = integer >> 16 & 255;
		var g = integer >> 8 & 255;
		var b = integer & 255;
		return [
			r,
			g,
			b
		];
	};
	convert$4.rgb.hcg = function(rgb) {
		var r = rgb[0] / 255;
		var g = rgb[1] / 255;
		var b = rgb[2] / 255;
		var max$2 = Math.max(Math.max(r, g), b);
		var min$1 = Math.min(Math.min(r, g), b);
		var chroma = max$2 - min$1;
		var grayscale;
		var hue;
		if (chroma < 1) grayscale = min$1 / (1 - chroma);
		else grayscale = 0;
		if (chroma <= 0) hue = 0;
		else if (max$2 === r) hue = (g - b) / chroma % 6;
		else if (max$2 === g) hue = 2 + (b - r) / chroma;
		else hue = 4 + (r - g) / chroma + 4;
		hue /= 6;
		hue %= 1;
		return [
			hue * 360,
			chroma * 100,
			grayscale * 100
		];
	};
	convert$4.hsl.hcg = function(hsl) {
		var s$1 = hsl[1] / 100;
		var l = hsl[2] / 100;
		var c = 1;
		var f = 0;
		if (l < .5) c = 2 * s$1 * l;
		else c = 2 * s$1 * (1 - l);
		if (c < 1) f = (l - .5 * c) / (1 - c);
		return [
			hsl[0],
			c * 100,
			f * 100
		];
	};
	convert$4.hsv.hcg = function(hsv) {
		var s$1 = hsv[1] / 100;
		var v$1 = hsv[2] / 100;
		var c = s$1 * v$1;
		var f = 0;
		if (c < 1) f = (v$1 - c) / (1 - c);
		return [
			hsv[0],
			c * 100,
			f * 100
		];
	};
	convert$4.hcg.rgb = function(hcg) {
		var h$1 = hcg[0] / 360;
		var c = hcg[1] / 100;
		var g = hcg[2] / 100;
		if (c === 0) return [
			g * 255,
			g * 255,
			g * 255
		];
		var pure = [
			0,
			0,
			0
		];
		var hi = h$1 % 1 * 6;
		var v$1 = hi % 1;
		var w$1 = 1 - v$1;
		var mg = 0;
		switch (Math.floor(hi)) {
			case 0:
				pure[0] = 1;
				pure[1] = v$1;
				pure[2] = 0;
				break;
			case 1:
				pure[0] = w$1;
				pure[1] = 1;
				pure[2] = 0;
				break;
			case 2:
				pure[0] = 0;
				pure[1] = 1;
				pure[2] = v$1;
				break;
			case 3:
				pure[0] = 0;
				pure[1] = w$1;
				pure[2] = 1;
				break;
			case 4:
				pure[0] = v$1;
				pure[1] = 0;
				pure[2] = 1;
				break;
			default:
				pure[0] = 1;
				pure[1] = 0;
				pure[2] = w$1;
		}
		mg = (1 - c) * g;
		return [
			(c * pure[0] + mg) * 255,
			(c * pure[1] + mg) * 255,
			(c * pure[2] + mg) * 255
		];
	};
	convert$4.hcg.hsv = function(hcg) {
		var c = hcg[1] / 100;
		var g = hcg[2] / 100;
		var v$1 = c + g * (1 - c);
		var f = 0;
		if (v$1 > 0) f = c / v$1;
		return [
			hcg[0],
			f * 100,
			v$1 * 100
		];
	};
	convert$4.hcg.hsl = function(hcg) {
		var c = hcg[1] / 100;
		var g = hcg[2] / 100;
		var l = g * (1 - c) + .5 * c;
		var s$1 = 0;
		if (l > 0 && l < .5) s$1 = c / (2 * l);
		else if (l >= .5 && l < 1) s$1 = c / (2 * (1 - l));
		return [
			hcg[0],
			s$1 * 100,
			l * 100
		];
	};
	convert$4.hcg.hwb = function(hcg) {
		var c = hcg[1] / 100;
		var g = hcg[2] / 100;
		var v$1 = c + g * (1 - c);
		return [
			hcg[0],
			(v$1 - c) * 100,
			(1 - v$1) * 100
		];
	};
	convert$4.hwb.hcg = function(hwb) {
		var w$1 = hwb[1] / 100;
		var b = hwb[2] / 100;
		var v$1 = 1 - b;
		var c = v$1 - w$1;
		var g = 0;
		if (c < 1) g = (v$1 - c) / (1 - c);
		return [
			hwb[0],
			c * 100,
			g * 100
		];
	};
	convert$4.apple.rgb = function(apple) {
		return [
			apple[0] / 65535 * 255,
			apple[1] / 65535 * 255,
			apple[2] / 65535 * 255
		];
	};
	convert$4.rgb.apple = function(rgb) {
		return [
			rgb[0] / 255 * 65535,
			rgb[1] / 255 * 65535,
			rgb[2] / 255 * 65535
		];
	};
	convert$4.gray.rgb = function(args) {
		return [
			args[0] / 100 * 255,
			args[0] / 100 * 255,
			args[0] / 100 * 255
		];
	};
	convert$4.gray.hsl = convert$4.gray.hsv = function(args) {
		return [
			0,
			0,
			args[0]
		];
	};
	convert$4.gray.hwb = function(gray) {
		return [
			0,
			100,
			gray[0]
		];
	};
	convert$4.gray.cmyk = function(gray) {
		return [
			0,
			0,
			0,
			gray[0]
		];
	};
	convert$4.gray.lab = function(gray) {
		return [
			gray[0],
			0,
			0
		];
	};
	convert$4.gray.hex = function(gray) {
		var val = Math.round(gray[0] / 100 * 255) & 255;
		var integer = (val << 16) + (val << 8) + val;
		var string = integer.toString(16).toUpperCase();
		return "000000".substring(string.length) + string;
	};
	convert$4.rgb.gray = function(rgb) {
		var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
		return [val / 255 * 100];
	};
} });

//#endregion
//#region node_modules/.pnpm/color-convert@1.9.3/node_modules/color-convert/route.js
var require_route$1 = __commonJS({ "node_modules/.pnpm/color-convert@1.9.3/node_modules/color-convert/route.js"(exports, module) {
	var conversions$3 = require_conversions$1();
	function buildGraph$1() {
		var graph = {};
		var models$2 = Object.keys(conversions$3);
		for (var len = models$2.length, i = 0; i < len; i++) graph[models$2[i]] = {
			distance: -1,
			parent: null
		};
		return graph;
	}
	function deriveBFS$1(fromModel) {
		var graph = buildGraph$1();
		var queue = [fromModel];
		graph[fromModel].distance = 0;
		while (queue.length) {
			var current = queue.pop();
			var adjacents = Object.keys(conversions$3[current]);
			for (var len = adjacents.length, i = 0; i < len; i++) {
				var adjacent = adjacents[i];
				var node = graph[adjacent];
				if (node.distance === -1) {
					node.distance = graph[current].distance + 1;
					node.parent = current;
					queue.unshift(adjacent);
				}
			}
		}
		return graph;
	}
	function link$1(from$2, to) {
		return function(args) {
			return to(from$2(args));
		};
	}
	function wrapConversion$1(toModel, graph) {
		var path$10 = [graph[toModel].parent, toModel];
		var fn = conversions$3[graph[toModel].parent][toModel];
		var cur = graph[toModel].parent;
		while (graph[cur].parent) {
			path$10.unshift(graph[cur].parent);
			fn = link$1(conversions$3[graph[cur].parent][cur], fn);
			cur = graph[cur].parent;
		}
		fn.conversion = path$10;
		return fn;
	}
	module.exports = function(fromModel) {
		var graph = deriveBFS$1(fromModel);
		var conversion = {};
		var models$2 = Object.keys(graph);
		for (var len = models$2.length, i = 0; i < len; i++) {
			var toModel = models$2[i];
			var node = graph[toModel];
			if (node.parent === null) continue;
			conversion[toModel] = wrapConversion$1(toModel, graph);
		}
		return conversion;
	};
} });

//#endregion
//#region node_modules/.pnpm/color-convert@1.9.3/node_modules/color-convert/index.js
var require_color_convert$1 = __commonJS({ "node_modules/.pnpm/color-convert@1.9.3/node_modules/color-convert/index.js"(exports, module) {
	var conversions$2 = require_conversions$1();
	var route$1 = require_route$1();
	var convert$3 = {};
	var models$1 = Object.keys(conversions$2);
	function wrapRaw$1(fn) {
		var wrappedFn = function(args) {
			if (args === void 0 || args === null) return args;
			if (arguments.length > 1) args = Array.prototype.slice.call(arguments);
			return fn(args);
		};
		if ("conversion" in fn) wrappedFn.conversion = fn.conversion;
		return wrappedFn;
	}
	function wrapRounded$1(fn) {
		var wrappedFn = function(args) {
			if (args === void 0 || args === null) return args;
			if (arguments.length > 1) args = Array.prototype.slice.call(arguments);
			var result = fn(args);
			if (typeof result === "object") for (var len = result.length, i = 0; i < len; i++) result[i] = Math.round(result[i]);
			return result;
		};
		if ("conversion" in fn) wrappedFn.conversion = fn.conversion;
		return wrappedFn;
	}
	models$1.forEach(function(fromModel) {
		convert$3[fromModel] = {};
		Object.defineProperty(convert$3[fromModel], "channels", { value: conversions$2[fromModel].channels });
		Object.defineProperty(convert$3[fromModel], "labels", { value: conversions$2[fromModel].labels });
		var routes = route$1(fromModel);
		var routeModels = Object.keys(routes);
		routeModels.forEach(function(toModel) {
			var fn = routes[toModel];
			convert$3[fromModel][toModel] = wrapRounded$1(fn);
			convert$3[fromModel][toModel].raw = wrapRaw$1(fn);
		});
	});
	module.exports = convert$3;
} });

//#endregion
//#region node_modules/.pnpm/color@3.2.1/node_modules/color/index.js
var require_color = __commonJS({ "node_modules/.pnpm/color@3.2.1/node_modules/color/index.js"(exports, module) {
	var colorString = require_color_string();
	var convert$2 = require_color_convert$1();
	var _slice = [].slice;
	var skippedModels = [
		"keyword",
		"gray",
		"hex"
	];
	var hashedModelKeys = {};
	Object.keys(convert$2).forEach(function(model$1) {
		hashedModelKeys[_slice.call(convert$2[model$1].labels).sort().join("")] = model$1;
	});
	var limiters = {};
	function Color(obj, model$1) {
		if (!(this instanceof Color)) return new Color(obj, model$1);
		if (model$1 && model$1 in skippedModels) model$1 = null;
		if (model$1 && !(model$1 in convert$2)) throw new Error("Unknown model: " + model$1);
		var i;
		var channels$5;
		if (obj == null) {
			this.model = "rgb";
			this.color = [
				0,
				0,
				0
			];
			this.valpha = 1;
		} else if (obj instanceof Color) {
			this.model = obj.model;
			this.color = obj.color.slice();
			this.valpha = obj.valpha;
		} else if (typeof obj === "string") {
			var result = colorString.get(obj);
			if (result === null) throw new Error("Unable to parse color from string: " + obj);
			this.model = result.model;
			channels$5 = convert$2[this.model].channels;
			this.color = result.value.slice(0, channels$5);
			this.valpha = typeof result.value[channels$5] === "number" ? result.value[channels$5] : 1;
		} else if (obj.length) {
			this.model = model$1 || "rgb";
			channels$5 = convert$2[this.model].channels;
			var newArr = _slice.call(obj, 0, channels$5);
			this.color = zeroArray(newArr, channels$5);
			this.valpha = typeof obj[channels$5] === "number" ? obj[channels$5] : 1;
		} else if (typeof obj === "number") {
			obj &= 16777215;
			this.model = "rgb";
			this.color = [
				obj >> 16 & 255,
				obj >> 8 & 255,
				obj & 255
			];
			this.valpha = 1;
		} else {
			this.valpha = 1;
			var keys$2 = Object.keys(obj);
			if ("alpha" in obj) {
				keys$2.splice(keys$2.indexOf("alpha"), 1);
				this.valpha = typeof obj.alpha === "number" ? obj.alpha : 0;
			}
			var hashedKeys = keys$2.sort().join("");
			if (!(hashedKeys in hashedModelKeys)) throw new Error("Unable to parse color from object: " + JSON.stringify(obj));
			this.model = hashedModelKeys[hashedKeys];
			var labels$1 = convert$2[this.model].labels;
			var color$1 = [];
			for (i = 0; i < labels$1.length; i++) color$1.push(obj[labels$1[i]]);
			this.color = zeroArray(color$1);
		}
		if (limiters[this.model]) {
			channels$5 = convert$2[this.model].channels;
			for (i = 0; i < channels$5; i++) {
				var limit = limiters[this.model][i];
				if (limit) this.color[i] = limit(this.color[i]);
			}
		}
		this.valpha = Math.max(0, Math.min(1, this.valpha));
		if (Object.freeze) Object.freeze(this);
	}
	Color.prototype = {
		toString: function() {
			return this.string();
		},
		toJSON: function() {
			return this[this.model]();
		},
		string: function(places) {
			var self$1 = this.model in colorString.to ? this : this.rgb();
			self$1 = self$1.round(typeof places === "number" ? places : 1);
			var args = self$1.valpha === 1 ? self$1.color : self$1.color.concat(this.valpha);
			return colorString.to[self$1.model](args);
		},
		percentString: function(places) {
			var self$1 = this.rgb().round(typeof places === "number" ? places : 1);
			var args = self$1.valpha === 1 ? self$1.color : self$1.color.concat(this.valpha);
			return colorString.to.rgb.percent(args);
		},
		array: function() {
			return this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);
		},
		object: function() {
			var result = {};
			var channels$5 = convert$2[this.model].channels;
			var labels$1 = convert$2[this.model].labels;
			for (var i = 0; i < channels$5; i++) result[labels$1[i]] = this.color[i];
			if (this.valpha !== 1) result.alpha = this.valpha;
			return result;
		},
		unitArray: function() {
			var rgb = this.rgb().color;
			rgb[0] /= 255;
			rgb[1] /= 255;
			rgb[2] /= 255;
			if (this.valpha !== 1) rgb.push(this.valpha);
			return rgb;
		},
		unitObject: function() {
			var rgb = this.rgb().object();
			rgb.r /= 255;
			rgb.g /= 255;
			rgb.b /= 255;
			if (this.valpha !== 1) rgb.alpha = this.valpha;
			return rgb;
		},
		round: function(places) {
			places = Math.max(places || 0, 0);
			return new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);
		},
		alpha: function(val) {
			if (arguments.length) return new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);
			return this.valpha;
		},
		red: getset("rgb", 0, maxfn(255)),
		green: getset("rgb", 1, maxfn(255)),
		blue: getset("rgb", 2, maxfn(255)),
		hue: getset([
			"hsl",
			"hsv",
			"hsl",
			"hwb",
			"hcg"
		], 0, function(val) {
			return (val % 360 + 360) % 360;
		}),
		saturationl: getset("hsl", 1, maxfn(100)),
		lightness: getset("hsl", 2, maxfn(100)),
		saturationv: getset("hsv", 1, maxfn(100)),
		value: getset("hsv", 2, maxfn(100)),
		chroma: getset("hcg", 1, maxfn(100)),
		gray: getset("hcg", 2, maxfn(100)),
		white: getset("hwb", 1, maxfn(100)),
		wblack: getset("hwb", 2, maxfn(100)),
		cyan: getset("cmyk", 0, maxfn(100)),
		magenta: getset("cmyk", 1, maxfn(100)),
		yellow: getset("cmyk", 2, maxfn(100)),
		black: getset("cmyk", 3, maxfn(100)),
		x: getset("xyz", 0, maxfn(100)),
		y: getset("xyz", 1, maxfn(100)),
		z: getset("xyz", 2, maxfn(100)),
		l: getset("lab", 0, maxfn(100)),
		a: getset("lab", 1),
		b: getset("lab", 2),
		keyword: function(val) {
			if (arguments.length) return new Color(val);
			return convert$2[this.model].keyword(this.color);
		},
		hex: function(val) {
			if (arguments.length) return new Color(val);
			return colorString.to.hex(this.rgb().round().color);
		},
		rgbNumber: function() {
			var rgb = this.rgb().color;
			return (rgb[0] & 255) << 16 | (rgb[1] & 255) << 8 | rgb[2] & 255;
		},
		luminosity: function() {
			var rgb = this.rgb().color;
			var lum = [];
			for (var i = 0; i < rgb.length; i++) {
				var chan = rgb[i] / 255;
				lum[i] = chan <= .03928 ? chan / 12.92 : Math.pow((chan + .055) / 1.055, 2.4);
			}
			return .2126 * lum[0] + .7152 * lum[1] + .0722 * lum[2];
		},
		contrast: function(color2) {
			var lum1 = this.luminosity();
			var lum2 = color2.luminosity();
			if (lum1 > lum2) return (lum1 + .05) / (lum2 + .05);
			return (lum2 + .05) / (lum1 + .05);
		},
		level: function(color2) {
			var contrastRatio = this.contrast(color2);
			if (contrastRatio >= 7.1) return "AAA";
			return contrastRatio >= 4.5 ? "AA" : "";
		},
		isDark: function() {
			var rgb = this.rgb().color;
			var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1e3;
			return yiq < 128;
		},
		isLight: function() {
			return !this.isDark();
		},
		negate: function() {
			var rgb = this.rgb();
			for (var i = 0; i < 3; i++) rgb.color[i] = 255 - rgb.color[i];
			return rgb;
		},
		lighten: function(ratio) {
			var hsl = this.hsl();
			hsl.color[2] += hsl.color[2] * ratio;
			return hsl;
		},
		darken: function(ratio) {
			var hsl = this.hsl();
			hsl.color[2] -= hsl.color[2] * ratio;
			return hsl;
		},
		saturate: function(ratio) {
			var hsl = this.hsl();
			hsl.color[1] += hsl.color[1] * ratio;
			return hsl;
		},
		desaturate: function(ratio) {
			var hsl = this.hsl();
			hsl.color[1] -= hsl.color[1] * ratio;
			return hsl;
		},
		whiten: function(ratio) {
			var hwb = this.hwb();
			hwb.color[1] += hwb.color[1] * ratio;
			return hwb;
		},
		blacken: function(ratio) {
			var hwb = this.hwb();
			hwb.color[2] += hwb.color[2] * ratio;
			return hwb;
		},
		grayscale: function() {
			var rgb = this.rgb().color;
			var val = rgb[0] * .3 + rgb[1] * .59 + rgb[2] * .11;
			return Color.rgb(val, val, val);
		},
		fade: function(ratio) {
			return this.alpha(this.valpha - this.valpha * ratio);
		},
		opaquer: function(ratio) {
			return this.alpha(this.valpha + this.valpha * ratio);
		},
		rotate: function(degrees) {
			var hsl = this.hsl();
			var hue = hsl.color[0];
			hue = (hue + degrees) % 360;
			hue = hue < 0 ? 360 + hue : hue;
			hsl.color[0] = hue;
			return hsl;
		},
		mix: function(mixinColor, weight) {
			if (!mixinColor || !mixinColor.rgb) throw new Error("Argument to \"mix\" was not a Color instance, but rather an instance of " + typeof mixinColor);
			var color1 = mixinColor.rgb();
			var color2 = this.rgb();
			var p = weight === void 0 ? .5 : weight;
			var w$1 = 2 * p - 1;
			var a = color1.alpha() - color2.alpha();
			var w1 = ((w$1 * a === -1 ? w$1 : (w$1 + a) / (1 + w$1 * a)) + 1) / 2;
			var w2 = 1 - w1;
			return Color.rgb(w1 * color1.red() + w2 * color2.red(), w1 * color1.green() + w2 * color2.green(), w1 * color1.blue() + w2 * color2.blue(), color1.alpha() * p + color2.alpha() * (1 - p));
		}
	};
	Object.keys(convert$2).forEach(function(model$1) {
		if (skippedModels.indexOf(model$1) !== -1) return;
		var channels$5 = convert$2[model$1].channels;
		Color.prototype[model$1] = function() {
			if (this.model === model$1) return new Color(this);
			if (arguments.length) return new Color(arguments, model$1);
			var newAlpha = typeof arguments[channels$5] === "number" ? channels$5 : this.valpha;
			return new Color(assertArray(convert$2[this.model][model$1].raw(this.color)).concat(newAlpha), model$1);
		};
		Color[model$1] = function(color$1) {
			if (typeof color$1 === "number") color$1 = zeroArray(_slice.call(arguments), channels$5);
			return new Color(color$1, model$1);
		};
	});
	function roundTo(num, places) {
		return Number(num.toFixed(places));
	}
	function roundToPlace(places) {
		return function(num) {
			return roundTo(num, places);
		};
	}
	function getset(model$1, channel$1, modifier) {
		model$1 = Array.isArray(model$1) ? model$1 : [model$1];
		model$1.forEach(function(m$1) {
			(limiters[m$1] || (limiters[m$1] = []))[channel$1] = modifier;
		});
		model$1 = model$1[0];
		return function(val) {
			var result;
			if (arguments.length) {
				if (modifier) val = modifier(val);
				result = this[model$1]();
				result.color[channel$1] = val;
				return result;
			}
			result = this[model$1]().color[channel$1];
			if (modifier) result = modifier(result);
			return result;
		};
	}
	function maxfn(max$2) {
		return function(v$1) {
			return Math.max(0, Math.min(max$2, v$1));
		};
	}
	function assertArray(val) {
		return Array.isArray(val) ? val : [val];
	}
	function zeroArray(arr, length) {
		for (var i = 0; i < length; i++) if (typeof arr[i] !== "number") arr[i] = 0;
		return arr;
	}
	module.exports = Color;
} });

//#endregion
//#region node_modules/.pnpm/text-hex@1.0.0/node_modules/text-hex/index.js
var require_text_hex = __commonJS({ "node_modules/.pnpm/text-hex@1.0.0/node_modules/text-hex/index.js"(exports, module) {
	/***
	* Convert string to hex color.
	*
	* @param {String} str Text to hash and convert to hex.
	* @returns {String}
	* @api public
	*/
	module.exports = function hex$1(str) {
		for (var i = 0, hash = 0; i < str.length; hash = str.charCodeAt(i++) + ((hash << 5) - hash));
		var color$1 = Math.floor(Math.abs(Math.sin(hash) * 1e4 % 1 * 16777216)).toString(16);
		return "#" + Array(6 - color$1.length + 1).join("0") + color$1;
	};
} });

//#endregion
//#region node_modules/.pnpm/colorspace@1.1.4/node_modules/colorspace/index.js
var require_colorspace = __commonJS({ "node_modules/.pnpm/colorspace@1.1.4/node_modules/colorspace/index.js"(exports, module) {
	var color = require_color(), hex = require_text_hex();
	/**
	* Generate a color for a given name. But be reasonably smart about it by
	* understanding name spaces and coloring each namespace a bit lighter so they
	* still have the same base color as the root.
	*
	* @param {string} namespace The namespace
	* @param {string} [delimiter] The delimiter
	* @returns {string} color
	*/
	module.exports = function colorspace$1(namespace, delimiter) {
		var split = namespace.split(delimiter || ":");
		var base = hex(split[0]);
		if (!split.length) return base;
		for (var i = 0, l = split.length - 1; i < l; i++) base = color(base).mix(color(hex(split[i + 1]))).saturate(1).hex();
		return base;
	};
} });

//#endregion
//#region node_modules/.pnpm/kuler@2.0.0/node_modules/kuler/index.js
var require_kuler = __commonJS({ "node_modules/.pnpm/kuler@2.0.0/node_modules/kuler/index.js"(exports, module) {
	/**
	* Kuler: Color text using CSS colors
	*
	* @constructor
	* @param {String} text The text that needs to be styled
	* @param {String} color Optional color for alternate API.
	* @api public
	*/
	function Kuler(text, color$1) {
		if (color$1) return new Kuler(text).style(color$1);
		if (!(this instanceof Kuler)) return new Kuler(text);
		this.text = text;
	}
	/**
	* ANSI color codes.
	*
	* @type {String}
	* @private
	*/
	Kuler.prototype.prefix = "\x1B[";
	Kuler.prototype.suffix = "m";
	/**
	* Parse a hex color string and parse it to it's RGB equiv.
	*
	* @param {String} color
	* @returns {Array}
	* @api private
	*/
	Kuler.prototype.hex = function hex$1(color$1) {
		color$1 = color$1[0] === "#" ? color$1.substring(1) : color$1;
		if (color$1.length === 3) {
			color$1 = color$1.split("");
			color$1[5] = color$1[2];
			color$1[4] = color$1[2];
			color$1[3] = color$1[1];
			color$1[2] = color$1[1];
			color$1[1] = color$1[0];
			color$1 = color$1.join("");
		}
		var r = color$1.substring(0, 2), g = color$1.substring(2, 4), b = color$1.substring(4, 6);
		return [
			parseInt(r, 16),
			parseInt(g, 16),
			parseInt(b, 16)
		];
	};
	/**
	* Transform a 255 RGB value to an RGV code.
	*
	* @param {Number} r Red color channel.
	* @param {Number} g Green color channel.
	* @param {Number} b Blue color channel.
	* @returns {String}
	* @api public
	*/
	Kuler.prototype.rgb = function rgb(r, g, b) {
		var red = r / 255 * 5, green = g / 255 * 5, blue = b / 255 * 5;
		return this.ansi(red, green, blue);
	};
	/**
	* Turns RGB 0-5 values into a single ANSI code.
	*
	* @param {Number} r Red color channel.
	* @param {Number} g Green color channel.
	* @param {Number} b Blue color channel.
	* @returns {String}
	* @api public
	*/
	Kuler.prototype.ansi = function ansi(r, g, b) {
		var red = Math.round(r), green = Math.round(g), blue = Math.round(b);
		return 16 + red * 36 + green * 6 + blue;
	};
	/**
	* Marks an end of color sequence.
	*
	* @returns {String} Reset sequence.
	* @api public
	*/
	Kuler.prototype.reset = function reset() {
		return this.prefix + "39;49" + this.suffix;
	};
	/**
	* Colour the terminal using CSS.
	*
	* @param {String} color The HEX color code.
	* @returns {String} the escape code.
	* @api public
	*/
	Kuler.prototype.style = function style(color$1) {
		return this.prefix + "38;5;" + this.rgb.apply(this, this.hex(color$1)) + this.suffix + this.text + this.reset();
	};
	module.exports = Kuler;
} });

//#endregion
//#region node_modules/.pnpm/@dabh+diagnostics@2.0.3/node_modules/@dabh/diagnostics/modifiers/namespace-ansi.js
var require_namespace_ansi = __commonJS({ "node_modules/.pnpm/@dabh+diagnostics@2.0.3/node_modules/@dabh/diagnostics/modifiers/namespace-ansi.js"(exports, module) {
	var colorspace = require_colorspace();
	var kuler = require_kuler();
	/**
	* Prefix the messages with a colored namespace.
	*
	* @param {Array} args The messages array that is getting written.
	* @param {Object} options Options for diagnostics.
	* @returns {Array} Altered messages array.
	* @public
	*/
	module.exports = function ansiModifier(args, options) {
		var namespace = options.namespace;
		var ansi = options.colors !== false ? kuler(namespace + ":", colorspace(namespace)) : namespace + ":";
		args[0] = ansi + " " + args[0];
		return args;
	};
} });

//#endregion
//#region node_modules/.pnpm/enabled@2.0.0/node_modules/enabled/index.js
var require_enabled = __commonJS({ "node_modules/.pnpm/enabled@2.0.0/node_modules/enabled/index.js"(exports, module) {
	/**
	* Checks if a given namespace is allowed by the given variable.
	*
	* @param {String} name namespace that should be included.
	* @param {String} variable Value that needs to be tested.
	* @returns {Boolean} Indication if namespace is enabled.
	* @public
	*/
	module.exports = function enabled$2(name$2, variable) {
		if (!variable) return false;
		var variables = variable.split(/[\s,]+/), i = 0;
		for (; i < variables.length; i++) {
			variable = variables[i].replace("*", ".*?");
			if ("-" === variable.charAt(0)) {
				if (new RegExp("^" + variable.substr(1) + "$").test(name$2)) return false;
				continue;
			}
			if (new RegExp("^" + variable + "$").test(name$2)) return true;
		}
		return false;
	};
} });

//#endregion
//#region node_modules/.pnpm/@dabh+diagnostics@2.0.3/node_modules/@dabh/diagnostics/adapters/index.js
var require_adapters = __commonJS({ "node_modules/.pnpm/@dabh+diagnostics@2.0.3/node_modules/@dabh/diagnostics/adapters/index.js"(exports, module) {
	var enabled = require_enabled();
	/**
	* Creates a new Adapter.
	*
	* @param {Function} fn Function that returns the value.
	* @returns {Function} The adapter logic.
	* @public
	*/
	module.exports = function create$2(fn) {
		return function adapter$1(namespace) {
			try {
				return enabled(namespace, fn());
			} catch (e) {}
			return false;
		};
	};
} });

//#endregion
//#region node_modules/.pnpm/@dabh+diagnostics@2.0.3/node_modules/@dabh/diagnostics/adapters/process.env.js
var require_process_env = __commonJS({ "node_modules/.pnpm/@dabh+diagnostics@2.0.3/node_modules/@dabh/diagnostics/adapters/process.env.js"(exports, module) {
	var adapter = require_adapters();
	/**
	* Extracts the values from process.env.
	*
	* @type {Function}
	* @public
	*/
	module.exports = adapter(function processenv() {
		return process.env.DEBUG || process.env.DIAGNOSTICS;
	});
} });

//#endregion
//#region node_modules/.pnpm/@dabh+diagnostics@2.0.3/node_modules/@dabh/diagnostics/logger/console.js
var require_console = __commonJS({ "node_modules/.pnpm/@dabh+diagnostics@2.0.3/node_modules/@dabh/diagnostics/logger/console.js"(exports, module) {
	/**
	* An idiot proof logger to be used as default. We've wrapped it in a try/catch
	* statement to ensure the environments without the `console` API do not crash
	* as well as an additional fix for ancient browsers like IE8 where the
	* `console.log` API doesn't have an `apply`, so we need to use the Function's
	* apply functionality to apply the arguments.
	*
	* @param {Object} meta Options of the logger.
	* @param {Array} messages The actuall message that needs to be logged.
	* @public
	*/
	module.exports = function(meta, messages) {
		try {
			Function.prototype.apply.call(console.log, console, messages);
		} catch (e) {}
	};
} });

//#endregion
//#region node_modules/.pnpm/@dabh+diagnostics@2.0.3/node_modules/@dabh/diagnostics/node/development.js
var require_development = __commonJS({ "node_modules/.pnpm/@dabh+diagnostics@2.0.3/node_modules/@dabh/diagnostics/node/development.js"(exports, module) {
	var create = require_diagnostics();
	var tty$2 = __require("tty").isatty(1);
	/**
	* Create a new diagnostics logger.
	*
	* @param {String} namespace The namespace it should enable.
	* @param {Object} options Additional options.
	* @returns {Function} The logger.
	* @public
	*/
	var diagnostics = create(function dev(namespace, options) {
		options = options || {};
		options.colors = "colors" in options ? options.colors : tty$2;
		options.namespace = namespace;
		options.prod = false;
		options.dev = true;
		if (!dev.enabled(namespace) && !(options.force || dev.force)) return dev.nope(options);
		return dev.yep(options);
	});
	diagnostics.modify(require_namespace_ansi());
	diagnostics.use(require_process_env());
	diagnostics.set(require_console());
	module.exports = diagnostics;
} });

//#endregion
//#region node_modules/.pnpm/@dabh+diagnostics@2.0.3/node_modules/@dabh/diagnostics/node/index.js
var require_node$1 = __commonJS({ "node_modules/.pnpm/@dabh+diagnostics@2.0.3/node_modules/@dabh/diagnostics/node/index.js"(exports, module) {
	if (process.env.NODE_ENV === "production") module.exports = require_production();
	else module.exports = require_development();
} });

//#endregion
//#region node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/tail-file.js
var require_tail_file = __commonJS({ "node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/tail-file.js"(exports, module) {
	const fs$7 = __require("fs");
	const { StringDecoder } = __require("string_decoder");
	const { Stream: Stream$10 } = require_readable();
	/**
	* Simple no-op function.
	* @returns {undefined}
	*/
	function noop$3() {}
	/**
	* TODO: add function description.
	* @param {Object} options - Options for tail.
	* @param {function} iter - Iterator function to execute on every line.
	* `tail -f` a file. Options must include file.
	* @returns {mixed} - TODO: add return description.
	*/
	module.exports = (options, iter) => {
		const buffer$1 = Buffer.alloc(64 * 1024);
		const decode$2 = new StringDecoder("utf8");
		const stream$3 = new Stream$10();
		let buff = "";
		let pos = 0;
		let row = 0;
		if (options.start === -1) delete options.start;
		stream$3.readable = true;
		stream$3.destroy = () => {
			stream$3.destroyed = true;
			stream$3.emit("end");
			stream$3.emit("close");
		};
		fs$7.open(options.file, "a+", "0644", (err, fd) => {
			if (err) {
				if (!iter) stream$3.emit("error", err);
				else iter(err);
				stream$3.destroy();
				return;
			}
			(function read() {
				if (stream$3.destroyed) {
					fs$7.close(fd, noop$3);
					return;
				}
				return fs$7.read(fd, buffer$1, 0, buffer$1.length, pos, (error$1, bytes) => {
					if (error$1) {
						if (!iter) stream$3.emit("error", error$1);
						else iter(error$1);
						stream$3.destroy();
						return;
					}
					if (!bytes) {
						if (buff) {
							if (options.start == null || row > options.start) if (!iter) stream$3.emit("line", buff);
							else iter(null, buff);
							row++;
							buff = "";
						}
						return setTimeout(read, 1e3);
					}
					let data = decode$2.write(buffer$1.slice(0, bytes));
					if (!iter) stream$3.emit("data", data);
					data = (buff + data).split(/\n+/);
					const l = data.length - 1;
					let i = 0;
					for (; i < l; i++) {
						if (options.start == null || row > options.start) if (!iter) stream$3.emit("line", data[i]);
						else iter(null, data[i]);
						row++;
					}
					buff = data[l];
					pos += bytes;
					return read();
				});
			})();
		});
		if (!iter) return stream$3;
		return stream$3.destroy;
	};
} });

//#endregion
//#region node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/transports/file.js
var require_file = __commonJS({ "node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/transports/file.js"(exports, module) {
	const fs$6 = __require("fs");
	const path$4 = __require("path");
	const asyncSeries = require_series();
	const zlib$2 = __require("zlib");
	const { MESSAGE: MESSAGE$1 } = require_triple_beam();
	const { Stream: Stream$9, PassThrough } = require_readable();
	const TransportStream$2 = require_winston_transport();
	const debug$17 = require_node$1()("winston:file");
	const os$4 = __require("os");
	const tailFile = require_tail_file();
	/**
	* Transport for outputting to a local log file.
	* @type {File}
	* @extends {TransportStream}
	*/
	module.exports = class File$3 extends TransportStream$2 {
		/**
		* Constructor function for the File transport object responsible for
		* persisting log messages and metadata to one or more files.
		* @param {Object} options - Options for this instance.
		*/
		constructor(options = {}) {
			super(options);
			this.name = options.name || "file";
			function throwIf(target, ...args) {
				args.slice(1).forEach((name$2) => {
					if (options[name$2]) throw new Error(`Cannot set ${name$2} and ${target} together`);
				});
			}
			this._stream = new PassThrough();
			this._stream.setMaxListeners(30);
			this._onError = this._onError.bind(this);
			if (options.filename || options.dirname) {
				throwIf("filename or dirname", "stream");
				this._basename = this.filename = options.filename ? path$4.basename(options.filename) : "winston.log";
				this.dirname = options.dirname || path$4.dirname(options.filename);
				this.options = options.options || { flags: "a" };
			} else if (options.stream) {
				console.warn("options.stream will be removed in winston@4. Use winston.transports.Stream");
				throwIf("stream", "filename", "maxsize");
				this._dest = this._stream.pipe(this._setupStream(options.stream));
				this.dirname = path$4.dirname(this._dest.path);
			} else throw new Error("Cannot log to file without filename or stream.");
			this.maxsize = options.maxsize || null;
			this.rotationFormat = options.rotationFormat || false;
			this.zippedArchive = options.zippedArchive || false;
			this.maxFiles = options.maxFiles || null;
			this.eol = typeof options.eol === "string" ? options.eol : os$4.EOL;
			this.tailable = options.tailable || false;
			this.lazy = options.lazy || false;
			this._size = 0;
			this._pendingSize = 0;
			this._created = 0;
			this._drain = false;
			this._opening = false;
			this._ending = false;
			this._fileExist = false;
			if (this.dirname) this._createLogDirIfNotExist(this.dirname);
			if (!this.lazy) this.open();
		}
		finishIfEnding() {
			if (this._ending) if (this._opening) this.once("open", () => {
				this._stream.once("finish", () => this.emit("finish"));
				setImmediate(() => this._stream.end());
			});
			else {
				this._stream.once("finish", () => this.emit("finish"));
				setImmediate(() => this._stream.end());
			}
		}
		/**
		* Core logging method exposed to Winston. Metadata is optional.
		* @param {Object} info - TODO: add param description.
		* @param {Function} callback - TODO: add param description.
		* @returns {undefined}
		*/
		log(info$1, callback = () => {}) {
			if (this.silent) {
				callback();
				return true;
			}
			if (this._drain) {
				this._stream.once("drain", () => {
					this._drain = false;
					this.log(info$1, callback);
				});
				return;
			}
			if (this._rotate) {
				this._stream.once("rotate", () => {
					this._rotate = false;
					this.log(info$1, callback);
				});
				return;
			}
			if (this.lazy) {
				if (!this._fileExist) {
					if (!this._opening) this.open();
					this.once("open", () => {
						this._fileExist = true;
						this.log(info$1, callback);
						return;
					});
					return;
				}
				if (this._needsNewFile(this._pendingSize)) {
					this._dest.once("close", () => {
						if (!this._opening) this.open();
						this.once("open", () => {
							this.log(info$1, callback);
							return;
						});
						return;
					});
					return;
				}
			}
			const output = `${info$1[MESSAGE$1]}${this.eol}`;
			const bytes = Buffer.byteLength(output);
			function logged() {
				this._size += bytes;
				this._pendingSize -= bytes;
				debug$17("logged %s %s", this._size, output);
				this.emit("logged", info$1);
				if (this._rotate) return;
				if (this._opening) return;
				if (!this._needsNewFile()) return;
				if (this.lazy) {
					this._endStream(() => {
						this.emit("fileclosed");
					});
					return;
				}
				this._rotate = true;
				this._endStream(() => this._rotateFile());
			}
			this._pendingSize += bytes;
			if (this._opening && !this.rotatedWhileOpening && this._needsNewFile(this._size + this._pendingSize)) this.rotatedWhileOpening = true;
			const written = this._stream.write(output, logged.bind(this));
			if (!written) {
				this._drain = true;
				this._stream.once("drain", () => {
					this._drain = false;
					callback();
				});
			} else callback();
			debug$17("written", written, this._drain);
			this.finishIfEnding();
			return written;
		}
		/**
		* Query the transport. Options object is optional.
		* @param {Object} options - Loggly-like query options for this instance.
		* @param {function} callback - Continuation to respond to when complete.
		* TODO: Refactor me.
		*/
		query(options, callback) {
			if (typeof options === "function") {
				callback = options;
				options = {};
			}
			options = normalizeQuery(options);
			const file = path$4.join(this.dirname, this.filename);
			let buff = "";
			let results = [];
			let row = 0;
			const stream$3 = fs$6.createReadStream(file, { encoding: "utf8" });
			stream$3.on("error", (err) => {
				if (stream$3.readable) stream$3.destroy();
				if (!callback) return;
				return err.code !== "ENOENT" ? callback(err) : callback(null, results);
			});
			stream$3.on("data", (data) => {
				data = (buff + data).split(/\n+/);
				const l = data.length - 1;
				let i = 0;
				for (; i < l; i++) {
					if (!options.start || row >= options.start) add(data[i]);
					row++;
				}
				buff = data[l];
			});
			stream$3.on("close", () => {
				if (buff) add(buff, true);
				if (options.order === "desc") results = results.reverse();
				if (callback) callback(null, results);
			});
			function add(buff$1, attempt) {
				try {
					const log$1 = JSON.parse(buff$1);
					if (check(log$1)) push(log$1);
				} catch (e) {
					if (!attempt) stream$3.emit("error", e);
				}
			}
			function push(log$1) {
				if (options.rows && results.length >= options.rows && options.order !== "desc") {
					if (stream$3.readable) stream$3.destroy();
					return;
				}
				if (options.fields) log$1 = options.fields.reduce((obj, key$1) => {
					obj[key$1] = log$1[key$1];
					return obj;
				}, {});
				if (options.order === "desc") {
					if (results.length >= options.rows) results.shift();
				}
				results.push(log$1);
			}
			function check(log$1) {
				if (!log$1) return;
				if (typeof log$1 !== "object") return;
				const time = new Date(log$1.timestamp);
				if (options.from && time < options.from || options.until && time > options.until || options.level && options.level !== log$1.level) return;
				return true;
			}
			function normalizeQuery(options$1) {
				options$1 = options$1 || {};
				options$1.rows = options$1.rows || options$1.limit || 10;
				options$1.start = options$1.start || 0;
				options$1.until = options$1.until || new Date();
				if (typeof options$1.until !== "object") options$1.until = new Date(options$1.until);
				options$1.from = options$1.from || options$1.until - 24 * 60 * 60 * 1e3;
				if (typeof options$1.from !== "object") options$1.from = new Date(options$1.from);
				options$1.order = options$1.order || "desc";
				return options$1;
			}
		}
		/**
		* Returns a log stream for this transport. Options object is optional.
		* @param {Object} options - Stream options for this instance.
		* @returns {Stream} - TODO: add return description.
		* TODO: Refactor me.
		*/
		stream(options = {}) {
			const file = path$4.join(this.dirname, this.filename);
			const stream$3 = new Stream$9();
			const tail = {
				file,
				start: options.start
			};
			stream$3.destroy = tailFile(tail, (err, line) => {
				if (err) return stream$3.emit("error", err);
				try {
					stream$3.emit("data", line);
					line = JSON.parse(line);
					stream$3.emit("log", line);
				} catch (e) {
					stream$3.emit("error", e);
				}
			});
			return stream$3;
		}
		/**
		* Checks to see the filesize of.
		* @returns {undefined}
		*/
		open() {
			if (!this.filename) return;
			if (this._opening) return;
			this._opening = true;
			this.stat((err, size) => {
				if (err) return this.emit("error", err);
				debug$17("stat done: %s { size: %s }", this.filename, size);
				this._size = size;
				this._dest = this._createStream(this._stream);
				this._opening = false;
				this.once("open", () => {
					if (!this._stream.emit("rotate")) this._rotate = false;
				});
			});
		}
		/**
		* Stat the file and assess information in order to create the proper stream.
		* @param {function} callback - TODO: add param description.
		* @returns {undefined}
		*/
		stat(callback) {
			const target = this._getFile();
			const fullpath = path$4.join(this.dirname, target);
			fs$6.stat(fullpath, (err, stat) => {
				if (err && err.code === "ENOENT") {
					debug$17("ENOENT\xA0ok", fullpath);
					this.filename = target;
					return callback(null, 0);
				}
				if (err) {
					debug$17(`err ${err.code} ${fullpath}`);
					return callback(err);
				}
				if (!stat || this._needsNewFile(stat.size)) return this._incFile(() => this.stat(callback));
				this.filename = target;
				callback(null, stat.size);
			});
		}
		/**
		* Closes the stream associated with this instance.
		* @param {function} cb - TODO: add param description.
		* @returns {undefined}
		*/
		close(cb) {
			if (!this._stream) return;
			this._stream.end(() => {
				if (cb) cb();
				this.emit("flush");
				this.emit("closed");
			});
		}
		/**
		* TODO: add method description.
		* @param {number} size - TODO: add param description.
		* @returns {undefined}
		*/
		_needsNewFile(size) {
			size = size || this._size;
			return this.maxsize && size >= this.maxsize;
		}
		/**
		* TODO: add method description.
		* @param {Error} err - TODO: add param description.
		* @returns {undefined}
		*/
		_onError(err) {
			this.emit("error", err);
		}
		/**
		* TODO: add method description.
		* @param {Stream} stream - TODO: add param description.
		* @returns {mixed} - TODO: add return description.
		*/
		_setupStream(stream$3) {
			stream$3.on("error", this._onError);
			return stream$3;
		}
		/**
		* TODO: add method description.
		* @param {Stream} stream - TODO: add param description.
		* @returns {mixed} - TODO: add return description.
		*/
		_cleanupStream(stream$3) {
			stream$3.removeListener("error", this._onError);
			stream$3.destroy();
			return stream$3;
		}
		/**
		* TODO: add method description.
		*/
		_rotateFile() {
			this._incFile(() => this.open());
		}
		/**
		* Unpipe from the stream that has been marked as full and end it so it
		* flushes to disk.
		*
		* @param {function} callback - Callback for when the current file has closed.
		* @private
		*/
		_endStream(callback = () => {}) {
			if (this._dest) {
				this._stream.unpipe(this._dest);
				this._dest.end(() => {
					this._cleanupStream(this._dest);
					callback();
				});
			} else callback();
		}
		/**
		* Returns the WritableStream for the active file on this instance. If we
		* should gzip the file then a zlib stream is returned.
		*
		* @param {ReadableStream} source –PassThrough to pipe to the file when open.
		* @returns {WritableStream} Stream that writes to disk for the active file.
		*/
		_createStream(source) {
			const fullpath = path$4.join(this.dirname, this.filename);
			debug$17("create stream start", fullpath, this.options);
			const dest = fs$6.createWriteStream(fullpath, this.options).on("error", (err) => debug$17(err)).on("close", () => debug$17("close", dest.path, dest.bytesWritten)).on("open", () => {
				debug$17("file open ok", fullpath);
				this.emit("open", fullpath);
				source.pipe(dest);
				if (this.rotatedWhileOpening) {
					this._stream = new PassThrough();
					this._stream.setMaxListeners(30);
					this._rotateFile();
					this.rotatedWhileOpening = false;
					this._cleanupStream(dest);
					source.end();
				}
			});
			debug$17("create stream ok", fullpath);
			return dest;
		}
		/**
		* TODO: add method description.
		* @param {function} callback - TODO: add param description.
		* @returns {undefined}
		*/
		_incFile(callback) {
			debug$17("_incFile", this.filename);
			const ext = path$4.extname(this._basename);
			const basename$2 = path$4.basename(this._basename, ext);
			const tasks = [];
			if (this.zippedArchive) tasks.push(function(cb) {
				const num = this._created > 0 && !this.tailable ? this._created : "";
				this._compressFile(path$4.join(this.dirname, `${basename$2}${num}${ext}`), path$4.join(this.dirname, `${basename$2}${num}${ext}.gz`), cb);
			}.bind(this));
			tasks.push(function(cb) {
				if (!this.tailable) {
					this._created += 1;
					this._checkMaxFilesIncrementing(ext, basename$2, cb);
				} else this._checkMaxFilesTailable(ext, basename$2, cb);
			}.bind(this));
			asyncSeries(tasks, callback);
		}
		/**
		* Gets the next filename to use for this instance in the case that log
		* filesizes are being capped.
		* @returns {string} - TODO: add return description.
		* @private
		*/
		_getFile() {
			const ext = path$4.extname(this._basename);
			const basename$2 = path$4.basename(this._basename, ext);
			const isRotation = this.rotationFormat ? this.rotationFormat() : this._created;
			return !this.tailable && this._created ? `${basename$2}${isRotation}${ext}` : `${basename$2}${ext}`;
		}
		/**
		* Increment the number of files created or checked by this instance.
		* @param {mixed} ext - TODO: add param description.
		* @param {mixed} basename - TODO: add param description.
		* @param {mixed} callback - TODO: add param description.
		* @returns {undefined}
		* @private
		*/
		_checkMaxFilesIncrementing(ext, basename$2, callback) {
			if (!this.maxFiles || this._created < this.maxFiles) return setImmediate(callback);
			const oldest = this._created - this.maxFiles;
			const isOldest = oldest !== 0 ? oldest : "";
			const isZipped = this.zippedArchive ? ".gz" : "";
			const filePath = `${basename$2}${isOldest}${ext}${isZipped}`;
			const target = path$4.join(this.dirname, filePath);
			fs$6.unlink(target, callback);
		}
		/**
		* Roll files forward based on integer, up to maxFiles. e.g. if base if
		* file.log and it becomes oversized, roll to file1.log, and allow file.log
		* to be re-used. If file is oversized again, roll file1.log to file2.log,
		* roll file.log to file1.log, and so on.
		* @param {mixed} ext - TODO: add param description.
		* @param {mixed} basename - TODO: add param description.
		* @param {mixed} callback - TODO: add param description.
		* @returns {undefined}
		* @private
		*/
		_checkMaxFilesTailable(ext, basename$2, callback) {
			const tasks = [];
			if (!this.maxFiles) return;
			const isZipped = this.zippedArchive ? ".gz" : "";
			for (let x = this.maxFiles - 1; x > 1; x--) tasks.push(function(i, cb) {
				let fileName = `${basename$2}${i - 1}${ext}${isZipped}`;
				const tmppath = path$4.join(this.dirname, fileName);
				fs$6.exists(tmppath, (exists$1) => {
					if (!exists$1) return cb(null);
					fileName = `${basename$2}${i}${ext}${isZipped}`;
					fs$6.rename(tmppath, path$4.join(this.dirname, fileName), cb);
				});
			}.bind(this, x));
			asyncSeries(tasks, () => {
				fs$6.rename(path$4.join(this.dirname, `${basename$2}${ext}${isZipped}`), path$4.join(this.dirname, `${basename$2}1${ext}${isZipped}`), callback);
			});
		}
		/**
		* Compresses src to dest with gzip and unlinks src
		* @param {string} src - path to source file.
		* @param {string} dest - path to zipped destination file.
		* @param {Function} callback - callback called after file has been compressed.
		* @returns {undefined}
		* @private
		*/
		_compressFile(src$2, dest, callback) {
			fs$6.access(src$2, fs$6.F_OK, (err) => {
				if (err) return callback();
				var gzip = zlib$2.createGzip();
				var inp = fs$6.createReadStream(src$2);
				var out = fs$6.createWriteStream(dest);
				out.on("finish", () => {
					fs$6.unlink(src$2, callback);
				});
				inp.pipe(gzip).pipe(out);
			});
		}
		_createLogDirIfNotExist(dirPath) {
			if (!fs$6.existsSync(dirPath)) fs$6.mkdirSync(dirPath, { recursive: true });
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/transports/http.js
var require_http = __commonJS({ "node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/transports/http.js"(exports, module) {
	const http$5 = __require("http");
	const https$5 = __require("https");
	const { Stream: Stream$8 } = require_readable();
	const TransportStream$1 = require_winston_transport();
	const { configure } = require_safe_stable_stringify();
	/**
	* Transport for outputting to a json-rpc server.
	* @type {Stream}
	* @extends {TransportStream}
	*/
	module.exports = class Http extends TransportStream$1 {
		/**
		* Constructor function for the Http transport object responsible for
		* persisting log messages and metadata to a terminal or TTY.
		* @param {!Object} [options={}] - Options for this instance.
		*/
		constructor(options = {}) {
			super(options);
			this.options = options;
			this.name = options.name || "http";
			this.ssl = !!options.ssl;
			this.host = options.host || "localhost";
			this.port = options.port;
			this.auth = options.auth;
			this.path = options.path || "";
			this.maximumDepth = options.maximumDepth;
			this.agent = options.agent;
			this.headers = options.headers || {};
			this.headers["content-type"] = "application/json";
			this.batch = options.batch || false;
			this.batchInterval = options.batchInterval || 5e3;
			this.batchCount = options.batchCount || 10;
			this.batchOptions = [];
			this.batchTimeoutID = -1;
			this.batchCallback = {};
			if (!this.port) this.port = this.ssl ? 443 : 80;
		}
		/**
		* Core logging method exposed to Winston.
		* @param {Object} info - TODO: add param description.
		* @param {function} callback - TODO: add param description.
		* @returns {undefined}
		*/
		log(info$1, callback) {
			this._request(info$1, null, null, (err, res) => {
				if (res && res.statusCode !== 200) err = new Error(`Invalid HTTP Status Code: ${res.statusCode}`);
				if (err) this.emit("warn", err);
				else this.emit("logged", info$1);
			});
			if (callback) setImmediate(callback);
		}
		/**
		* Query the transport. Options object is optional.
		* @param {Object} options -  Loggly-like query options for this instance.
		* @param {function} callback - Continuation to respond to when complete.
		* @returns {undefined}
		*/
		query(options, callback) {
			if (typeof options === "function") {
				callback = options;
				options = {};
			}
			options = {
				method: "query",
				params: this.normalizeQuery(options)
			};
			const auth = options.params.auth || null;
			delete options.params.auth;
			const path$10 = options.params.path || null;
			delete options.params.path;
			this._request(options, auth, path$10, (err, res, body) => {
				if (res && res.statusCode !== 200) err = new Error(`Invalid HTTP Status Code: ${res.statusCode}`);
				if (err) return callback(err);
				if (typeof body === "string") try {
					body = JSON.parse(body);
				} catch (e) {
					return callback(e);
				}
				callback(null, body);
			});
		}
		/**
		* Returns a log stream for this transport. Options object is optional.
		* @param {Object} options - Stream options for this instance.
		* @returns {Stream} - TODO: add return description
		*/
		stream(options = {}) {
			const stream$3 = new Stream$8();
			options = {
				method: "stream",
				params: options
			};
			const path$10 = options.params.path || null;
			delete options.params.path;
			const auth = options.params.auth || null;
			delete options.params.auth;
			let buff = "";
			const req = this._request(options, auth, path$10);
			stream$3.destroy = () => req.destroy();
			req.on("data", (data) => {
				data = (buff + data).split(/\n+/);
				const l = data.length - 1;
				let i = 0;
				for (; i < l; i++) try {
					stream$3.emit("log", JSON.parse(data[i]));
				} catch (e) {
					stream$3.emit("error", e);
				}
				buff = data[l];
			});
			req.on("error", (err) => stream$3.emit("error", err));
			return stream$3;
		}
		/**
		* Make a request to a winstond server or any http server which can
		* handle json-rpc.
		* @param {function} options - Options to sent the request.
		* @param {Object?} auth - authentication options
		* @param {string} path - request path
		* @param {function} callback - Continuation to respond to when complete.
		*/
		_request(options, auth, path$10, callback) {
			options = options || {};
			auth = auth || this.auth;
			path$10 = path$10 || this.path || "";
			if (this.batch) this._doBatch(options, callback, auth, path$10);
			else this._doRequest(options, callback, auth, path$10);
		}
		/**
		* Send or memorize the options according to batch configuration
		* @param {function} options - Options to sent the request.
		* @param {function} callback - Continuation to respond to when complete.
		* @param {Object?} auth - authentication options
		* @param {string} path - request path
		*/
		_doBatch(options, callback, auth, path$10) {
			this.batchOptions.push(options);
			if (this.batchOptions.length === 1) {
				const me = this;
				this.batchCallback = callback;
				this.batchTimeoutID = setTimeout(function() {
					me.batchTimeoutID = -1;
					me._doBatchRequest(me.batchCallback, auth, path$10);
				}, this.batchInterval);
			}
			if (this.batchOptions.length === this.batchCount) this._doBatchRequest(this.batchCallback, auth, path$10);
		}
		/**
		* Initiate a request with the memorized batch options, stop the batch timeout
		* @param {function} callback - Continuation to respond to when complete.
		* @param {Object?} auth - authentication options
		* @param {string} path - request path
		*/
		_doBatchRequest(callback, auth, path$10) {
			if (this.batchTimeoutID > 0) {
				clearTimeout(this.batchTimeoutID);
				this.batchTimeoutID = -1;
			}
			const batchOptionsCopy = this.batchOptions.slice();
			this.batchOptions = [];
			this._doRequest(batchOptionsCopy, callback, auth, path$10);
		}
		/**
		* Make a request to a winstond server or any http server which can
		* handle json-rpc.
		* @param {function} options - Options to sent the request.
		* @param {function} callback - Continuation to respond to when complete.
		* @param {Object?} auth - authentication options
		* @param {string} path - request path
		*/
		_doRequest(options, callback, auth, path$10) {
			const headers = Object.assign({}, this.headers);
			if (auth && auth.bearer) headers.Authorization = `Bearer ${auth.bearer}`;
			const req = (this.ssl ? https$5 : http$5).request({
				...this.options,
				method: "POST",
				host: this.host,
				port: this.port,
				path: `/${path$10.replace(/^\//, "")}`,
				headers,
				auth: auth && auth.username && auth.password ? `${auth.username}:${auth.password}` : "",
				agent: this.agent
			});
			req.on("error", callback);
			req.on("response", (res) => res.on("end", () => callback(null, res)).resume());
			const jsonStringify$2 = configure({ ...this.maximumDepth && { maximumDepth: this.maximumDepth } });
			req.end(Buffer.from(jsonStringify$2(options, this.options.replacer), "utf8"));
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/is-stream@2.0.1/node_modules/is-stream/index.js
var require_is_stream = __commonJS({ "node_modules/.pnpm/is-stream@2.0.1/node_modules/is-stream/index.js"(exports, module) {
	const isStream$3 = (stream$3) => stream$3 !== null && typeof stream$3 === "object" && typeof stream$3.pipe === "function";
	isStream$3.writable = (stream$3) => isStream$3(stream$3) && stream$3.writable !== false && typeof stream$3._write === "function" && typeof stream$3._writableState === "object";
	isStream$3.readable = (stream$3) => isStream$3(stream$3) && stream$3.readable !== false && typeof stream$3._read === "function" && typeof stream$3._readableState === "object";
	isStream$3.duplex = (stream$3) => isStream$3.writable(stream$3) && isStream$3.readable(stream$3);
	isStream$3.transform = (stream$3) => isStream$3.duplex(stream$3) && typeof stream$3._transform === "function";
	module.exports = isStream$3;
} });

//#endregion
//#region node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/transports/stream.js
var require_stream = __commonJS({ "node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/transports/stream.js"(exports, module) {
	const isStream$2 = require_is_stream();
	const { MESSAGE } = require_triple_beam();
	const os$3 = __require("os");
	const TransportStream = require_winston_transport();
	/**
	* Transport for outputting to any arbitrary stream.
	* @type {Stream}
	* @extends {TransportStream}
	*/
	module.exports = class Stream$14 extends TransportStream {
		/**
		* Constructor function for the Console transport object responsible for
		* persisting log messages and metadata to a terminal or TTY.
		* @param {!Object} [options={}] - Options for this instance.
		*/
		constructor(options = {}) {
			super(options);
			if (!options.stream || !isStream$2(options.stream)) throw new Error("options.stream is required.");
			this._stream = options.stream;
			this._stream.setMaxListeners(Infinity);
			this.isObjectMode = options.stream._writableState.objectMode;
			this.eol = typeof options.eol === "string" ? options.eol : os$3.EOL;
		}
		/**
		* Core logging method exposed to Winston.
		* @param {Object} info - TODO: add param description.
		* @param {Function} callback - TODO: add param description.
		* @returns {undefined}
		*/
		log(info$1, callback) {
			setImmediate(() => this.emit("logged", info$1));
			if (this.isObjectMode) {
				this._stream.write(info$1);
				if (callback) callback();
				return;
			}
			this._stream.write(`${info$1[MESSAGE]}${this.eol}`);
			if (callback) callback();
			return;
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/transports/index.js
var require_transports = __commonJS({ "node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/transports/index.js"(exports) {
	/**
	* TODO: add property description.
	* @type {Console}
	*/
	Object.defineProperty(exports, "Console", {
		configurable: true,
		enumerable: true,
		get() {
			return require_console$1();
		}
	});
	/**
	* TODO: add property description.
	* @type {File}
	*/
	Object.defineProperty(exports, "File", {
		configurable: true,
		enumerable: true,
		get() {
			return require_file();
		}
	});
	/**
	* TODO: add property description.
	* @type {Http}
	*/
	Object.defineProperty(exports, "Http", {
		configurable: true,
		enumerable: true,
		get() {
			return require_http();
		}
	});
	/**
	* TODO: add property description.
	* @type {Stream}
	*/
	Object.defineProperty(exports, "Stream", {
		configurable: true,
		enumerable: true,
		get() {
			return require_stream();
		}
	});
} });

//#endregion
//#region node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/config/index.js
var require_config = __commonJS({ "node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/config/index.js"(exports) {
	const logform$1 = require_logform();
	const { configs } = require_triple_beam();
	/**
	* Export config set for the CLI.
	* @type {Object}
	*/
	exports.cli = logform$1.levels(configs.cli);
	/**
	* Export config set for npm.
	* @type {Object}
	*/
	exports.npm = logform$1.levels(configs.npm);
	/**
	* Export config set for the syslog.
	* @type {Object}
	*/
	exports.syslog = logform$1.levels(configs.syslog);
	/**
	* Hoist addColors from logform where it was refactored into in winston@3.
	* @type {Object}
	*/
	exports.addColors = logform$1.levels;
} });

//#endregion
//#region node_modules/.pnpm/async@3.2.6/node_modules/async/eachOf.js
var require_eachOf = __commonJS({ "node_modules/.pnpm/async@3.2.6/node_modules/async/eachOf.js"(exports, module) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var _isArrayLike = require_isArrayLike();
	var _isArrayLike2 = _interopRequireDefault$1(_isArrayLike);
	var _breakLoop = require_breakLoop();
	var _breakLoop2 = _interopRequireDefault$1(_breakLoop);
	var _eachOfLimit = require_eachOfLimit();
	var _eachOfLimit2 = _interopRequireDefault$1(_eachOfLimit);
	var _once = require_once();
	var _once2 = _interopRequireDefault$1(_once);
	var _onlyOnce = require_onlyOnce();
	var _onlyOnce2 = _interopRequireDefault$1(_onlyOnce);
	var _wrapAsync$1 = require_wrapAsync();
	var _wrapAsync2$1 = _interopRequireDefault$1(_wrapAsync$1);
	var _awaitify$1 = require_awaitify();
	var _awaitify2$1 = _interopRequireDefault$1(_awaitify$1);
	function _interopRequireDefault$1(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}
	function eachOfArrayLike(coll, iteratee, callback) {
		callback = (0, _once2.default)(callback);
		var index = 0, completed = 0, { length } = coll, canceled = false;
		if (length === 0) callback(null);
		function iteratorCallback(err, value) {
			if (err === false) canceled = true;
			if (canceled === true) return;
			if (err) callback(err);
			else if (++completed === length || value === _breakLoop2.default) callback(null);
		}
		for (; index < length; index++) iteratee(coll[index], index, (0, _onlyOnce2.default)(iteratorCallback));
	}
	function eachOfGeneric(coll, iteratee, callback) {
		return (0, _eachOfLimit2.default)(coll, Infinity, iteratee, callback);
	}
	/**
	* Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument
	* to the iteratee.
	*
	* @name eachOf
	* @static
	* @memberOf module:Collections
	* @method
	* @alias forEachOf
	* @category Collection
	* @see [async.each]{@link module:Collections.each}
	* @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
	* @param {AsyncFunction} iteratee - A function to apply to each
	* item in `coll`.
	* The `key` is the item's key, or index in the case of an array.
	* Invoked with (item, key, callback).
	* @param {Function} [callback] - A callback which is called when all
	* `iteratee` functions have finished, or an error occurs. Invoked with (err).
	* @returns {Promise} a promise, if a callback is omitted
	* @example
	*
	* // dev.json is a file containing a valid json object config for dev environment
	* // dev.json is a file containing a valid json object config for test environment
	* // prod.json is a file containing a valid json object config for prod environment
	* // invalid.json is a file with a malformed json object
	*
	* let configs = {}; //global variable
	* let validConfigFileMap = {dev: 'dev.json', test: 'test.json', prod: 'prod.json'};
	* let invalidConfigFileMap = {dev: 'dev.json', test: 'test.json', invalid: 'invalid.json'};
	*
	* // asynchronous function that reads a json file and parses the contents as json object
	* function parseFile(file, key, callback) {
	*     fs.readFile(file, "utf8", function(err, data) {
	*         if (err) return calback(err);
	*         try {
	*             configs[key] = JSON.parse(data);
	*         } catch (e) {
	*             return callback(e);
	*         }
	*         callback();
	*     });
	* }
	*
	* // Using callbacks
	* async.forEachOf(validConfigFileMap, parseFile, function (err) {
	*     if (err) {
	*         console.error(err);
	*     } else {
	*         console.log(configs);
	*         // configs is now a map of JSON data, e.g.
	*         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}
	*     }
	* });
	*
	* //Error handing
	* async.forEachOf(invalidConfigFileMap, parseFile, function (err) {
	*     if (err) {
	*         console.error(err);
	*         // JSON parse error exception
	*     } else {
	*         console.log(configs);
	*     }
	* });
	*
	* // Using Promises
	* async.forEachOf(validConfigFileMap, parseFile)
	* .then( () => {
	*     console.log(configs);
	*     // configs is now a map of JSON data, e.g.
	*     // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}
	* }).catch( err => {
	*     console.error(err);
	* });
	*
	* //Error handing
	* async.forEachOf(invalidConfigFileMap, parseFile)
	* .then( () => {
	*     console.log(configs);
	* }).catch( err => {
	*     console.error(err);
	*     // JSON parse error exception
	* });
	*
	* // Using async/await
	* async () => {
	*     try {
	*         let result = await async.forEachOf(validConfigFileMap, parseFile);
	*         console.log(configs);
	*         // configs is now a map of JSON data, e.g.
	*         // { dev: //parsed dev.json, test: //parsed test.json, prod: //parsed prod.json}
	*     }
	*     catch (err) {
	*         console.log(err);
	*     }
	* }
	*
	* //Error handing
	* async () => {
	*     try {
	*         let result = await async.forEachOf(invalidConfigFileMap, parseFile);
	*         console.log(configs);
	*     }
	*     catch (err) {
	*         console.log(err);
	*         // JSON parse error exception
	*     }
	* }
	*
	*/
	function eachOf(coll, iteratee, callback) {
		var eachOfImplementation = (0, _isArrayLike2.default)(coll) ? eachOfArrayLike : eachOfGeneric;
		return eachOfImplementation(coll, (0, _wrapAsync2$1.default)(iteratee), callback);
	}
	exports.default = (0, _awaitify2$1.default)(eachOf, 3);
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/.pnpm/async@3.2.6/node_modules/async/internal/withoutIndex.js
var require_withoutIndex = __commonJS({ "node_modules/.pnpm/async@3.2.6/node_modules/async/internal/withoutIndex.js"(exports, module) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = _withoutIndex$1;
	function _withoutIndex$1(iteratee) {
		return (value, index, callback) => iteratee(value, callback);
	}
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/.pnpm/async@3.2.6/node_modules/async/forEach.js
var require_forEach = __commonJS({ "node_modules/.pnpm/async@3.2.6/node_modules/async/forEach.js"(exports, module) {
	Object.defineProperty(exports, "__esModule", { value: true });
	var _eachOf = require_eachOf();
	var _eachOf2 = _interopRequireDefault(_eachOf);
	var _withoutIndex = require_withoutIndex();
	var _withoutIndex2 = _interopRequireDefault(_withoutIndex);
	var _wrapAsync = require_wrapAsync();
	var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
	var _awaitify = require_awaitify();
	var _awaitify2 = _interopRequireDefault(_awaitify);
	function _interopRequireDefault(obj) {
		return obj && obj.__esModule ? obj : { default: obj };
	}
	/**
	* Applies the function `iteratee` to each item in `coll`, in parallel.
	* The `iteratee` is called with an item from the list, and a callback for when
	* it has finished. If the `iteratee` passes an error to its `callback`, the
	* main `callback` (for the `each` function) is immediately called with the
	* error.
	*
	* Note, that since this function applies `iteratee` to each item in parallel,
	* there is no guarantee that the iteratee functions will complete in order.
	*
	* @name each
	* @static
	* @memberOf module:Collections
	* @method
	* @alias forEach
	* @category Collection
	* @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.
	* @param {AsyncFunction} iteratee - An async function to apply to
	* each item in `coll`. Invoked with (item, callback).
	* The array index is not passed to the iteratee.
	* If you need the index, use `eachOf`.
	* @param {Function} [callback] - A callback which is called when all
	* `iteratee` functions have finished, or an error occurs. Invoked with (err).
	* @returns {Promise} a promise, if a callback is omitted
	* @example
	*
	* // dir1 is a directory that contains file1.txt, file2.txt
	* // dir2 is a directory that contains file3.txt, file4.txt
	* // dir3 is a directory that contains file5.txt
	* // dir4 does not exist
	*
	* const fileList = [ 'dir1/file2.txt', 'dir2/file3.txt', 'dir/file5.txt'];
	* const withMissingFileList = ['dir1/file1.txt', 'dir4/file2.txt'];
	*
	* // asynchronous function that deletes a file
	* const deleteFile = function(file, callback) {
	*     fs.unlink(file, callback);
	* };
	*
	* // Using callbacks
	* async.each(fileList, deleteFile, function(err) {
	*     if( err ) {
	*         console.log(err);
	*     } else {
	*         console.log('All files have been deleted successfully');
	*     }
	* });
	*
	* // Error Handling
	* async.each(withMissingFileList, deleteFile, function(err){
	*     console.log(err);
	*     // [ Error: ENOENT: no such file or directory ]
	*     // since dir4/file2.txt does not exist
	*     // dir1/file1.txt could have been deleted
	* });
	*
	* // Using Promises
	* async.each(fileList, deleteFile)
	* .then( () => {
	*     console.log('All files have been deleted successfully');
	* }).catch( err => {
	*     console.log(err);
	* });
	*
	* // Error Handling
	* async.each(fileList, deleteFile)
	* .then( () => {
	*     console.log('All files have been deleted successfully');
	* }).catch( err => {
	*     console.log(err);
	*     // [ Error: ENOENT: no such file or directory ]
	*     // since dir4/file2.txt does not exist
	*     // dir1/file1.txt could have been deleted
	* });
	*
	* // Using async/await
	* async () => {
	*     try {
	*         await async.each(files, deleteFile);
	*     }
	*     catch (err) {
	*         console.log(err);
	*     }
	* }
	*
	* // Error Handling
	* async () => {
	*     try {
	*         await async.each(withMissingFileList, deleteFile);
	*     }
	*     catch (err) {
	*         console.log(err);
	*         // [ Error: ENOENT: no such file or directory ]
	*         // since dir4/file2.txt does not exist
	*         // dir1/file1.txt could have been deleted
	*     }
	* }
	*
	*/
	function eachLimit(coll, iteratee, callback) {
		return (0, _eachOf2.default)(coll, (0, _withoutIndex2.default)((0, _wrapAsync2.default)(iteratee)), callback);
	}
	exports.default = (0, _awaitify2.default)(eachLimit, 3);
	module.exports = exports.default;
} });

//#endregion
//#region node_modules/.pnpm/fn.name@1.1.0/node_modules/fn.name/index.js
var require_fn = __commonJS({ "node_modules/.pnpm/fn.name@1.1.0/node_modules/fn.name/index.js"(exports, module) {
	var toString$3 = Object.prototype.toString;
	/**
	* Extract names from functions.
	*
	* @param {Function} fn The function who's name we need to extract.
	* @returns {String} The name of the function.
	* @public
	*/
	module.exports = function name$2(fn) {
		if ("string" === typeof fn.displayName && fn.constructor.name) return fn.displayName;
		else if ("string" === typeof fn.name && fn.name) return fn.name;
		if ("object" === typeof fn && fn.constructor && "string" === typeof fn.constructor.name) return fn.constructor.name;
		var named = fn.toString(), type = toString$3.call(fn).slice(8, -1);
		if ("Function" === type) named = named.substring(named.indexOf("(") + 1, named.indexOf(")"));
		else named = type;
		return named || "anonymous";
	};
} });

//#endregion
//#region node_modules/.pnpm/one-time@1.0.0/node_modules/one-time/index.js
var require_one_time = __commonJS({ "node_modules/.pnpm/one-time@1.0.0/node_modules/one-time/index.js"(exports, module) {
	var name = require_fn();
	/**
	* Wrap callbacks to prevent double execution.
	*
	* @param {Function} fn Function that should only be called once.
	* @returns {Function} A wrapped callback which prevents multiple executions.
	* @public
	*/
	module.exports = function one(fn) {
		var called = 0, value;
		/**
		* The function that prevents double execution.
		*
		* @private
		*/
		function onetime() {
			if (called) return value;
			called = 1;
			value = fn.apply(this, arguments);
			fn = null;
			return value;
		}
		onetime.displayName = name(fn);
		return onetime;
	};
} });

//#endregion
//#region node_modules/.pnpm/stack-trace@0.0.10/node_modules/stack-trace/lib/stack-trace.js
var require_stack_trace = __commonJS({ "node_modules/.pnpm/stack-trace@0.0.10/node_modules/stack-trace/lib/stack-trace.js"(exports) {
	exports.get = function(belowFn) {
		var oldLimit = Error.stackTraceLimit;
		Error.stackTraceLimit = Infinity;
		var dummyObject = {};
		var v8Handler = Error.prepareStackTrace;
		Error.prepareStackTrace = function(dummyObject$1, v8StackTrace$1) {
			return v8StackTrace$1;
		};
		Error.captureStackTrace(dummyObject, belowFn || exports.get);
		var v8StackTrace = dummyObject.stack;
		Error.prepareStackTrace = v8Handler;
		Error.stackTraceLimit = oldLimit;
		return v8StackTrace;
	};
	exports.parse = function(err) {
		if (!err.stack) return [];
		var self$1 = this;
		var lines = err.stack.split("\n").slice(1);
		return lines.map(function(line) {
			if (line.match(/^\s*[-]{4,}$/)) return self$1._createParsedCallSite({
				fileName: line,
				lineNumber: null,
				functionName: null,
				typeName: null,
				methodName: null,
				columnNumber: null,
				"native": null
			});
			var lineMatch = line.match(/at (?:(.+)\s+\()?(?:(.+?):(\d+)(?::(\d+))?|([^)]+))\)?/);
			if (!lineMatch) return;
			var object = null;
			var method$1 = null;
			var functionName = null;
			var typeName = null;
			var methodName = null;
			var isNative = lineMatch[5] === "native";
			if (lineMatch[1]) {
				functionName = lineMatch[1];
				var methodStart = functionName.lastIndexOf(".");
				if (functionName[methodStart - 1] == ".") methodStart--;
				if (methodStart > 0) {
					object = functionName.substr(0, methodStart);
					method$1 = functionName.substr(methodStart + 1);
					var objectEnd = object.indexOf(".Module");
					if (objectEnd > 0) {
						functionName = functionName.substr(objectEnd + 1);
						object = object.substr(0, objectEnd);
					}
				}
				typeName = null;
			}
			if (method$1) {
				typeName = object;
				methodName = method$1;
			}
			if (method$1 === "<anonymous>") {
				methodName = null;
				functionName = null;
			}
			var properties = {
				fileName: lineMatch[2] || null,
				lineNumber: parseInt(lineMatch[3], 10) || null,
				functionName,
				typeName,
				methodName,
				columnNumber: parseInt(lineMatch[4], 10) || null,
				"native": isNative
			};
			return self$1._createParsedCallSite(properties);
		}).filter(function(callSite) {
			return !!callSite;
		});
	};
	function CallSite(properties) {
		for (var property in properties) this[property] = properties[property];
	}
	var strProperties = [
		"this",
		"typeName",
		"functionName",
		"methodName",
		"fileName",
		"lineNumber",
		"columnNumber",
		"function",
		"evalOrigin"
	];
	var boolProperties = [
		"topLevel",
		"eval",
		"native",
		"constructor"
	];
	strProperties.forEach(function(property) {
		CallSite.prototype[property] = null;
		CallSite.prototype["get" + property[0].toUpperCase() + property.substr(1)] = function() {
			return this[property];
		};
	});
	boolProperties.forEach(function(property) {
		CallSite.prototype[property] = false;
		CallSite.prototype["is" + property[0].toUpperCase() + property.substr(1)] = function() {
			return this[property];
		};
	});
	exports._createParsedCallSite = function(properties) {
		return new CallSite(properties);
	};
} });

//#endregion
//#region node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/exception-stream.js
var require_exception_stream = __commonJS({ "node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/exception-stream.js"(exports, module) {
	const { Writable: Writable$2 } = require_readable();
	/**
	* TODO: add class description.
	* @type {ExceptionStream}
	* @extends {Writable}
	*/
	module.exports = class ExceptionStream$1 extends Writable$2 {
		/**
		* Constructor function for the ExceptionStream responsible for wrapping a
		* TransportStream; only allowing writes of `info` objects with
		* `info.exception` set to true.
		* @param {!TransportStream} transport - Stream to filter to exceptions
		*/
		constructor(transport) {
			super({ objectMode: true });
			if (!transport) throw new Error("ExceptionStream requires a TransportStream instance.");
			this.handleExceptions = true;
			this.transport = transport;
		}
		/**
		* Writes the info object to our transport instance if (and only if) the
		* `exception` property is set on the info.
		* @param {mixed} info - TODO: add param description.
		* @param {mixed} enc - TODO: add param description.
		* @param {mixed} callback - TODO: add param description.
		* @returns {mixed} - TODO: add return description.
		* @private
		*/
		_write(info$1, enc, callback) {
			if (info$1.exception) return this.transport.log(info$1, callback);
			callback();
			return true;
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/exception-handler.js
var require_exception_handler = __commonJS({ "node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/exception-handler.js"(exports, module) {
	const os$2 = __require("os");
	const asyncForEach$2 = require_forEach();
	const debug$16 = require_node$1()("winston:exception");
	const once$3 = require_one_time();
	const stackTrace$1 = require_stack_trace();
	const ExceptionStream = require_exception_stream();
	/**
	* Object for handling uncaughtException events.
	* @type {ExceptionHandler}
	*/
	module.exports = class ExceptionHandler$1 {
		/**
		* TODO: add contructor description
		* @param {!Logger} logger - TODO: add param description
		*/
		constructor(logger$29) {
			if (!logger$29) throw new Error("Logger is required to handle exceptions");
			this.logger = logger$29;
			this.handlers = new Map();
		}
		/**
		* Handles `uncaughtException` events for the current process by adding any
		* handlers passed in.
		* @returns {undefined}
		*/
		handle(...args) {
			args.forEach((arg) => {
				if (Array.isArray(arg)) return arg.forEach((handler) => this._addHandler(handler));
				this._addHandler(arg);
			});
			if (!this.catcher) {
				this.catcher = this._uncaughtException.bind(this);
				process.on("uncaughtException", this.catcher);
			}
		}
		/**
		* Removes any handlers to `uncaughtException` events for the current
		* process. This does not modify the state of the `this.handlers` set.
		* @returns {undefined}
		*/
		unhandle() {
			if (this.catcher) {
				process.removeListener("uncaughtException", this.catcher);
				this.catcher = false;
				Array.from(this.handlers.values()).forEach((wrapper) => this.logger.unpipe(wrapper));
			}
		}
		/**
		* TODO: add method description
		* @param {Error} err - Error to get information about.
		* @returns {mixed} - TODO: add return description.
		*/
		getAllInfo(err) {
			let message = null;
			if (err) message = typeof err === "string" ? err : err.message;
			return {
				error: err,
				level: "error",
				message: [`uncaughtException: ${message || "(no error message)"}`, err && err.stack || "  No stack trace"].join("\n"),
				stack: err && err.stack,
				exception: true,
				date: new Date().toString(),
				process: this.getProcessInfo(),
				os: this.getOsInfo(),
				trace: this.getTrace(err)
			};
		}
		/**
		* Gets all relevant process information for the currently running process.
		* @returns {mixed} - TODO: add return description.
		*/
		getProcessInfo() {
			return {
				pid: process.pid,
				uid: process.getuid ? process.getuid() : null,
				gid: process.getgid ? process.getgid() : null,
				cwd: process.cwd(),
				execPath: process.execPath,
				version: process.version,
				argv: process.argv,
				memoryUsage: process.memoryUsage()
			};
		}
		/**
		* Gets all relevant OS information for the currently running process.
		* @returns {mixed} - TODO: add return description.
		*/
		getOsInfo() {
			return {
				loadavg: os$2.loadavg(),
				uptime: os$2.uptime()
			};
		}
		/**
		* Gets a stack trace for the specified error.
		* @param {mixed} err - TODO: add param description.
		* @returns {mixed} - TODO: add return description.
		*/
		getTrace(err) {
			const trace = err ? stackTrace$1.parse(err) : stackTrace$1.get();
			return trace.map((site) => {
				return {
					column: site.getColumnNumber(),
					file: site.getFileName(),
					function: site.getFunctionName(),
					line: site.getLineNumber(),
					method: site.getMethodName(),
					native: site.isNative()
				};
			});
		}
		/**
		* Helper method to add a transport as an exception handler.
		* @param {Transport} handler - The transport to add as an exception handler.
		* @returns {void}
		*/
		_addHandler(handler) {
			if (!this.handlers.has(handler)) {
				handler.handleExceptions = true;
				const wrapper = new ExceptionStream(handler);
				this.handlers.set(handler, wrapper);
				this.logger.pipe(wrapper);
			}
		}
		/**
		* Logs all relevant information around the `err` and exits the current
		* process.
		* @param {Error} err - Error to handle
		* @returns {mixed} - TODO: add return description.
		* @private
		*/
		_uncaughtException(err) {
			const info$1 = this.getAllInfo(err);
			const handlers = this._getExceptionHandlers();
			let doExit = typeof this.logger.exitOnError === "function" ? this.logger.exitOnError(err) : this.logger.exitOnError;
			let timeout$1;
			if (!handlers.length && doExit) {
				console.warn("winston: exitOnError cannot be true with no exception handlers.");
				console.warn("winston: not exiting process.");
				doExit = false;
			}
			function gracefulExit() {
				debug$16("doExit", doExit);
				debug$16("process._exiting", process._exiting);
				if (doExit && !process._exiting) {
					if (timeout$1) clearTimeout(timeout$1);
					process.exit(1);
				}
			}
			if (!handlers || handlers.length === 0) return process.nextTick(gracefulExit);
			asyncForEach$2(handlers, (handler, next) => {
				const done$1 = once$3(next);
				const transport = handler.transport || handler;
				function onDone(event) {
					return () => {
						debug$16(event);
						done$1();
					};
				}
				transport._ending = true;
				transport.once("finish", onDone("finished"));
				transport.once("error", onDone("error"));
			}, () => doExit && gracefulExit());
			this.logger.log(info$1);
			if (doExit) timeout$1 = setTimeout(gracefulExit, 3e3);
		}
		/**
		* Returns the list of transports and exceptionHandlers for this instance.
		* @returns {Array} - List of transports and exceptionHandlers for this
		* instance.
		* @private
		*/
		_getExceptionHandlers() {
			return this.logger.transports.filter((wrap$2) => {
				const transport = wrap$2.transport || wrap$2;
				return transport.handleExceptions;
			});
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/rejection-stream.js
var require_rejection_stream = __commonJS({ "node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/rejection-stream.js"(exports, module) {
	const { Writable: Writable$1 } = require_readable();
	/**
	* TODO: add class description.
	* @type {RejectionStream}
	* @extends {Writable}
	*/
	module.exports = class RejectionStream$1 extends Writable$1 {
		/**
		* Constructor function for the RejectionStream responsible for wrapping a
		* TransportStream; only allowing writes of `info` objects with
		* `info.rejection` set to true.
		* @param {!TransportStream} transport - Stream to filter to rejections
		*/
		constructor(transport) {
			super({ objectMode: true });
			if (!transport) throw new Error("RejectionStream requires a TransportStream instance.");
			this.handleRejections = true;
			this.transport = transport;
		}
		/**
		* Writes the info object to our transport instance if (and only if) the
		* `rejection` property is set on the info.
		* @param {mixed} info - TODO: add param description.
		* @param {mixed} enc - TODO: add param description.
		* @param {mixed} callback - TODO: add param description.
		* @returns {mixed} - TODO: add return description.
		* @private
		*/
		_write(info$1, enc, callback) {
			if (info$1.rejection) return this.transport.log(info$1, callback);
			callback();
			return true;
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/rejection-handler.js
var require_rejection_handler = __commonJS({ "node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/rejection-handler.js"(exports, module) {
	const os$1 = __require("os");
	const asyncForEach$1 = require_forEach();
	const debug$15 = require_node$1()("winston:rejection");
	const once$2 = require_one_time();
	const stackTrace = require_stack_trace();
	const RejectionStream = require_rejection_stream();
	/**
	* Object for handling unhandledRejection events.
	* @type {RejectionHandler}
	*/
	module.exports = class RejectionHandler$1 {
		/**
		* TODO: add contructor description
		* @param {!Logger} logger - TODO: add param description
		*/
		constructor(logger$29) {
			if (!logger$29) throw new Error("Logger is required to handle rejections");
			this.logger = logger$29;
			this.handlers = new Map();
		}
		/**
		* Handles `unhandledRejection` events for the current process by adding any
		* handlers passed in.
		* @returns {undefined}
		*/
		handle(...args) {
			args.forEach((arg) => {
				if (Array.isArray(arg)) return arg.forEach((handler) => this._addHandler(handler));
				this._addHandler(arg);
			});
			if (!this.catcher) {
				this.catcher = this._unhandledRejection.bind(this);
				process.on("unhandledRejection", this.catcher);
			}
		}
		/**
		* Removes any handlers to `unhandledRejection` events for the current
		* process. This does not modify the state of the `this.handlers` set.
		* @returns {undefined}
		*/
		unhandle() {
			if (this.catcher) {
				process.removeListener("unhandledRejection", this.catcher);
				this.catcher = false;
				Array.from(this.handlers.values()).forEach((wrapper) => this.logger.unpipe(wrapper));
			}
		}
		/**
		* TODO: add method description
		* @param {Error} err - Error to get information about.
		* @returns {mixed} - TODO: add return description.
		*/
		getAllInfo(err) {
			let message = null;
			if (err) message = typeof err === "string" ? err : err.message;
			return {
				error: err,
				level: "error",
				message: [`unhandledRejection: ${message || "(no error message)"}`, err && err.stack || "  No stack trace"].join("\n"),
				stack: err && err.stack,
				rejection: true,
				date: new Date().toString(),
				process: this.getProcessInfo(),
				os: this.getOsInfo(),
				trace: this.getTrace(err)
			};
		}
		/**
		* Gets all relevant process information for the currently running process.
		* @returns {mixed} - TODO: add return description.
		*/
		getProcessInfo() {
			return {
				pid: process.pid,
				uid: process.getuid ? process.getuid() : null,
				gid: process.getgid ? process.getgid() : null,
				cwd: process.cwd(),
				execPath: process.execPath,
				version: process.version,
				argv: process.argv,
				memoryUsage: process.memoryUsage()
			};
		}
		/**
		* Gets all relevant OS information for the currently running process.
		* @returns {mixed} - TODO: add return description.
		*/
		getOsInfo() {
			return {
				loadavg: os$1.loadavg(),
				uptime: os$1.uptime()
			};
		}
		/**
		* Gets a stack trace for the specified error.
		* @param {mixed} err - TODO: add param description.
		* @returns {mixed} - TODO: add return description.
		*/
		getTrace(err) {
			const trace = err ? stackTrace.parse(err) : stackTrace.get();
			return trace.map((site) => {
				return {
					column: site.getColumnNumber(),
					file: site.getFileName(),
					function: site.getFunctionName(),
					line: site.getLineNumber(),
					method: site.getMethodName(),
					native: site.isNative()
				};
			});
		}
		/**
		* Helper method to add a transport as an exception handler.
		* @param {Transport} handler - The transport to add as an exception handler.
		* @returns {void}
		*/
		_addHandler(handler) {
			if (!this.handlers.has(handler)) {
				handler.handleRejections = true;
				const wrapper = new RejectionStream(handler);
				this.handlers.set(handler, wrapper);
				this.logger.pipe(wrapper);
			}
		}
		/**
		* Logs all relevant information around the `err` and exits the current
		* process.
		* @param {Error} err - Error to handle
		* @returns {mixed} - TODO: add return description.
		* @private
		*/
		_unhandledRejection(err) {
			const info$1 = this.getAllInfo(err);
			const handlers = this._getRejectionHandlers();
			let doExit = typeof this.logger.exitOnError === "function" ? this.logger.exitOnError(err) : this.logger.exitOnError;
			let timeout$1;
			if (!handlers.length && doExit) {
				console.warn("winston: exitOnError cannot be true with no rejection handlers.");
				console.warn("winston: not exiting process.");
				doExit = false;
			}
			function gracefulExit() {
				debug$15("doExit", doExit);
				debug$15("process._exiting", process._exiting);
				if (doExit && !process._exiting) {
					if (timeout$1) clearTimeout(timeout$1);
					process.exit(1);
				}
			}
			if (!handlers || handlers.length === 0) return process.nextTick(gracefulExit);
			asyncForEach$1(handlers, (handler, next) => {
				const done$1 = once$2(next);
				const transport = handler.transport || handler;
				function onDone(event) {
					return () => {
						debug$15(event);
						done$1();
					};
				}
				transport._ending = true;
				transport.once("finish", onDone("finished"));
				transport.once("error", onDone("error"));
			}, () => doExit && gracefulExit());
			this.logger.log(info$1);
			if (doExit) timeout$1 = setTimeout(gracefulExit, 3e3);
		}
		/**
		* Returns the list of transports and exceptionHandlers for this instance.
		* @returns {Array} - List of transports and exceptionHandlers for this
		* instance.
		* @private
		*/
		_getRejectionHandlers() {
			return this.logger.transports.filter((wrap$2) => {
				const transport = wrap$2.transport || wrap$2;
				return transport.handleRejections;
			});
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/profiler.js
var require_profiler = __commonJS({ "node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/profiler.js"(exports, module) {
	/**
	* TODO: add class description.
	* @type {Profiler}
	* @private
	*/
	var Profiler$1 = class {
		/**
		* Constructor function for the Profiler instance used by
		* `Logger.prototype.startTimer`. When done is called the timer will finish
		* and log the duration.
		* @param {!Logger} logger - TODO: add param description.
		* @private
		*/
		constructor(logger$29) {
			const Logger$4 = require_logger$1();
			if (typeof logger$29 !== "object" || Array.isArray(logger$29) || !(logger$29 instanceof Logger$4)) throw new Error("Logger is required for profiling");
			else {
				this.logger = logger$29;
				this.start = Date.now();
			}
		}
		/**
		* Ends the current timer (i.e. Profiler) instance and logs the `msg` along
		* with the duration since creation.
		* @returns {mixed} - TODO: add return description.
		* @private
		*/
		done(...args) {
			if (typeof args[args.length - 1] === "function") {
				console.warn("Callback function no longer supported as of winston@3.0.0");
				args.pop();
			}
			const info$1 = typeof args[args.length - 1] === "object" ? args.pop() : {};
			info$1.level = info$1.level || "info";
			info$1.durationMs = Date.now() - this.start;
			return this.logger.write(info$1);
		}
	};
	module.exports = Profiler$1;
} });

//#endregion
//#region node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/logger.js
var require_logger$1 = __commonJS({ "node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/logger.js"(exports, module) {
	const { Stream: Stream$7, Transform } = require_readable();
	const asyncForEach = require_forEach();
	const { LEVEL: LEVEL$1, SPLAT } = require_triple_beam();
	const isStream$1 = require_is_stream();
	const ExceptionHandler = require_exception_handler();
	const RejectionHandler = require_rejection_handler();
	const LegacyTransportStream = require_legacy();
	const Profiler = require_profiler();
	const { warn: warn$1 } = require_common$1();
	const config$1 = require_config();
	/**
	* Captures the number of format (i.e. %s strings) in a given string.
	* Based on `util.format`, see Node.js source:
	* https://github.com/nodejs/node/blob/b1c8f15c5f169e021f7c46eb7b219de95fe97603/lib/util.js#L201-L230
	* @type {RegExp}
	*/
	const formatRegExp = /%[scdjifoO%]/g;
	/**
	* TODO: add class description.
	* @type {Logger}
	* @extends {Transform}
	*/
	var Logger$3 = class extends Transform {
		/**
		* Constructor function for the Logger object responsible for persisting log
		* messages and metadata to one or more transports.
		* @param {!Object} options - foo
		*/
		constructor(options) {
			super({ objectMode: true });
			this.configure(options);
		}
		child(defaultRequestMetadata) {
			const logger$29 = this;
			return Object.create(logger$29, { write: { value: function(info$1) {
				const infoClone = Object.assign({}, defaultRequestMetadata, info$1);
				if (info$1 instanceof Error) {
					infoClone.stack = info$1.stack;
					infoClone.message = info$1.message;
				}
				logger$29.write(infoClone);
			} } });
		}
		/**
		* This will wholesale reconfigure this instance by:
		* 1. Resetting all transports. Older transports will be removed implicitly.
		* 2. Set all other options including levels, colors, rewriters, filters,
		*    exceptionHandlers, etc.
		* @param {!Object} options - TODO: add param description.
		* @returns {undefined}
		*/
		configure({ silent: silent$1, format: format$14, defaultMeta, levels, level = "info", exitOnError = true, transports, colors: colors$4, emitErrs, formatters: formatters$2, padLevels, rewriters, stripColors, exceptionHandlers, rejectionHandlers } = {}) {
			if (this.transports.length) this.clear();
			this.silent = silent$1;
			this.format = format$14 || this.format || require_json()();
			this.defaultMeta = defaultMeta || null;
			this.levels = levels || this.levels || config$1.npm.levels;
			this.level = level;
			if (this.exceptions) this.exceptions.unhandle();
			if (this.rejections) this.rejections.unhandle();
			this.exceptions = new ExceptionHandler(this);
			this.rejections = new RejectionHandler(this);
			this.profilers = {};
			this.exitOnError = exitOnError;
			if (transports) {
				transports = Array.isArray(transports) ? transports : [transports];
				transports.forEach((transport) => this.add(transport));
			}
			if (colors$4 || emitErrs || formatters$2 || padLevels || rewriters || stripColors) throw new Error([
				"{ colors, emitErrs, formatters, padLevels, rewriters, stripColors } were removed in winston@3.0.0.",
				"Use a custom winston.format(function) instead.",
				"See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md"
			].join("\n"));
			if (exceptionHandlers) this.exceptions.handle(exceptionHandlers);
			if (rejectionHandlers) this.rejections.handle(rejectionHandlers);
		}
		isLevelEnabled(level) {
			const givenLevelValue = getLevelValue(this.levels, level);
			if (givenLevelValue === null) return false;
			const configuredLevelValue = getLevelValue(this.levels, this.level);
			if (configuredLevelValue === null) return false;
			if (!this.transports || this.transports.length === 0) return configuredLevelValue >= givenLevelValue;
			const index = this.transports.findIndex((transport) => {
				let transportLevelValue = getLevelValue(this.levels, transport.level);
				if (transportLevelValue === null) transportLevelValue = configuredLevelValue;
				return transportLevelValue >= givenLevelValue;
			});
			return index !== -1;
		}
		/**
		* Ensure backwards compatibility with a `log` method
		* @param {mixed} level - Level the log message is written at.
		* @param {mixed} msg - TODO: add param description.
		* @param {mixed} meta - TODO: add param description.
		* @returns {Logger} - TODO: add return description.
		*
		* @example
		*    // Supports the existing API:
		*    logger.log('info', 'Hello world', { custom: true });
		*    logger.log('info', new Error('Yo, it\'s on fire'));
		*
		*    // Requires winston.format.splat()
		*    logger.log('info', '%s %d%%', 'A string', 50, { thisIsMeta: true });
		*
		*    // And the new API with a single JSON literal:
		*    logger.log({ level: 'info', message: 'Hello world', custom: true });
		*    logger.log({ level: 'info', message: new Error('Yo, it\'s on fire') });
		*
		*    // Also requires winston.format.splat()
		*    logger.log({
		*      level: 'info',
		*      message: '%s %d%%',
		*      [SPLAT]: ['A string', 50],
		*      meta: { thisIsMeta: true }
		*    });
		*
		*/
		log(level, msg, ...splat) {
			if (arguments.length === 1) {
				level[LEVEL$1] = level.level;
				this._addDefaultMeta(level);
				this.write(level);
				return this;
			}
			if (arguments.length === 2) {
				if (msg && typeof msg === "object") {
					msg[LEVEL$1] = msg.level = level;
					this._addDefaultMeta(msg);
					this.write(msg);
					return this;
				}
				msg = {
					[LEVEL$1]: level,
					level,
					message: msg
				};
				this._addDefaultMeta(msg);
				this.write(msg);
				return this;
			}
			const [meta] = splat;
			if (typeof meta === "object" && meta !== null) {
				const tokens = msg && msg.match && msg.match(formatRegExp);
				if (!tokens) {
					const info$1 = Object.assign({}, this.defaultMeta, meta, {
						[LEVEL$1]: level,
						[SPLAT]: splat,
						level,
						message: msg
					});
					if (meta.message) info$1.message = `${info$1.message} ${meta.message}`;
					if (meta.stack) info$1.stack = meta.stack;
					if (meta.cause) info$1.cause = meta.cause;
					this.write(info$1);
					return this;
				}
			}
			this.write(Object.assign({}, this.defaultMeta, {
				[LEVEL$1]: level,
				[SPLAT]: splat,
				level,
				message: msg
			}));
			return this;
		}
		/**
		* Pushes data so that it can be picked up by all of our pipe targets.
		* @param {mixed} info - TODO: add param description.
		* @param {mixed} enc - TODO: add param description.
		* @param {mixed} callback - Continues stream processing.
		* @returns {undefined}
		* @private
		*/
		_transform(info$1, enc, callback) {
			if (this.silent) return callback();
			if (!info$1[LEVEL$1]) info$1[LEVEL$1] = info$1.level;
			if (!this.levels[info$1[LEVEL$1]] && this.levels[info$1[LEVEL$1]] !== 0) console.error("[winston] Unknown logger level: %s", info$1[LEVEL$1]);
			if (!this._readableState.pipes) console.error("[winston] Attempt to write logs with no transports, which can increase memory usage: %j", info$1);
			try {
				this.push(this.format.transform(info$1, this.format.options));
			} finally {
				this._writableState.sync = false;
				callback();
			}
		}
		/**
		* Delays the 'finish' event until all transport pipe targets have
		* also emitted 'finish' or are already finished.
		* @param {mixed} callback - Continues stream processing.
		*/
		_final(callback) {
			const transports = this.transports.slice();
			asyncForEach(transports, (transport, next) => {
				if (!transport || transport.finished) return setImmediate(next);
				transport.once("finish", next);
				transport.end();
			}, callback);
		}
		/**
		* Adds the transport to this logger instance by piping to it.
		* @param {mixed} transport - TODO: add param description.
		* @returns {Logger} - TODO: add return description.
		*/
		add(transport) {
			const target = !isStream$1(transport) || transport.log.length > 2 ? new LegacyTransportStream({ transport }) : transport;
			if (!target._writableState || !target._writableState.objectMode) throw new Error("Transports must WritableStreams in objectMode. Set { objectMode: true }.");
			this._onEvent("error", target);
			this._onEvent("warn", target);
			this.pipe(target);
			if (transport.handleExceptions) this.exceptions.handle();
			if (transport.handleRejections) this.rejections.handle();
			return this;
		}
		/**
		* Removes the transport from this logger instance by unpiping from it.
		* @param {mixed} transport - TODO: add param description.
		* @returns {Logger} - TODO: add return description.
		*/
		remove(transport) {
			if (!transport) return this;
			let target = transport;
			if (!isStream$1(transport) || transport.log.length > 2) target = this.transports.filter((match) => match.transport === transport)[0];
			if (target) this.unpipe(target);
			return this;
		}
		/**
		* Removes all transports from this logger instance.
		* @returns {Logger} - TODO: add return description.
		*/
		clear() {
			this.unpipe();
			return this;
		}
		/**
		* Cleans up resources (streams, event listeners) for all transports
		* associated with this instance (if necessary).
		* @returns {Logger} - TODO: add return description.
		*/
		close() {
			this.exceptions.unhandle();
			this.rejections.unhandle();
			this.clear();
			this.emit("close");
			return this;
		}
		/**
		* Sets the `target` levels specified on this instance.
		* @param {Object} Target levels to use on this instance.
		*/
		setLevels() {
			warn$1.deprecated("setLevels");
		}
		/**
		* Queries the all transports for this instance with the specified `options`.
		* This will aggregate each transport's results into one object containing
		* a property per transport.
		* @param {Object} options - Query options for this instance.
		* @param {function} callback - Continuation to respond to when complete.
		*/
		query(options, callback) {
			if (typeof options === "function") {
				callback = options;
				options = {};
			}
			options = options || {};
			const results = {};
			const queryObject = Object.assign({}, options.query || {});
			function queryTransport(transport, next) {
				if (options.query && typeof transport.formatQuery === "function") options.query = transport.formatQuery(queryObject);
				transport.query(options, (err, res) => {
					if (err) return next(err);
					if (typeof transport.formatResults === "function") res = transport.formatResults(res, options.format);
					next(null, res);
				});
			}
			function addResults(transport, next) {
				queryTransport(transport, (err, result) => {
					if (next) {
						result = err || result;
						if (result) results[transport.name] = result;
						next();
					}
					next = null;
				});
			}
			asyncForEach(this.transports.filter((transport) => !!transport.query), addResults, () => callback(null, results));
		}
		/**
		* Returns a log stream for all transports. Options object is optional.
		* @param{Object} options={} - Stream options for this instance.
		* @returns {Stream} - TODO: add return description.
		*/
		stream(options = {}) {
			const out = new Stream$7();
			const streams = [];
			out._streams = streams;
			out.destroy = () => {
				let i = streams.length;
				while (i--) streams[i].destroy();
			};
			this.transports.filter((transport) => !!transport.stream).forEach((transport) => {
				const str = transport.stream(options);
				if (!str) return;
				streams.push(str);
				str.on("log", (log$1) => {
					log$1.transport = log$1.transport || [];
					log$1.transport.push(transport.name);
					out.emit("log", log$1);
				});
				str.on("error", (err) => {
					err.transport = err.transport || [];
					err.transport.push(transport.name);
					out.emit("error", err);
				});
			});
			return out;
		}
		/**
		* Returns an object corresponding to a specific timing. When done is called
		* the timer will finish and log the duration. e.g.:
		* @returns {Profile} - TODO: add return description.
		* @example
		*    const timer = winston.startTimer()
		*    setTimeout(() => {
		*      timer.done({
		*        message: 'Logging message'
		*      });
		*    }, 1000);
		*/
		startTimer() {
			return new Profiler(this);
		}
		/**
		* Tracks the time inbetween subsequent calls to this method with the same
		* `id` parameter. The second call to this method will log the difference in
		* milliseconds along with the message.
		* @param {string} id Unique id of the profiler
		* @returns {Logger} - TODO: add return description.
		*/
		profile(id, ...args) {
			const time = Date.now();
			if (this.profilers[id]) {
				const timeEnd = this.profilers[id];
				delete this.profilers[id];
				if (typeof args[args.length - 2] === "function") {
					console.warn("Callback function no longer supported as of winston@3.0.0");
					args.pop();
				}
				const info$1 = typeof args[args.length - 1] === "object" ? args.pop() : {};
				info$1.level = info$1.level || "info";
				info$1.durationMs = time - timeEnd;
				info$1.message = info$1.message || id;
				return this.write(info$1);
			}
			this.profilers[id] = time;
			return this;
		}
		/**
		* Backwards compatibility to `exceptions.handle` in winston < 3.0.0.
		* @returns {undefined}
		* @deprecated
		*/
		handleExceptions(...args) {
			console.warn("Deprecated: .handleExceptions() will be removed in winston@4. Use .exceptions.handle()");
			this.exceptions.handle(...args);
		}
		/**
		* Backwards compatibility to `exceptions.handle` in winston < 3.0.0.
		* @returns {undefined}
		* @deprecated
		*/
		unhandleExceptions(...args) {
			console.warn("Deprecated: .unhandleExceptions() will be removed in winston@4. Use .exceptions.unhandle()");
			this.exceptions.unhandle(...args);
		}
		/**
		* Throw a more meaningful deprecation notice
		* @throws {Error} - TODO: add throws description.
		*/
		cli() {
			throw new Error([
				"Logger.cli() was removed in winston@3.0.0",
				"Use a custom winston.formats.cli() instead.",
				"See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md"
			].join("\n"));
		}
		/**
		* Bubbles the `event` that occured on the specified `transport` up
		* from this instance.
		* @param {string} event - The event that occured
		* @param {Object} transport - Transport on which the event occured
		* @private
		*/
		_onEvent(event, transport) {
			function transportEvent(err) {
				if (event === "error" && !this.transports.includes(transport)) this.add(transport);
				this.emit(event, err, transport);
			}
			if (!transport["__winston" + event]) {
				transport["__winston" + event] = transportEvent.bind(this);
				transport.on(event, transport["__winston" + event]);
			}
		}
		_addDefaultMeta(msg) {
			if (this.defaultMeta) Object.assign(msg, this.defaultMeta);
		}
	};
	function getLevelValue(levels, level) {
		const value = levels[level];
		if (!value && value !== 0) return null;
		return value;
	}
	/**
	* Represents the current readableState pipe targets for this Logger instance.
	* @type {Array|Object}
	*/
	Object.defineProperty(Logger$3.prototype, "transports", {
		configurable: false,
		enumerable: true,
		get() {
			const { pipes } = this._readableState;
			return !Array.isArray(pipes) ? [pipes].filter(Boolean) : pipes;
		}
	});
	module.exports = Logger$3;
} });

//#endregion
//#region node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/create-logger.js
var require_create_logger = __commonJS({ "node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/create-logger.js"(exports, module) {
	const { LEVEL } = require_triple_beam();
	const config = require_config();
	const Logger$2 = require_logger$1();
	const debug$14 = require_node$1()("winston:create-logger");
	function isLevelEnabledFunctionName(level) {
		return "is" + level.charAt(0).toUpperCase() + level.slice(1) + "Enabled";
	}
	/**
	* Create a new instance of a winston Logger. Creates a new
	* prototype for each instance.
	* @param {!Object} opts - Options for the created logger.
	* @returns {Logger} - A newly created logger instance.
	*/
	module.exports = function(opts = {}) {
		opts.levels = opts.levels || config.npm.levels;
		/**
		* DerivedLogger to attach the logs level methods.
		* @type {DerivedLogger}
		* @extends {Logger}
		*/
		class DerivedLogger extends Logger$2 {
			/**
			* Create a new class derived logger for which the levels can be attached to
			* the prototype of. This is a V8 optimization that is well know to increase
			* performance of prototype functions.
			* @param {!Object} options - Options for the created logger.
			*/
			constructor(options) {
				super(options);
			}
		}
		const logger$29 = new DerivedLogger(opts);
		Object.keys(opts.levels).forEach(function(level) {
			debug$14("Define prototype method for \"%s\"", level);
			if (level === "log") {
				console.warn("Level \"log\" not defined: conflicts with the method \"log\". Use a different level name.");
				return;
			}
			DerivedLogger.prototype[level] = function(...args) {
				const self$1 = this || logger$29;
				if (args.length === 1) {
					const [msg] = args;
					const info$1 = msg && msg.message && msg || { message: msg };
					info$1.level = info$1[LEVEL] = level;
					self$1._addDefaultMeta(info$1);
					self$1.write(info$1);
					return this || logger$29;
				}
				if (args.length === 0) {
					self$1.log(level, "");
					return self$1;
				}
				return self$1.log(level, ...args);
			};
			DerivedLogger.prototype[isLevelEnabledFunctionName(level)] = function() {
				return (this || logger$29).isLevelEnabled(level);
			};
		});
		return logger$29;
	};
} });

//#endregion
//#region node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/container.js
var require_container = __commonJS({ "node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston/container.js"(exports, module) {
	const createLogger$1 = require_create_logger();
	/**
	* Inversion of control container for winston logger instances.
	* @type {Container}
	*/
	module.exports = class Container {
		/**
		* Constructor function for the Container object responsible for managing a
		* set of `winston.Logger` instances based on string ids.
		* @param {!Object} [options={}] - Default pass-thru options for Loggers.
		*/
		constructor(options = {}) {
			this.loggers = new Map();
			this.options = options;
		}
		/**
		* Retrieves a `winston.Logger` instance for the specified `id`. If an
		* instance does not exist, one is created.
		* @param {!string} id - The id of the Logger to get.
		* @param {?Object} [options] - Options for the Logger instance.
		* @returns {Logger} - A configured Logger instance with a specified id.
		*/
		add(id, options) {
			if (!this.loggers.has(id)) {
				options = Object.assign({}, options || this.options);
				const existing = options.transports || this.options.transports;
				if (existing) options.transports = Array.isArray(existing) ? existing.slice() : [existing];
				else options.transports = [];
				const logger$29 = createLogger$1(options);
				logger$29.on("close", () => this._delete(id));
				this.loggers.set(id, logger$29);
			}
			return this.loggers.get(id);
		}
		/**
		* Retreives a `winston.Logger` instance for the specified `id`. If
		* an instance does not exist, one is created.
		* @param {!string} id - The id of the Logger to get.
		* @param {?Object} [options] - Options for the Logger instance.
		* @returns {Logger} - A configured Logger instance with a specified id.
		*/
		get(id, options) {
			return this.add(id, options);
		}
		/**
		* Check if the container has a logger with the id.
		* @param {?string} id - The id of the Logger instance to find.
		* @returns {boolean} - Boolean value indicating if this instance has a
		* logger with the specified `id`.
		*/
		has(id) {
			return !!this.loggers.has(id);
		}
		/**
		* Closes a `Logger` instance with the specified `id` if it exists.
		* If no `id` is supplied then all Loggers are closed.
		* @param {?string} id - The id of the Logger instance to close.
		* @returns {undefined}
		*/
		close(id) {
			if (id) return this._removeLogger(id);
			this.loggers.forEach((val, key$1) => this._removeLogger(key$1));
		}
		/**
		* Remove a logger based on the id.
		* @param {!string} id - The id of the logger to remove.
		* @returns {undefined}
		* @private
		*/
		_removeLogger(id) {
			if (!this.loggers.has(id)) return;
			const logger$29 = this.loggers.get(id);
			logger$29.close();
			this._delete(id);
		}
		/**
		* Deletes a `Logger` instance with the specified `id`.
		* @param {!string} id - The id of the Logger instance to delete from
		* container.
		* @returns {undefined}
		* @private
		*/
		_delete(id) {
			this.loggers.delete(id);
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston.js
var require_winston = __commonJS({ "node_modules/.pnpm/winston@3.17.0/node_modules/winston/lib/winston.js"(exports) {
	const logform = require_logform();
	const { warn } = require_common$1();
	/**
	* Expose version. Use `require` method for `webpack` support.
	* @type {string}
	*/
	exports.version = require_package().version;
	/**
	* Include transports defined by default by winston
	* @type {Array}
	*/
	exports.transports = require_transports();
	/**
	* Expose utility methods
	* @type {Object}
	*/
	exports.config = require_config();
	/**
	* Hoist format-related functionality from logform.
	* @type {Object}
	*/
	exports.addColors = logform.levels;
	/**
	* Hoist format-related functionality from logform.
	* @type {Object}
	*/
	exports.format = logform.format;
	/**
	* Expose core Logging-related prototypes.
	* @type {function}
	*/
	exports.createLogger = require_create_logger();
	/**
	* Expose core Logging-related prototypes.
	* @type {function}
	*/
	exports.Logger = require_logger$1();
	/**
	* Expose core Logging-related prototypes.
	* @type {Object}
	*/
	exports.ExceptionHandler = require_exception_handler();
	/**
	* Expose core Logging-related prototypes.
	* @type {Object}
	*/
	exports.RejectionHandler = require_rejection_handler();
	/**
	* Expose core Logging-related prototypes.
	* @type {Container}
	*/
	exports.Container = require_container();
	/**
	* Expose core Logging-related prototypes.
	* @type {Object}
	*/
	exports.Transport = require_winston_transport();
	/**
	* We create and expose a default `Container` to `winston.loggers` so that the
	* programmer may manage multiple `winston.Logger` instances without any
	* additional overhead.
	* @example
	*   // some-file1.js
	*   const logger = require('winston').loggers.get('something');
	*
	*   // some-file2.js
	*   const logger = require('winston').loggers.get('something');
	*/
	exports.loggers = new exports.Container();
	/**
	* We create and expose a 'defaultLogger' so that the programmer may do the
	* following without the need to create an instance of winston.Logger directly:
	* @example
	*   const winston = require('winston');
	*   winston.log('info', 'some message');
	*   winston.error('some error');
	*/
	const defaultLogger = exports.createLogger();
	Object.keys(exports.config.npm.levels).concat([
		"log",
		"query",
		"stream",
		"add",
		"remove",
		"clear",
		"profile",
		"startTimer",
		"handleExceptions",
		"unhandleExceptions",
		"handleRejections",
		"unhandleRejections",
		"configure",
		"child"
	]).forEach((method$1) => exports[method$1] = (...args) => defaultLogger[method$1](...args));
	/**
	* Define getter / setter for the default logger level which need to be exposed
	* by winston.
	* @type {string}
	*/
	Object.defineProperty(exports, "level", {
		get() {
			return defaultLogger.level;
		},
		set(val) {
			defaultLogger.level = val;
		}
	});
	/**
	* Define getter for `exceptions` which replaces `handleExceptions` and
	* `unhandleExceptions`.
	* @type {Object}
	*/
	Object.defineProperty(exports, "exceptions", { get() {
		return defaultLogger.exceptions;
	} });
	/**
	* Define getter for `rejections` which replaces `handleRejections` and
	* `unhandleRejections`.
	* @type {Object}
	*/
	Object.defineProperty(exports, "rejections", { get() {
		return defaultLogger.rejections;
	} });
	/**
	* Define getters / setters for appropriate properties of the default logger
	* which need to be exposed by winston.
	* @type {Logger}
	*/
	["exitOnError"].forEach((prop) => {
		Object.defineProperty(exports, prop, {
			get() {
				return defaultLogger[prop];
			},
			set(val) {
				defaultLogger[prop] = val;
			}
		});
	});
	/**
	* The default transports and exceptionHandlers for the default winston logger.
	* @type {Object}
	*/
	Object.defineProperty(exports, "default", { get() {
		return {
			exceptionHandlers: defaultLogger.exceptionHandlers,
			rejectionHandlers: defaultLogger.rejectionHandlers,
			transports: defaultLogger.transports
		};
	} });
	warn.deprecated(exports, "setLevels");
	warn.forFunctions(exports, "useFormat", ["cli"]);
	warn.forProperties(exports, "useFormat", ["padLevels", "stripColors"]);
	warn.forFunctions(exports, "deprecated", [
		"addRewriter",
		"addFilter",
		"clone",
		"extend"
	]);
	warn.forProperties(exports, "deprecated", ["emitErrs", "levelLength"]);
} });

//#endregion
//#region node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/conversions.js
var require_conversions = __commonJS({ "node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/conversions.js"(exports, module) {
	const cssKeywords = require_color_name$1();
	const reverseKeywords = {};
	for (const key$1 of Object.keys(cssKeywords)) reverseKeywords[cssKeywords[key$1]] = key$1;
	const convert$1 = {
		rgb: {
			channels: 3,
			labels: "rgb"
		},
		hsl: {
			channels: 3,
			labels: "hsl"
		},
		hsv: {
			channels: 3,
			labels: "hsv"
		},
		hwb: {
			channels: 3,
			labels: "hwb"
		},
		cmyk: {
			channels: 4,
			labels: "cmyk"
		},
		xyz: {
			channels: 3,
			labels: "xyz"
		},
		lab: {
			channels: 3,
			labels: "lab"
		},
		lch: {
			channels: 3,
			labels: "lch"
		},
		hex: {
			channels: 1,
			labels: ["hex"]
		},
		keyword: {
			channels: 1,
			labels: ["keyword"]
		},
		ansi16: {
			channels: 1,
			labels: ["ansi16"]
		},
		ansi256: {
			channels: 1,
			labels: ["ansi256"]
		},
		hcg: {
			channels: 3,
			labels: [
				"h",
				"c",
				"g"
			]
		},
		apple: {
			channels: 3,
			labels: [
				"r16",
				"g16",
				"b16"
			]
		},
		gray: {
			channels: 1,
			labels: ["gray"]
		}
	};
	module.exports = convert$1;
	for (const model$1 of Object.keys(convert$1)) {
		if (!("channels" in convert$1[model$1])) throw new Error("missing channels property: " + model$1);
		if (!("labels" in convert$1[model$1])) throw new Error("missing channel labels property: " + model$1);
		if (convert$1[model$1].labels.length !== convert$1[model$1].channels) throw new Error("channel and label counts mismatch: " + model$1);
		const { channels: channels$5, labels: labels$1 } = convert$1[model$1];
		delete convert$1[model$1].channels;
		delete convert$1[model$1].labels;
		Object.defineProperty(convert$1[model$1], "channels", { value: channels$5 });
		Object.defineProperty(convert$1[model$1], "labels", { value: labels$1 });
	}
	convert$1.rgb.hsl = function(rgb) {
		const r = rgb[0] / 255;
		const g = rgb[1] / 255;
		const b = rgb[2] / 255;
		const min$1 = Math.min(r, g, b);
		const max$2 = Math.max(r, g, b);
		const delta = max$2 - min$1;
		let h$1;
		let s$1;
		if (max$2 === min$1) h$1 = 0;
		else if (r === max$2) h$1 = (g - b) / delta;
		else if (g === max$2) h$1 = 2 + (b - r) / delta;
		else if (b === max$2) h$1 = 4 + (r - g) / delta;
		h$1 = Math.min(h$1 * 60, 360);
		if (h$1 < 0) h$1 += 360;
		const l = (min$1 + max$2) / 2;
		if (max$2 === min$1) s$1 = 0;
		else if (l <= .5) s$1 = delta / (max$2 + min$1);
		else s$1 = delta / (2 - max$2 - min$1);
		return [
			h$1,
			s$1 * 100,
			l * 100
		];
	};
	convert$1.rgb.hsv = function(rgb) {
		let rdif;
		let gdif;
		let bdif;
		let h$1;
		let s$1;
		const r = rgb[0] / 255;
		const g = rgb[1] / 255;
		const b = rgb[2] / 255;
		const v$1 = Math.max(r, g, b);
		const diff$2 = v$1 - Math.min(r, g, b);
		const diffc = function(c) {
			return (v$1 - c) / 6 / diff$2 + 1 / 2;
		};
		if (diff$2 === 0) {
			h$1 = 0;
			s$1 = 0;
		} else {
			s$1 = diff$2 / v$1;
			rdif = diffc(r);
			gdif = diffc(g);
			bdif = diffc(b);
			if (r === v$1) h$1 = bdif - gdif;
			else if (g === v$1) h$1 = 1 / 3 + rdif - bdif;
			else if (b === v$1) h$1 = 2 / 3 + gdif - rdif;
			if (h$1 < 0) h$1 += 1;
			else if (h$1 > 1) h$1 -= 1;
		}
		return [
			h$1 * 360,
			s$1 * 100,
			v$1 * 100
		];
	};
	convert$1.rgb.hwb = function(rgb) {
		const r = rgb[0];
		const g = rgb[1];
		let b = rgb[2];
		const h$1 = convert$1.rgb.hsl(rgb)[0];
		const w$1 = 1 / 255 * Math.min(r, Math.min(g, b));
		b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
		return [
			h$1,
			w$1 * 100,
			b * 100
		];
	};
	convert$1.rgb.cmyk = function(rgb) {
		const r = rgb[0] / 255;
		const g = rgb[1] / 255;
		const b = rgb[2] / 255;
		const k = Math.min(1 - r, 1 - g, 1 - b);
		const c = (1 - r - k) / (1 - k) || 0;
		const m$1 = (1 - g - k) / (1 - k) || 0;
		const y$1 = (1 - b - k) / (1 - k) || 0;
		return [
			c * 100,
			m$1 * 100,
			y$1 * 100,
			k * 100
		];
	};
	function comparativeDistance(x, y$1) {
		return (x[0] - y$1[0]) ** 2 + (x[1] - y$1[1]) ** 2 + (x[2] - y$1[2]) ** 2;
	}
	convert$1.rgb.keyword = function(rgb) {
		const reversed = reverseKeywords[rgb];
		if (reversed) return reversed;
		let currentClosestDistance = Infinity;
		let currentClosestKeyword;
		for (const keyword of Object.keys(cssKeywords)) {
			const value = cssKeywords[keyword];
			const distance = comparativeDistance(rgb, value);
			if (distance < currentClosestDistance) {
				currentClosestDistance = distance;
				currentClosestKeyword = keyword;
			}
		}
		return currentClosestKeyword;
	};
	convert$1.keyword.rgb = function(keyword) {
		return cssKeywords[keyword];
	};
	convert$1.rgb.xyz = function(rgb) {
		let r = rgb[0] / 255;
		let g = rgb[1] / 255;
		let b = rgb[2] / 255;
		r = r > .04045 ? ((r + .055) / 1.055) ** 2.4 : r / 12.92;
		g = g > .04045 ? ((g + .055) / 1.055) ** 2.4 : g / 12.92;
		b = b > .04045 ? ((b + .055) / 1.055) ** 2.4 : b / 12.92;
		const x = r * .4124 + g * .3576 + b * .1805;
		const y$1 = r * .2126 + g * .7152 + b * .0722;
		const z = r * .0193 + g * .1192 + b * .9505;
		return [
			x * 100,
			y$1 * 100,
			z * 100
		];
	};
	convert$1.rgb.lab = function(rgb) {
		const xyz = convert$1.rgb.xyz(rgb);
		let x = xyz[0];
		let y$1 = xyz[1];
		let z = xyz[2];
		x /= 95.047;
		y$1 /= 100;
		z /= 108.883;
		x = x > .008856 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
		y$1 = y$1 > .008856 ? y$1 ** (1 / 3) : 7.787 * y$1 + 16 / 116;
		z = z > .008856 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
		const l = 116 * y$1 - 16;
		const a = 500 * (x - y$1);
		const b = 200 * (y$1 - z);
		return [
			l,
			a,
			b
		];
	};
	convert$1.hsl.rgb = function(hsl) {
		const h$1 = hsl[0] / 360;
		const s$1 = hsl[1] / 100;
		const l = hsl[2] / 100;
		let t2;
		let t3;
		let val;
		if (s$1 === 0) {
			val = l * 255;
			return [
				val,
				val,
				val
			];
		}
		if (l < .5) t2 = l * (1 + s$1);
		else t2 = l + s$1 - l * s$1;
		const t1 = 2 * l - t2;
		const rgb = [
			0,
			0,
			0
		];
		for (let i = 0; i < 3; i++) {
			t3 = h$1 + 1 / 3 * -(i - 1);
			if (t3 < 0) t3++;
			if (t3 > 1) t3--;
			if (6 * t3 < 1) val = t1 + (t2 - t1) * 6 * t3;
			else if (2 * t3 < 1) val = t2;
			else if (3 * t3 < 2) val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
			else val = t1;
			rgb[i] = val * 255;
		}
		return rgb;
	};
	convert$1.hsl.hsv = function(hsl) {
		const h$1 = hsl[0];
		let s$1 = hsl[1] / 100;
		let l = hsl[2] / 100;
		let smin = s$1;
		const lmin = Math.max(l, .01);
		l *= 2;
		s$1 *= l <= 1 ? l : 2 - l;
		smin *= lmin <= 1 ? lmin : 2 - lmin;
		const v$1 = (l + s$1) / 2;
		const sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s$1 / (l + s$1);
		return [
			h$1,
			sv * 100,
			v$1 * 100
		];
	};
	convert$1.hsv.rgb = function(hsv) {
		const h$1 = hsv[0] / 60;
		const s$1 = hsv[1] / 100;
		let v$1 = hsv[2] / 100;
		const hi = Math.floor(h$1) % 6;
		const f = h$1 - Math.floor(h$1);
		const p = 255 * v$1 * (1 - s$1);
		const q = 255 * v$1 * (1 - s$1 * f);
		const t$5 = 255 * v$1 * (1 - s$1 * (1 - f));
		v$1 *= 255;
		switch (hi) {
			case 0: return [
				v$1,
				t$5,
				p
			];
			case 1: return [
				q,
				v$1,
				p
			];
			case 2: return [
				p,
				v$1,
				t$5
			];
			case 3: return [
				p,
				q,
				v$1
			];
			case 4: return [
				t$5,
				p,
				v$1
			];
			case 5: return [
				v$1,
				p,
				q
			];
		}
	};
	convert$1.hsv.hsl = function(hsv) {
		const h$1 = hsv[0];
		const s$1 = hsv[1] / 100;
		const v$1 = hsv[2] / 100;
		const vmin = Math.max(v$1, .01);
		let sl;
		let l;
		l = (2 - s$1) * v$1;
		const lmin = (2 - s$1) * vmin;
		sl = s$1 * vmin;
		sl /= lmin <= 1 ? lmin : 2 - lmin;
		sl = sl || 0;
		l /= 2;
		return [
			h$1,
			sl * 100,
			l * 100
		];
	};
	convert$1.hwb.rgb = function(hwb) {
		const h$1 = hwb[0] / 360;
		let wh = hwb[1] / 100;
		let bl = hwb[2] / 100;
		const ratio = wh + bl;
		let f;
		if (ratio > 1) {
			wh /= ratio;
			bl /= ratio;
		}
		const i = Math.floor(6 * h$1);
		const v$1 = 1 - bl;
		f = 6 * h$1 - i;
		if ((i & 1) !== 0) f = 1 - f;
		const n = wh + f * (v$1 - wh);
		let r;
		let g;
		let b;
		switch (i) {
			default:
			case 6:
			case 0:
				r = v$1;
				g = n;
				b = wh;
				break;
			case 1:
				r = n;
				g = v$1;
				b = wh;
				break;
			case 2:
				r = wh;
				g = v$1;
				b = n;
				break;
			case 3:
				r = wh;
				g = n;
				b = v$1;
				break;
			case 4:
				r = n;
				g = wh;
				b = v$1;
				break;
			case 5:
				r = v$1;
				g = wh;
				b = n;
				break;
		}
		return [
			r * 255,
			g * 255,
			b * 255
		];
	};
	convert$1.cmyk.rgb = function(cmyk) {
		const c = cmyk[0] / 100;
		const m$1 = cmyk[1] / 100;
		const y$1 = cmyk[2] / 100;
		const k = cmyk[3] / 100;
		const r = 1 - Math.min(1, c * (1 - k) + k);
		const g = 1 - Math.min(1, m$1 * (1 - k) + k);
		const b = 1 - Math.min(1, y$1 * (1 - k) + k);
		return [
			r * 255,
			g * 255,
			b * 255
		];
	};
	convert$1.xyz.rgb = function(xyz) {
		const x = xyz[0] / 100;
		const y$1 = xyz[1] / 100;
		const z = xyz[2] / 100;
		let r;
		let g;
		let b;
		r = x * 3.2406 + y$1 * -1.5372 + z * -.4986;
		g = x * -.9689 + y$1 * 1.8758 + z * .0415;
		b = x * .0557 + y$1 * -.204 + z * 1.057;
		r = r > .0031308 ? 1.055 * r ** (1 / 2.4) - .055 : r * 12.92;
		g = g > .0031308 ? 1.055 * g ** (1 / 2.4) - .055 : g * 12.92;
		b = b > .0031308 ? 1.055 * b ** (1 / 2.4) - .055 : b * 12.92;
		r = Math.min(Math.max(0, r), 1);
		g = Math.min(Math.max(0, g), 1);
		b = Math.min(Math.max(0, b), 1);
		return [
			r * 255,
			g * 255,
			b * 255
		];
	};
	convert$1.xyz.lab = function(xyz) {
		let x = xyz[0];
		let y$1 = xyz[1];
		let z = xyz[2];
		x /= 95.047;
		y$1 /= 100;
		z /= 108.883;
		x = x > .008856 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
		y$1 = y$1 > .008856 ? y$1 ** (1 / 3) : 7.787 * y$1 + 16 / 116;
		z = z > .008856 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
		const l = 116 * y$1 - 16;
		const a = 500 * (x - y$1);
		const b = 200 * (y$1 - z);
		return [
			l,
			a,
			b
		];
	};
	convert$1.lab.xyz = function(lab) {
		const l = lab[0];
		const a = lab[1];
		const b = lab[2];
		let x;
		let y$1;
		let z;
		y$1 = (l + 16) / 116;
		x = a / 500 + y$1;
		z = y$1 - b / 200;
		const y2 = y$1 ** 3;
		const x2 = x ** 3;
		const z2 = z ** 3;
		y$1 = y2 > .008856 ? y2 : (y$1 - 16 / 116) / 7.787;
		x = x2 > .008856 ? x2 : (x - 16 / 116) / 7.787;
		z = z2 > .008856 ? z2 : (z - 16 / 116) / 7.787;
		x *= 95.047;
		y$1 *= 100;
		z *= 108.883;
		return [
			x,
			y$1,
			z
		];
	};
	convert$1.lab.lch = function(lab) {
		const l = lab[0];
		const a = lab[1];
		const b = lab[2];
		let h$1;
		const hr = Math.atan2(b, a);
		h$1 = hr * 360 / 2 / Math.PI;
		if (h$1 < 0) h$1 += 360;
		const c = Math.sqrt(a * a + b * b);
		return [
			l,
			c,
			h$1
		];
	};
	convert$1.lch.lab = function(lch) {
		const l = lch[0];
		const c = lch[1];
		const h$1 = lch[2];
		const hr = h$1 / 360 * 2 * Math.PI;
		const a = c * Math.cos(hr);
		const b = c * Math.sin(hr);
		return [
			l,
			a,
			b
		];
	};
	convert$1.rgb.ansi16 = function(args, saturation = null) {
		const [r, g, b] = args;
		let value = saturation === null ? convert$1.rgb.hsv(args)[2] : saturation;
		value = Math.round(value / 50);
		if (value === 0) return 30;
		let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
		if (value === 2) ansi += 60;
		return ansi;
	};
	convert$1.hsv.ansi16 = function(args) {
		return convert$1.rgb.ansi16(convert$1.hsv.rgb(args), args[2]);
	};
	convert$1.rgb.ansi256 = function(args) {
		const r = args[0];
		const g = args[1];
		const b = args[2];
		if (r === g && g === b) {
			if (r < 8) return 16;
			if (r > 248) return 231;
			return Math.round((r - 8) / 247 * 24) + 232;
		}
		const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
		return ansi;
	};
	convert$1.ansi16.rgb = function(args) {
		let color$1 = args % 10;
		if (color$1 === 0 || color$1 === 7) {
			if (args > 50) color$1 += 3.5;
			color$1 = color$1 / 10.5 * 255;
			return [
				color$1,
				color$1,
				color$1
			];
		}
		const mult = (~~(args > 50) + 1) * .5;
		const r = (color$1 & 1) * mult * 255;
		const g = (color$1 >> 1 & 1) * mult * 255;
		const b = (color$1 >> 2 & 1) * mult * 255;
		return [
			r,
			g,
			b
		];
	};
	convert$1.ansi256.rgb = function(args) {
		if (args >= 232) {
			const c = (args - 232) * 10 + 8;
			return [
				c,
				c,
				c
			];
		}
		args -= 16;
		let rem;
		const r = Math.floor(args / 36) / 5 * 255;
		const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
		const b = rem % 6 / 5 * 255;
		return [
			r,
			g,
			b
		];
	};
	convert$1.rgb.hex = function(args) {
		const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
		const string = integer.toString(16).toUpperCase();
		return "000000".substring(string.length) + string;
	};
	convert$1.hex.rgb = function(args) {
		const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
		if (!match) return [
			0,
			0,
			0
		];
		let colorString$1 = match[0];
		if (match[0].length === 3) colorString$1 = colorString$1.split("").map((char) => {
			return char + char;
		}).join("");
		const integer = parseInt(colorString$1, 16);
		const r = integer >> 16 & 255;
		const g = integer >> 8 & 255;
		const b = integer & 255;
		return [
			r,
			g,
			b
		];
	};
	convert$1.rgb.hcg = function(rgb) {
		const r = rgb[0] / 255;
		const g = rgb[1] / 255;
		const b = rgb[2] / 255;
		const max$2 = Math.max(Math.max(r, g), b);
		const min$1 = Math.min(Math.min(r, g), b);
		const chroma = max$2 - min$1;
		let grayscale;
		let hue;
		if (chroma < 1) grayscale = min$1 / (1 - chroma);
		else grayscale = 0;
		if (chroma <= 0) hue = 0;
		else if (max$2 === r) hue = (g - b) / chroma % 6;
		else if (max$2 === g) hue = 2 + (b - r) / chroma;
		else hue = 4 + (r - g) / chroma;
		hue /= 6;
		hue %= 1;
		return [
			hue * 360,
			chroma * 100,
			grayscale * 100
		];
	};
	convert$1.hsl.hcg = function(hsl) {
		const s$1 = hsl[1] / 100;
		const l = hsl[2] / 100;
		const c = l < .5 ? 2 * s$1 * l : 2 * s$1 * (1 - l);
		let f = 0;
		if (c < 1) f = (l - .5 * c) / (1 - c);
		return [
			hsl[0],
			c * 100,
			f * 100
		];
	};
	convert$1.hsv.hcg = function(hsv) {
		const s$1 = hsv[1] / 100;
		const v$1 = hsv[2] / 100;
		const c = s$1 * v$1;
		let f = 0;
		if (c < 1) f = (v$1 - c) / (1 - c);
		return [
			hsv[0],
			c * 100,
			f * 100
		];
	};
	convert$1.hcg.rgb = function(hcg) {
		const h$1 = hcg[0] / 360;
		const c = hcg[1] / 100;
		const g = hcg[2] / 100;
		if (c === 0) return [
			g * 255,
			g * 255,
			g * 255
		];
		const pure = [
			0,
			0,
			0
		];
		const hi = h$1 % 1 * 6;
		const v$1 = hi % 1;
		const w$1 = 1 - v$1;
		let mg = 0;
		switch (Math.floor(hi)) {
			case 0:
				pure[0] = 1;
				pure[1] = v$1;
				pure[2] = 0;
				break;
			case 1:
				pure[0] = w$1;
				pure[1] = 1;
				pure[2] = 0;
				break;
			case 2:
				pure[0] = 0;
				pure[1] = 1;
				pure[2] = v$1;
				break;
			case 3:
				pure[0] = 0;
				pure[1] = w$1;
				pure[2] = 1;
				break;
			case 4:
				pure[0] = v$1;
				pure[1] = 0;
				pure[2] = 1;
				break;
			default:
				pure[0] = 1;
				pure[1] = 0;
				pure[2] = w$1;
		}
		mg = (1 - c) * g;
		return [
			(c * pure[0] + mg) * 255,
			(c * pure[1] + mg) * 255,
			(c * pure[2] + mg) * 255
		];
	};
	convert$1.hcg.hsv = function(hcg) {
		const c = hcg[1] / 100;
		const g = hcg[2] / 100;
		const v$1 = c + g * (1 - c);
		let f = 0;
		if (v$1 > 0) f = c / v$1;
		return [
			hcg[0],
			f * 100,
			v$1 * 100
		];
	};
	convert$1.hcg.hsl = function(hcg) {
		const c = hcg[1] / 100;
		const g = hcg[2] / 100;
		const l = g * (1 - c) + .5 * c;
		let s$1 = 0;
		if (l > 0 && l < .5) s$1 = c / (2 * l);
		else if (l >= .5 && l < 1) s$1 = c / (2 * (1 - l));
		return [
			hcg[0],
			s$1 * 100,
			l * 100
		];
	};
	convert$1.hcg.hwb = function(hcg) {
		const c = hcg[1] / 100;
		const g = hcg[2] / 100;
		const v$1 = c + g * (1 - c);
		return [
			hcg[0],
			(v$1 - c) * 100,
			(1 - v$1) * 100
		];
	};
	convert$1.hwb.hcg = function(hwb) {
		const w$1 = hwb[1] / 100;
		const b = hwb[2] / 100;
		const v$1 = 1 - b;
		const c = v$1 - w$1;
		let g = 0;
		if (c < 1) g = (v$1 - c) / (1 - c);
		return [
			hwb[0],
			c * 100,
			g * 100
		];
	};
	convert$1.apple.rgb = function(apple) {
		return [
			apple[0] / 65535 * 255,
			apple[1] / 65535 * 255,
			apple[2] / 65535 * 255
		];
	};
	convert$1.rgb.apple = function(rgb) {
		return [
			rgb[0] / 255 * 65535,
			rgb[1] / 255 * 65535,
			rgb[2] / 255 * 65535
		];
	};
	convert$1.gray.rgb = function(args) {
		return [
			args[0] / 100 * 255,
			args[0] / 100 * 255,
			args[0] / 100 * 255
		];
	};
	convert$1.gray.hsl = function(args) {
		return [
			0,
			0,
			args[0]
		];
	};
	convert$1.gray.hsv = convert$1.gray.hsl;
	convert$1.gray.hwb = function(gray) {
		return [
			0,
			100,
			gray[0]
		];
	};
	convert$1.gray.cmyk = function(gray) {
		return [
			0,
			0,
			0,
			gray[0]
		];
	};
	convert$1.gray.lab = function(gray) {
		return [
			gray[0],
			0,
			0
		];
	};
	convert$1.gray.hex = function(gray) {
		const val = Math.round(gray[0] / 100 * 255) & 255;
		const integer = (val << 16) + (val << 8) + val;
		const string = integer.toString(16).toUpperCase();
		return "000000".substring(string.length) + string;
	};
	convert$1.rgb.gray = function(rgb) {
		const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
		return [val / 255 * 100];
	};
} });

//#endregion
//#region node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/route.js
var require_route = __commonJS({ "node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/route.js"(exports, module) {
	const conversions$1 = require_conversions();
	function buildGraph() {
		const graph = {};
		const models$2 = Object.keys(conversions$1);
		for (let len = models$2.length, i = 0; i < len; i++) graph[models$2[i]] = {
			distance: -1,
			parent: null
		};
		return graph;
	}
	function deriveBFS(fromModel) {
		const graph = buildGraph();
		const queue = [fromModel];
		graph[fromModel].distance = 0;
		while (queue.length) {
			const current = queue.pop();
			const adjacents = Object.keys(conversions$1[current]);
			for (let len = adjacents.length, i = 0; i < len; i++) {
				const adjacent = adjacents[i];
				const node = graph[adjacent];
				if (node.distance === -1) {
					node.distance = graph[current].distance + 1;
					node.parent = current;
					queue.unshift(adjacent);
				}
			}
		}
		return graph;
	}
	function link(from$2, to) {
		return function(args) {
			return to(from$2(args));
		};
	}
	function wrapConversion(toModel, graph) {
		const path$10 = [graph[toModel].parent, toModel];
		let fn = conversions$1[graph[toModel].parent][toModel];
		let cur = graph[toModel].parent;
		while (graph[cur].parent) {
			path$10.unshift(graph[cur].parent);
			fn = link(conversions$1[graph[cur].parent][cur], fn);
			cur = graph[cur].parent;
		}
		fn.conversion = path$10;
		return fn;
	}
	module.exports = function(fromModel) {
		const graph = deriveBFS(fromModel);
		const conversion = {};
		const models$2 = Object.keys(graph);
		for (let len = models$2.length, i = 0; i < len; i++) {
			const toModel = models$2[i];
			const node = graph[toModel];
			if (node.parent === null) continue;
			conversion[toModel] = wrapConversion(toModel, graph);
		}
		return conversion;
	};
} });

//#endregion
//#region node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/index.js
var require_color_convert = __commonJS({ "node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/index.js"(exports, module) {
	const conversions = require_conversions();
	const route = require_route();
	const convert = {};
	const models = Object.keys(conversions);
	function wrapRaw(fn) {
		const wrappedFn = function(...args) {
			const arg0 = args[0];
			if (arg0 === void 0 || arg0 === null) return arg0;
			if (arg0.length > 1) args = arg0;
			return fn(args);
		};
		if ("conversion" in fn) wrappedFn.conversion = fn.conversion;
		return wrappedFn;
	}
	function wrapRounded(fn) {
		const wrappedFn = function(...args) {
			const arg0 = args[0];
			if (arg0 === void 0 || arg0 === null) return arg0;
			if (arg0.length > 1) args = arg0;
			const result = fn(args);
			if (typeof result === "object") for (let len = result.length, i = 0; i < len; i++) result[i] = Math.round(result[i]);
			return result;
		};
		if ("conversion" in fn) wrappedFn.conversion = fn.conversion;
		return wrappedFn;
	}
	models.forEach((fromModel) => {
		convert[fromModel] = {};
		Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
		Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
		const routes = route(fromModel);
		const routeModels = Object.keys(routes);
		routeModels.forEach((toModel) => {
			const fn = routes[toModel];
			convert[fromModel][toModel] = wrapRounded(fn);
			convert[fromModel][toModel].raw = wrapRaw(fn);
		});
	});
	module.exports = convert;
} });

//#endregion
//#region node_modules/.pnpm/ansi-styles@4.3.0/node_modules/ansi-styles/index.js
var require_ansi_styles = __commonJS({ "node_modules/.pnpm/ansi-styles@4.3.0/node_modules/ansi-styles/index.js"(exports, module) {
	const wrapAnsi16 = (fn, offset) => (...args) => {
		const code = fn(...args);
		return `\u001B[${code + offset}m`;
	};
	const wrapAnsi256 = (fn, offset) => (...args) => {
		const code = fn(...args);
		return `\u001B[${38 + offset};5;${code}m`;
	};
	const wrapAnsi16m = (fn, offset) => (...args) => {
		const rgb = fn(...args);
		return `\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
	};
	const ansi2ansi = (n) => n;
	const rgb2rgb = (r, g, b) => [
		r,
		g,
		b
	];
	const setLazyProperty = (object, property, get) => {
		Object.defineProperty(object, property, {
			get: () => {
				const value = get();
				Object.defineProperty(object, property, {
					value,
					enumerable: true,
					configurable: true
				});
				return value;
			},
			enumerable: true,
			configurable: true
		});
	};
	/** @type {typeof import('color-convert')} */
	let colorConvert;
	const makeDynamicStyles = (wrap$2, targetSpace, identity$1, isBackground) => {
		if (colorConvert === void 0) colorConvert = require_color_convert();
		const offset = isBackground ? 10 : 0;
		const styles$3 = {};
		for (const [sourceSpace, suite] of Object.entries(colorConvert)) {
			const name$2 = sourceSpace === "ansi16" ? "ansi" : sourceSpace;
			if (sourceSpace === targetSpace) styles$3[name$2] = wrap$2(identity$1, offset);
			else if (typeof suite === "object") styles$3[name$2] = wrap$2(suite[targetSpace], offset);
		}
		return styles$3;
	};
	function assembleStyles() {
		const codes$2 = new Map();
		const styles$3 = {
			modifier: {
				reset: [0, 0],
				bold: [1, 22],
				dim: [2, 22],
				italic: [3, 23],
				underline: [4, 24],
				inverse: [7, 27],
				hidden: [8, 28],
				strikethrough: [9, 29]
			},
			color: {
				black: [30, 39],
				red: [31, 39],
				green: [32, 39],
				yellow: [33, 39],
				blue: [34, 39],
				magenta: [35, 39],
				cyan: [36, 39],
				white: [37, 39],
				blackBright: [90, 39],
				redBright: [91, 39],
				greenBright: [92, 39],
				yellowBright: [93, 39],
				blueBright: [94, 39],
				magentaBright: [95, 39],
				cyanBright: [96, 39],
				whiteBright: [97, 39]
			},
			bgColor: {
				bgBlack: [40, 49],
				bgRed: [41, 49],
				bgGreen: [42, 49],
				bgYellow: [43, 49],
				bgBlue: [44, 49],
				bgMagenta: [45, 49],
				bgCyan: [46, 49],
				bgWhite: [47, 49],
				bgBlackBright: [100, 49],
				bgRedBright: [101, 49],
				bgGreenBright: [102, 49],
				bgYellowBright: [103, 49],
				bgBlueBright: [104, 49],
				bgMagentaBright: [105, 49],
				bgCyanBright: [106, 49],
				bgWhiteBright: [107, 49]
			}
		};
		styles$3.color.gray = styles$3.color.blackBright;
		styles$3.bgColor.bgGray = styles$3.bgColor.bgBlackBright;
		styles$3.color.grey = styles$3.color.blackBright;
		styles$3.bgColor.bgGrey = styles$3.bgColor.bgBlackBright;
		for (const [groupName, group$1] of Object.entries(styles$3)) {
			for (const [styleName, style] of Object.entries(group$1)) {
				styles$3[styleName] = {
					open: `\u001B[${style[0]}m`,
					close: `\u001B[${style[1]}m`
				};
				group$1[styleName] = styles$3[styleName];
				codes$2.set(style[0], style[1]);
			}
			Object.defineProperty(styles$3, groupName, {
				value: group$1,
				enumerable: false
			});
		}
		Object.defineProperty(styles$3, "codes", {
			value: codes$2,
			enumerable: false
		});
		styles$3.color.close = "\x1B[39m";
		styles$3.bgColor.close = "\x1B[49m";
		setLazyProperty(styles$3.color, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, false));
		setLazyProperty(styles$3.color, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, false));
		setLazyProperty(styles$3.color, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, false));
		setLazyProperty(styles$3.bgColor, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, true));
		setLazyProperty(styles$3.bgColor, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, true));
		setLazyProperty(styles$3.bgColor, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, true));
		return styles$3;
	}
	Object.defineProperty(module, "exports", {
		enumerable: true,
		get: assembleStyles
	});
} });

//#endregion
//#region node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js
var require_has_flag = __commonJS({ "node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js"(exports, module) {
	module.exports = (flag, argv = process.argv) => {
		const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
		const position = argv.indexOf(prefix + flag);
		const terminatorPosition = argv.indexOf("--");
		return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
	};
} });

//#endregion
//#region node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js
var require_supports_color = __commonJS({ "node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js"(exports, module) {
	const os = __require("os");
	const tty$1 = __require("tty");
	const hasFlag = require_has_flag();
	const { env } = process;
	let forceColor;
	if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) forceColor = 0;
	else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) forceColor = 1;
	if ("FORCE_COLOR" in env) if (env.FORCE_COLOR === "true") forceColor = 1;
	else if (env.FORCE_COLOR === "false") forceColor = 0;
	else forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
	function translateLevel(level) {
		if (level === 0) return false;
		return {
			level,
			hasBasic: true,
			has256: level >= 2,
			has16m: level >= 3
		};
	}
	function supportsColor(haveStream, streamIsTTY) {
		if (forceColor === 0) return 0;
		if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) return 3;
		if (hasFlag("color=256")) return 2;
		if (haveStream && !streamIsTTY && forceColor === void 0) return 0;
		const min$1 = forceColor || 0;
		if (env.TERM === "dumb") return min$1;
		if (process.platform === "win32") {
			const osRelease = os.release().split(".");
			if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) return Number(osRelease[2]) >= 14931 ? 3 : 2;
			return 1;
		}
		if ("CI" in env) {
			if ([
				"TRAVIS",
				"CIRCLECI",
				"APPVEYOR",
				"GITLAB_CI",
				"GITHUB_ACTIONS",
				"BUILDKITE"
			].some((sign$1) => sign$1 in env) || env.CI_NAME === "codeship") return 1;
			return min$1;
		}
		if ("TEAMCITY_VERSION" in env) return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
		if (env.COLORTERM === "truecolor") return 3;
		if ("TERM_PROGRAM" in env) {
			const version = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
			switch (env.TERM_PROGRAM) {
				case "iTerm.app": return version >= 3 ? 3 : 2;
				case "Apple_Terminal": return 2;
			}
		}
		if (/-256(color)?$/i.test(env.TERM)) return 2;
		if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) return 1;
		if ("COLORTERM" in env) return 1;
		return min$1;
	}
	function getSupportLevel(stream$3) {
		const level = supportsColor(stream$3, stream$3 && stream$3.isTTY);
		return translateLevel(level);
	}
	module.exports = {
		supportsColor: getSupportLevel,
		stdout: translateLevel(supportsColor(true, tty$1.isatty(1))),
		stderr: translateLevel(supportsColor(true, tty$1.isatty(2)))
	};
} });

//#endregion
//#region node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/util.js
var require_util$2 = __commonJS({ "node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/util.js"(exports, module) {
	const stringReplaceAll$1 = (string, substring, replacer$1) => {
		let index = string.indexOf(substring);
		if (index === -1) return string;
		const substringLength = substring.length;
		let endIndex = 0;
		let returnValue = "";
		do {
			returnValue += string.substr(endIndex, index - endIndex) + substring + replacer$1;
			endIndex = index + substringLength;
			index = string.indexOf(substring, endIndex);
		} while (index !== -1);
		returnValue += string.substr(endIndex);
		return returnValue;
	};
	const stringEncaseCRLFWithFirstIndex$1 = (string, prefix, postfix, index) => {
		let endIndex = 0;
		let returnValue = "";
		do {
			const gotCR = string[index - 1] === "\r";
			returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? "\r\n" : "\n") + postfix;
			endIndex = index + 1;
			index = string.indexOf("\n", endIndex);
		} while (index !== -1);
		returnValue += string.substr(endIndex);
		return returnValue;
	};
	module.exports = {
		stringReplaceAll: stringReplaceAll$1,
		stringEncaseCRLFWithFirstIndex: stringEncaseCRLFWithFirstIndex$1
	};
} });

//#endregion
//#region node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/templates.js
var require_templates = __commonJS({ "node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/templates.js"(exports, module) {
	const TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
	const STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
	const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
	const ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;
	const ESCAPES = new Map([
		["n", "\n"],
		["r", "\r"],
		["t", "	"],
		["b", "\b"],
		["f", "\f"],
		["v", "\v"],
		["0", "\0"],
		["\\", "\\"],
		["e", "\x1B"],
		["a", "\x07"]
	]);
	function unescape$1(c) {
		const u = c[0] === "u";
		const bracket = c[1] === "{";
		if (u && !bracket && c.length === 5 || c[0] === "x" && c.length === 3) return String.fromCharCode(parseInt(c.slice(1), 16));
		if (u && bracket) return String.fromCodePoint(parseInt(c.slice(2, -1), 16));
		return ESCAPES.get(c) || c;
	}
	function parseArguments(name$2, arguments_) {
		const results = [];
		const chunks = arguments_.trim().split(/\s*,\s*/g);
		let matches;
		for (const chunk of chunks) {
			const number = Number(chunk);
			if (!Number.isNaN(number)) results.push(number);
			else if (matches = chunk.match(STRING_REGEX)) results.push(matches[2].replace(ESCAPE_REGEX, (m$1, escape, character) => escape ? unescape$1(escape) : character));
			else throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name$2}')`);
		}
		return results;
	}
	function parseStyle(style) {
		STYLE_REGEX.lastIndex = 0;
		const results = [];
		let matches;
		while ((matches = STYLE_REGEX.exec(style)) !== null) {
			const name$2 = matches[1];
			if (matches[2]) {
				const args = parseArguments(name$2, matches[2]);
				results.push([name$2].concat(args));
			} else results.push([name$2]);
		}
		return results;
	}
	function buildStyle(chalk$1, styles$3) {
		const enabled$2 = {};
		for (const layer of styles$3) for (const style of layer.styles) enabled$2[style[0]] = layer.inverse ? null : style.slice(1);
		let current = chalk$1;
		for (const [styleName, styles$4] of Object.entries(enabled$2)) {
			if (!Array.isArray(styles$4)) continue;
			if (!(styleName in current)) throw new Error(`Unknown Chalk style: ${styleName}`);
			current = styles$4.length > 0 ? current[styleName](...styles$4) : current[styleName];
		}
		return current;
	}
	module.exports = (chalk$1, temporary) => {
		const styles$3 = [];
		const chunks = [];
		let chunk = [];
		temporary.replace(TEMPLATE_REGEX, (m$1, escapeCharacter, inverse, style, close, character) => {
			if (escapeCharacter) chunk.push(unescape$1(escapeCharacter));
			else if (style) {
				const string = chunk.join("");
				chunk = [];
				chunks.push(styles$3.length === 0 ? string : buildStyle(chalk$1, styles$3)(string));
				styles$3.push({
					inverse,
					styles: parseStyle(style)
				});
			} else if (close) {
				if (styles$3.length === 0) throw new Error("Found extraneous } in Chalk template literal");
				chunks.push(buildStyle(chalk$1, styles$3)(chunk.join("")));
				chunk = [];
				styles$3.pop();
			} else chunk.push(character);
		});
		chunks.push(chunk.join(""));
		if (styles$3.length > 0) {
			const errMessage = `Chalk template literal is missing ${styles$3.length} closing bracket${styles$3.length === 1 ? "" : "s"} (\`}\`)`;
			throw new Error(errMessage);
		}
		return chunks.join("");
	};
} });

//#endregion
//#region node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/index.js
var require_source = __commonJS({ "node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/index.js"(exports, module) {
	const ansiStyles = require_ansi_styles();
	const { stdout: stdoutColor, stderr: stderrColor } = require_supports_color();
	const { stringReplaceAll, stringEncaseCRLFWithFirstIndex } = require_util$2();
	const { isArray: isArray$4 } = Array;
	const levelMapping = [
		"ansi",
		"ansi",
		"ansi256",
		"ansi16m"
	];
	const styles = Object.create(null);
	const applyOptions = (object, options = {}) => {
		if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) throw new Error("The `level` option should be an integer from 0 to 3");
		const colorLevel = stdoutColor ? stdoutColor.level : 0;
		object.level = options.level === void 0 ? colorLevel : options.level;
	};
	var ChalkClass = class {
		constructor(options) {
			return chalkFactory(options);
		}
	};
	const chalkFactory = (options) => {
		const chalk$1 = {};
		applyOptions(chalk$1, options);
		chalk$1.template = (...arguments_) => chalkTag(chalk$1.template, ...arguments_);
		Object.setPrototypeOf(chalk$1, Chalk.prototype);
		Object.setPrototypeOf(chalk$1.template, chalk$1);
		chalk$1.template.constructor = () => {
			throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.");
		};
		chalk$1.template.Instance = ChalkClass;
		return chalk$1.template;
	};
	function Chalk(options) {
		return chalkFactory(options);
	}
	for (const [styleName, style] of Object.entries(ansiStyles)) styles[styleName] = { get() {
		const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
		Object.defineProperty(this, styleName, { value: builder });
		return builder;
	} };
	styles.visible = { get() {
		const builder = createBuilder(this, this._styler, true);
		Object.defineProperty(this, "visible", { value: builder });
		return builder;
	} };
	const usedModels = [
		"rgb",
		"hex",
		"keyword",
		"hsl",
		"hsv",
		"hwb",
		"ansi",
		"ansi256"
	];
	for (const model$1 of usedModels) styles[model$1] = { get() {
		const { level } = this;
		return function(...arguments_) {
			const styler = createStyler(ansiStyles.color[levelMapping[level]][model$1](...arguments_), ansiStyles.color.close, this._styler);
			return createBuilder(this, styler, this._isEmpty);
		};
	} };
	for (const model$1 of usedModels) {
		const bgModel = "bg" + model$1[0].toUpperCase() + model$1.slice(1);
		styles[bgModel] = { get() {
			const { level } = this;
			return function(...arguments_) {
				const styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model$1](...arguments_), ansiStyles.bgColor.close, this._styler);
				return createBuilder(this, styler, this._isEmpty);
			};
		} };
	}
	const proto = Object.defineProperties(() => {}, {
		...styles,
		level: {
			enumerable: true,
			get() {
				return this._generator.level;
			},
			set(level) {
				this._generator.level = level;
			}
		}
	});
	const createStyler = (open, close, parent) => {
		let openAll;
		let closeAll;
		if (parent === void 0) {
			openAll = open;
			closeAll = close;
		} else {
			openAll = parent.openAll + open;
			closeAll = close + parent.closeAll;
		}
		return {
			open,
			close,
			openAll,
			closeAll,
			parent
		};
	};
	const createBuilder = (self$1, _styler, _isEmpty) => {
		const builder = (...arguments_) => {
			if (isArray$4(arguments_[0]) && isArray$4(arguments_[0].raw)) return applyStyle(builder, chalkTag(builder, ...arguments_));
			return applyStyle(builder, arguments_.length === 1 ? "" + arguments_[0] : arguments_.join(" "));
		};
		Object.setPrototypeOf(builder, proto);
		builder._generator = self$1;
		builder._styler = _styler;
		builder._isEmpty = _isEmpty;
		return builder;
	};
	const applyStyle = (self$1, string) => {
		if (self$1.level <= 0 || !string) return self$1._isEmpty ? "" : string;
		let styler = self$1._styler;
		if (styler === void 0) return string;
		const { openAll, closeAll } = styler;
		if (string.indexOf("\x1B") !== -1) while (styler !== void 0) {
			string = stringReplaceAll(string, styler.close, styler.open);
			styler = styler.parent;
		}
		const lfIndex = string.indexOf("\n");
		if (lfIndex !== -1) string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
		return openAll + string + closeAll;
	};
	let template;
	const chalkTag = (chalk$1, ...strings) => {
		const [firstString] = strings;
		if (!isArray$4(firstString) || !isArray$4(firstString.raw)) return strings.join(" ");
		const arguments_ = strings.slice(1);
		const parts = [firstString.raw[0]];
		for (let i = 1; i < firstString.length; i++) parts.push(String(arguments_[i - 1]).replace(/[{}\\]/g, "\\$&"), String(firstString.raw[i]));
		if (template === void 0) template = require_templates();
		return template(chalk$1, parts.join(""));
	};
	Object.defineProperties(Chalk.prototype, styles);
	const chalk = Chalk();
	chalk.supportsColor = stdoutColor;
	chalk.stderr = Chalk({ level: stderrColor ? stderrColor.level : 0 });
	chalk.stderr.supportsColor = stderrColor;
	module.exports = chalk;
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/logger/format/local.js
var require_local = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/logger/format/local.js"(exports) {
	var __importDefault$6 = exports && exports.__importDefault || function(mod) {
		return mod && mod.__esModule ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.local = void 0;
	exports.getMessageOrStack = getMessageOrStack;
	const chalk_1 = __importDefault$6(require_source());
	const winston_1$2 = require_winston();
	const { combine: combine$1, timestamp: timestamp$1, cli, printf, errors: errors$2 } = winston_1$2.format;
	/**
	* Format for local logging.
	*/
	exports.local = combine$1(errors$2({ stack: true }), timestamp$1(), (0, winston_1$2.format)(localTransformer)(), cli(), printf((info$1) => {
		const messageContext = info$1.custom_fields && typeof info$1.custom_fields === "object" && "messageContext" in info$1.custom_fields ? `${chalk_1.default.blue(`(${info$1.custom_fields.messageContext})`)}: ` : "";
		const message = typeof info$1.message === "string" ? info$1.message : "";
		const trimmedMessage = message.replace(/^\s*/, "");
		const paddingLength = message.length - trimmedMessage.length + messageContext.length;
		if (info$1.error) info$1.level = chalk_1.default.inverse(info$1.level);
		return `${chalk_1.default.gray(`[${info$1.timestamp}]`)} ${info$1.level} ${messageContext.padStart(paddingLength, " ")}${trimmedMessage}`;
	}));
	/**
	* Gets the stack of the given error if available, otherwise the message.
	* @param info - Object to be transformed.
	* @returns The message string to be used.
	* @internal
	*/
	function getMessageOrStack(info$1) {
		const isString$6 = (value) => typeof value === "string";
		const hasStackTrace = info$1.stack && info$1.level === "error";
		if (hasStackTrace && isString$6(info$1.stack)) return info$1.stack;
		if (isString$6(info$1.message)) return info$1.message;
		return "";
	}
	function localTransformer(info$1) {
		return {
			...info$1,
			level: info$1.level.toUpperCase(),
			message: getMessageOrStack(info$1)
		};
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/logger/format/kibana.js
var require_kibana = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/logger/format/kibana.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.kibana = void 0;
	const winston_1$1 = require_winston();
	const local_1 = require_local();
	const { combine, timestamp, json, errors: errors$1 } = winston_1$1.format;
	/**
	* Format for logging in Kibana.
	*/
	exports.kibana = combine(errors$1({ stack: true }), timestamp(), (0, winston_1$1.format)(kibanaTransformer)(), json());
	function kibanaTransformer(info$1) {
		return {
			...info$1,
			msg: (0, local_1.getMessageOrStack)(info$1),
			written_ts: new Date(info$1.timestamp).getTime(),
			written_at: info$1.timestamp
		};
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/logger/format/index.js
var require_format = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/logger/format/index.js"(exports) {
	var __createBinding$13 = exports && exports.__createBinding || (Object.create ? function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc$1 = Object.getOwnPropertyDescriptor(m$1, k);
		if (!desc$1 || ("get" in desc$1 ? !m$1.__esModule : desc$1.writable || desc$1.configurable)) desc$1 = {
			enumerable: true,
			get: function() {
				return m$1[k];
			}
		};
		Object.defineProperty(o, k2, desc$1);
	} : function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		o[k2] = m$1[k];
	});
	var __exportStar$10 = exports && exports.__exportStar || function(m$1, exports$1) {
		for (var p in m$1) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports$1, p)) __createBinding$13(exports$1, m$1, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar$10(require_kibana(), exports);
	__exportStar$10(require_local(), exports);
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/logger/cloud-sdk-logger.js
var require_cloud_sdk_logger = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/logger/cloud-sdk-logger.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.cloudSdkExceptionLogger = exports.logFormat = void 0;
	exports.muteLoggers = muteLoggers;
	exports.unmuteLoggers = unmuteLoggers;
	exports.disableExceptionLogger = disableExceptionLogger;
	exports.enableExceptionLogger = enableExceptionLogger;
	exports.createLogger = createLogger;
	exports.getLogger = getLogger$8;
	exports.setLogLevel = setLogLevel;
	exports.setGlobalLogLevel = setGlobalLogLevel;
	exports.getGlobalLogLevel = getGlobalLogLevel;
	exports.setGlobalTransports = setGlobalTransports;
	exports.setLogFormat = setLogFormat;
	exports.setGlobalLogFormat = setGlobalLogFormat;
	exports.getGlobalLogFormat = getGlobalLogFormat;
	exports.sanitizeRecord = sanitizeRecord;
	exports.resetCustomLogLevels = resetCustomLogLevels;
	exports.resetCustomLogFormats = resetCustomLogFormats;
	const winston_1 = require_winston();
	const format_1 = require_format();
	const loggerReference = "sap-cloud-sdk-logger";
	const exceptionLoggerId = "sap-cloud-sdk-exception-logger";
	const container = new winston_1.Container();
	/**
	* Log formats provided by the util package.
	*/
	exports.logFormat = {
		kibana: format_1.kibana,
		local: format_1.local
	};
	container.options.format = process.env.NODE_ENV === "production" ? exports.logFormat.kibana : exports.logFormat.local;
	const exceptionTransport = new winston_1.transports.Console();
	const customLogLevels = {};
	const customLogFormats = {};
	const DEFAULT_LOGGER__MESSAGE_CONTEXT = "__DEFAULT_LOGGER__MESSAGE_CONTEXT";
	let silent = false;
	const moduleLogger = createLogger({
		package: "util",
		messageContext: "cloud-sdk-logger"
	});
	function toggleMuteLoggers(silence) {
		silent = silence;
		container.loggers.forEach((logger$29) => toggleSilenceTransports(logger$29, silence));
	}
	function toggleSilenceTransports(logger$29, silence) {
		logger$29.transports.forEach((transport) => transport.silent = silence);
	}
	/**
	* Mute all logger output created by the SAP Cloud SDK Logger. This also applies to future loggers created. Useful for tests.
	*/
	function muteLoggers() {
		toggleMuteLoggers(true);
	}
	/**
	* Unmute all logger output created by the SAP Cloud SDK Logger. This also applies to future loggers created. Useful for tests.
	*/
	function unmuteLoggers() {
		toggleMuteLoggers(false);
	}
	/**
	* Default logger for the SAP Cloud SDK for unhandled exceptions.
	*/
	exports.cloudSdkExceptionLogger = container.get(exceptionLoggerId, {
		defaultMeta: {
			logger: loggerReference,
			test: "exception"
		},
		format: container.options.format,
		exceptionHandlers: [exceptionTransport]
	});
	/**
	* Disable logging of exceptions. Enabled by default.
	*/
	function disableExceptionLogger() {
		exports.cloudSdkExceptionLogger.exceptions.unhandle();
	}
	/**
	* Enable logging of exceptions. Enabled by default.
	*/
	function enableExceptionLogger() {
		disableExceptionLogger();
		exports.cloudSdkExceptionLogger.exceptions.handle(exceptionTransport);
	}
	/**
	* Create a logger for the given message context, if available.
	*
	* Usage:
	* To create a logger in your module, it is recommended to pass a module identifier that will be logged as `messageContext` for all messages from this logger:
	* `const logger = createLogger('my-module');`. Not setting any module identifier will retrieve the default logger.
	* Use this logger throughout your module. If the module is spread over multiple files, you can retrieve the logger instance by calling the `createLogger` function with the respective module identifier.
	* There will always be only one instance of a logger per module identifier.
	* You can pass any custom data that you want to be logged in addition by passing an object instead. You can change the default logging level (`INFO`) using the `level` key in the object.
	* In those cases, provide the `messageContext` as a key in the object:
	* ```
	* const logger = createLogger({
	*   messageContext: 'my-module',
	*   myCustomKey: 'my-custom-data',
	*   level: 'debug'
	* });
	* ```
	* You will find these information under the _custom_fields_ key in your Cloud Foundry logs.
	*
	* To retrieve a logger after its creation use {@link getLogger}.
	* If you want to change the log level of a logger use {@link setLogLevel}.
	* @param messageContext - Either a key for the message context of all messages produced by the logger or an object with additional keys to set in the message.
	* @returns A newly created or an already existing logger for the given context.
	*/
	function createLogger(messageContext) {
		const customFields = typeof messageContext === "string" ? { messageContext } : { ...messageContext };
		const logger$29 = container.get(customFields.messageContext, {
			level: process.env.SAP_CLOUD_SDK_LOG_LEVEL || customLogLevels[customFields.messageContext] || customFields.level || container.options.level || "info",
			defaultMeta: {
				...Object.entries(customFields).length && { custom_fields: customFields },
				logger: customFields.logger || loggerReference
			},
			format: customLogFormats[customFields.messageContext] || customFields.format || container.options.format || exports.logFormat.local,
			transports: [new winston_1.transports.Console()]
		});
		toggleSilenceTransports(logger$29, silent);
		return logger$29;
	}
	/**
	* Get logger for a given message context, if available.
	* @param messageContext - A key for the message context of all messages produced by the logger.
	* @returns The logger for the given messageContext if it was created before.
	*/
	function getLogger$8(messageContext = DEFAULT_LOGGER__MESSAGE_CONTEXT) {
		if (container.has(messageContext)) return container.get(messageContext);
	}
	/**
	* Change the log level of a logger based on its message context.
	* e.g., to set the log level for the destination accessor module of the SDK to _debug_, simply call `setLogLevel('debug', 'destination-accessor')`.
	* @param level - Level to set the logger to. Use an empty string '' as level to unset context level.
	* @param messageContextOrLogger - Message context of the logger to change the log level for or the logger itself.
	*/
	function setLogLevel(level, messageContextOrLogger = DEFAULT_LOGGER__MESSAGE_CONTEXT) {
		const messageContext = typeof messageContextOrLogger === "string" ? messageContextOrLogger : getMessageContext(messageContextOrLogger);
		if (messageContext) {
			customLogLevels[messageContext] = level;
			if (container.has(messageContext)) {
				const logger$29 = container.get(messageContext);
				logger$29.level = level;
			}
		} else if (typeof messageContextOrLogger !== "string") {
			moduleLogger.warn("Setting log level for logger with unknown message context");
			messageContextOrLogger.level = level;
		}
	}
	/**
	* Change the global log level of the container which will set default level for all active loggers.
	* e.g., to set the global log level call `setGlobalLogLevel('debug')`.
	* @param level - The log level to set the global log level to.
	*/
	function setGlobalLogLevel(level) {
		container.options.level = level;
		container.loggers.forEach((logger$29) => {
			logger$29.level = level;
		});
	}
	/**
	* Get the global log level of the container.
	* @returns The global log level, or `undefined` when not defined.
	*/
	function getGlobalLogLevel() {
		return container.options.level;
	}
	/**
	* Change the global transport of the container which will set default transport for all active loggers.
	* e.g., to set the global transport call `setGlobalTransports(httpTransport)`.
	* @param customTransports - The transport to set the global transport to. Both single transport and an array with multiple transports are supported.
	*/
	function setGlobalTransports(customTransports) {
		container.options.transports = customTransports;
		container.loggers.forEach((logger$29) => {
			logger$29.clear();
			return Array.isArray(customTransports) ? customTransports.forEach((transport) => logger$29.add(transport)) : logger$29.add(customTransports);
		});
	}
	/**
	* Change the log format of a logger based on its message context.
	* e.g., to set the log format for the destination accessor module of the SDK to `local`, simply call `setLogFormat(logFormat.local, 'destination-accessor')`.
	* @param format - Format to set the logger to. Use `logFormat` to get the pre-defined log formats or use a custom log format.
	* @param messageContextOrLogger - Message context of the logger to change the log level for or the logger itself.
	*/
	function setLogFormat(format$14, messageContextOrLogger = DEFAULT_LOGGER__MESSAGE_CONTEXT) {
		const messageContext = typeof messageContextOrLogger === "string" ? messageContextOrLogger : getMessageContext(messageContextOrLogger);
		if (messageContext) {
			customLogFormats[messageContext] = format$14;
			if (container.has(messageContext)) {
				const logger$29 = container.get(messageContext);
				logger$29.format = format$14;
			}
		} else if (typeof messageContextOrLogger !== "string") {
			moduleLogger.warn("Setting log format for logger with unknown message context");
			messageContextOrLogger.format = format$14;
		}
	}
	/**
	* Change the global log format of the container which will set default format for all active loggers.
	* e.g., to set the global log format to `local` call `setGlobalLogLevel(logFormat.local)` or use a custom log format.
	* @param format - The log format to set the global log format to.
	*/
	function setGlobalLogFormat(format$14) {
		container.options.format = format$14;
		container.loggers.forEach((logger$29) => {
			logger$29.format = format$14;
		});
	}
	/**
	* Get the global log format of the container.
	* @returns The global log format, or `undefined` when not defined.
	*/
	function getGlobalLogFormat() {
		return container.options.format;
	}
	const defaultSensitiveKeys = [
		"access_token",
		"authentication",
		"authorization",
		"apiKey",
		"credentials",
		"csrf",
		"xsrf",
		"secret",
		"password",
		"JTENANT",
		"JSESSION"
	];
	/**
	* Check if the input key contains or matches any of the sensitive keys.
	* @param inputKey - Key of the record to be sanitized.
	* @param value - Value corresponding to the inputKey.
	* @param sensitiveKeys - List of keys to be matched.
	* @returns A boolean to indicate if the key contains or matches any sensitive key.
	*/
	function isSensitive(inputKey, value, sensitiveKeys) {
		const normalizedKeys = sensitiveKeys.map((key$1) => key$1.toLowerCase());
		const input = isCookieHeader(inputKey, value) ? value : inputKey;
		return normalizedKeys.some((normalizedKey) => input.toLowerCase().includes(normalizedKey));
	}
	function isCookieHeader(inputKey, value) {
		return inputKey.toLowerCase() === "cookie" && typeof value === "string";
	}
	/**
	* Potentially sensitive keys will be matched case-insensitive and as substrings.
	* Matches will be replaced with a placeholder string.
	* @param input - The record to be sanitized.
	* @param replacementString - The placeholder string.
	* @param sensitiveKeys - The list of keys to be replaced. This overrides the default list.
	* @returns The sanitized copy of the input record.
	*/
	function sanitizeRecord(input, replacementString = "<DATA NOT LOGGED TO PREVENT LEAKING SENSITIVE DATA>", sensitiveKeys = defaultSensitiveKeys) {
		return Object.fromEntries(Object.entries(input).map(([inputKey, value]) => isSensitive(inputKey, value, sensitiveKeys) ? [inputKey, replacementString] : [inputKey, value]));
	}
	function getMessageContext(logger$29) {
		const loggerOptions = logger$29;
		if (loggerOptions && loggerOptions.defaultMeta && loggerOptions.defaultMeta.custom_fields) return loggerOptions.defaultMeta.custom_fields.messageContext;
	}
	/**
	* Reset all the custom log levels for loggers and message context.
	*/
	function resetCustomLogLevels() {
		Object.keys(customLogLevels).forEach((key$1) => delete customLogLevels[key$1]);
	}
	/**
	* Reset all the custom log formats for loggers and message context.
	*/
	function resetCustomLogFormats() {
		Object.keys(customLogFormats).forEach((key$1) => delete customLogFormats[key$1]);
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/logger/index.js
var require_logger = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/logger/index.js"(exports) {
	var __createBinding$12 = exports && exports.__createBinding || (Object.create ? function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc$1 = Object.getOwnPropertyDescriptor(m$1, k);
		if (!desc$1 || ("get" in desc$1 ? !m$1.__esModule : desc$1.writable || desc$1.configurable)) desc$1 = {
			enumerable: true,
			get: function() {
				return m$1[k];
			}
		};
		Object.defineProperty(o, k2, desc$1);
	} : function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		o[k2] = m$1[k];
	});
	var __exportStar$9 = exports && exports.__exportStar || function(m$1, exports$1) {
		for (var p in m$1) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports$1, p)) __createBinding$12(exports$1, m$1, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar$9(require_cloud_sdk_logger(), exports);
	__exportStar$9(require_format(), exports);
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/documentation-block.js
var require_documentation_block = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/documentation-block.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.documentationBlock = documentationBlock;
	const array_1 = require_array();
	const logger_1$2 = require_logger();
	const string_formatter_1$1 = require_string_formatter();
	const logger$27 = (0, logger_1$2.createLogger)("documentation-block");
	/**
	* @experimental This API is experimental and might change in newer versions. Use with caution.
	* Transform strings and arguments to a string formatted as a documentation block.
	* The formatting is block like so no leading or trailing spaces.
	* New lines in the beginning and end are also removed.
	* Use in tagged templates, e.g.:
	* ```
	* documentationBlock`Docs with ${arguments} and more content;`
	* ```
	* @param strings - Strings in the tagged template. In the example above that would be ['Docs with ', ' and more content;'].
	* @param args - Arguments in the tagged template. In the example above that would be the resolved value for `arguments`;.
	* @returns A string formatted as documentation block.
	*/
	function documentationBlock(strings, ...args) {
		const firstLineTrimmed = removeLeadingEmptyLines(strings.raw[0]);
		const textIndentation = getIndentation(firstLineTrimmed);
		const argsWithIndentation = addIndentationToArguments(args, textIndentation);
		let content = (0, array_1.zip)([firstLineTrimmed, ...strings.raw.slice(1)], argsWithIndentation).join("");
		if (!content.match(/\w/)) return "";
		content = maskProblematicCharacters(content);
		let lines = content.split(string_formatter_1$1.unixEOL);
		lines = adjustIndentation(lines, textIndentation);
		content = lines.join(`${string_formatter_1$1.unixEOL} * `);
		const result = [
			"/**",
			` * ${content}`,
			" */"
		].join(string_formatter_1$1.unixEOL);
		return result;
	}
	function removeLeadingEmptyLines(firstLine) {
		const lines = firstLine.split(string_formatter_1$1.unixEOL);
		const indexFirstNonEmpty = lines.findIndex((str) => str.match(/\w/)) || 0;
		return lines.splice(indexFirstNonEmpty).join(string_formatter_1$1.unixEOL);
	}
	function addIndentationToArguments(args, textIndentation) {
		const argsWithIndentation = args.map((arg) => arg.replace(/\n/g, string_formatter_1$1.unixEOL + " ".repeat(textIndentation)));
		return argsWithIndentation;
	}
	function adjustIndentation(lines, textIndentation) {
		return lines.map((str) => str.slice(textIndentation));
	}
	function getIndentation(firstLine) {
		const removeStarting = firstLine?.replace(/^\n*/g, "");
		const countEmptySpaces = removeStarting?.search(/\S/);
		return countEmptySpaces > 0 ? countEmptySpaces : 0;
	}
	function maskProblematicCharacters(str) {
		if (str.includes("*/")) logger$27.warn(`The documentation block ${str}'
      )} contained */ in the text will be masked as \\*\\/.`);
		return str.replace(/\*\//g, "\\*\\/");
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/nullish.js
var require_nullish = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/nullish.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.isNullish = isNullish;
	/**
	* Checks whether a value is either `null` or `undefined`.
	* @param val - Value to check.
	* @returns `true` for `null` or `undefined`, `false` otherwise.
	*/
	function isNullish(val) {
		return val === null || val === void 0;
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/equal.js
var require_equal = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/equal.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.equalObjects = equalObjects;
	exports.equal = equal;
	exports.equalArrays = equalArrays;
	const nullish_1$1 = require_nullish();
	/**
	* Checks whether the keys and values of two objects are equal.
	* @param obj1 - The first object.
	* @param obj2 - The second object.
	* @returns A boolean, indicating whether the two objects are equal to each other.
	*/
	function equalObjects(obj1, obj2) {
		const keys1 = Object.keys(obj1);
		return Object.keys(obj1).length === Object.keys(obj2).length && keys1.every((key$1) => equal(obj1[key$1], obj2[key$1]));
	}
	/**
	* Checks whether the two items contain the same content.
	* When both of them are arrays, the elements and the order are checked, see {@link equalArrays}.
	* When both of them are objects, the key/value pairs are checked, see {@link equalObjects}.
	* In other cases, triple equals is used.
	* @param item1 - The first item.
	* @param item2 - The second item.
	* @returns A boolean, indicating all the items equal to each other.
	*/
	function equal(item1, item2) {
		if (Array.isArray(item1) && Array.isArray(item2)) return equalArrays(item1, item2);
		if (typeof item1 === "object" && typeof item2 === "object" && !(0, nullish_1$1.isNullish)(item1) && !(0, nullish_1$1.isNullish)(item2)) return equalObjects(item1, item2);
		return item1 === item2;
	}
	/**
	* Checks whether the elements of two arrays are the same with the same order.
	* @param arr1 - The first array.
	* @param arr2 - The second array.
	* @returns A boolean, indicating both arrays have the same contents.
	*/
	function equalArrays(arr1, arr2) {
		return arr1.length === arr2.length && arr1.every((item1, i) => equal(item1, arr2[i]));
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/error-with-cause.js
var require_error_with_cause = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/error-with-cause.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.ErrorWithCause = void 0;
	exports.isErrorWithCause = isErrorWithCause;
	const string_formatter_1 = require_string_formatter();
	const logger_1$1 = require_logger();
	const logger$26 = (0, logger_1$1.createLogger)({
		package: "util",
		messageContext: "error-with-cause"
	});
	/**
	* Represents an error that was caused by another error.
	*/
	var ErrorWithCause = class extends Error {
		/**
		* Create an instance of ErrorWithCause.
		* @param message - Error message.
		* @param cause - Original error, causing this error.
		*/
		constructor(message, cause) {
			super(message);
			this.cause = cause;
			Object.setPrototypeOf(this, new.target.prototype);
			this.name = "ErrorWithCause";
			this.addStack(cause);
		}
		isAxiosError(err) {
			return err["isAxiosError"] === true;
		}
		addStack(cause) {
			if (this.isAxiosError(cause)) {
				let response = "";
				if (cause.response?.data) try {
					response = `${string_formatter_1.unixEOL}${JSON.stringify(cause.response?.data, null, 2)}`;
				} catch (error$1) {
					logger$26.warn(`Failed to stringify response data: ${error$1.message}`);
					response = `${string_formatter_1.unixEOL}${cause.response?.data}`;
				}
				this.stack = `${this.stack}${string_formatter_1.unixEOL}Caused by:${string_formatter_1.unixEOL}HTTP Response: ${cause.message}${response}`;
			} else if (this.stack && cause?.stack) this.stack = `${this.stack}${string_formatter_1.unixEOL}Caused by:${string_formatter_1.unixEOL}${cause.stack}`;
		}
		/**
		* Root cause of the error.
		* If there are multiple errors caused one by another, the root cause is the first error that occurred.
		* In case there is no root cause.
		* @returns The root cause.
		*/
		get rootCause() {
			return isErrorWithCause(this.cause) ? this.cause.rootCause : this.cause;
		}
	};
	exports.ErrorWithCause = ErrorWithCause;
	/**
	* Type guard to check whether an error is of type ErrorWithCause.
	* @param err - An error.
	* @returns Whether the given error is of type ErrorWithCause.
	*/
	function isErrorWithCause(err) {
		return err?.name === "ErrorWithCause";
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/fs.js
var require_fs = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/fs.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.findProjectRoot = findProjectRoot;
	exports.readJSON = readJSON;
	const fs_1 = __require("fs");
	const path_1 = __require("path");
	const logger_1 = require_logger();
	const logger$25 = (0, logger_1.createLogger)({
		package: "util",
		messageContext: "fs"
	});
	/**
	* @internal
	*/
	function findProjectRoot(path$10, lastPath = path$10) {
		if (!path$10) return lastPath;
		const inProject = (0, fs_1.readdirSync)(path$10).includes("package.json") || (0, fs_1.readdirSync)(path$10).includes("node_modules") || path$10.includes("node_modules");
		if (!inProject) return lastPath;
		return findProjectRoot((0, path_1.resolve)(path$10, ".."), path$10);
	}
	/**
	* Read a JSON file from the file system.
	* @param path - The path to the JSON file.
	* @returns An object parsed from the JSON file.
	*/
	function readJSON(path$10) {
		if ((0, fs_1.existsSync)(path$10)) return JSON.parse((0, fs_1.readFileSync)(path$10, "utf8"));
		logger$25.warn(`File "${path$10}" does not exist, return empty object.`);
		return {};
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/object.js
var require_object = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/object.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.exclude = exports.pick = exports.renameKeys = void 0;
	exports.propertyExists = propertyExists;
	exports.toSanitizedObject = toSanitizedObject;
	exports.pickIgnoreCase = pickIgnoreCase;
	exports.pickValueIgnoreCase = pickValueIgnoreCase;
	exports.pickNonNullish = pickNonNullish;
	exports.mergeLeftIgnoreCase = mergeLeftIgnoreCase;
	exports.mergeIgnoreCase = mergeIgnoreCase;
	const nullish_1 = require_nullish();
	/**
	* Checks if a chain of properties exists on the given object.
	* @param obj - The object to be checked.
	* @param properties - Chained properties.
	* @returns `true` if the property chain leads to a truthy value, `false` otherwise.
	*/
	function propertyExists(obj, ...properties) {
		if (!properties.length) return true;
		if (obj && obj.hasOwnProperty(properties[0])) return propertyExists(obj[properties[0]], ...properties.slice(1));
		return false;
	}
	/**
	* Takes an object and returns a new object whose keys are renamed according to the provided key mapping.
	* Any keys in the input object not present in the key mapping will be present in the output object as-is.
	* If a key in the key mapping is not present in the input object, the output object will contain the key with value "undefined".
	* @param keyMapping - An object mapping keys of the input object to keys of the output object.
	* @param obj - The input object.
	* @returns An object with renamed keys.
	*/
	const renameKeys = (keyMapping, obj) => {
		const unchangedEntries = Object.keys(obj).filter((k) => !Object.keys(keyMapping).includes(k)).reduce((newObj, key$1) => ({
			...newObj,
			[key$1]: obj[key$1]
		}), {});
		return Object.entries(keyMapping).reduce((newObj, [oldKey, newKey]) => ({
			...newObj,
			[newKey]: obj[oldKey]
		}), unchangedEntries);
	};
	exports.renameKeys = renameKeys;
	/**
	* Create a shallow copy of the given object, that contains the given keys.
	* Non existing keys in the source object are ignored.
	* @param keys - Properties to be selected.
	* @param obj - Object from which the values are taken.
	* @returns An object with the selected keys and corresponding values.
	*/
	const pick = (keys$2, obj) => {
		const result = {};
		keys$2.forEach((key$1) => {
			const value = obj[key$1];
			if (Object.keys(obj).includes(key$1)) result[key$1] = value;
		});
		return result;
	};
	exports.pick = pick;
	/**
	* Create a shallow copy of the given object, that does not contain the given keys.
	* Non existing keys in the source object are ignored.
	* @param keys - Properties to be selected.
	* @param obj - Object from which the values are taken.
	* @returns An object with the selected keys and corresponding values.
	*/
	const exclude = (keys$2, obj) => {
		const result = {};
		Object.keys(obj).forEach((key$1) => {
			const value = obj[key$1];
			if (!keys$2.includes(key$1)) result[key$1] = value;
		});
		return result;
	};
	exports.exclude = exclude;
	/**
	* Create an object based on the given key and value if neither key nor value are nullish.
	* @param key - Name of the header.
	* @param value - Value of the header.
	* @returns - An object containing the given key and value of an empty object.
	*/
	function toSanitizedObject(key$1, value) {
		return (0, nullish_1.isNullish)(key$1) || (0, nullish_1.isNullish)(value) ? {} : { [key$1]: value };
	}
	/**
	* Create a shallow copy of the given object, that contains the given keys, independent of casing.
	* Non existing keys in the source object are ignored.
	* @param obj - Object to pick the given key from.
	* @param keys - Keys of the pair to be picked.
	* @returns - An object containing the given key-value pairs in its original case or an empty object if none of them are found.
	*/
	function pickIgnoreCase(obj = {}, ...keys$2) {
		return keys$2.reduce((filteredHeaders, providedKey) => {
			const originalKey = Object.keys(obj).find((objKey) => objKey.toLowerCase() === providedKey.toLowerCase());
			return {
				...filteredHeaders,
				...originalKey && { [originalKey]: obj[originalKey] }
			};
		}, {});
	}
	/**
	* Returns the value of an object based on the given key, independent of casing.
	* @param obj - Object to be searched for the given key.
	* @param key - Key of the value to pick.
	* @returns The value of for the given key or `undefined`, if not available.
	*/
	function pickValueIgnoreCase(obj = {}, key$1) {
		return Object.values(pickIgnoreCase(obj, key$1))[0];
	}
	/**
	* Create a shallow copy of the given object, that contains all entries with non-nullish values.
	* @param obj - An object to pick from.
	* @returns - A filtered object containing only keys with non-nullish values.
	*/
	function pickNonNullish(obj = {}) {
		return Object.entries(obj).filter(([key$1, value]) => !(0, nullish_1.isNullish)(key$1) && !(0, nullish_1.isNullish)(value)).reduce((filtered, [key$1, value]) => ({
			...filtered,
			[key$1]: value
		}), {});
	}
	/**
	* Create an object by merging the `right` object into a shallow copy of the `left` object ignoring casing, but keeping the `right` casing. Only keys present in the `left` object will be present in the merged object.
	* @param left - Object to merge into. They keys of this object will be present in the returned object.
	* @param right - Object to merge. Only keys in `left` will be considered for merging.
	* @returns - An object containing all keys from the `left` object, where entries present in the `right` object are replaced. Note that the casing used by `right` will be used.
	*/
	function mergeLeftIgnoreCase(left = {}, right = {}) {
		return Object.entries(left).map(([key$1, value]) => pickValueIgnoreCase(right, key$1) ? pickIgnoreCase(right, key$1) : { [key$1]: value }).reduce((replaced, obj) => ({
			...replaced,
			...obj
		}), {});
	}
	/**
	* Create an object by merging the `right` object into a shallow copy of the `left` object ignoring casing, but keeping the right casing. Keys present both objects will be present in the merged object.
	* @param left - Object to merge.
	* @param right - Object to merge. The casing of the keys of this object takes precedence.
	* @returns - An object containing all keys from both objects, where entries present in the `right` object are replaced. Note that the casing used by `right` will be used.
	*/
	function mergeIgnoreCase(left = {}, right = {}) {
		return {
			...mergeLeftIgnoreCase(left, right),
			...right
		};
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/pipe.js
var require_pipe = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/pipe.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.identity = identity;
	/**
	* Identity function.
	* @param value - Any value.
	* @returns The given value.
	*/
	function identity(value) {
		return value;
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/promise.js
var require_promise = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/promise.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.finishAll = finishAll;
	/**
	* Await all promises and resolve if non of them failed.
	* Reject if at least one of them was rejected, but only once all of them are finished.
	* Throws an error consisting of a list of reasons.
	* @param promises - Promises to settle.
	* @param errorMessage - Message to use as introductory text of the error if an error occurs.
	*/
	async function finishAll(promises, errorMessage) {
		const settledPromises = await Promise.allSettled(promises);
		const rejectedPromises = settledPromises.filter((promise) => promise.status === "rejected");
		if (rejectedPromises.length) {
			const reasons = rejectedPromises.map((promise) => `\t${promise.reason}`).join("\n");
			const message = errorMessage ? `${errorMessage} ` : "";
			throw new Error(`${message}Errors: [\n${reasons}\n]`);
		}
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/remove-slashes.js
var require_remove_slashes = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/remove-slashes.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.removeSlashes = removeSlashes;
	exports.removeTrailingSlashes = removeTrailingSlashes;
	exports.removeLeadingSlashes = removeLeadingSlashes;
	/**
	* @internal
	* Utility function to remove a single leading and trailing slash from a path.
	*/
	function removeSlashes(path$10) {
		path$10 = removeLeadingSlashes(path$10);
		path$10 = removeTrailingSlashes(path$10);
		return path$10;
	}
	/**
	* @internal
	* Utility function to remove a single trailing slash from a path.
	*/
	function removeTrailingSlashes(path$10) {
		return path$10.endsWith("/") ? path$10.slice(0, -1) : path$10;
	}
	/**
	* @internal
	* Utility function to remove a single leading slash from a path.
	*/
	function removeLeadingSlashes(path$10) {
		return path$10.startsWith("/") ? path$10.slice(1) : path$10;
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/types.js
var require_types = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/types.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.caps = caps;
	/**
	* Returns the OData version in capital letters so V2 or V4.
	* @param oDataVersion - OData version in lower case: 'v2' or 'v4'.
	* @returns 'V2' or 'V4'.
	*/
	function caps(oDataVersion) {
		return oDataVersion ? oDataVersion.toUpperCase() : "V2";
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/unique-name-generator.js
var require_unique_name_generator = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/unique-name-generator.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.UniqueNameGenerator = void 0;
	/**
	* Holds state on already used names and provides new names if there are naming conflicts.
	*/
	var UniqueNameGenerator = class UniqueNameGenerator {
		static getNameForComparison(name$2, caseSensitive) {
			return caseSensitive ? name$2 : name$2.toLowerCase();
		}
		/**
		* Creates an instance of UniqueNameGenerator.
		* @param indexSeparator - The separator to be used when adding an index.
		* @param usedNames - Sets the already used names considered in the finding process.
		*/
		constructor(indexSeparator = "_", usedNames = []) {
			this.indexSeparator = indexSeparator;
			this.usedNames = [];
			this.addToUsedNames(...usedNames);
		}
		/**
		* Adds the name(s) to the already used names.
		* @param names - Names to be added.
		*/
		addToUsedNames(...names) {
			this.usedNames.push(...names);
		}
		/**
		* Generate a unique name by appending an index separated by the `indexSeparator` if necessary, e.g. if `MyName` is already taken `MyName_1` will be found by default.
		* If the name is already unique nothing is appended.
		* @param name - The name to get a unique name from.
		* @param caseSensitive - Whether to check the already used names in a case sensitive manner.
		* @returns A unique name.
		*/
		generateUniqueName(name$2, caseSensitive = true) {
			return this.generateUniqueNamesWithSuffixes(name$2, [], caseSensitive)[0];
		}
		/**
		* Generate a unique name by appending an index separated by the `indexSeparator` if necessary, e.g. if `MyName` is already taken `MyName_1` will be found by default.
		* The generated name is added to the used names.
		* If the name is already unique nothing is appended.
		* @param name - The name to get a unique name from.
		* @param caseSensitive - Whether to check the already used names in a case sensitive manner.
		* @returns A unique name.
		*/
		generateAndSaveUniqueName(name$2, caseSensitive = true) {
			const uniqueName = this.generateUniqueName(name$2, caseSensitive);
			this.addToUsedNames(uniqueName);
			return uniqueName;
		}
		/**
		* Generate unique names by appending an index separated by the `indexSeparator` if necessary, while respecting the given suffixes.
		* If the name is already unique nothing is appended.
		* Each given suffix is appended to the unique name in the result.
		* The resulting names are also checked for uniqueness.
		* All names in the result have the same number suffix.
		* @example if `MyName` and `MyName_1MySuffix` is already taken, `[MyName_2, MyName_2MySuffix]` will be generated by default.
		* @param name - The name to get a unique name from.
		* @param suffixes - Additional name of suffixes to be considered for the finding process, as well as the output.
		* @param caseSensitive - Whether to check the already used names in a case sensitive manner.
		* @returns A list of unique names. The length of this array is one plus the number of suffixes provided. The first entry corresponds to the given name.
		*/
		generateUniqueNamesWithSuffixes(name$2, suffixes, caseSensitive = true) {
			const relevantUsedNames = this.getUsedNamesStartingWith(name$2, caseSensitive);
			const namesWithSuffixes = this.generateNamesWithSuffixes(name$2, suffixes);
			if (!this.areNamesUsed(namesWithSuffixes, relevantUsedNames, caseSensitive)) return [name$2, ...namesWithSuffixes];
			const index = this.getUniqueIndex(name$2, relevantUsedNames, suffixes, caseSensitive);
			return this.generateNamesWithIndexAndSuffixes(name$2, index, suffixes);
		}
		/**
		* Generate unique names by appending an index separated by the `indexSeparator` if necessary, while respecting the given suffixes.
		* If the name is already unique nothing is appended.
		* The generated names are added to the used names.
		* Each given suffix is appended to the unique name in the result.
		* The resulting names are also checked for uniqueness.
		* All names in the result have the same number suffix.
		* @example if `MyName` and `MyName_1MySuffix` is already taken, `[MyName_2, MyName_2MySuffix]` will be generated by default.
		* @param name - The name to get a unique name from.
		* @param suffixes - Additional name of suffixes to be considered for the finding process, as well as the output.
		* @param caseSensitive - Whether to check the already used names in a case sensitive manner.
		* @returns A list of unique names. The length of this array is one plus the number of suffixes provided. The first entry corresponds to the given name.
		*/
		generateAndSaveUniqueNamesWithSuffixes(name$2, suffixes, caseSensitive = true) {
			const uniqueNames = this.generateUniqueNamesWithSuffixes(name$2, suffixes, caseSensitive);
			this.addToUsedNames(...uniqueNames);
			return uniqueNames;
		}
		getUsedNamesForComparison(caseSensitive) {
			return this.usedNames.map((name$2) => UniqueNameGenerator.getNameForComparison(name$2, caseSensitive));
		}
		areNamesUsed(names, usedNames, caseSensitive) {
			return names.some((name$2) => usedNames.map((usedName) => UniqueNameGenerator.getNameForComparison(usedName, caseSensitive)).includes(UniqueNameGenerator.getNameForComparison(name$2, caseSensitive)));
		}
		generateNamesWithIndexAndSuffixes(name$2, index, suffixes) {
			const nameWithoutIndex = this.getNameWithoutIndex(name$2);
			return this.generateNamesWithSuffixes(`${nameWithoutIndex}${this.indexSeparator}${index}`, suffixes);
		}
		generateNamesWithSuffixes(name$2, suffixes) {
			return [name$2, ...suffixes.map((nameSuffix) => `${name$2}${nameSuffix}`)];
		}
		getUsedNamesStartingWith(name$2, caseSensitive) {
			const modifiedName = this.getNameWithoutIndex(name$2);
			return this.getUsedNamesForComparison(caseSensitive).filter((used) => used.startsWith(UniqueNameGenerator.getNameForComparison(modifiedName, caseSensitive)));
		}
		getUniqueIndex(name$2, usedNames, suffixes, caseSensitive) {
			let index = 1;
			while (index < UniqueNameGenerator.MAXIMUM_NUMBER_OF_SUFFIX) {
				const newNames = this.generateNamesWithIndexAndSuffixes(name$2, index, suffixes);
				if (!this.areNamesUsed(newNames, usedNames, caseSensitive)) return index;
				index++;
			}
			throw new Error(`Unable to find a unique name for ${name$2} within the range of ${UniqueNameGenerator.MAXIMUM_NUMBER_OF_SUFFIX} suffixes.`);
		}
		getNameWithoutIndex(name$2) {
			return name$2.replace(new RegExp(`${this.indexSeparator}\\d+$`), "");
		}
	};
	exports.UniqueNameGenerator = UniqueNameGenerator;
	UniqueNameGenerator.MAXIMUM_NUMBER_OF_SUFFIX = 1e3;
} });

//#endregion
//#region node_modules/.pnpm/delayed-stream@1.0.0/node_modules/delayed-stream/lib/delayed_stream.js
var require_delayed_stream = __commonJS({ "node_modules/.pnpm/delayed-stream@1.0.0/node_modules/delayed-stream/lib/delayed_stream.js"(exports, module) {
	var Stream$6 = __require("stream").Stream;
	var util$10 = __require("util");
	module.exports = DelayedStream$1;
	function DelayedStream$1() {
		this.source = null;
		this.dataSize = 0;
		this.maxDataSize = 1024 * 1024;
		this.pauseStream = true;
		this._maxDataSizeExceeded = false;
		this._released = false;
		this._bufferedEvents = [];
	}
	util$10.inherits(DelayedStream$1, Stream$6);
	DelayedStream$1.create = function(source, options) {
		var delayedStream = new this();
		options = options || {};
		for (var option in options) delayedStream[option] = options[option];
		delayedStream.source = source;
		var realEmit = source.emit;
		source.emit = function() {
			delayedStream._handleEmit(arguments);
			return realEmit.apply(source, arguments);
		};
		source.on("error", function() {});
		if (delayedStream.pauseStream) source.pause();
		return delayedStream;
	};
	Object.defineProperty(DelayedStream$1.prototype, "readable", {
		configurable: true,
		enumerable: true,
		get: function() {
			return this.source.readable;
		}
	});
	DelayedStream$1.prototype.setEncoding = function() {
		return this.source.setEncoding.apply(this.source, arguments);
	};
	DelayedStream$1.prototype.resume = function() {
		if (!this._released) this.release();
		this.source.resume();
	};
	DelayedStream$1.prototype.pause = function() {
		this.source.pause();
	};
	DelayedStream$1.prototype.release = function() {
		this._released = true;
		this._bufferedEvents.forEach(function(args) {
			this.emit.apply(this, args);
		}.bind(this));
		this._bufferedEvents = [];
	};
	DelayedStream$1.prototype.pipe = function() {
		var r = Stream$6.prototype.pipe.apply(this, arguments);
		this.resume();
		return r;
	};
	DelayedStream$1.prototype._handleEmit = function(args) {
		if (this._released) {
			this.emit.apply(this, args);
			return;
		}
		if (args[0] === "data") {
			this.dataSize += args[1].length;
			this._checkIfMaxDataSizeExceeded();
		}
		this._bufferedEvents.push(args);
	};
	DelayedStream$1.prototype._checkIfMaxDataSizeExceeded = function() {
		if (this._maxDataSizeExceeded) return;
		if (this.dataSize <= this.maxDataSize) return;
		this._maxDataSizeExceeded = true;
		var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
		this.emit("error", new Error(message));
	};
} });

//#endregion
//#region node_modules/.pnpm/combined-stream@1.0.8/node_modules/combined-stream/lib/combined_stream.js
var require_combined_stream = __commonJS({ "node_modules/.pnpm/combined-stream@1.0.8/node_modules/combined-stream/lib/combined_stream.js"(exports, module) {
	var util$9 = __require("util");
	var Stream$5 = __require("stream").Stream;
	var DelayedStream = require_delayed_stream();
	module.exports = CombinedStream$1;
	function CombinedStream$1() {
		this.writable = false;
		this.readable = true;
		this.dataSize = 0;
		this.maxDataSize = 2 * 1024 * 1024;
		this.pauseStreams = true;
		this._released = false;
		this._streams = [];
		this._currentStream = null;
		this._insideLoop = false;
		this._pendingNext = false;
	}
	util$9.inherits(CombinedStream$1, Stream$5);
	CombinedStream$1.create = function(options) {
		var combinedStream = new this();
		options = options || {};
		for (var option in options) combinedStream[option] = options[option];
		return combinedStream;
	};
	CombinedStream$1.isStreamLike = function(stream$3) {
		return typeof stream$3 !== "function" && typeof stream$3 !== "string" && typeof stream$3 !== "boolean" && typeof stream$3 !== "number" && !Buffer.isBuffer(stream$3);
	};
	CombinedStream$1.prototype.append = function(stream$3) {
		var isStreamLike = CombinedStream$1.isStreamLike(stream$3);
		if (isStreamLike) {
			if (!(stream$3 instanceof DelayedStream)) {
				var newStream = DelayedStream.create(stream$3, {
					maxDataSize: Infinity,
					pauseStream: this.pauseStreams
				});
				stream$3.on("data", this._checkDataSize.bind(this));
				stream$3 = newStream;
			}
			this._handleErrors(stream$3);
			if (this.pauseStreams) stream$3.pause();
		}
		this._streams.push(stream$3);
		return this;
	};
	CombinedStream$1.prototype.pipe = function(dest, options) {
		Stream$5.prototype.pipe.call(this, dest, options);
		this.resume();
		return dest;
	};
	CombinedStream$1.prototype._getNext = function() {
		this._currentStream = null;
		if (this._insideLoop) {
			this._pendingNext = true;
			return;
		}
		this._insideLoop = true;
		try {
			do {
				this._pendingNext = false;
				this._realGetNext();
			} while (this._pendingNext);
		} finally {
			this._insideLoop = false;
		}
	};
	CombinedStream$1.prototype._realGetNext = function() {
		var stream$3 = this._streams.shift();
		if (typeof stream$3 == "undefined") {
			this.end();
			return;
		}
		if (typeof stream$3 !== "function") {
			this._pipeNext(stream$3);
			return;
		}
		var getStream = stream$3;
		getStream(function(stream$4) {
			var isStreamLike = CombinedStream$1.isStreamLike(stream$4);
			if (isStreamLike) {
				stream$4.on("data", this._checkDataSize.bind(this));
				this._handleErrors(stream$4);
			}
			this._pipeNext(stream$4);
		}.bind(this));
	};
	CombinedStream$1.prototype._pipeNext = function(stream$3) {
		this._currentStream = stream$3;
		var isStreamLike = CombinedStream$1.isStreamLike(stream$3);
		if (isStreamLike) {
			stream$3.on("end", this._getNext.bind(this));
			stream$3.pipe(this, { end: false });
			return;
		}
		var value = stream$3;
		this.write(value);
		this._getNext();
	};
	CombinedStream$1.prototype._handleErrors = function(stream$3) {
		var self$1 = this;
		stream$3.on("error", function(err) {
			self$1._emitError(err);
		});
	};
	CombinedStream$1.prototype.write = function(data) {
		this.emit("data", data);
	};
	CombinedStream$1.prototype.pause = function() {
		if (!this.pauseStreams) return;
		if (this.pauseStreams && this._currentStream && typeof this._currentStream.pause == "function") this._currentStream.pause();
		this.emit("pause");
	};
	CombinedStream$1.prototype.resume = function() {
		if (!this._released) {
			this._released = true;
			this.writable = true;
			this._getNext();
		}
		if (this.pauseStreams && this._currentStream && typeof this._currentStream.resume == "function") this._currentStream.resume();
		this.emit("resume");
	};
	CombinedStream$1.prototype.end = function() {
		this._reset();
		this.emit("end");
	};
	CombinedStream$1.prototype.destroy = function() {
		this._reset();
		this.emit("close");
	};
	CombinedStream$1.prototype._reset = function() {
		this.writable = false;
		this._streams = [];
		this._currentStream = null;
	};
	CombinedStream$1.prototype._checkDataSize = function() {
		this._updateDataSize();
		if (this.dataSize <= this.maxDataSize) return;
		var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
		this._emitError(new Error(message));
	};
	CombinedStream$1.prototype._updateDataSize = function() {
		this.dataSize = 0;
		var self$1 = this;
		this._streams.forEach(function(stream$3) {
			if (!stream$3.dataSize) return;
			self$1.dataSize += stream$3.dataSize;
		});
		if (this._currentStream && this._currentStream.dataSize) this.dataSize += this._currentStream.dataSize;
	};
	CombinedStream$1.prototype._emitError = function(err) {
		this._reset();
		this.emit("error", err);
	};
} });

//#endregion
//#region node_modules/.pnpm/mime-db@1.52.0/node_modules/mime-db/db.json
var require_db = __commonJS({ "node_modules/.pnpm/mime-db@1.52.0/node_modules/mime-db/db.json"(exports, module) {
	module.exports = {
		"application/1d-interleaved-parityfec": { "source": "iana" },
		"application/3gpdash-qoe-report+xml": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true
		},
		"application/3gpp-ims+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/3gpphal+json": {
			"source": "iana",
			"compressible": true
		},
		"application/3gpphalforms+json": {
			"source": "iana",
			"compressible": true
		},
		"application/a2l": { "source": "iana" },
		"application/ace+cbor": { "source": "iana" },
		"application/activemessage": { "source": "iana" },
		"application/activity+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-costmap+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-costmapfilter+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-directory+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-endpointcost+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-endpointcostparams+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-endpointprop+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-endpointpropparams+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-error+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-networkmap+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-networkmapfilter+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-updatestreamcontrol+json": {
			"source": "iana",
			"compressible": true
		},
		"application/alto-updatestreamparams+json": {
			"source": "iana",
			"compressible": true
		},
		"application/aml": { "source": "iana" },
		"application/andrew-inset": {
			"source": "iana",
			"extensions": ["ez"]
		},
		"application/applefile": { "source": "iana" },
		"application/applixware": {
			"source": "apache",
			"extensions": ["aw"]
		},
		"application/at+jwt": { "source": "iana" },
		"application/atf": { "source": "iana" },
		"application/atfx": { "source": "iana" },
		"application/atom+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["atom"]
		},
		"application/atomcat+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["atomcat"]
		},
		"application/atomdeleted+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["atomdeleted"]
		},
		"application/atomicmail": { "source": "iana" },
		"application/atomsvc+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["atomsvc"]
		},
		"application/atsc-dwd+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["dwd"]
		},
		"application/atsc-dynamic-event-message": { "source": "iana" },
		"application/atsc-held+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["held"]
		},
		"application/atsc-rdt+json": {
			"source": "iana",
			"compressible": true
		},
		"application/atsc-rsat+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["rsat"]
		},
		"application/atxml": { "source": "iana" },
		"application/auth-policy+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/bacnet-xdd+zip": {
			"source": "iana",
			"compressible": false
		},
		"application/batch-smtp": { "source": "iana" },
		"application/bdoc": {
			"compressible": false,
			"extensions": ["bdoc"]
		},
		"application/beep+xml": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true
		},
		"application/calendar+json": {
			"source": "iana",
			"compressible": true
		},
		"application/calendar+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["xcs"]
		},
		"application/call-completion": { "source": "iana" },
		"application/cals-1840": { "source": "iana" },
		"application/captive+json": {
			"source": "iana",
			"compressible": true
		},
		"application/cbor": { "source": "iana" },
		"application/cbor-seq": { "source": "iana" },
		"application/cccex": { "source": "iana" },
		"application/ccmp+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/ccxml+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["ccxml"]
		},
		"application/cdfx+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["cdfx"]
		},
		"application/cdmi-capability": {
			"source": "iana",
			"extensions": ["cdmia"]
		},
		"application/cdmi-container": {
			"source": "iana",
			"extensions": ["cdmic"]
		},
		"application/cdmi-domain": {
			"source": "iana",
			"extensions": ["cdmid"]
		},
		"application/cdmi-object": {
			"source": "iana",
			"extensions": ["cdmio"]
		},
		"application/cdmi-queue": {
			"source": "iana",
			"extensions": ["cdmiq"]
		},
		"application/cdni": { "source": "iana" },
		"application/cea": { "source": "iana" },
		"application/cea-2018+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/cellml+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/cfw": { "source": "iana" },
		"application/city+json": {
			"source": "iana",
			"compressible": true
		},
		"application/clr": { "source": "iana" },
		"application/clue+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/clue_info+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/cms": { "source": "iana" },
		"application/cnrp+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/coap-group+json": {
			"source": "iana",
			"compressible": true
		},
		"application/coap-payload": { "source": "iana" },
		"application/commonground": { "source": "iana" },
		"application/conference-info+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/cose": { "source": "iana" },
		"application/cose-key": { "source": "iana" },
		"application/cose-key-set": { "source": "iana" },
		"application/cpl+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["cpl"]
		},
		"application/csrattrs": { "source": "iana" },
		"application/csta+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/cstadata+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/csvm+json": {
			"source": "iana",
			"compressible": true
		},
		"application/cu-seeme": {
			"source": "apache",
			"extensions": ["cu"]
		},
		"application/cwt": { "source": "iana" },
		"application/cybercash": { "source": "iana" },
		"application/dart": { "compressible": true },
		"application/dash+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["mpd"]
		},
		"application/dash-patch+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["mpp"]
		},
		"application/dashdelta": { "source": "iana" },
		"application/davmount+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["davmount"]
		},
		"application/dca-rft": { "source": "iana" },
		"application/dcd": { "source": "iana" },
		"application/dec-dx": { "source": "iana" },
		"application/dialog-info+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/dicom": { "source": "iana" },
		"application/dicom+json": {
			"source": "iana",
			"compressible": true
		},
		"application/dicom+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/dii": { "source": "iana" },
		"application/dit": { "source": "iana" },
		"application/dns": { "source": "iana" },
		"application/dns+json": {
			"source": "iana",
			"compressible": true
		},
		"application/dns-message": { "source": "iana" },
		"application/docbook+xml": {
			"source": "apache",
			"compressible": true,
			"extensions": ["dbk"]
		},
		"application/dots+cbor": { "source": "iana" },
		"application/dskpp+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/dssc+der": {
			"source": "iana",
			"extensions": ["dssc"]
		},
		"application/dssc+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["xdssc"]
		},
		"application/dvcs": { "source": "iana" },
		"application/ecmascript": {
			"source": "iana",
			"compressible": true,
			"extensions": ["es", "ecma"]
		},
		"application/edi-consent": { "source": "iana" },
		"application/edi-x12": {
			"source": "iana",
			"compressible": false
		},
		"application/edifact": {
			"source": "iana",
			"compressible": false
		},
		"application/efi": { "source": "iana" },
		"application/elm+json": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true
		},
		"application/elm+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/emergencycalldata.cap+xml": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true
		},
		"application/emergencycalldata.comment+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/emergencycalldata.control+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/emergencycalldata.deviceinfo+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/emergencycalldata.ecall.msd": { "source": "iana" },
		"application/emergencycalldata.providerinfo+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/emergencycalldata.serviceinfo+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/emergencycalldata.subscriberinfo+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/emergencycalldata.veds+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/emma+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["emma"]
		},
		"application/emotionml+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["emotionml"]
		},
		"application/encaprtp": { "source": "iana" },
		"application/epp+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/epub+zip": {
			"source": "iana",
			"compressible": false,
			"extensions": ["epub"]
		},
		"application/eshop": { "source": "iana" },
		"application/exi": {
			"source": "iana",
			"extensions": ["exi"]
		},
		"application/expect-ct-report+json": {
			"source": "iana",
			"compressible": true
		},
		"application/express": {
			"source": "iana",
			"extensions": ["exp"]
		},
		"application/fastinfoset": { "source": "iana" },
		"application/fastsoap": { "source": "iana" },
		"application/fdt+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["fdt"]
		},
		"application/fhir+json": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true
		},
		"application/fhir+xml": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true
		},
		"application/fido.trusted-apps+json": { "compressible": true },
		"application/fits": { "source": "iana" },
		"application/flexfec": { "source": "iana" },
		"application/font-sfnt": { "source": "iana" },
		"application/font-tdpfr": {
			"source": "iana",
			"extensions": ["pfr"]
		},
		"application/font-woff": {
			"source": "iana",
			"compressible": false
		},
		"application/framework-attributes+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/geo+json": {
			"source": "iana",
			"compressible": true,
			"extensions": ["geojson"]
		},
		"application/geo+json-seq": { "source": "iana" },
		"application/geopackage+sqlite3": { "source": "iana" },
		"application/geoxacml+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/gltf-buffer": { "source": "iana" },
		"application/gml+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["gml"]
		},
		"application/gpx+xml": {
			"source": "apache",
			"compressible": true,
			"extensions": ["gpx"]
		},
		"application/gxf": {
			"source": "apache",
			"extensions": ["gxf"]
		},
		"application/gzip": {
			"source": "iana",
			"compressible": false,
			"extensions": ["gz"]
		},
		"application/h224": { "source": "iana" },
		"application/held+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/hjson": { "extensions": ["hjson"] },
		"application/http": { "source": "iana" },
		"application/hyperstudio": {
			"source": "iana",
			"extensions": ["stk"]
		},
		"application/ibe-key-request+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/ibe-pkg-reply+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/ibe-pp-data": { "source": "iana" },
		"application/iges": { "source": "iana" },
		"application/im-iscomposing+xml": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true
		},
		"application/index": { "source": "iana" },
		"application/index.cmd": { "source": "iana" },
		"application/index.obj": { "source": "iana" },
		"application/index.response": { "source": "iana" },
		"application/index.vnd": { "source": "iana" },
		"application/inkml+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["ink", "inkml"]
		},
		"application/iotp": { "source": "iana" },
		"application/ipfix": {
			"source": "iana",
			"extensions": ["ipfix"]
		},
		"application/ipp": { "source": "iana" },
		"application/isup": { "source": "iana" },
		"application/its+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["its"]
		},
		"application/java-archive": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"jar",
				"war",
				"ear"
			]
		},
		"application/java-serialized-object": {
			"source": "apache",
			"compressible": false,
			"extensions": ["ser"]
		},
		"application/java-vm": {
			"source": "apache",
			"compressible": false,
			"extensions": ["class"]
		},
		"application/javascript": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true,
			"extensions": ["js", "mjs"]
		},
		"application/jf2feed+json": {
			"source": "iana",
			"compressible": true
		},
		"application/jose": { "source": "iana" },
		"application/jose+json": {
			"source": "iana",
			"compressible": true
		},
		"application/jrd+json": {
			"source": "iana",
			"compressible": true
		},
		"application/jscalendar+json": {
			"source": "iana",
			"compressible": true
		},
		"application/json": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true,
			"extensions": ["json", "map"]
		},
		"application/json-patch+json": {
			"source": "iana",
			"compressible": true
		},
		"application/json-seq": { "source": "iana" },
		"application/json5": { "extensions": ["json5"] },
		"application/jsonml+json": {
			"source": "apache",
			"compressible": true,
			"extensions": ["jsonml"]
		},
		"application/jwk+json": {
			"source": "iana",
			"compressible": true
		},
		"application/jwk-set+json": {
			"source": "iana",
			"compressible": true
		},
		"application/jwt": { "source": "iana" },
		"application/kpml-request+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/kpml-response+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/ld+json": {
			"source": "iana",
			"compressible": true,
			"extensions": ["jsonld"]
		},
		"application/lgr+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["lgr"]
		},
		"application/link-format": { "source": "iana" },
		"application/load-control+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/lost+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["lostxml"]
		},
		"application/lostsync+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/lpf+zip": {
			"source": "iana",
			"compressible": false
		},
		"application/lxf": { "source": "iana" },
		"application/mac-binhex40": {
			"source": "iana",
			"extensions": ["hqx"]
		},
		"application/mac-compactpro": {
			"source": "apache",
			"extensions": ["cpt"]
		},
		"application/macwriteii": { "source": "iana" },
		"application/mads+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["mads"]
		},
		"application/manifest+json": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true,
			"extensions": ["webmanifest"]
		},
		"application/marc": {
			"source": "iana",
			"extensions": ["mrc"]
		},
		"application/marcxml+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["mrcx"]
		},
		"application/mathematica": {
			"source": "iana",
			"extensions": [
				"ma",
				"nb",
				"mb"
			]
		},
		"application/mathml+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["mathml"]
		},
		"application/mathml-content+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/mathml-presentation+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/mbms-associated-procedure-description+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/mbms-deregister+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/mbms-envelope+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/mbms-msk+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/mbms-msk-response+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/mbms-protection-description+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/mbms-reception-report+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/mbms-register+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/mbms-register-response+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/mbms-schedule+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/mbms-user-service-description+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/mbox": {
			"source": "iana",
			"extensions": ["mbox"]
		},
		"application/media-policy-dataset+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["mpf"]
		},
		"application/media_control+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/mediaservercontrol+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["mscml"]
		},
		"application/merge-patch+json": {
			"source": "iana",
			"compressible": true
		},
		"application/metalink+xml": {
			"source": "apache",
			"compressible": true,
			"extensions": ["metalink"]
		},
		"application/metalink4+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["meta4"]
		},
		"application/mets+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["mets"]
		},
		"application/mf4": { "source": "iana" },
		"application/mikey": { "source": "iana" },
		"application/mipc": { "source": "iana" },
		"application/missing-blocks+cbor-seq": { "source": "iana" },
		"application/mmt-aei+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["maei"]
		},
		"application/mmt-usd+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["musd"]
		},
		"application/mods+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["mods"]
		},
		"application/moss-keys": { "source": "iana" },
		"application/moss-signature": { "source": "iana" },
		"application/mosskey-data": { "source": "iana" },
		"application/mosskey-request": { "source": "iana" },
		"application/mp21": {
			"source": "iana",
			"extensions": ["m21", "mp21"]
		},
		"application/mp4": {
			"source": "iana",
			"extensions": ["mp4s", "m4p"]
		},
		"application/mpeg4-generic": { "source": "iana" },
		"application/mpeg4-iod": { "source": "iana" },
		"application/mpeg4-iod-xmt": { "source": "iana" },
		"application/mrb-consumer+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/mrb-publish+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/msc-ivr+xml": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true
		},
		"application/msc-mixer+xml": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true
		},
		"application/msword": {
			"source": "iana",
			"compressible": false,
			"extensions": ["doc", "dot"]
		},
		"application/mud+json": {
			"source": "iana",
			"compressible": true
		},
		"application/multipart-core": { "source": "iana" },
		"application/mxf": {
			"source": "iana",
			"extensions": ["mxf"]
		},
		"application/n-quads": {
			"source": "iana",
			"extensions": ["nq"]
		},
		"application/n-triples": {
			"source": "iana",
			"extensions": ["nt"]
		},
		"application/nasdata": { "source": "iana" },
		"application/news-checkgroups": {
			"source": "iana",
			"charset": "US-ASCII"
		},
		"application/news-groupinfo": {
			"source": "iana",
			"charset": "US-ASCII"
		},
		"application/news-transmission": { "source": "iana" },
		"application/nlsml+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/node": {
			"source": "iana",
			"extensions": ["cjs"]
		},
		"application/nss": { "source": "iana" },
		"application/oauth-authz-req+jwt": { "source": "iana" },
		"application/oblivious-dns-message": { "source": "iana" },
		"application/ocsp-request": { "source": "iana" },
		"application/ocsp-response": { "source": "iana" },
		"application/octet-stream": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"bin",
				"dms",
				"lrf",
				"mar",
				"so",
				"dist",
				"distz",
				"pkg",
				"bpk",
				"dump",
				"elc",
				"deploy",
				"exe",
				"dll",
				"deb",
				"dmg",
				"iso",
				"img",
				"msi",
				"msp",
				"msm",
				"buffer"
			]
		},
		"application/oda": {
			"source": "iana",
			"extensions": ["oda"]
		},
		"application/odm+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/odx": { "source": "iana" },
		"application/oebps-package+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["opf"]
		},
		"application/ogg": {
			"source": "iana",
			"compressible": false,
			"extensions": ["ogx"]
		},
		"application/omdoc+xml": {
			"source": "apache",
			"compressible": true,
			"extensions": ["omdoc"]
		},
		"application/onenote": {
			"source": "apache",
			"extensions": [
				"onetoc",
				"onetoc2",
				"onetmp",
				"onepkg"
			]
		},
		"application/opc-nodeset+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/oscore": { "source": "iana" },
		"application/oxps": {
			"source": "iana",
			"extensions": ["oxps"]
		},
		"application/p21": { "source": "iana" },
		"application/p21+zip": {
			"source": "iana",
			"compressible": false
		},
		"application/p2p-overlay+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["relo"]
		},
		"application/parityfec": { "source": "iana" },
		"application/passport": { "source": "iana" },
		"application/patch-ops-error+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["xer"]
		},
		"application/pdf": {
			"source": "iana",
			"compressible": false,
			"extensions": ["pdf"]
		},
		"application/pdx": { "source": "iana" },
		"application/pem-certificate-chain": { "source": "iana" },
		"application/pgp-encrypted": {
			"source": "iana",
			"compressible": false,
			"extensions": ["pgp"]
		},
		"application/pgp-keys": {
			"source": "iana",
			"extensions": ["asc"]
		},
		"application/pgp-signature": {
			"source": "iana",
			"extensions": ["asc", "sig"]
		},
		"application/pics-rules": {
			"source": "apache",
			"extensions": ["prf"]
		},
		"application/pidf+xml": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true
		},
		"application/pidf-diff+xml": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true
		},
		"application/pkcs10": {
			"source": "iana",
			"extensions": ["p10"]
		},
		"application/pkcs12": { "source": "iana" },
		"application/pkcs7-mime": {
			"source": "iana",
			"extensions": ["p7m", "p7c"]
		},
		"application/pkcs7-signature": {
			"source": "iana",
			"extensions": ["p7s"]
		},
		"application/pkcs8": {
			"source": "iana",
			"extensions": ["p8"]
		},
		"application/pkcs8-encrypted": { "source": "iana" },
		"application/pkix-attr-cert": {
			"source": "iana",
			"extensions": ["ac"]
		},
		"application/pkix-cert": {
			"source": "iana",
			"extensions": ["cer"]
		},
		"application/pkix-crl": {
			"source": "iana",
			"extensions": ["crl"]
		},
		"application/pkix-pkipath": {
			"source": "iana",
			"extensions": ["pkipath"]
		},
		"application/pkixcmp": {
			"source": "iana",
			"extensions": ["pki"]
		},
		"application/pls+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["pls"]
		},
		"application/poc-settings+xml": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true
		},
		"application/postscript": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"ai",
				"eps",
				"ps"
			]
		},
		"application/ppsp-tracker+json": {
			"source": "iana",
			"compressible": true
		},
		"application/problem+json": {
			"source": "iana",
			"compressible": true
		},
		"application/problem+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/provenance+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["provx"]
		},
		"application/prs.alvestrand.titrax-sheet": { "source": "iana" },
		"application/prs.cww": {
			"source": "iana",
			"extensions": ["cww"]
		},
		"application/prs.cyn": {
			"source": "iana",
			"charset": "7-BIT"
		},
		"application/prs.hpub+zip": {
			"source": "iana",
			"compressible": false
		},
		"application/prs.nprend": { "source": "iana" },
		"application/prs.plucker": { "source": "iana" },
		"application/prs.rdf-xml-crypt": { "source": "iana" },
		"application/prs.xsf+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/pskc+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["pskcxml"]
		},
		"application/pvd+json": {
			"source": "iana",
			"compressible": true
		},
		"application/qsig": { "source": "iana" },
		"application/raml+yaml": {
			"compressible": true,
			"extensions": ["raml"]
		},
		"application/raptorfec": { "source": "iana" },
		"application/rdap+json": {
			"source": "iana",
			"compressible": true
		},
		"application/rdf+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["rdf", "owl"]
		},
		"application/reginfo+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["rif"]
		},
		"application/relax-ng-compact-syntax": {
			"source": "iana",
			"extensions": ["rnc"]
		},
		"application/remote-printing": { "source": "iana" },
		"application/reputon+json": {
			"source": "iana",
			"compressible": true
		},
		"application/resource-lists+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["rl"]
		},
		"application/resource-lists-diff+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["rld"]
		},
		"application/rfc+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/riscos": { "source": "iana" },
		"application/rlmi+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/rls-services+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["rs"]
		},
		"application/route-apd+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["rapd"]
		},
		"application/route-s-tsid+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["sls"]
		},
		"application/route-usd+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["rusd"]
		},
		"application/rpki-ghostbusters": {
			"source": "iana",
			"extensions": ["gbr"]
		},
		"application/rpki-manifest": {
			"source": "iana",
			"extensions": ["mft"]
		},
		"application/rpki-publication": { "source": "iana" },
		"application/rpki-roa": {
			"source": "iana",
			"extensions": ["roa"]
		},
		"application/rpki-updown": { "source": "iana" },
		"application/rsd+xml": {
			"source": "apache",
			"compressible": true,
			"extensions": ["rsd"]
		},
		"application/rss+xml": {
			"source": "apache",
			"compressible": true,
			"extensions": ["rss"]
		},
		"application/rtf": {
			"source": "iana",
			"compressible": true,
			"extensions": ["rtf"]
		},
		"application/rtploopback": { "source": "iana" },
		"application/rtx": { "source": "iana" },
		"application/samlassertion+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/samlmetadata+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/sarif+json": {
			"source": "iana",
			"compressible": true
		},
		"application/sarif-external-properties+json": {
			"source": "iana",
			"compressible": true
		},
		"application/sbe": { "source": "iana" },
		"application/sbml+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["sbml"]
		},
		"application/scaip+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/scim+json": {
			"source": "iana",
			"compressible": true
		},
		"application/scvp-cv-request": {
			"source": "iana",
			"extensions": ["scq"]
		},
		"application/scvp-cv-response": {
			"source": "iana",
			"extensions": ["scs"]
		},
		"application/scvp-vp-request": {
			"source": "iana",
			"extensions": ["spq"]
		},
		"application/scvp-vp-response": {
			"source": "iana",
			"extensions": ["spp"]
		},
		"application/sdp": {
			"source": "iana",
			"extensions": ["sdp"]
		},
		"application/secevent+jwt": { "source": "iana" },
		"application/senml+cbor": { "source": "iana" },
		"application/senml+json": {
			"source": "iana",
			"compressible": true
		},
		"application/senml+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["senmlx"]
		},
		"application/senml-etch+cbor": { "source": "iana" },
		"application/senml-etch+json": {
			"source": "iana",
			"compressible": true
		},
		"application/senml-exi": { "source": "iana" },
		"application/sensml+cbor": { "source": "iana" },
		"application/sensml+json": {
			"source": "iana",
			"compressible": true
		},
		"application/sensml+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["sensmlx"]
		},
		"application/sensml-exi": { "source": "iana" },
		"application/sep+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/sep-exi": { "source": "iana" },
		"application/session-info": { "source": "iana" },
		"application/set-payment": { "source": "iana" },
		"application/set-payment-initiation": {
			"source": "iana",
			"extensions": ["setpay"]
		},
		"application/set-registration": { "source": "iana" },
		"application/set-registration-initiation": {
			"source": "iana",
			"extensions": ["setreg"]
		},
		"application/sgml": { "source": "iana" },
		"application/sgml-open-catalog": { "source": "iana" },
		"application/shf+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["shf"]
		},
		"application/sieve": {
			"source": "iana",
			"extensions": ["siv", "sieve"]
		},
		"application/simple-filter+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/simple-message-summary": { "source": "iana" },
		"application/simplesymbolcontainer": { "source": "iana" },
		"application/sipc": { "source": "iana" },
		"application/slate": { "source": "iana" },
		"application/smil": { "source": "iana" },
		"application/smil+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["smi", "smil"]
		},
		"application/smpte336m": { "source": "iana" },
		"application/soap+fastinfoset": { "source": "iana" },
		"application/soap+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/sparql-query": {
			"source": "iana",
			"extensions": ["rq"]
		},
		"application/sparql-results+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["srx"]
		},
		"application/spdx+json": {
			"source": "iana",
			"compressible": true
		},
		"application/spirits-event+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/sql": { "source": "iana" },
		"application/srgs": {
			"source": "iana",
			"extensions": ["gram"]
		},
		"application/srgs+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["grxml"]
		},
		"application/sru+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["sru"]
		},
		"application/ssdl+xml": {
			"source": "apache",
			"compressible": true,
			"extensions": ["ssdl"]
		},
		"application/ssml+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["ssml"]
		},
		"application/stix+json": {
			"source": "iana",
			"compressible": true
		},
		"application/swid+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["swidtag"]
		},
		"application/tamp-apex-update": { "source": "iana" },
		"application/tamp-apex-update-confirm": { "source": "iana" },
		"application/tamp-community-update": { "source": "iana" },
		"application/tamp-community-update-confirm": { "source": "iana" },
		"application/tamp-error": { "source": "iana" },
		"application/tamp-sequence-adjust": { "source": "iana" },
		"application/tamp-sequence-adjust-confirm": { "source": "iana" },
		"application/tamp-status-query": { "source": "iana" },
		"application/tamp-status-response": { "source": "iana" },
		"application/tamp-update": { "source": "iana" },
		"application/tamp-update-confirm": { "source": "iana" },
		"application/tar": { "compressible": true },
		"application/taxii+json": {
			"source": "iana",
			"compressible": true
		},
		"application/td+json": {
			"source": "iana",
			"compressible": true
		},
		"application/tei+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["tei", "teicorpus"]
		},
		"application/tetra_isi": { "source": "iana" },
		"application/thraud+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["tfi"]
		},
		"application/timestamp-query": { "source": "iana" },
		"application/timestamp-reply": { "source": "iana" },
		"application/timestamped-data": {
			"source": "iana",
			"extensions": ["tsd"]
		},
		"application/tlsrpt+gzip": { "source": "iana" },
		"application/tlsrpt+json": {
			"source": "iana",
			"compressible": true
		},
		"application/tnauthlist": { "source": "iana" },
		"application/token-introspection+jwt": { "source": "iana" },
		"application/toml": {
			"compressible": true,
			"extensions": ["toml"]
		},
		"application/trickle-ice-sdpfrag": { "source": "iana" },
		"application/trig": {
			"source": "iana",
			"extensions": ["trig"]
		},
		"application/ttml+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["ttml"]
		},
		"application/tve-trigger": { "source": "iana" },
		"application/tzif": { "source": "iana" },
		"application/tzif-leap": { "source": "iana" },
		"application/ubjson": {
			"compressible": false,
			"extensions": ["ubj"]
		},
		"application/ulpfec": { "source": "iana" },
		"application/urc-grpsheet+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/urc-ressheet+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["rsheet"]
		},
		"application/urc-targetdesc+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["td"]
		},
		"application/urc-uisocketdesc+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vcard+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vcard+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vemmi": { "source": "iana" },
		"application/vividence.scriptfile": { "source": "apache" },
		"application/vnd.1000minds.decision-model+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["1km"]
		},
		"application/vnd.3gpp-prose+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp-prose-pc3ch+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp-v2x-local-service-information": { "source": "iana" },
		"application/vnd.3gpp.5gnas": { "source": "iana" },
		"application/vnd.3gpp.access-transfer-events+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.bsf+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.gmop+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.gtpc": { "source": "iana" },
		"application/vnd.3gpp.interworking-data": { "source": "iana" },
		"application/vnd.3gpp.lpp": { "source": "iana" },
		"application/vnd.3gpp.mc-signalling-ear": { "source": "iana" },
		"application/vnd.3gpp.mcdata-affiliation-command+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.mcdata-info+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.mcdata-payload": { "source": "iana" },
		"application/vnd.3gpp.mcdata-service-config+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.mcdata-signalling": { "source": "iana" },
		"application/vnd.3gpp.mcdata-ue-config+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.mcdata-user-profile+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.mcptt-affiliation-command+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.mcptt-floor-request+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.mcptt-info+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.mcptt-location-info+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.mcptt-service-config+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.mcptt-signed+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.mcptt-ue-config+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.mcptt-ue-init-config+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.mcptt-user-profile+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.mcvideo-affiliation-command+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.mcvideo-affiliation-info+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.mcvideo-info+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.mcvideo-location-info+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.mcvideo-service-config+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.mcvideo-transmission-request+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.mcvideo-ue-config+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.mcvideo-user-profile+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.mid-call+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.ngap": { "source": "iana" },
		"application/vnd.3gpp.pfcp": { "source": "iana" },
		"application/vnd.3gpp.pic-bw-large": {
			"source": "iana",
			"extensions": ["plb"]
		},
		"application/vnd.3gpp.pic-bw-small": {
			"source": "iana",
			"extensions": ["psb"]
		},
		"application/vnd.3gpp.pic-bw-var": {
			"source": "iana",
			"extensions": ["pvb"]
		},
		"application/vnd.3gpp.s1ap": { "source": "iana" },
		"application/vnd.3gpp.sms": { "source": "iana" },
		"application/vnd.3gpp.sms+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.srvcc-ext+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.srvcc-info+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.state-and-event-info+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp.ussd+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp2.bcmcsinfo+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.3gpp2.sms": { "source": "iana" },
		"application/vnd.3gpp2.tcap": {
			"source": "iana",
			"extensions": ["tcap"]
		},
		"application/vnd.3lightssoftware.imagescal": { "source": "iana" },
		"application/vnd.3m.post-it-notes": {
			"source": "iana",
			"extensions": ["pwn"]
		},
		"application/vnd.accpac.simply.aso": {
			"source": "iana",
			"extensions": ["aso"]
		},
		"application/vnd.accpac.simply.imp": {
			"source": "iana",
			"extensions": ["imp"]
		},
		"application/vnd.acucobol": {
			"source": "iana",
			"extensions": ["acu"]
		},
		"application/vnd.acucorp": {
			"source": "iana",
			"extensions": ["atc", "acutc"]
		},
		"application/vnd.adobe.air-application-installer-package+zip": {
			"source": "apache",
			"compressible": false,
			"extensions": ["air"]
		},
		"application/vnd.adobe.flash.movie": { "source": "iana" },
		"application/vnd.adobe.formscentral.fcdt": {
			"source": "iana",
			"extensions": ["fcdt"]
		},
		"application/vnd.adobe.fxp": {
			"source": "iana",
			"extensions": ["fxp", "fxpl"]
		},
		"application/vnd.adobe.partial-upload": { "source": "iana" },
		"application/vnd.adobe.xdp+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["xdp"]
		},
		"application/vnd.adobe.xfdf": {
			"source": "iana",
			"extensions": ["xfdf"]
		},
		"application/vnd.aether.imp": { "source": "iana" },
		"application/vnd.afpc.afplinedata": { "source": "iana" },
		"application/vnd.afpc.afplinedata-pagedef": { "source": "iana" },
		"application/vnd.afpc.cmoca-cmresource": { "source": "iana" },
		"application/vnd.afpc.foca-charset": { "source": "iana" },
		"application/vnd.afpc.foca-codedfont": { "source": "iana" },
		"application/vnd.afpc.foca-codepage": { "source": "iana" },
		"application/vnd.afpc.modca": { "source": "iana" },
		"application/vnd.afpc.modca-cmtable": { "source": "iana" },
		"application/vnd.afpc.modca-formdef": { "source": "iana" },
		"application/vnd.afpc.modca-mediummap": { "source": "iana" },
		"application/vnd.afpc.modca-objectcontainer": { "source": "iana" },
		"application/vnd.afpc.modca-overlay": { "source": "iana" },
		"application/vnd.afpc.modca-pagesegment": { "source": "iana" },
		"application/vnd.age": {
			"source": "iana",
			"extensions": ["age"]
		},
		"application/vnd.ah-barcode": { "source": "iana" },
		"application/vnd.ahead.space": {
			"source": "iana",
			"extensions": ["ahead"]
		},
		"application/vnd.airzip.filesecure.azf": {
			"source": "iana",
			"extensions": ["azf"]
		},
		"application/vnd.airzip.filesecure.azs": {
			"source": "iana",
			"extensions": ["azs"]
		},
		"application/vnd.amadeus+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.amazon.ebook": {
			"source": "apache",
			"extensions": ["azw"]
		},
		"application/vnd.amazon.mobi8-ebook": { "source": "iana" },
		"application/vnd.americandynamics.acc": {
			"source": "iana",
			"extensions": ["acc"]
		},
		"application/vnd.amiga.ami": {
			"source": "iana",
			"extensions": ["ami"]
		},
		"application/vnd.amundsen.maze+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.android.ota": { "source": "iana" },
		"application/vnd.android.package-archive": {
			"source": "apache",
			"compressible": false,
			"extensions": ["apk"]
		},
		"application/vnd.anki": { "source": "iana" },
		"application/vnd.anser-web-certificate-issue-initiation": {
			"source": "iana",
			"extensions": ["cii"]
		},
		"application/vnd.anser-web-funds-transfer-initiation": {
			"source": "apache",
			"extensions": ["fti"]
		},
		"application/vnd.antix.game-component": {
			"source": "iana",
			"extensions": ["atx"]
		},
		"application/vnd.apache.arrow.file": { "source": "iana" },
		"application/vnd.apache.arrow.stream": { "source": "iana" },
		"application/vnd.apache.thrift.binary": { "source": "iana" },
		"application/vnd.apache.thrift.compact": { "source": "iana" },
		"application/vnd.apache.thrift.json": { "source": "iana" },
		"application/vnd.api+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.aplextor.warrp+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.apothekende.reservation+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.apple.installer+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["mpkg"]
		},
		"application/vnd.apple.keynote": {
			"source": "iana",
			"extensions": ["key"]
		},
		"application/vnd.apple.mpegurl": {
			"source": "iana",
			"extensions": ["m3u8"]
		},
		"application/vnd.apple.numbers": {
			"source": "iana",
			"extensions": ["numbers"]
		},
		"application/vnd.apple.pages": {
			"source": "iana",
			"extensions": ["pages"]
		},
		"application/vnd.apple.pkpass": {
			"compressible": false,
			"extensions": ["pkpass"]
		},
		"application/vnd.arastra.swi": { "source": "iana" },
		"application/vnd.aristanetworks.swi": {
			"source": "iana",
			"extensions": ["swi"]
		},
		"application/vnd.artisan+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.artsquare": { "source": "iana" },
		"application/vnd.astraea-software.iota": {
			"source": "iana",
			"extensions": ["iota"]
		},
		"application/vnd.audiograph": {
			"source": "iana",
			"extensions": ["aep"]
		},
		"application/vnd.autopackage": { "source": "iana" },
		"application/vnd.avalon+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.avistar+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.balsamiq.bmml+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["bmml"]
		},
		"application/vnd.balsamiq.bmpr": { "source": "iana" },
		"application/vnd.banana-accounting": { "source": "iana" },
		"application/vnd.bbf.usp.error": { "source": "iana" },
		"application/vnd.bbf.usp.msg": { "source": "iana" },
		"application/vnd.bbf.usp.msg+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.bekitzur-stech+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.bint.med-content": { "source": "iana" },
		"application/vnd.biopax.rdf+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.blink-idb-value-wrapper": { "source": "iana" },
		"application/vnd.blueice.multipass": {
			"source": "iana",
			"extensions": ["mpm"]
		},
		"application/vnd.bluetooth.ep.oob": { "source": "iana" },
		"application/vnd.bluetooth.le.oob": { "source": "iana" },
		"application/vnd.bmi": {
			"source": "iana",
			"extensions": ["bmi"]
		},
		"application/vnd.bpf": { "source": "iana" },
		"application/vnd.bpf3": { "source": "iana" },
		"application/vnd.businessobjects": {
			"source": "iana",
			"extensions": ["rep"]
		},
		"application/vnd.byu.uapi+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.cab-jscript": { "source": "iana" },
		"application/vnd.canon-cpdl": { "source": "iana" },
		"application/vnd.canon-lips": { "source": "iana" },
		"application/vnd.capasystems-pg+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.cendio.thinlinc.clientconf": { "source": "iana" },
		"application/vnd.century-systems.tcp_stream": { "source": "iana" },
		"application/vnd.chemdraw+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["cdxml"]
		},
		"application/vnd.chess-pgn": { "source": "iana" },
		"application/vnd.chipnuts.karaoke-mmd": {
			"source": "iana",
			"extensions": ["mmd"]
		},
		"application/vnd.ciedi": { "source": "iana" },
		"application/vnd.cinderella": {
			"source": "iana",
			"extensions": ["cdy"]
		},
		"application/vnd.cirpack.isdn-ext": { "source": "iana" },
		"application/vnd.citationstyles.style+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["csl"]
		},
		"application/vnd.claymore": {
			"source": "iana",
			"extensions": ["cla"]
		},
		"application/vnd.cloanto.rp9": {
			"source": "iana",
			"extensions": ["rp9"]
		},
		"application/vnd.clonk.c4group": {
			"source": "iana",
			"extensions": [
				"c4g",
				"c4d",
				"c4f",
				"c4p",
				"c4u"
			]
		},
		"application/vnd.cluetrust.cartomobile-config": {
			"source": "iana",
			"extensions": ["c11amc"]
		},
		"application/vnd.cluetrust.cartomobile-config-pkg": {
			"source": "iana",
			"extensions": ["c11amz"]
		},
		"application/vnd.coffeescript": { "source": "iana" },
		"application/vnd.collabio.xodocuments.document": { "source": "iana" },
		"application/vnd.collabio.xodocuments.document-template": { "source": "iana" },
		"application/vnd.collabio.xodocuments.presentation": { "source": "iana" },
		"application/vnd.collabio.xodocuments.presentation-template": { "source": "iana" },
		"application/vnd.collabio.xodocuments.spreadsheet": { "source": "iana" },
		"application/vnd.collabio.xodocuments.spreadsheet-template": { "source": "iana" },
		"application/vnd.collection+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.collection.doc+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.collection.next+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.comicbook+zip": {
			"source": "iana",
			"compressible": false
		},
		"application/vnd.comicbook-rar": { "source": "iana" },
		"application/vnd.commerce-battelle": { "source": "iana" },
		"application/vnd.commonspace": {
			"source": "iana",
			"extensions": ["csp"]
		},
		"application/vnd.contact.cmsg": {
			"source": "iana",
			"extensions": ["cdbcmsg"]
		},
		"application/vnd.coreos.ignition+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.cosmocaller": {
			"source": "iana",
			"extensions": ["cmc"]
		},
		"application/vnd.crick.clicker": {
			"source": "iana",
			"extensions": ["clkx"]
		},
		"application/vnd.crick.clicker.keyboard": {
			"source": "iana",
			"extensions": ["clkk"]
		},
		"application/vnd.crick.clicker.palette": {
			"source": "iana",
			"extensions": ["clkp"]
		},
		"application/vnd.crick.clicker.template": {
			"source": "iana",
			"extensions": ["clkt"]
		},
		"application/vnd.crick.clicker.wordbank": {
			"source": "iana",
			"extensions": ["clkw"]
		},
		"application/vnd.criticaltools.wbs+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["wbs"]
		},
		"application/vnd.cryptii.pipe+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.crypto-shade-file": { "source": "iana" },
		"application/vnd.cryptomator.encrypted": { "source": "iana" },
		"application/vnd.cryptomator.vault": { "source": "iana" },
		"application/vnd.ctc-posml": {
			"source": "iana",
			"extensions": ["pml"]
		},
		"application/vnd.ctct.ws+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.cups-pdf": { "source": "iana" },
		"application/vnd.cups-postscript": { "source": "iana" },
		"application/vnd.cups-ppd": {
			"source": "iana",
			"extensions": ["ppd"]
		},
		"application/vnd.cups-raster": { "source": "iana" },
		"application/vnd.cups-raw": { "source": "iana" },
		"application/vnd.curl": { "source": "iana" },
		"application/vnd.curl.car": {
			"source": "apache",
			"extensions": ["car"]
		},
		"application/vnd.curl.pcurl": {
			"source": "apache",
			"extensions": ["pcurl"]
		},
		"application/vnd.cyan.dean.root+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.cybank": { "source": "iana" },
		"application/vnd.cyclonedx+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.cyclonedx+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.d2l.coursepackage1p0+zip": {
			"source": "iana",
			"compressible": false
		},
		"application/vnd.d3m-dataset": { "source": "iana" },
		"application/vnd.d3m-problem": { "source": "iana" },
		"application/vnd.dart": {
			"source": "iana",
			"compressible": true,
			"extensions": ["dart"]
		},
		"application/vnd.data-vision.rdz": {
			"source": "iana",
			"extensions": ["rdz"]
		},
		"application/vnd.datapackage+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.dataresource+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.dbf": {
			"source": "iana",
			"extensions": ["dbf"]
		},
		"application/vnd.debian.binary-package": { "source": "iana" },
		"application/vnd.dece.data": {
			"source": "iana",
			"extensions": [
				"uvf",
				"uvvf",
				"uvd",
				"uvvd"
			]
		},
		"application/vnd.dece.ttml+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["uvt", "uvvt"]
		},
		"application/vnd.dece.unspecified": {
			"source": "iana",
			"extensions": ["uvx", "uvvx"]
		},
		"application/vnd.dece.zip": {
			"source": "iana",
			"extensions": ["uvz", "uvvz"]
		},
		"application/vnd.denovo.fcselayout-link": {
			"source": "iana",
			"extensions": ["fe_launch"]
		},
		"application/vnd.desmume.movie": { "source": "iana" },
		"application/vnd.dir-bi.plate-dl-nosuffix": { "source": "iana" },
		"application/vnd.dm.delegation+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.dna": {
			"source": "iana",
			"extensions": ["dna"]
		},
		"application/vnd.document+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.dolby.mlp": {
			"source": "apache",
			"extensions": ["mlp"]
		},
		"application/vnd.dolby.mobile.1": { "source": "iana" },
		"application/vnd.dolby.mobile.2": { "source": "iana" },
		"application/vnd.doremir.scorecloud-binary-document": { "source": "iana" },
		"application/vnd.dpgraph": {
			"source": "iana",
			"extensions": ["dpg"]
		},
		"application/vnd.dreamfactory": {
			"source": "iana",
			"extensions": ["dfac"]
		},
		"application/vnd.drive+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.ds-keypoint": {
			"source": "apache",
			"extensions": ["kpxx"]
		},
		"application/vnd.dtg.local": { "source": "iana" },
		"application/vnd.dtg.local.flash": { "source": "iana" },
		"application/vnd.dtg.local.html": { "source": "iana" },
		"application/vnd.dvb.ait": {
			"source": "iana",
			"extensions": ["ait"]
		},
		"application/vnd.dvb.dvbisl+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.dvb.dvbj": { "source": "iana" },
		"application/vnd.dvb.esgcontainer": { "source": "iana" },
		"application/vnd.dvb.ipdcdftnotifaccess": { "source": "iana" },
		"application/vnd.dvb.ipdcesgaccess": { "source": "iana" },
		"application/vnd.dvb.ipdcesgaccess2": { "source": "iana" },
		"application/vnd.dvb.ipdcesgpdd": { "source": "iana" },
		"application/vnd.dvb.ipdcroaming": { "source": "iana" },
		"application/vnd.dvb.iptv.alfec-base": { "source": "iana" },
		"application/vnd.dvb.iptv.alfec-enhancement": { "source": "iana" },
		"application/vnd.dvb.notif-aggregate-root+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.dvb.notif-container+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.dvb.notif-generic+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.dvb.notif-ia-msglist+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.dvb.notif-ia-registration-request+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.dvb.notif-ia-registration-response+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.dvb.notif-init+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.dvb.pfr": { "source": "iana" },
		"application/vnd.dvb.service": {
			"source": "iana",
			"extensions": ["svc"]
		},
		"application/vnd.dxr": { "source": "iana" },
		"application/vnd.dynageo": {
			"source": "iana",
			"extensions": ["geo"]
		},
		"application/vnd.dzr": { "source": "iana" },
		"application/vnd.easykaraoke.cdgdownload": { "source": "iana" },
		"application/vnd.ecdis-update": { "source": "iana" },
		"application/vnd.ecip.rlp": { "source": "iana" },
		"application/vnd.eclipse.ditto+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.ecowin.chart": {
			"source": "iana",
			"extensions": ["mag"]
		},
		"application/vnd.ecowin.filerequest": { "source": "iana" },
		"application/vnd.ecowin.fileupdate": { "source": "iana" },
		"application/vnd.ecowin.series": { "source": "iana" },
		"application/vnd.ecowin.seriesrequest": { "source": "iana" },
		"application/vnd.ecowin.seriesupdate": { "source": "iana" },
		"application/vnd.efi.img": { "source": "iana" },
		"application/vnd.efi.iso": { "source": "iana" },
		"application/vnd.emclient.accessrequest+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.enliven": {
			"source": "iana",
			"extensions": ["nml"]
		},
		"application/vnd.enphase.envoy": { "source": "iana" },
		"application/vnd.eprints.data+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.epson.esf": {
			"source": "iana",
			"extensions": ["esf"]
		},
		"application/vnd.epson.msf": {
			"source": "iana",
			"extensions": ["msf"]
		},
		"application/vnd.epson.quickanime": {
			"source": "iana",
			"extensions": ["qam"]
		},
		"application/vnd.epson.salt": {
			"source": "iana",
			"extensions": ["slt"]
		},
		"application/vnd.epson.ssf": {
			"source": "iana",
			"extensions": ["ssf"]
		},
		"application/vnd.ericsson.quickcall": { "source": "iana" },
		"application/vnd.espass-espass+zip": {
			"source": "iana",
			"compressible": false
		},
		"application/vnd.eszigno3+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["es3", "et3"]
		},
		"application/vnd.etsi.aoc+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.etsi.asic-e+zip": {
			"source": "iana",
			"compressible": false
		},
		"application/vnd.etsi.asic-s+zip": {
			"source": "iana",
			"compressible": false
		},
		"application/vnd.etsi.cug+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.etsi.iptvcommand+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.etsi.iptvdiscovery+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.etsi.iptvprofile+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.etsi.iptvsad-bc+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.etsi.iptvsad-cod+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.etsi.iptvsad-npvr+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.etsi.iptvservice+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.etsi.iptvsync+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.etsi.iptvueprofile+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.etsi.mcid+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.etsi.mheg5": { "source": "iana" },
		"application/vnd.etsi.overload-control-policy-dataset+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.etsi.pstn+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.etsi.sci+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.etsi.simservs+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.etsi.timestamp-token": { "source": "iana" },
		"application/vnd.etsi.tsl+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.etsi.tsl.der": { "source": "iana" },
		"application/vnd.eu.kasparian.car+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.eudora.data": { "source": "iana" },
		"application/vnd.evolv.ecig.profile": { "source": "iana" },
		"application/vnd.evolv.ecig.settings": { "source": "iana" },
		"application/vnd.evolv.ecig.theme": { "source": "iana" },
		"application/vnd.exstream-empower+zip": {
			"source": "iana",
			"compressible": false
		},
		"application/vnd.exstream-package": { "source": "iana" },
		"application/vnd.ezpix-album": {
			"source": "iana",
			"extensions": ["ez2"]
		},
		"application/vnd.ezpix-package": {
			"source": "iana",
			"extensions": ["ez3"]
		},
		"application/vnd.f-secure.mobile": { "source": "iana" },
		"application/vnd.familysearch.gedcom+zip": {
			"source": "iana",
			"compressible": false
		},
		"application/vnd.fastcopy-disk-image": { "source": "iana" },
		"application/vnd.fdf": {
			"source": "iana",
			"extensions": ["fdf"]
		},
		"application/vnd.fdsn.mseed": {
			"source": "iana",
			"extensions": ["mseed"]
		},
		"application/vnd.fdsn.seed": {
			"source": "iana",
			"extensions": ["seed", "dataless"]
		},
		"application/vnd.ffsns": { "source": "iana" },
		"application/vnd.ficlab.flb+zip": {
			"source": "iana",
			"compressible": false
		},
		"application/vnd.filmit.zfc": { "source": "iana" },
		"application/vnd.fints": { "source": "iana" },
		"application/vnd.firemonkeys.cloudcell": { "source": "iana" },
		"application/vnd.flographit": {
			"source": "iana",
			"extensions": ["gph"]
		},
		"application/vnd.fluxtime.clip": {
			"source": "iana",
			"extensions": ["ftc"]
		},
		"application/vnd.font-fontforge-sfd": { "source": "iana" },
		"application/vnd.framemaker": {
			"source": "iana",
			"extensions": [
				"fm",
				"frame",
				"maker",
				"book"
			]
		},
		"application/vnd.frogans.fnc": {
			"source": "iana",
			"extensions": ["fnc"]
		},
		"application/vnd.frogans.ltf": {
			"source": "iana",
			"extensions": ["ltf"]
		},
		"application/vnd.fsc.weblaunch": {
			"source": "iana",
			"extensions": ["fsc"]
		},
		"application/vnd.fujifilm.fb.docuworks": { "source": "iana" },
		"application/vnd.fujifilm.fb.docuworks.binder": { "source": "iana" },
		"application/vnd.fujifilm.fb.docuworks.container": { "source": "iana" },
		"application/vnd.fujifilm.fb.jfi+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.fujitsu.oasys": {
			"source": "iana",
			"extensions": ["oas"]
		},
		"application/vnd.fujitsu.oasys2": {
			"source": "iana",
			"extensions": ["oa2"]
		},
		"application/vnd.fujitsu.oasys3": {
			"source": "iana",
			"extensions": ["oa3"]
		},
		"application/vnd.fujitsu.oasysgp": {
			"source": "iana",
			"extensions": ["fg5"]
		},
		"application/vnd.fujitsu.oasysprs": {
			"source": "iana",
			"extensions": ["bh2"]
		},
		"application/vnd.fujixerox.art-ex": { "source": "iana" },
		"application/vnd.fujixerox.art4": { "source": "iana" },
		"application/vnd.fujixerox.ddd": {
			"source": "iana",
			"extensions": ["ddd"]
		},
		"application/vnd.fujixerox.docuworks": {
			"source": "iana",
			"extensions": ["xdw"]
		},
		"application/vnd.fujixerox.docuworks.binder": {
			"source": "iana",
			"extensions": ["xbd"]
		},
		"application/vnd.fujixerox.docuworks.container": { "source": "iana" },
		"application/vnd.fujixerox.hbpl": { "source": "iana" },
		"application/vnd.fut-misnet": { "source": "iana" },
		"application/vnd.futoin+cbor": { "source": "iana" },
		"application/vnd.futoin+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.fuzzysheet": {
			"source": "iana",
			"extensions": ["fzs"]
		},
		"application/vnd.genomatix.tuxedo": {
			"source": "iana",
			"extensions": ["txd"]
		},
		"application/vnd.gentics.grd+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.geo+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.geocube+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.geogebra.file": {
			"source": "iana",
			"extensions": ["ggb"]
		},
		"application/vnd.geogebra.slides": { "source": "iana" },
		"application/vnd.geogebra.tool": {
			"source": "iana",
			"extensions": ["ggt"]
		},
		"application/vnd.geometry-explorer": {
			"source": "iana",
			"extensions": ["gex", "gre"]
		},
		"application/vnd.geonext": {
			"source": "iana",
			"extensions": ["gxt"]
		},
		"application/vnd.geoplan": {
			"source": "iana",
			"extensions": ["g2w"]
		},
		"application/vnd.geospace": {
			"source": "iana",
			"extensions": ["g3w"]
		},
		"application/vnd.gerber": { "source": "iana" },
		"application/vnd.globalplatform.card-content-mgt": { "source": "iana" },
		"application/vnd.globalplatform.card-content-mgt-response": { "source": "iana" },
		"application/vnd.gmx": {
			"source": "iana",
			"extensions": ["gmx"]
		},
		"application/vnd.google-apps.document": {
			"compressible": false,
			"extensions": ["gdoc"]
		},
		"application/vnd.google-apps.presentation": {
			"compressible": false,
			"extensions": ["gslides"]
		},
		"application/vnd.google-apps.spreadsheet": {
			"compressible": false,
			"extensions": ["gsheet"]
		},
		"application/vnd.google-earth.kml+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["kml"]
		},
		"application/vnd.google-earth.kmz": {
			"source": "iana",
			"compressible": false,
			"extensions": ["kmz"]
		},
		"application/vnd.gov.sk.e-form+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.gov.sk.e-form+zip": {
			"source": "iana",
			"compressible": false
		},
		"application/vnd.gov.sk.xmldatacontainer+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.grafeq": {
			"source": "iana",
			"extensions": ["gqf", "gqs"]
		},
		"application/vnd.gridmp": { "source": "iana" },
		"application/vnd.groove-account": {
			"source": "iana",
			"extensions": ["gac"]
		},
		"application/vnd.groove-help": {
			"source": "iana",
			"extensions": ["ghf"]
		},
		"application/vnd.groove-identity-message": {
			"source": "iana",
			"extensions": ["gim"]
		},
		"application/vnd.groove-injector": {
			"source": "iana",
			"extensions": ["grv"]
		},
		"application/vnd.groove-tool-message": {
			"source": "iana",
			"extensions": ["gtm"]
		},
		"application/vnd.groove-tool-template": {
			"source": "iana",
			"extensions": ["tpl"]
		},
		"application/vnd.groove-vcard": {
			"source": "iana",
			"extensions": ["vcg"]
		},
		"application/vnd.hal+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.hal+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["hal"]
		},
		"application/vnd.handheld-entertainment+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["zmm"]
		},
		"application/vnd.hbci": {
			"source": "iana",
			"extensions": ["hbci"]
		},
		"application/vnd.hc+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.hcl-bireports": { "source": "iana" },
		"application/vnd.hdt": { "source": "iana" },
		"application/vnd.heroku+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.hhe.lesson-player": {
			"source": "iana",
			"extensions": ["les"]
		},
		"application/vnd.hl7cda+xml": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true
		},
		"application/vnd.hl7v2+xml": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true
		},
		"application/vnd.hp-hpgl": {
			"source": "iana",
			"extensions": ["hpgl"]
		},
		"application/vnd.hp-hpid": {
			"source": "iana",
			"extensions": ["hpid"]
		},
		"application/vnd.hp-hps": {
			"source": "iana",
			"extensions": ["hps"]
		},
		"application/vnd.hp-jlyt": {
			"source": "iana",
			"extensions": ["jlt"]
		},
		"application/vnd.hp-pcl": {
			"source": "iana",
			"extensions": ["pcl"]
		},
		"application/vnd.hp-pclxl": {
			"source": "iana",
			"extensions": ["pclxl"]
		},
		"application/vnd.httphone": { "source": "iana" },
		"application/vnd.hydrostatix.sof-data": {
			"source": "iana",
			"extensions": ["sfd-hdstx"]
		},
		"application/vnd.hyper+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.hyper-item+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.hyperdrive+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.hzn-3d-crossword": { "source": "iana" },
		"application/vnd.ibm.afplinedata": { "source": "iana" },
		"application/vnd.ibm.electronic-media": { "source": "iana" },
		"application/vnd.ibm.minipay": {
			"source": "iana",
			"extensions": ["mpy"]
		},
		"application/vnd.ibm.modcap": {
			"source": "iana",
			"extensions": [
				"afp",
				"listafp",
				"list3820"
			]
		},
		"application/vnd.ibm.rights-management": {
			"source": "iana",
			"extensions": ["irm"]
		},
		"application/vnd.ibm.secure-container": {
			"source": "iana",
			"extensions": ["sc"]
		},
		"application/vnd.iccprofile": {
			"source": "iana",
			"extensions": ["icc", "icm"]
		},
		"application/vnd.ieee.1905": { "source": "iana" },
		"application/vnd.igloader": {
			"source": "iana",
			"extensions": ["igl"]
		},
		"application/vnd.imagemeter.folder+zip": {
			"source": "iana",
			"compressible": false
		},
		"application/vnd.imagemeter.image+zip": {
			"source": "iana",
			"compressible": false
		},
		"application/vnd.immervision-ivp": {
			"source": "iana",
			"extensions": ["ivp"]
		},
		"application/vnd.immervision-ivu": {
			"source": "iana",
			"extensions": ["ivu"]
		},
		"application/vnd.ims.imsccv1p1": { "source": "iana" },
		"application/vnd.ims.imsccv1p2": { "source": "iana" },
		"application/vnd.ims.imsccv1p3": { "source": "iana" },
		"application/vnd.ims.lis.v2.result+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.ims.lti.v2.toolconsumerprofile+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.ims.lti.v2.toolproxy+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.ims.lti.v2.toolproxy.id+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.ims.lti.v2.toolsettings+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.ims.lti.v2.toolsettings.simple+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.informedcontrol.rms+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.informix-visionary": { "source": "iana" },
		"application/vnd.infotech.project": { "source": "iana" },
		"application/vnd.infotech.project+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.innopath.wamp.notification": { "source": "iana" },
		"application/vnd.insors.igm": {
			"source": "iana",
			"extensions": ["igm"]
		},
		"application/vnd.intercon.formnet": {
			"source": "iana",
			"extensions": ["xpw", "xpx"]
		},
		"application/vnd.intergeo": {
			"source": "iana",
			"extensions": ["i2g"]
		},
		"application/vnd.intertrust.digibox": { "source": "iana" },
		"application/vnd.intertrust.nncp": { "source": "iana" },
		"application/vnd.intu.qbo": {
			"source": "iana",
			"extensions": ["qbo"]
		},
		"application/vnd.intu.qfx": {
			"source": "iana",
			"extensions": ["qfx"]
		},
		"application/vnd.iptc.g2.catalogitem+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.iptc.g2.conceptitem+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.iptc.g2.knowledgeitem+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.iptc.g2.newsitem+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.iptc.g2.newsmessage+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.iptc.g2.packageitem+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.iptc.g2.planningitem+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.ipunplugged.rcprofile": {
			"source": "iana",
			"extensions": ["rcprofile"]
		},
		"application/vnd.irepository.package+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["irp"]
		},
		"application/vnd.is-xpr": {
			"source": "iana",
			"extensions": ["xpr"]
		},
		"application/vnd.isac.fcs": {
			"source": "iana",
			"extensions": ["fcs"]
		},
		"application/vnd.iso11783-10+zip": {
			"source": "iana",
			"compressible": false
		},
		"application/vnd.jam": {
			"source": "iana",
			"extensions": ["jam"]
		},
		"application/vnd.japannet-directory-service": { "source": "iana" },
		"application/vnd.japannet-jpnstore-wakeup": { "source": "iana" },
		"application/vnd.japannet-payment-wakeup": { "source": "iana" },
		"application/vnd.japannet-registration": { "source": "iana" },
		"application/vnd.japannet-registration-wakeup": { "source": "iana" },
		"application/vnd.japannet-setstore-wakeup": { "source": "iana" },
		"application/vnd.japannet-verification": { "source": "iana" },
		"application/vnd.japannet-verification-wakeup": { "source": "iana" },
		"application/vnd.jcp.javame.midlet-rms": {
			"source": "iana",
			"extensions": ["rms"]
		},
		"application/vnd.jisp": {
			"source": "iana",
			"extensions": ["jisp"]
		},
		"application/vnd.joost.joda-archive": {
			"source": "iana",
			"extensions": ["joda"]
		},
		"application/vnd.jsk.isdn-ngn": { "source": "iana" },
		"application/vnd.kahootz": {
			"source": "iana",
			"extensions": ["ktz", "ktr"]
		},
		"application/vnd.kde.karbon": {
			"source": "iana",
			"extensions": ["karbon"]
		},
		"application/vnd.kde.kchart": {
			"source": "iana",
			"extensions": ["chrt"]
		},
		"application/vnd.kde.kformula": {
			"source": "iana",
			"extensions": ["kfo"]
		},
		"application/vnd.kde.kivio": {
			"source": "iana",
			"extensions": ["flw"]
		},
		"application/vnd.kde.kontour": {
			"source": "iana",
			"extensions": ["kon"]
		},
		"application/vnd.kde.kpresenter": {
			"source": "iana",
			"extensions": ["kpr", "kpt"]
		},
		"application/vnd.kde.kspread": {
			"source": "iana",
			"extensions": ["ksp"]
		},
		"application/vnd.kde.kword": {
			"source": "iana",
			"extensions": ["kwd", "kwt"]
		},
		"application/vnd.kenameaapp": {
			"source": "iana",
			"extensions": ["htke"]
		},
		"application/vnd.kidspiration": {
			"source": "iana",
			"extensions": ["kia"]
		},
		"application/vnd.kinar": {
			"source": "iana",
			"extensions": ["kne", "knp"]
		},
		"application/vnd.koan": {
			"source": "iana",
			"extensions": [
				"skp",
				"skd",
				"skt",
				"skm"
			]
		},
		"application/vnd.kodak-descriptor": {
			"source": "iana",
			"extensions": ["sse"]
		},
		"application/vnd.las": { "source": "iana" },
		"application/vnd.las.las+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.las.las+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["lasxml"]
		},
		"application/vnd.laszip": { "source": "iana" },
		"application/vnd.leap+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.liberty-request+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.llamagraphics.life-balance.desktop": {
			"source": "iana",
			"extensions": ["lbd"]
		},
		"application/vnd.llamagraphics.life-balance.exchange+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["lbe"]
		},
		"application/vnd.logipipe.circuit+zip": {
			"source": "iana",
			"compressible": false
		},
		"application/vnd.loom": { "source": "iana" },
		"application/vnd.lotus-1-2-3": {
			"source": "iana",
			"extensions": ["123"]
		},
		"application/vnd.lotus-approach": {
			"source": "iana",
			"extensions": ["apr"]
		},
		"application/vnd.lotus-freelance": {
			"source": "iana",
			"extensions": ["pre"]
		},
		"application/vnd.lotus-notes": {
			"source": "iana",
			"extensions": ["nsf"]
		},
		"application/vnd.lotus-organizer": {
			"source": "iana",
			"extensions": ["org"]
		},
		"application/vnd.lotus-screencam": {
			"source": "iana",
			"extensions": ["scm"]
		},
		"application/vnd.lotus-wordpro": {
			"source": "iana",
			"extensions": ["lwp"]
		},
		"application/vnd.macports.portpkg": {
			"source": "iana",
			"extensions": ["portpkg"]
		},
		"application/vnd.mapbox-vector-tile": {
			"source": "iana",
			"extensions": ["mvt"]
		},
		"application/vnd.marlin.drm.actiontoken+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.marlin.drm.conftoken+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.marlin.drm.license+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.marlin.drm.mdcf": { "source": "iana" },
		"application/vnd.mason+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.maxar.archive.3tz+zip": {
			"source": "iana",
			"compressible": false
		},
		"application/vnd.maxmind.maxmind-db": { "source": "iana" },
		"application/vnd.mcd": {
			"source": "iana",
			"extensions": ["mcd"]
		},
		"application/vnd.medcalcdata": {
			"source": "iana",
			"extensions": ["mc1"]
		},
		"application/vnd.mediastation.cdkey": {
			"source": "iana",
			"extensions": ["cdkey"]
		},
		"application/vnd.meridian-slingshot": { "source": "iana" },
		"application/vnd.mfer": {
			"source": "iana",
			"extensions": ["mwf"]
		},
		"application/vnd.mfmp": {
			"source": "iana",
			"extensions": ["mfm"]
		},
		"application/vnd.micro+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.micrografx.flo": {
			"source": "iana",
			"extensions": ["flo"]
		},
		"application/vnd.micrografx.igx": {
			"source": "iana",
			"extensions": ["igx"]
		},
		"application/vnd.microsoft.portable-executable": { "source": "iana" },
		"application/vnd.microsoft.windows.thumbnail-cache": { "source": "iana" },
		"application/vnd.miele+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.mif": {
			"source": "iana",
			"extensions": ["mif"]
		},
		"application/vnd.minisoft-hp3000-save": { "source": "iana" },
		"application/vnd.mitsubishi.misty-guard.trustweb": { "source": "iana" },
		"application/vnd.mobius.daf": {
			"source": "iana",
			"extensions": ["daf"]
		},
		"application/vnd.mobius.dis": {
			"source": "iana",
			"extensions": ["dis"]
		},
		"application/vnd.mobius.mbk": {
			"source": "iana",
			"extensions": ["mbk"]
		},
		"application/vnd.mobius.mqy": {
			"source": "iana",
			"extensions": ["mqy"]
		},
		"application/vnd.mobius.msl": {
			"source": "iana",
			"extensions": ["msl"]
		},
		"application/vnd.mobius.plc": {
			"source": "iana",
			"extensions": ["plc"]
		},
		"application/vnd.mobius.txf": {
			"source": "iana",
			"extensions": ["txf"]
		},
		"application/vnd.mophun.application": {
			"source": "iana",
			"extensions": ["mpn"]
		},
		"application/vnd.mophun.certificate": {
			"source": "iana",
			"extensions": ["mpc"]
		},
		"application/vnd.motorola.flexsuite": { "source": "iana" },
		"application/vnd.motorola.flexsuite.adsi": { "source": "iana" },
		"application/vnd.motorola.flexsuite.fis": { "source": "iana" },
		"application/vnd.motorola.flexsuite.gotap": { "source": "iana" },
		"application/vnd.motorola.flexsuite.kmr": { "source": "iana" },
		"application/vnd.motorola.flexsuite.ttc": { "source": "iana" },
		"application/vnd.motorola.flexsuite.wem": { "source": "iana" },
		"application/vnd.motorola.iprm": { "source": "iana" },
		"application/vnd.mozilla.xul+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["xul"]
		},
		"application/vnd.ms-3mfdocument": { "source": "iana" },
		"application/vnd.ms-artgalry": {
			"source": "iana",
			"extensions": ["cil"]
		},
		"application/vnd.ms-asf": { "source": "iana" },
		"application/vnd.ms-cab-compressed": {
			"source": "iana",
			"extensions": ["cab"]
		},
		"application/vnd.ms-color.iccprofile": { "source": "apache" },
		"application/vnd.ms-excel": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"xls",
				"xlm",
				"xla",
				"xlc",
				"xlt",
				"xlw"
			]
		},
		"application/vnd.ms-excel.addin.macroenabled.12": {
			"source": "iana",
			"extensions": ["xlam"]
		},
		"application/vnd.ms-excel.sheet.binary.macroenabled.12": {
			"source": "iana",
			"extensions": ["xlsb"]
		},
		"application/vnd.ms-excel.sheet.macroenabled.12": {
			"source": "iana",
			"extensions": ["xlsm"]
		},
		"application/vnd.ms-excel.template.macroenabled.12": {
			"source": "iana",
			"extensions": ["xltm"]
		},
		"application/vnd.ms-fontobject": {
			"source": "iana",
			"compressible": true,
			"extensions": ["eot"]
		},
		"application/vnd.ms-htmlhelp": {
			"source": "iana",
			"extensions": ["chm"]
		},
		"application/vnd.ms-ims": {
			"source": "iana",
			"extensions": ["ims"]
		},
		"application/vnd.ms-lrm": {
			"source": "iana",
			"extensions": ["lrm"]
		},
		"application/vnd.ms-office.activex+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.ms-officetheme": {
			"source": "iana",
			"extensions": ["thmx"]
		},
		"application/vnd.ms-opentype": {
			"source": "apache",
			"compressible": true
		},
		"application/vnd.ms-outlook": {
			"compressible": false,
			"extensions": ["msg"]
		},
		"application/vnd.ms-package.obfuscated-opentype": { "source": "apache" },
		"application/vnd.ms-pki.seccat": {
			"source": "apache",
			"extensions": ["cat"]
		},
		"application/vnd.ms-pki.stl": {
			"source": "apache",
			"extensions": ["stl"]
		},
		"application/vnd.ms-playready.initiator+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.ms-powerpoint": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"ppt",
				"pps",
				"pot"
			]
		},
		"application/vnd.ms-powerpoint.addin.macroenabled.12": {
			"source": "iana",
			"extensions": ["ppam"]
		},
		"application/vnd.ms-powerpoint.presentation.macroenabled.12": {
			"source": "iana",
			"extensions": ["pptm"]
		},
		"application/vnd.ms-powerpoint.slide.macroenabled.12": {
			"source": "iana",
			"extensions": ["sldm"]
		},
		"application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
			"source": "iana",
			"extensions": ["ppsm"]
		},
		"application/vnd.ms-powerpoint.template.macroenabled.12": {
			"source": "iana",
			"extensions": ["potm"]
		},
		"application/vnd.ms-printdevicecapabilities+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.ms-printing.printticket+xml": {
			"source": "apache",
			"compressible": true
		},
		"application/vnd.ms-printschematicket+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.ms-project": {
			"source": "iana",
			"extensions": ["mpp", "mpt"]
		},
		"application/vnd.ms-tnef": { "source": "iana" },
		"application/vnd.ms-windows.devicepairing": { "source": "iana" },
		"application/vnd.ms-windows.nwprinting.oob": { "source": "iana" },
		"application/vnd.ms-windows.printerpairing": { "source": "iana" },
		"application/vnd.ms-windows.wsd.oob": { "source": "iana" },
		"application/vnd.ms-wmdrm.lic-chlg-req": { "source": "iana" },
		"application/vnd.ms-wmdrm.lic-resp": { "source": "iana" },
		"application/vnd.ms-wmdrm.meter-chlg-req": { "source": "iana" },
		"application/vnd.ms-wmdrm.meter-resp": { "source": "iana" },
		"application/vnd.ms-word.document.macroenabled.12": {
			"source": "iana",
			"extensions": ["docm"]
		},
		"application/vnd.ms-word.template.macroenabled.12": {
			"source": "iana",
			"extensions": ["dotm"]
		},
		"application/vnd.ms-works": {
			"source": "iana",
			"extensions": [
				"wps",
				"wks",
				"wcm",
				"wdb"
			]
		},
		"application/vnd.ms-wpl": {
			"source": "iana",
			"extensions": ["wpl"]
		},
		"application/vnd.ms-xpsdocument": {
			"source": "iana",
			"compressible": false,
			"extensions": ["xps"]
		},
		"application/vnd.msa-disk-image": { "source": "iana" },
		"application/vnd.mseq": {
			"source": "iana",
			"extensions": ["mseq"]
		},
		"application/vnd.msign": { "source": "iana" },
		"application/vnd.multiad.creator": { "source": "iana" },
		"application/vnd.multiad.creator.cif": { "source": "iana" },
		"application/vnd.music-niff": { "source": "iana" },
		"application/vnd.musician": {
			"source": "iana",
			"extensions": ["mus"]
		},
		"application/vnd.muvee.style": {
			"source": "iana",
			"extensions": ["msty"]
		},
		"application/vnd.mynfc": {
			"source": "iana",
			"extensions": ["taglet"]
		},
		"application/vnd.nacamar.ybrid+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.ncd.control": { "source": "iana" },
		"application/vnd.ncd.reference": { "source": "iana" },
		"application/vnd.nearst.inv+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.nebumind.line": { "source": "iana" },
		"application/vnd.nervana": { "source": "iana" },
		"application/vnd.netfpx": { "source": "iana" },
		"application/vnd.neurolanguage.nlu": {
			"source": "iana",
			"extensions": ["nlu"]
		},
		"application/vnd.nimn": { "source": "iana" },
		"application/vnd.nintendo.nitro.rom": { "source": "iana" },
		"application/vnd.nintendo.snes.rom": { "source": "iana" },
		"application/vnd.nitf": {
			"source": "iana",
			"extensions": ["ntf", "nitf"]
		},
		"application/vnd.noblenet-directory": {
			"source": "iana",
			"extensions": ["nnd"]
		},
		"application/vnd.noblenet-sealer": {
			"source": "iana",
			"extensions": ["nns"]
		},
		"application/vnd.noblenet-web": {
			"source": "iana",
			"extensions": ["nnw"]
		},
		"application/vnd.nokia.catalogs": { "source": "iana" },
		"application/vnd.nokia.conml+wbxml": { "source": "iana" },
		"application/vnd.nokia.conml+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.nokia.iptv.config+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.nokia.isds-radio-presets": { "source": "iana" },
		"application/vnd.nokia.landmark+wbxml": { "source": "iana" },
		"application/vnd.nokia.landmark+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.nokia.landmarkcollection+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.nokia.n-gage.ac+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["ac"]
		},
		"application/vnd.nokia.n-gage.data": {
			"source": "iana",
			"extensions": ["ngdat"]
		},
		"application/vnd.nokia.n-gage.symbian.install": {
			"source": "iana",
			"extensions": ["n-gage"]
		},
		"application/vnd.nokia.ncd": { "source": "iana" },
		"application/vnd.nokia.pcd+wbxml": { "source": "iana" },
		"application/vnd.nokia.pcd+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.nokia.radio-preset": {
			"source": "iana",
			"extensions": ["rpst"]
		},
		"application/vnd.nokia.radio-presets": {
			"source": "iana",
			"extensions": ["rpss"]
		},
		"application/vnd.novadigm.edm": {
			"source": "iana",
			"extensions": ["edm"]
		},
		"application/vnd.novadigm.edx": {
			"source": "iana",
			"extensions": ["edx"]
		},
		"application/vnd.novadigm.ext": {
			"source": "iana",
			"extensions": ["ext"]
		},
		"application/vnd.ntt-local.content-share": { "source": "iana" },
		"application/vnd.ntt-local.file-transfer": { "source": "iana" },
		"application/vnd.ntt-local.ogw_remote-access": { "source": "iana" },
		"application/vnd.ntt-local.sip-ta_remote": { "source": "iana" },
		"application/vnd.ntt-local.sip-ta_tcp_stream": { "source": "iana" },
		"application/vnd.oasis.opendocument.chart": {
			"source": "iana",
			"extensions": ["odc"]
		},
		"application/vnd.oasis.opendocument.chart-template": {
			"source": "iana",
			"extensions": ["otc"]
		},
		"application/vnd.oasis.opendocument.database": {
			"source": "iana",
			"extensions": ["odb"]
		},
		"application/vnd.oasis.opendocument.formula": {
			"source": "iana",
			"extensions": ["odf"]
		},
		"application/vnd.oasis.opendocument.formula-template": {
			"source": "iana",
			"extensions": ["odft"]
		},
		"application/vnd.oasis.opendocument.graphics": {
			"source": "iana",
			"compressible": false,
			"extensions": ["odg"]
		},
		"application/vnd.oasis.opendocument.graphics-template": {
			"source": "iana",
			"extensions": ["otg"]
		},
		"application/vnd.oasis.opendocument.image": {
			"source": "iana",
			"extensions": ["odi"]
		},
		"application/vnd.oasis.opendocument.image-template": {
			"source": "iana",
			"extensions": ["oti"]
		},
		"application/vnd.oasis.opendocument.presentation": {
			"source": "iana",
			"compressible": false,
			"extensions": ["odp"]
		},
		"application/vnd.oasis.opendocument.presentation-template": {
			"source": "iana",
			"extensions": ["otp"]
		},
		"application/vnd.oasis.opendocument.spreadsheet": {
			"source": "iana",
			"compressible": false,
			"extensions": ["ods"]
		},
		"application/vnd.oasis.opendocument.spreadsheet-template": {
			"source": "iana",
			"extensions": ["ots"]
		},
		"application/vnd.oasis.opendocument.text": {
			"source": "iana",
			"compressible": false,
			"extensions": ["odt"]
		},
		"application/vnd.oasis.opendocument.text-master": {
			"source": "iana",
			"extensions": ["odm"]
		},
		"application/vnd.oasis.opendocument.text-template": {
			"source": "iana",
			"extensions": ["ott"]
		},
		"application/vnd.oasis.opendocument.text-web": {
			"source": "iana",
			"extensions": ["oth"]
		},
		"application/vnd.obn": { "source": "iana" },
		"application/vnd.ocf+cbor": { "source": "iana" },
		"application/vnd.oci.image.manifest.v1+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oftn.l10n+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oipf.contentaccessdownload+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oipf.contentaccessstreaming+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oipf.cspg-hexbinary": { "source": "iana" },
		"application/vnd.oipf.dae.svg+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oipf.dae.xhtml+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oipf.mippvcontrolmessage+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oipf.pae.gem": { "source": "iana" },
		"application/vnd.oipf.spdiscovery+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oipf.spdlist+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oipf.ueprofile+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oipf.userprofile+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.olpc-sugar": {
			"source": "iana",
			"extensions": ["xo"]
		},
		"application/vnd.oma-scws-config": { "source": "iana" },
		"application/vnd.oma-scws-http-request": { "source": "iana" },
		"application/vnd.oma-scws-http-response": { "source": "iana" },
		"application/vnd.oma.bcast.associated-procedure-parameter+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oma.bcast.drm-trigger+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oma.bcast.imd+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oma.bcast.ltkm": { "source": "iana" },
		"application/vnd.oma.bcast.notification+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oma.bcast.provisioningtrigger": { "source": "iana" },
		"application/vnd.oma.bcast.sgboot": { "source": "iana" },
		"application/vnd.oma.bcast.sgdd+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oma.bcast.sgdu": { "source": "iana" },
		"application/vnd.oma.bcast.simple-symbol-container": { "source": "iana" },
		"application/vnd.oma.bcast.smartcard-trigger+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oma.bcast.sprov+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oma.bcast.stkm": { "source": "iana" },
		"application/vnd.oma.cab-address-book+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oma.cab-feature-handler+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oma.cab-pcc+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oma.cab-subs-invite+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oma.cab-user-prefs+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oma.dcd": { "source": "iana" },
		"application/vnd.oma.dcdc": { "source": "iana" },
		"application/vnd.oma.dd2+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["dd2"]
		},
		"application/vnd.oma.drm.risd+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oma.group-usage-list+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oma.lwm2m+cbor": { "source": "iana" },
		"application/vnd.oma.lwm2m+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oma.lwm2m+tlv": { "source": "iana" },
		"application/vnd.oma.pal+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oma.poc.detailed-progress-report+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oma.poc.final-report+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oma.poc.groups+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oma.poc.invocation-descriptor+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oma.poc.optimized-progress-report+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oma.push": { "source": "iana" },
		"application/vnd.oma.scidm.messages+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oma.xcap-directory+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.omads-email+xml": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true
		},
		"application/vnd.omads-file+xml": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true
		},
		"application/vnd.omads-folder+xml": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true
		},
		"application/vnd.omaloc-supl-init": { "source": "iana" },
		"application/vnd.onepager": { "source": "iana" },
		"application/vnd.onepagertamp": { "source": "iana" },
		"application/vnd.onepagertamx": { "source": "iana" },
		"application/vnd.onepagertat": { "source": "iana" },
		"application/vnd.onepagertatp": { "source": "iana" },
		"application/vnd.onepagertatx": { "source": "iana" },
		"application/vnd.openblox.game+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["obgx"]
		},
		"application/vnd.openblox.game-binary": { "source": "iana" },
		"application/vnd.openeye.oeb": { "source": "iana" },
		"application/vnd.openofficeorg.extension": {
			"source": "apache",
			"extensions": ["oxt"]
		},
		"application/vnd.openstreetmap.data+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["osm"]
		},
		"application/vnd.opentimestamps.ots": { "source": "iana" },
		"application/vnd.openxmlformats-officedocument.custom-properties+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.drawing+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.extended-properties+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.presentationml.presentation": {
			"source": "iana",
			"compressible": false,
			"extensions": ["pptx"]
		},
		"application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.presentationml.slide": {
			"source": "iana",
			"extensions": ["sldx"]
		},
		"application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
			"source": "iana",
			"extensions": ["ppsx"]
		},
		"application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.presentationml.template": {
			"source": "iana",
			"extensions": ["potx"]
		},
		"application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
			"source": "iana",
			"compressible": false,
			"extensions": ["xlsx"]
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
			"source": "iana",
			"extensions": ["xltx"]
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.theme+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.themeoverride+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.vmldrawing": { "source": "iana" },
		"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
			"source": "iana",
			"compressible": false,
			"extensions": ["docx"]
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
			"source": "iana",
			"extensions": ["dotx"]
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-package.core-properties+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.openxmlformats-package.relationships+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oracle.resource+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.orange.indata": { "source": "iana" },
		"application/vnd.osa.netdeploy": { "source": "iana" },
		"application/vnd.osgeo.mapguide.package": {
			"source": "iana",
			"extensions": ["mgp"]
		},
		"application/vnd.osgi.bundle": { "source": "iana" },
		"application/vnd.osgi.dp": {
			"source": "iana",
			"extensions": ["dp"]
		},
		"application/vnd.osgi.subsystem": {
			"source": "iana",
			"extensions": ["esa"]
		},
		"application/vnd.otps.ct-kip+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.oxli.countgraph": { "source": "iana" },
		"application/vnd.pagerduty+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.palm": {
			"source": "iana",
			"extensions": [
				"pdb",
				"pqa",
				"oprc"
			]
		},
		"application/vnd.panoply": { "source": "iana" },
		"application/vnd.paos.xml": { "source": "iana" },
		"application/vnd.patentdive": { "source": "iana" },
		"application/vnd.patientecommsdoc": { "source": "iana" },
		"application/vnd.pawaafile": {
			"source": "iana",
			"extensions": ["paw"]
		},
		"application/vnd.pcos": { "source": "iana" },
		"application/vnd.pg.format": {
			"source": "iana",
			"extensions": ["str"]
		},
		"application/vnd.pg.osasli": {
			"source": "iana",
			"extensions": ["ei6"]
		},
		"application/vnd.piaccess.application-licence": { "source": "iana" },
		"application/vnd.picsel": {
			"source": "iana",
			"extensions": ["efif"]
		},
		"application/vnd.pmi.widget": {
			"source": "iana",
			"extensions": ["wg"]
		},
		"application/vnd.poc.group-advertisement+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.pocketlearn": {
			"source": "iana",
			"extensions": ["plf"]
		},
		"application/vnd.powerbuilder6": {
			"source": "iana",
			"extensions": ["pbd"]
		},
		"application/vnd.powerbuilder6-s": { "source": "iana" },
		"application/vnd.powerbuilder7": { "source": "iana" },
		"application/vnd.powerbuilder7-s": { "source": "iana" },
		"application/vnd.powerbuilder75": { "source": "iana" },
		"application/vnd.powerbuilder75-s": { "source": "iana" },
		"application/vnd.preminet": { "source": "iana" },
		"application/vnd.previewsystems.box": {
			"source": "iana",
			"extensions": ["box"]
		},
		"application/vnd.proteus.magazine": {
			"source": "iana",
			"extensions": ["mgz"]
		},
		"application/vnd.psfs": { "source": "iana" },
		"application/vnd.publishare-delta-tree": {
			"source": "iana",
			"extensions": ["qps"]
		},
		"application/vnd.pvi.ptid1": {
			"source": "iana",
			"extensions": ["ptid"]
		},
		"application/vnd.pwg-multiplexed": { "source": "iana" },
		"application/vnd.pwg-xhtml-print+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.qualcomm.brew-app-res": { "source": "iana" },
		"application/vnd.quarantainenet": { "source": "iana" },
		"application/vnd.quark.quarkxpress": {
			"source": "iana",
			"extensions": [
				"qxd",
				"qxt",
				"qwd",
				"qwt",
				"qxl",
				"qxb"
			]
		},
		"application/vnd.quobject-quoxdocument": { "source": "iana" },
		"application/vnd.radisys.moml+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.radisys.msml+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.radisys.msml-audit+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.radisys.msml-audit-conf+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.radisys.msml-audit-conn+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.radisys.msml-audit-dialog+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.radisys.msml-audit-stream+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.radisys.msml-conf+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.radisys.msml-dialog+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.radisys.msml-dialog-base+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.radisys.msml-dialog-fax-detect+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.radisys.msml-dialog-group+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.radisys.msml-dialog-speech+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.radisys.msml-dialog-transform+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.rainstor.data": { "source": "iana" },
		"application/vnd.rapid": { "source": "iana" },
		"application/vnd.rar": {
			"source": "iana",
			"extensions": ["rar"]
		},
		"application/vnd.realvnc.bed": {
			"source": "iana",
			"extensions": ["bed"]
		},
		"application/vnd.recordare.musicxml": {
			"source": "iana",
			"extensions": ["mxl"]
		},
		"application/vnd.recordare.musicxml+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["musicxml"]
		},
		"application/vnd.renlearn.rlprint": { "source": "iana" },
		"application/vnd.resilient.logic": { "source": "iana" },
		"application/vnd.restful+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.rig.cryptonote": {
			"source": "iana",
			"extensions": ["cryptonote"]
		},
		"application/vnd.rim.cod": {
			"source": "apache",
			"extensions": ["cod"]
		},
		"application/vnd.rn-realmedia": {
			"source": "apache",
			"extensions": ["rm"]
		},
		"application/vnd.rn-realmedia-vbr": {
			"source": "apache",
			"extensions": ["rmvb"]
		},
		"application/vnd.route66.link66+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["link66"]
		},
		"application/vnd.rs-274x": { "source": "iana" },
		"application/vnd.ruckus.download": { "source": "iana" },
		"application/vnd.s3sms": { "source": "iana" },
		"application/vnd.sailingtracker.track": {
			"source": "iana",
			"extensions": ["st"]
		},
		"application/vnd.sar": { "source": "iana" },
		"application/vnd.sbm.cid": { "source": "iana" },
		"application/vnd.sbm.mid2": { "source": "iana" },
		"application/vnd.scribus": { "source": "iana" },
		"application/vnd.sealed.3df": { "source": "iana" },
		"application/vnd.sealed.csf": { "source": "iana" },
		"application/vnd.sealed.doc": { "source": "iana" },
		"application/vnd.sealed.eml": { "source": "iana" },
		"application/vnd.sealed.mht": { "source": "iana" },
		"application/vnd.sealed.net": { "source": "iana" },
		"application/vnd.sealed.ppt": { "source": "iana" },
		"application/vnd.sealed.tiff": { "source": "iana" },
		"application/vnd.sealed.xls": { "source": "iana" },
		"application/vnd.sealedmedia.softseal.html": { "source": "iana" },
		"application/vnd.sealedmedia.softseal.pdf": { "source": "iana" },
		"application/vnd.seemail": {
			"source": "iana",
			"extensions": ["see"]
		},
		"application/vnd.seis+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.sema": {
			"source": "iana",
			"extensions": ["sema"]
		},
		"application/vnd.semd": {
			"source": "iana",
			"extensions": ["semd"]
		},
		"application/vnd.semf": {
			"source": "iana",
			"extensions": ["semf"]
		},
		"application/vnd.shade-save-file": { "source": "iana" },
		"application/vnd.shana.informed.formdata": {
			"source": "iana",
			"extensions": ["ifm"]
		},
		"application/vnd.shana.informed.formtemplate": {
			"source": "iana",
			"extensions": ["itp"]
		},
		"application/vnd.shana.informed.interchange": {
			"source": "iana",
			"extensions": ["iif"]
		},
		"application/vnd.shana.informed.package": {
			"source": "iana",
			"extensions": ["ipk"]
		},
		"application/vnd.shootproof+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.shopkick+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.shp": { "source": "iana" },
		"application/vnd.shx": { "source": "iana" },
		"application/vnd.sigrok.session": { "source": "iana" },
		"application/vnd.simtech-mindmapper": {
			"source": "iana",
			"extensions": ["twd", "twds"]
		},
		"application/vnd.siren+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.smaf": {
			"source": "iana",
			"extensions": ["mmf"]
		},
		"application/vnd.smart.notebook": { "source": "iana" },
		"application/vnd.smart.teacher": {
			"source": "iana",
			"extensions": ["teacher"]
		},
		"application/vnd.snesdev-page-table": { "source": "iana" },
		"application/vnd.software602.filler.form+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["fo"]
		},
		"application/vnd.software602.filler.form-xml-zip": { "source": "iana" },
		"application/vnd.solent.sdkm+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["sdkm", "sdkd"]
		},
		"application/vnd.spotfire.dxp": {
			"source": "iana",
			"extensions": ["dxp"]
		},
		"application/vnd.spotfire.sfs": {
			"source": "iana",
			"extensions": ["sfs"]
		},
		"application/vnd.sqlite3": { "source": "iana" },
		"application/vnd.sss-cod": { "source": "iana" },
		"application/vnd.sss-dtf": { "source": "iana" },
		"application/vnd.sss-ntf": { "source": "iana" },
		"application/vnd.stardivision.calc": {
			"source": "apache",
			"extensions": ["sdc"]
		},
		"application/vnd.stardivision.draw": {
			"source": "apache",
			"extensions": ["sda"]
		},
		"application/vnd.stardivision.impress": {
			"source": "apache",
			"extensions": ["sdd"]
		},
		"application/vnd.stardivision.math": {
			"source": "apache",
			"extensions": ["smf"]
		},
		"application/vnd.stardivision.writer": {
			"source": "apache",
			"extensions": ["sdw", "vor"]
		},
		"application/vnd.stardivision.writer-global": {
			"source": "apache",
			"extensions": ["sgl"]
		},
		"application/vnd.stepmania.package": {
			"source": "iana",
			"extensions": ["smzip"]
		},
		"application/vnd.stepmania.stepchart": {
			"source": "iana",
			"extensions": ["sm"]
		},
		"application/vnd.street-stream": { "source": "iana" },
		"application/vnd.sun.wadl+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["wadl"]
		},
		"application/vnd.sun.xml.calc": {
			"source": "apache",
			"extensions": ["sxc"]
		},
		"application/vnd.sun.xml.calc.template": {
			"source": "apache",
			"extensions": ["stc"]
		},
		"application/vnd.sun.xml.draw": {
			"source": "apache",
			"extensions": ["sxd"]
		},
		"application/vnd.sun.xml.draw.template": {
			"source": "apache",
			"extensions": ["std"]
		},
		"application/vnd.sun.xml.impress": {
			"source": "apache",
			"extensions": ["sxi"]
		},
		"application/vnd.sun.xml.impress.template": {
			"source": "apache",
			"extensions": ["sti"]
		},
		"application/vnd.sun.xml.math": {
			"source": "apache",
			"extensions": ["sxm"]
		},
		"application/vnd.sun.xml.writer": {
			"source": "apache",
			"extensions": ["sxw"]
		},
		"application/vnd.sun.xml.writer.global": {
			"source": "apache",
			"extensions": ["sxg"]
		},
		"application/vnd.sun.xml.writer.template": {
			"source": "apache",
			"extensions": ["stw"]
		},
		"application/vnd.sus-calendar": {
			"source": "iana",
			"extensions": ["sus", "susp"]
		},
		"application/vnd.svd": {
			"source": "iana",
			"extensions": ["svd"]
		},
		"application/vnd.swiftview-ics": { "source": "iana" },
		"application/vnd.sycle+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.syft+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.symbian.install": {
			"source": "apache",
			"extensions": ["sis", "sisx"]
		},
		"application/vnd.syncml+xml": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true,
			"extensions": ["xsm"]
		},
		"application/vnd.syncml.dm+wbxml": {
			"source": "iana",
			"charset": "UTF-8",
			"extensions": ["bdm"]
		},
		"application/vnd.syncml.dm+xml": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true,
			"extensions": ["xdm"]
		},
		"application/vnd.syncml.dm.notification": { "source": "iana" },
		"application/vnd.syncml.dmddf+wbxml": { "source": "iana" },
		"application/vnd.syncml.dmddf+xml": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true,
			"extensions": ["ddf"]
		},
		"application/vnd.syncml.dmtnds+wbxml": { "source": "iana" },
		"application/vnd.syncml.dmtnds+xml": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true
		},
		"application/vnd.syncml.ds.notification": { "source": "iana" },
		"application/vnd.tableschema+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.tao.intent-module-archive": {
			"source": "iana",
			"extensions": ["tao"]
		},
		"application/vnd.tcpdump.pcap": {
			"source": "iana",
			"extensions": [
				"pcap",
				"cap",
				"dmp"
			]
		},
		"application/vnd.think-cell.ppttc+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.tmd.mediaflex.api+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.tml": { "source": "iana" },
		"application/vnd.tmobile-livetv": {
			"source": "iana",
			"extensions": ["tmo"]
		},
		"application/vnd.tri.onesource": { "source": "iana" },
		"application/vnd.trid.tpt": {
			"source": "iana",
			"extensions": ["tpt"]
		},
		"application/vnd.triscape.mxs": {
			"source": "iana",
			"extensions": ["mxs"]
		},
		"application/vnd.trueapp": {
			"source": "iana",
			"extensions": ["tra"]
		},
		"application/vnd.truedoc": { "source": "iana" },
		"application/vnd.ubisoft.webplayer": { "source": "iana" },
		"application/vnd.ufdl": {
			"source": "iana",
			"extensions": ["ufd", "ufdl"]
		},
		"application/vnd.uiq.theme": {
			"source": "iana",
			"extensions": ["utz"]
		},
		"application/vnd.umajin": {
			"source": "iana",
			"extensions": ["umj"]
		},
		"application/vnd.unity": {
			"source": "iana",
			"extensions": ["unityweb"]
		},
		"application/vnd.uoml+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["uoml"]
		},
		"application/vnd.uplanet.alert": { "source": "iana" },
		"application/vnd.uplanet.alert-wbxml": { "source": "iana" },
		"application/vnd.uplanet.bearer-choice": { "source": "iana" },
		"application/vnd.uplanet.bearer-choice-wbxml": { "source": "iana" },
		"application/vnd.uplanet.cacheop": { "source": "iana" },
		"application/vnd.uplanet.cacheop-wbxml": { "source": "iana" },
		"application/vnd.uplanet.channel": { "source": "iana" },
		"application/vnd.uplanet.channel-wbxml": { "source": "iana" },
		"application/vnd.uplanet.list": { "source": "iana" },
		"application/vnd.uplanet.list-wbxml": { "source": "iana" },
		"application/vnd.uplanet.listcmd": { "source": "iana" },
		"application/vnd.uplanet.listcmd-wbxml": { "source": "iana" },
		"application/vnd.uplanet.signal": { "source": "iana" },
		"application/vnd.uri-map": { "source": "iana" },
		"application/vnd.valve.source.material": { "source": "iana" },
		"application/vnd.vcx": {
			"source": "iana",
			"extensions": ["vcx"]
		},
		"application/vnd.vd-study": { "source": "iana" },
		"application/vnd.vectorworks": { "source": "iana" },
		"application/vnd.vel+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.verimatrix.vcas": { "source": "iana" },
		"application/vnd.veritone.aion+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.veryant.thin": { "source": "iana" },
		"application/vnd.ves.encrypted": { "source": "iana" },
		"application/vnd.vidsoft.vidconference": { "source": "iana" },
		"application/vnd.visio": {
			"source": "iana",
			"extensions": [
				"vsd",
				"vst",
				"vss",
				"vsw"
			]
		},
		"application/vnd.visionary": {
			"source": "iana",
			"extensions": ["vis"]
		},
		"application/vnd.vividence.scriptfile": { "source": "iana" },
		"application/vnd.vsf": {
			"source": "iana",
			"extensions": ["vsf"]
		},
		"application/vnd.wap.sic": { "source": "iana" },
		"application/vnd.wap.slc": { "source": "iana" },
		"application/vnd.wap.wbxml": {
			"source": "iana",
			"charset": "UTF-8",
			"extensions": ["wbxml"]
		},
		"application/vnd.wap.wmlc": {
			"source": "iana",
			"extensions": ["wmlc"]
		},
		"application/vnd.wap.wmlscriptc": {
			"source": "iana",
			"extensions": ["wmlsc"]
		},
		"application/vnd.webturbo": {
			"source": "iana",
			"extensions": ["wtb"]
		},
		"application/vnd.wfa.dpp": { "source": "iana" },
		"application/vnd.wfa.p2p": { "source": "iana" },
		"application/vnd.wfa.wsc": { "source": "iana" },
		"application/vnd.windows.devicepairing": { "source": "iana" },
		"application/vnd.wmc": { "source": "iana" },
		"application/vnd.wmf.bootstrap": { "source": "iana" },
		"application/vnd.wolfram.mathematica": { "source": "iana" },
		"application/vnd.wolfram.mathematica.package": { "source": "iana" },
		"application/vnd.wolfram.player": {
			"source": "iana",
			"extensions": ["nbp"]
		},
		"application/vnd.wordperfect": {
			"source": "iana",
			"extensions": ["wpd"]
		},
		"application/vnd.wqd": {
			"source": "iana",
			"extensions": ["wqd"]
		},
		"application/vnd.wrq-hp3000-labelled": { "source": "iana" },
		"application/vnd.wt.stf": {
			"source": "iana",
			"extensions": ["stf"]
		},
		"application/vnd.wv.csp+wbxml": { "source": "iana" },
		"application/vnd.wv.csp+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.wv.ssp+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.xacml+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.xara": {
			"source": "iana",
			"extensions": ["xar"]
		},
		"application/vnd.xfdl": {
			"source": "iana",
			"extensions": ["xfdl"]
		},
		"application/vnd.xfdl.webform": { "source": "iana" },
		"application/vnd.xmi+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/vnd.xmpie.cpkg": { "source": "iana" },
		"application/vnd.xmpie.dpkg": { "source": "iana" },
		"application/vnd.xmpie.plan": { "source": "iana" },
		"application/vnd.xmpie.ppkg": { "source": "iana" },
		"application/vnd.xmpie.xlim": { "source": "iana" },
		"application/vnd.yamaha.hv-dic": {
			"source": "iana",
			"extensions": ["hvd"]
		},
		"application/vnd.yamaha.hv-script": {
			"source": "iana",
			"extensions": ["hvs"]
		},
		"application/vnd.yamaha.hv-voice": {
			"source": "iana",
			"extensions": ["hvp"]
		},
		"application/vnd.yamaha.openscoreformat": {
			"source": "iana",
			"extensions": ["osf"]
		},
		"application/vnd.yamaha.openscoreformat.osfpvg+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["osfpvg"]
		},
		"application/vnd.yamaha.remote-setup": { "source": "iana" },
		"application/vnd.yamaha.smaf-audio": {
			"source": "iana",
			"extensions": ["saf"]
		},
		"application/vnd.yamaha.smaf-phrase": {
			"source": "iana",
			"extensions": ["spf"]
		},
		"application/vnd.yamaha.through-ngn": { "source": "iana" },
		"application/vnd.yamaha.tunnel-udpencap": { "source": "iana" },
		"application/vnd.yaoweme": { "source": "iana" },
		"application/vnd.yellowriver-custom-menu": {
			"source": "iana",
			"extensions": ["cmp"]
		},
		"application/vnd.youtube.yt": { "source": "iana" },
		"application/vnd.zul": {
			"source": "iana",
			"extensions": ["zir", "zirz"]
		},
		"application/vnd.zzazz.deck+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["zaz"]
		},
		"application/voicexml+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["vxml"]
		},
		"application/voucher-cms+json": {
			"source": "iana",
			"compressible": true
		},
		"application/vq-rtcpxr": { "source": "iana" },
		"application/wasm": {
			"source": "iana",
			"compressible": true,
			"extensions": ["wasm"]
		},
		"application/watcherinfo+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["wif"]
		},
		"application/webpush-options+json": {
			"source": "iana",
			"compressible": true
		},
		"application/whoispp-query": { "source": "iana" },
		"application/whoispp-response": { "source": "iana" },
		"application/widget": {
			"source": "iana",
			"extensions": ["wgt"]
		},
		"application/winhlp": {
			"source": "apache",
			"extensions": ["hlp"]
		},
		"application/wita": { "source": "iana" },
		"application/wordperfect5.1": { "source": "iana" },
		"application/wsdl+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["wsdl"]
		},
		"application/wspolicy+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["wspolicy"]
		},
		"application/x-7z-compressed": {
			"source": "apache",
			"compressible": false,
			"extensions": ["7z"]
		},
		"application/x-abiword": {
			"source": "apache",
			"extensions": ["abw"]
		},
		"application/x-ace-compressed": {
			"source": "apache",
			"extensions": ["ace"]
		},
		"application/x-amf": { "source": "apache" },
		"application/x-apple-diskimage": {
			"source": "apache",
			"extensions": ["dmg"]
		},
		"application/x-arj": {
			"compressible": false,
			"extensions": ["arj"]
		},
		"application/x-authorware-bin": {
			"source": "apache",
			"extensions": [
				"aab",
				"x32",
				"u32",
				"vox"
			]
		},
		"application/x-authorware-map": {
			"source": "apache",
			"extensions": ["aam"]
		},
		"application/x-authorware-seg": {
			"source": "apache",
			"extensions": ["aas"]
		},
		"application/x-bcpio": {
			"source": "apache",
			"extensions": ["bcpio"]
		},
		"application/x-bdoc": {
			"compressible": false,
			"extensions": ["bdoc"]
		},
		"application/x-bittorrent": {
			"source": "apache",
			"extensions": ["torrent"]
		},
		"application/x-blorb": {
			"source": "apache",
			"extensions": ["blb", "blorb"]
		},
		"application/x-bzip": {
			"source": "apache",
			"compressible": false,
			"extensions": ["bz"]
		},
		"application/x-bzip2": {
			"source": "apache",
			"compressible": false,
			"extensions": ["bz2", "boz"]
		},
		"application/x-cbr": {
			"source": "apache",
			"extensions": [
				"cbr",
				"cba",
				"cbt",
				"cbz",
				"cb7"
			]
		},
		"application/x-cdlink": {
			"source": "apache",
			"extensions": ["vcd"]
		},
		"application/x-cfs-compressed": {
			"source": "apache",
			"extensions": ["cfs"]
		},
		"application/x-chat": {
			"source": "apache",
			"extensions": ["chat"]
		},
		"application/x-chess-pgn": {
			"source": "apache",
			"extensions": ["pgn"]
		},
		"application/x-chrome-extension": { "extensions": ["crx"] },
		"application/x-cocoa": {
			"source": "nginx",
			"extensions": ["cco"]
		},
		"application/x-compress": { "source": "apache" },
		"application/x-conference": {
			"source": "apache",
			"extensions": ["nsc"]
		},
		"application/x-cpio": {
			"source": "apache",
			"extensions": ["cpio"]
		},
		"application/x-csh": {
			"source": "apache",
			"extensions": ["csh"]
		},
		"application/x-deb": { "compressible": false },
		"application/x-debian-package": {
			"source": "apache",
			"extensions": ["deb", "udeb"]
		},
		"application/x-dgc-compressed": {
			"source": "apache",
			"extensions": ["dgc"]
		},
		"application/x-director": {
			"source": "apache",
			"extensions": [
				"dir",
				"dcr",
				"dxr",
				"cst",
				"cct",
				"cxt",
				"w3d",
				"fgd",
				"swa"
			]
		},
		"application/x-doom": {
			"source": "apache",
			"extensions": ["wad"]
		},
		"application/x-dtbncx+xml": {
			"source": "apache",
			"compressible": true,
			"extensions": ["ncx"]
		},
		"application/x-dtbook+xml": {
			"source": "apache",
			"compressible": true,
			"extensions": ["dtb"]
		},
		"application/x-dtbresource+xml": {
			"source": "apache",
			"compressible": true,
			"extensions": ["res"]
		},
		"application/x-dvi": {
			"source": "apache",
			"compressible": false,
			"extensions": ["dvi"]
		},
		"application/x-envoy": {
			"source": "apache",
			"extensions": ["evy"]
		},
		"application/x-eva": {
			"source": "apache",
			"extensions": ["eva"]
		},
		"application/x-font-bdf": {
			"source": "apache",
			"extensions": ["bdf"]
		},
		"application/x-font-dos": { "source": "apache" },
		"application/x-font-framemaker": { "source": "apache" },
		"application/x-font-ghostscript": {
			"source": "apache",
			"extensions": ["gsf"]
		},
		"application/x-font-libgrx": { "source": "apache" },
		"application/x-font-linux-psf": {
			"source": "apache",
			"extensions": ["psf"]
		},
		"application/x-font-pcf": {
			"source": "apache",
			"extensions": ["pcf"]
		},
		"application/x-font-snf": {
			"source": "apache",
			"extensions": ["snf"]
		},
		"application/x-font-speedo": { "source": "apache" },
		"application/x-font-sunos-news": { "source": "apache" },
		"application/x-font-type1": {
			"source": "apache",
			"extensions": [
				"pfa",
				"pfb",
				"pfm",
				"afm"
			]
		},
		"application/x-font-vfont": { "source": "apache" },
		"application/x-freearc": {
			"source": "apache",
			"extensions": ["arc"]
		},
		"application/x-futuresplash": {
			"source": "apache",
			"extensions": ["spl"]
		},
		"application/x-gca-compressed": {
			"source": "apache",
			"extensions": ["gca"]
		},
		"application/x-glulx": {
			"source": "apache",
			"extensions": ["ulx"]
		},
		"application/x-gnumeric": {
			"source": "apache",
			"extensions": ["gnumeric"]
		},
		"application/x-gramps-xml": {
			"source": "apache",
			"extensions": ["gramps"]
		},
		"application/x-gtar": {
			"source": "apache",
			"extensions": ["gtar"]
		},
		"application/x-gzip": { "source": "apache" },
		"application/x-hdf": {
			"source": "apache",
			"extensions": ["hdf"]
		},
		"application/x-httpd-php": {
			"compressible": true,
			"extensions": ["php"]
		},
		"application/x-install-instructions": {
			"source": "apache",
			"extensions": ["install"]
		},
		"application/x-iso9660-image": {
			"source": "apache",
			"extensions": ["iso"]
		},
		"application/x-iwork-keynote-sffkey": { "extensions": ["key"] },
		"application/x-iwork-numbers-sffnumbers": { "extensions": ["numbers"] },
		"application/x-iwork-pages-sffpages": { "extensions": ["pages"] },
		"application/x-java-archive-diff": {
			"source": "nginx",
			"extensions": ["jardiff"]
		},
		"application/x-java-jnlp-file": {
			"source": "apache",
			"compressible": false,
			"extensions": ["jnlp"]
		},
		"application/x-javascript": { "compressible": true },
		"application/x-keepass2": { "extensions": ["kdbx"] },
		"application/x-latex": {
			"source": "apache",
			"compressible": false,
			"extensions": ["latex"]
		},
		"application/x-lua-bytecode": { "extensions": ["luac"] },
		"application/x-lzh-compressed": {
			"source": "apache",
			"extensions": ["lzh", "lha"]
		},
		"application/x-makeself": {
			"source": "nginx",
			"extensions": ["run"]
		},
		"application/x-mie": {
			"source": "apache",
			"extensions": ["mie"]
		},
		"application/x-mobipocket-ebook": {
			"source": "apache",
			"extensions": ["prc", "mobi"]
		},
		"application/x-mpegurl": { "compressible": false },
		"application/x-ms-application": {
			"source": "apache",
			"extensions": ["application"]
		},
		"application/x-ms-shortcut": {
			"source": "apache",
			"extensions": ["lnk"]
		},
		"application/x-ms-wmd": {
			"source": "apache",
			"extensions": ["wmd"]
		},
		"application/x-ms-wmz": {
			"source": "apache",
			"extensions": ["wmz"]
		},
		"application/x-ms-xbap": {
			"source": "apache",
			"extensions": ["xbap"]
		},
		"application/x-msaccess": {
			"source": "apache",
			"extensions": ["mdb"]
		},
		"application/x-msbinder": {
			"source": "apache",
			"extensions": ["obd"]
		},
		"application/x-mscardfile": {
			"source": "apache",
			"extensions": ["crd"]
		},
		"application/x-msclip": {
			"source": "apache",
			"extensions": ["clp"]
		},
		"application/x-msdos-program": { "extensions": ["exe"] },
		"application/x-msdownload": {
			"source": "apache",
			"extensions": [
				"exe",
				"dll",
				"com",
				"bat",
				"msi"
			]
		},
		"application/x-msmediaview": {
			"source": "apache",
			"extensions": [
				"mvb",
				"m13",
				"m14"
			]
		},
		"application/x-msmetafile": {
			"source": "apache",
			"extensions": [
				"wmf",
				"wmz",
				"emf",
				"emz"
			]
		},
		"application/x-msmoney": {
			"source": "apache",
			"extensions": ["mny"]
		},
		"application/x-mspublisher": {
			"source": "apache",
			"extensions": ["pub"]
		},
		"application/x-msschedule": {
			"source": "apache",
			"extensions": ["scd"]
		},
		"application/x-msterminal": {
			"source": "apache",
			"extensions": ["trm"]
		},
		"application/x-mswrite": {
			"source": "apache",
			"extensions": ["wri"]
		},
		"application/x-netcdf": {
			"source": "apache",
			"extensions": ["nc", "cdf"]
		},
		"application/x-ns-proxy-autoconfig": {
			"compressible": true,
			"extensions": ["pac"]
		},
		"application/x-nzb": {
			"source": "apache",
			"extensions": ["nzb"]
		},
		"application/x-perl": {
			"source": "nginx",
			"extensions": ["pl", "pm"]
		},
		"application/x-pilot": {
			"source": "nginx",
			"extensions": ["prc", "pdb"]
		},
		"application/x-pkcs12": {
			"source": "apache",
			"compressible": false,
			"extensions": ["p12", "pfx"]
		},
		"application/x-pkcs7-certificates": {
			"source": "apache",
			"extensions": ["p7b", "spc"]
		},
		"application/x-pkcs7-certreqresp": {
			"source": "apache",
			"extensions": ["p7r"]
		},
		"application/x-pki-message": { "source": "iana" },
		"application/x-rar-compressed": {
			"source": "apache",
			"compressible": false,
			"extensions": ["rar"]
		},
		"application/x-redhat-package-manager": {
			"source": "nginx",
			"extensions": ["rpm"]
		},
		"application/x-research-info-systems": {
			"source": "apache",
			"extensions": ["ris"]
		},
		"application/x-sea": {
			"source": "nginx",
			"extensions": ["sea"]
		},
		"application/x-sh": {
			"source": "apache",
			"compressible": true,
			"extensions": ["sh"]
		},
		"application/x-shar": {
			"source": "apache",
			"extensions": ["shar"]
		},
		"application/x-shockwave-flash": {
			"source": "apache",
			"compressible": false,
			"extensions": ["swf"]
		},
		"application/x-silverlight-app": {
			"source": "apache",
			"extensions": ["xap"]
		},
		"application/x-sql": {
			"source": "apache",
			"extensions": ["sql"]
		},
		"application/x-stuffit": {
			"source": "apache",
			"compressible": false,
			"extensions": ["sit"]
		},
		"application/x-stuffitx": {
			"source": "apache",
			"extensions": ["sitx"]
		},
		"application/x-subrip": {
			"source": "apache",
			"extensions": ["srt"]
		},
		"application/x-sv4cpio": {
			"source": "apache",
			"extensions": ["sv4cpio"]
		},
		"application/x-sv4crc": {
			"source": "apache",
			"extensions": ["sv4crc"]
		},
		"application/x-t3vm-image": {
			"source": "apache",
			"extensions": ["t3"]
		},
		"application/x-tads": {
			"source": "apache",
			"extensions": ["gam"]
		},
		"application/x-tar": {
			"source": "apache",
			"compressible": true,
			"extensions": ["tar"]
		},
		"application/x-tcl": {
			"source": "apache",
			"extensions": ["tcl", "tk"]
		},
		"application/x-tex": {
			"source": "apache",
			"extensions": ["tex"]
		},
		"application/x-tex-tfm": {
			"source": "apache",
			"extensions": ["tfm"]
		},
		"application/x-texinfo": {
			"source": "apache",
			"extensions": ["texinfo", "texi"]
		},
		"application/x-tgif": {
			"source": "apache",
			"extensions": ["obj"]
		},
		"application/x-ustar": {
			"source": "apache",
			"extensions": ["ustar"]
		},
		"application/x-virtualbox-hdd": {
			"compressible": true,
			"extensions": ["hdd"]
		},
		"application/x-virtualbox-ova": {
			"compressible": true,
			"extensions": ["ova"]
		},
		"application/x-virtualbox-ovf": {
			"compressible": true,
			"extensions": ["ovf"]
		},
		"application/x-virtualbox-vbox": {
			"compressible": true,
			"extensions": ["vbox"]
		},
		"application/x-virtualbox-vbox-extpack": {
			"compressible": false,
			"extensions": ["vbox-extpack"]
		},
		"application/x-virtualbox-vdi": {
			"compressible": true,
			"extensions": ["vdi"]
		},
		"application/x-virtualbox-vhd": {
			"compressible": true,
			"extensions": ["vhd"]
		},
		"application/x-virtualbox-vmdk": {
			"compressible": true,
			"extensions": ["vmdk"]
		},
		"application/x-wais-source": {
			"source": "apache",
			"extensions": ["src"]
		},
		"application/x-web-app-manifest+json": {
			"compressible": true,
			"extensions": ["webapp"]
		},
		"application/x-www-form-urlencoded": {
			"source": "iana",
			"compressible": true
		},
		"application/x-x509-ca-cert": {
			"source": "iana",
			"extensions": [
				"der",
				"crt",
				"pem"
			]
		},
		"application/x-x509-ca-ra-cert": { "source": "iana" },
		"application/x-x509-next-ca-cert": { "source": "iana" },
		"application/x-xfig": {
			"source": "apache",
			"extensions": ["fig"]
		},
		"application/x-xliff+xml": {
			"source": "apache",
			"compressible": true,
			"extensions": ["xlf"]
		},
		"application/x-xpinstall": {
			"source": "apache",
			"compressible": false,
			"extensions": ["xpi"]
		},
		"application/x-xz": {
			"source": "apache",
			"extensions": ["xz"]
		},
		"application/x-zmachine": {
			"source": "apache",
			"extensions": [
				"z1",
				"z2",
				"z3",
				"z4",
				"z5",
				"z6",
				"z7",
				"z8"
			]
		},
		"application/x400-bp": { "source": "iana" },
		"application/xacml+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/xaml+xml": {
			"source": "apache",
			"compressible": true,
			"extensions": ["xaml"]
		},
		"application/xcap-att+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["xav"]
		},
		"application/xcap-caps+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["xca"]
		},
		"application/xcap-diff+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["xdf"]
		},
		"application/xcap-el+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["xel"]
		},
		"application/xcap-error+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/xcap-ns+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["xns"]
		},
		"application/xcon-conference-info+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/xcon-conference-info-diff+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/xenc+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["xenc"]
		},
		"application/xhtml+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["xhtml", "xht"]
		},
		"application/xhtml-voice+xml": {
			"source": "apache",
			"compressible": true
		},
		"application/xliff+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["xlf"]
		},
		"application/xml": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"xml",
				"xsl",
				"xsd",
				"rng"
			]
		},
		"application/xml-dtd": {
			"source": "iana",
			"compressible": true,
			"extensions": ["dtd"]
		},
		"application/xml-external-parsed-entity": { "source": "iana" },
		"application/xml-patch+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/xmpp+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/xop+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["xop"]
		},
		"application/xproc+xml": {
			"source": "apache",
			"compressible": true,
			"extensions": ["xpl"]
		},
		"application/xslt+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["xsl", "xslt"]
		},
		"application/xspf+xml": {
			"source": "apache",
			"compressible": true,
			"extensions": ["xspf"]
		},
		"application/xv+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"mxml",
				"xhvml",
				"xvml",
				"xvm"
			]
		},
		"application/yang": {
			"source": "iana",
			"extensions": ["yang"]
		},
		"application/yang-data+json": {
			"source": "iana",
			"compressible": true
		},
		"application/yang-data+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/yang-patch+json": {
			"source": "iana",
			"compressible": true
		},
		"application/yang-patch+xml": {
			"source": "iana",
			"compressible": true
		},
		"application/yin+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["yin"]
		},
		"application/zip": {
			"source": "iana",
			"compressible": false,
			"extensions": ["zip"]
		},
		"application/zlib": { "source": "iana" },
		"application/zstd": { "source": "iana" },
		"audio/1d-interleaved-parityfec": { "source": "iana" },
		"audio/32kadpcm": { "source": "iana" },
		"audio/3gpp": {
			"source": "iana",
			"compressible": false,
			"extensions": ["3gpp"]
		},
		"audio/3gpp2": { "source": "iana" },
		"audio/aac": { "source": "iana" },
		"audio/ac3": { "source": "iana" },
		"audio/adpcm": {
			"source": "apache",
			"extensions": ["adp"]
		},
		"audio/amr": {
			"source": "iana",
			"extensions": ["amr"]
		},
		"audio/amr-wb": { "source": "iana" },
		"audio/amr-wb+": { "source": "iana" },
		"audio/aptx": { "source": "iana" },
		"audio/asc": { "source": "iana" },
		"audio/atrac-advanced-lossless": { "source": "iana" },
		"audio/atrac-x": { "source": "iana" },
		"audio/atrac3": { "source": "iana" },
		"audio/basic": {
			"source": "iana",
			"compressible": false,
			"extensions": ["au", "snd"]
		},
		"audio/bv16": { "source": "iana" },
		"audio/bv32": { "source": "iana" },
		"audio/clearmode": { "source": "iana" },
		"audio/cn": { "source": "iana" },
		"audio/dat12": { "source": "iana" },
		"audio/dls": { "source": "iana" },
		"audio/dsr-es201108": { "source": "iana" },
		"audio/dsr-es202050": { "source": "iana" },
		"audio/dsr-es202211": { "source": "iana" },
		"audio/dsr-es202212": { "source": "iana" },
		"audio/dv": { "source": "iana" },
		"audio/dvi4": { "source": "iana" },
		"audio/eac3": { "source": "iana" },
		"audio/encaprtp": { "source": "iana" },
		"audio/evrc": { "source": "iana" },
		"audio/evrc-qcp": { "source": "iana" },
		"audio/evrc0": { "source": "iana" },
		"audio/evrc1": { "source": "iana" },
		"audio/evrcb": { "source": "iana" },
		"audio/evrcb0": { "source": "iana" },
		"audio/evrcb1": { "source": "iana" },
		"audio/evrcnw": { "source": "iana" },
		"audio/evrcnw0": { "source": "iana" },
		"audio/evrcnw1": { "source": "iana" },
		"audio/evrcwb": { "source": "iana" },
		"audio/evrcwb0": { "source": "iana" },
		"audio/evrcwb1": { "source": "iana" },
		"audio/evs": { "source": "iana" },
		"audio/flexfec": { "source": "iana" },
		"audio/fwdred": { "source": "iana" },
		"audio/g711-0": { "source": "iana" },
		"audio/g719": { "source": "iana" },
		"audio/g722": { "source": "iana" },
		"audio/g7221": { "source": "iana" },
		"audio/g723": { "source": "iana" },
		"audio/g726-16": { "source": "iana" },
		"audio/g726-24": { "source": "iana" },
		"audio/g726-32": { "source": "iana" },
		"audio/g726-40": { "source": "iana" },
		"audio/g728": { "source": "iana" },
		"audio/g729": { "source": "iana" },
		"audio/g7291": { "source": "iana" },
		"audio/g729d": { "source": "iana" },
		"audio/g729e": { "source": "iana" },
		"audio/gsm": { "source": "iana" },
		"audio/gsm-efr": { "source": "iana" },
		"audio/gsm-hr-08": { "source": "iana" },
		"audio/ilbc": { "source": "iana" },
		"audio/ip-mr_v2.5": { "source": "iana" },
		"audio/isac": { "source": "apache" },
		"audio/l16": { "source": "iana" },
		"audio/l20": { "source": "iana" },
		"audio/l24": {
			"source": "iana",
			"compressible": false
		},
		"audio/l8": { "source": "iana" },
		"audio/lpc": { "source": "iana" },
		"audio/melp": { "source": "iana" },
		"audio/melp1200": { "source": "iana" },
		"audio/melp2400": { "source": "iana" },
		"audio/melp600": { "source": "iana" },
		"audio/mhas": { "source": "iana" },
		"audio/midi": {
			"source": "apache",
			"extensions": [
				"mid",
				"midi",
				"kar",
				"rmi"
			]
		},
		"audio/mobile-xmf": {
			"source": "iana",
			"extensions": ["mxmf"]
		},
		"audio/mp3": {
			"compressible": false,
			"extensions": ["mp3"]
		},
		"audio/mp4": {
			"source": "iana",
			"compressible": false,
			"extensions": ["m4a", "mp4a"]
		},
		"audio/mp4a-latm": { "source": "iana" },
		"audio/mpa": { "source": "iana" },
		"audio/mpa-robust": { "source": "iana" },
		"audio/mpeg": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"mpga",
				"mp2",
				"mp2a",
				"mp3",
				"m2a",
				"m3a"
			]
		},
		"audio/mpeg4-generic": { "source": "iana" },
		"audio/musepack": { "source": "apache" },
		"audio/ogg": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"oga",
				"ogg",
				"spx",
				"opus"
			]
		},
		"audio/opus": { "source": "iana" },
		"audio/parityfec": { "source": "iana" },
		"audio/pcma": { "source": "iana" },
		"audio/pcma-wb": { "source": "iana" },
		"audio/pcmu": { "source": "iana" },
		"audio/pcmu-wb": { "source": "iana" },
		"audio/prs.sid": { "source": "iana" },
		"audio/qcelp": { "source": "iana" },
		"audio/raptorfec": { "source": "iana" },
		"audio/red": { "source": "iana" },
		"audio/rtp-enc-aescm128": { "source": "iana" },
		"audio/rtp-midi": { "source": "iana" },
		"audio/rtploopback": { "source": "iana" },
		"audio/rtx": { "source": "iana" },
		"audio/s3m": {
			"source": "apache",
			"extensions": ["s3m"]
		},
		"audio/scip": { "source": "iana" },
		"audio/silk": {
			"source": "apache",
			"extensions": ["sil"]
		},
		"audio/smv": { "source": "iana" },
		"audio/smv-qcp": { "source": "iana" },
		"audio/smv0": { "source": "iana" },
		"audio/sofa": { "source": "iana" },
		"audio/sp-midi": { "source": "iana" },
		"audio/speex": { "source": "iana" },
		"audio/t140c": { "source": "iana" },
		"audio/t38": { "source": "iana" },
		"audio/telephone-event": { "source": "iana" },
		"audio/tetra_acelp": { "source": "iana" },
		"audio/tetra_acelp_bb": { "source": "iana" },
		"audio/tone": { "source": "iana" },
		"audio/tsvcis": { "source": "iana" },
		"audio/uemclip": { "source": "iana" },
		"audio/ulpfec": { "source": "iana" },
		"audio/usac": { "source": "iana" },
		"audio/vdvi": { "source": "iana" },
		"audio/vmr-wb": { "source": "iana" },
		"audio/vnd.3gpp.iufp": { "source": "iana" },
		"audio/vnd.4sb": { "source": "iana" },
		"audio/vnd.audiokoz": { "source": "iana" },
		"audio/vnd.celp": { "source": "iana" },
		"audio/vnd.cisco.nse": { "source": "iana" },
		"audio/vnd.cmles.radio-events": { "source": "iana" },
		"audio/vnd.cns.anp1": { "source": "iana" },
		"audio/vnd.cns.inf1": { "source": "iana" },
		"audio/vnd.dece.audio": {
			"source": "iana",
			"extensions": ["uva", "uvva"]
		},
		"audio/vnd.digital-winds": {
			"source": "iana",
			"extensions": ["eol"]
		},
		"audio/vnd.dlna.adts": { "source": "iana" },
		"audio/vnd.dolby.heaac.1": { "source": "iana" },
		"audio/vnd.dolby.heaac.2": { "source": "iana" },
		"audio/vnd.dolby.mlp": { "source": "iana" },
		"audio/vnd.dolby.mps": { "source": "iana" },
		"audio/vnd.dolby.pl2": { "source": "iana" },
		"audio/vnd.dolby.pl2x": { "source": "iana" },
		"audio/vnd.dolby.pl2z": { "source": "iana" },
		"audio/vnd.dolby.pulse.1": { "source": "iana" },
		"audio/vnd.dra": {
			"source": "iana",
			"extensions": ["dra"]
		},
		"audio/vnd.dts": {
			"source": "iana",
			"extensions": ["dts"]
		},
		"audio/vnd.dts.hd": {
			"source": "iana",
			"extensions": ["dtshd"]
		},
		"audio/vnd.dts.uhd": { "source": "iana" },
		"audio/vnd.dvb.file": { "source": "iana" },
		"audio/vnd.everad.plj": { "source": "iana" },
		"audio/vnd.hns.audio": { "source": "iana" },
		"audio/vnd.lucent.voice": {
			"source": "iana",
			"extensions": ["lvp"]
		},
		"audio/vnd.ms-playready.media.pya": {
			"source": "iana",
			"extensions": ["pya"]
		},
		"audio/vnd.nokia.mobile-xmf": { "source": "iana" },
		"audio/vnd.nortel.vbk": { "source": "iana" },
		"audio/vnd.nuera.ecelp4800": {
			"source": "iana",
			"extensions": ["ecelp4800"]
		},
		"audio/vnd.nuera.ecelp7470": {
			"source": "iana",
			"extensions": ["ecelp7470"]
		},
		"audio/vnd.nuera.ecelp9600": {
			"source": "iana",
			"extensions": ["ecelp9600"]
		},
		"audio/vnd.octel.sbc": { "source": "iana" },
		"audio/vnd.presonus.multitrack": { "source": "iana" },
		"audio/vnd.qcelp": { "source": "iana" },
		"audio/vnd.rhetorex.32kadpcm": { "source": "iana" },
		"audio/vnd.rip": {
			"source": "iana",
			"extensions": ["rip"]
		},
		"audio/vnd.rn-realaudio": { "compressible": false },
		"audio/vnd.sealedmedia.softseal.mpeg": { "source": "iana" },
		"audio/vnd.vmx.cvsd": { "source": "iana" },
		"audio/vnd.wave": { "compressible": false },
		"audio/vorbis": {
			"source": "iana",
			"compressible": false
		},
		"audio/vorbis-config": { "source": "iana" },
		"audio/wav": {
			"compressible": false,
			"extensions": ["wav"]
		},
		"audio/wave": {
			"compressible": false,
			"extensions": ["wav"]
		},
		"audio/webm": {
			"source": "apache",
			"compressible": false,
			"extensions": ["weba"]
		},
		"audio/x-aac": {
			"source": "apache",
			"compressible": false,
			"extensions": ["aac"]
		},
		"audio/x-aiff": {
			"source": "apache",
			"extensions": [
				"aif",
				"aiff",
				"aifc"
			]
		},
		"audio/x-caf": {
			"source": "apache",
			"compressible": false,
			"extensions": ["caf"]
		},
		"audio/x-flac": {
			"source": "apache",
			"extensions": ["flac"]
		},
		"audio/x-m4a": {
			"source": "nginx",
			"extensions": ["m4a"]
		},
		"audio/x-matroska": {
			"source": "apache",
			"extensions": ["mka"]
		},
		"audio/x-mpegurl": {
			"source": "apache",
			"extensions": ["m3u"]
		},
		"audio/x-ms-wax": {
			"source": "apache",
			"extensions": ["wax"]
		},
		"audio/x-ms-wma": {
			"source": "apache",
			"extensions": ["wma"]
		},
		"audio/x-pn-realaudio": {
			"source": "apache",
			"extensions": ["ram", "ra"]
		},
		"audio/x-pn-realaudio-plugin": {
			"source": "apache",
			"extensions": ["rmp"]
		},
		"audio/x-realaudio": {
			"source": "nginx",
			"extensions": ["ra"]
		},
		"audio/x-tta": { "source": "apache" },
		"audio/x-wav": {
			"source": "apache",
			"extensions": ["wav"]
		},
		"audio/xm": {
			"source": "apache",
			"extensions": ["xm"]
		},
		"chemical/x-cdx": {
			"source": "apache",
			"extensions": ["cdx"]
		},
		"chemical/x-cif": {
			"source": "apache",
			"extensions": ["cif"]
		},
		"chemical/x-cmdf": {
			"source": "apache",
			"extensions": ["cmdf"]
		},
		"chemical/x-cml": {
			"source": "apache",
			"extensions": ["cml"]
		},
		"chemical/x-csml": {
			"source": "apache",
			"extensions": ["csml"]
		},
		"chemical/x-pdb": { "source": "apache" },
		"chemical/x-xyz": {
			"source": "apache",
			"extensions": ["xyz"]
		},
		"font/collection": {
			"source": "iana",
			"extensions": ["ttc"]
		},
		"font/otf": {
			"source": "iana",
			"compressible": true,
			"extensions": ["otf"]
		},
		"font/sfnt": { "source": "iana" },
		"font/ttf": {
			"source": "iana",
			"compressible": true,
			"extensions": ["ttf"]
		},
		"font/woff": {
			"source": "iana",
			"extensions": ["woff"]
		},
		"font/woff2": {
			"source": "iana",
			"extensions": ["woff2"]
		},
		"image/aces": {
			"source": "iana",
			"extensions": ["exr"]
		},
		"image/apng": {
			"compressible": false,
			"extensions": ["apng"]
		},
		"image/avci": {
			"source": "iana",
			"extensions": ["avci"]
		},
		"image/avcs": {
			"source": "iana",
			"extensions": ["avcs"]
		},
		"image/avif": {
			"source": "iana",
			"compressible": false,
			"extensions": ["avif"]
		},
		"image/bmp": {
			"source": "iana",
			"compressible": true,
			"extensions": ["bmp"]
		},
		"image/cgm": {
			"source": "iana",
			"extensions": ["cgm"]
		},
		"image/dicom-rle": {
			"source": "iana",
			"extensions": ["drle"]
		},
		"image/emf": {
			"source": "iana",
			"extensions": ["emf"]
		},
		"image/fits": {
			"source": "iana",
			"extensions": ["fits"]
		},
		"image/g3fax": {
			"source": "iana",
			"extensions": ["g3"]
		},
		"image/gif": {
			"source": "iana",
			"compressible": false,
			"extensions": ["gif"]
		},
		"image/heic": {
			"source": "iana",
			"extensions": ["heic"]
		},
		"image/heic-sequence": {
			"source": "iana",
			"extensions": ["heics"]
		},
		"image/heif": {
			"source": "iana",
			"extensions": ["heif"]
		},
		"image/heif-sequence": {
			"source": "iana",
			"extensions": ["heifs"]
		},
		"image/hej2k": {
			"source": "iana",
			"extensions": ["hej2"]
		},
		"image/hsj2": {
			"source": "iana",
			"extensions": ["hsj2"]
		},
		"image/ief": {
			"source": "iana",
			"extensions": ["ief"]
		},
		"image/jls": {
			"source": "iana",
			"extensions": ["jls"]
		},
		"image/jp2": {
			"source": "iana",
			"compressible": false,
			"extensions": ["jp2", "jpg2"]
		},
		"image/jpeg": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"jpeg",
				"jpg",
				"jpe"
			]
		},
		"image/jph": {
			"source": "iana",
			"extensions": ["jph"]
		},
		"image/jphc": {
			"source": "iana",
			"extensions": ["jhc"]
		},
		"image/jpm": {
			"source": "iana",
			"compressible": false,
			"extensions": ["jpm"]
		},
		"image/jpx": {
			"source": "iana",
			"compressible": false,
			"extensions": ["jpx", "jpf"]
		},
		"image/jxr": {
			"source": "iana",
			"extensions": ["jxr"]
		},
		"image/jxra": {
			"source": "iana",
			"extensions": ["jxra"]
		},
		"image/jxrs": {
			"source": "iana",
			"extensions": ["jxrs"]
		},
		"image/jxs": {
			"source": "iana",
			"extensions": ["jxs"]
		},
		"image/jxsc": {
			"source": "iana",
			"extensions": ["jxsc"]
		},
		"image/jxsi": {
			"source": "iana",
			"extensions": ["jxsi"]
		},
		"image/jxss": {
			"source": "iana",
			"extensions": ["jxss"]
		},
		"image/ktx": {
			"source": "iana",
			"extensions": ["ktx"]
		},
		"image/ktx2": {
			"source": "iana",
			"extensions": ["ktx2"]
		},
		"image/naplps": { "source": "iana" },
		"image/pjpeg": { "compressible": false },
		"image/png": {
			"source": "iana",
			"compressible": false,
			"extensions": ["png"]
		},
		"image/prs.btif": {
			"source": "iana",
			"extensions": ["btif"]
		},
		"image/prs.pti": {
			"source": "iana",
			"extensions": ["pti"]
		},
		"image/pwg-raster": { "source": "iana" },
		"image/sgi": {
			"source": "apache",
			"extensions": ["sgi"]
		},
		"image/svg+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["svg", "svgz"]
		},
		"image/t38": {
			"source": "iana",
			"extensions": ["t38"]
		},
		"image/tiff": {
			"source": "iana",
			"compressible": false,
			"extensions": ["tif", "tiff"]
		},
		"image/tiff-fx": {
			"source": "iana",
			"extensions": ["tfx"]
		},
		"image/vnd.adobe.photoshop": {
			"source": "iana",
			"compressible": true,
			"extensions": ["psd"]
		},
		"image/vnd.airzip.accelerator.azv": {
			"source": "iana",
			"extensions": ["azv"]
		},
		"image/vnd.cns.inf2": { "source": "iana" },
		"image/vnd.dece.graphic": {
			"source": "iana",
			"extensions": [
				"uvi",
				"uvvi",
				"uvg",
				"uvvg"
			]
		},
		"image/vnd.djvu": {
			"source": "iana",
			"extensions": ["djvu", "djv"]
		},
		"image/vnd.dvb.subtitle": {
			"source": "iana",
			"extensions": ["sub"]
		},
		"image/vnd.dwg": {
			"source": "iana",
			"extensions": ["dwg"]
		},
		"image/vnd.dxf": {
			"source": "iana",
			"extensions": ["dxf"]
		},
		"image/vnd.fastbidsheet": {
			"source": "iana",
			"extensions": ["fbs"]
		},
		"image/vnd.fpx": {
			"source": "iana",
			"extensions": ["fpx"]
		},
		"image/vnd.fst": {
			"source": "iana",
			"extensions": ["fst"]
		},
		"image/vnd.fujixerox.edmics-mmr": {
			"source": "iana",
			"extensions": ["mmr"]
		},
		"image/vnd.fujixerox.edmics-rlc": {
			"source": "iana",
			"extensions": ["rlc"]
		},
		"image/vnd.globalgraphics.pgb": { "source": "iana" },
		"image/vnd.microsoft.icon": {
			"source": "iana",
			"compressible": true,
			"extensions": ["ico"]
		},
		"image/vnd.mix": { "source": "iana" },
		"image/vnd.mozilla.apng": { "source": "iana" },
		"image/vnd.ms-dds": {
			"compressible": true,
			"extensions": ["dds"]
		},
		"image/vnd.ms-modi": {
			"source": "iana",
			"extensions": ["mdi"]
		},
		"image/vnd.ms-photo": {
			"source": "apache",
			"extensions": ["wdp"]
		},
		"image/vnd.net-fpx": {
			"source": "iana",
			"extensions": ["npx"]
		},
		"image/vnd.pco.b16": {
			"source": "iana",
			"extensions": ["b16"]
		},
		"image/vnd.radiance": { "source": "iana" },
		"image/vnd.sealed.png": { "source": "iana" },
		"image/vnd.sealedmedia.softseal.gif": { "source": "iana" },
		"image/vnd.sealedmedia.softseal.jpg": { "source": "iana" },
		"image/vnd.svf": { "source": "iana" },
		"image/vnd.tencent.tap": {
			"source": "iana",
			"extensions": ["tap"]
		},
		"image/vnd.valve.source.texture": {
			"source": "iana",
			"extensions": ["vtf"]
		},
		"image/vnd.wap.wbmp": {
			"source": "iana",
			"extensions": ["wbmp"]
		},
		"image/vnd.xiff": {
			"source": "iana",
			"extensions": ["xif"]
		},
		"image/vnd.zbrush.pcx": {
			"source": "iana",
			"extensions": ["pcx"]
		},
		"image/webp": {
			"source": "apache",
			"extensions": ["webp"]
		},
		"image/wmf": {
			"source": "iana",
			"extensions": ["wmf"]
		},
		"image/x-3ds": {
			"source": "apache",
			"extensions": ["3ds"]
		},
		"image/x-cmu-raster": {
			"source": "apache",
			"extensions": ["ras"]
		},
		"image/x-cmx": {
			"source": "apache",
			"extensions": ["cmx"]
		},
		"image/x-freehand": {
			"source": "apache",
			"extensions": [
				"fh",
				"fhc",
				"fh4",
				"fh5",
				"fh7"
			]
		},
		"image/x-icon": {
			"source": "apache",
			"compressible": true,
			"extensions": ["ico"]
		},
		"image/x-jng": {
			"source": "nginx",
			"extensions": ["jng"]
		},
		"image/x-mrsid-image": {
			"source": "apache",
			"extensions": ["sid"]
		},
		"image/x-ms-bmp": {
			"source": "nginx",
			"compressible": true,
			"extensions": ["bmp"]
		},
		"image/x-pcx": {
			"source": "apache",
			"extensions": ["pcx"]
		},
		"image/x-pict": {
			"source": "apache",
			"extensions": ["pic", "pct"]
		},
		"image/x-portable-anymap": {
			"source": "apache",
			"extensions": ["pnm"]
		},
		"image/x-portable-bitmap": {
			"source": "apache",
			"extensions": ["pbm"]
		},
		"image/x-portable-graymap": {
			"source": "apache",
			"extensions": ["pgm"]
		},
		"image/x-portable-pixmap": {
			"source": "apache",
			"extensions": ["ppm"]
		},
		"image/x-rgb": {
			"source": "apache",
			"extensions": ["rgb"]
		},
		"image/x-tga": {
			"source": "apache",
			"extensions": ["tga"]
		},
		"image/x-xbitmap": {
			"source": "apache",
			"extensions": ["xbm"]
		},
		"image/x-xcf": { "compressible": false },
		"image/x-xpixmap": {
			"source": "apache",
			"extensions": ["xpm"]
		},
		"image/x-xwindowdump": {
			"source": "apache",
			"extensions": ["xwd"]
		},
		"message/cpim": { "source": "iana" },
		"message/delivery-status": { "source": "iana" },
		"message/disposition-notification": {
			"source": "iana",
			"extensions": ["disposition-notification"]
		},
		"message/external-body": { "source": "iana" },
		"message/feedback-report": { "source": "iana" },
		"message/global": {
			"source": "iana",
			"extensions": ["u8msg"]
		},
		"message/global-delivery-status": {
			"source": "iana",
			"extensions": ["u8dsn"]
		},
		"message/global-disposition-notification": {
			"source": "iana",
			"extensions": ["u8mdn"]
		},
		"message/global-headers": {
			"source": "iana",
			"extensions": ["u8hdr"]
		},
		"message/http": {
			"source": "iana",
			"compressible": false
		},
		"message/imdn+xml": {
			"source": "iana",
			"compressible": true
		},
		"message/news": { "source": "iana" },
		"message/partial": {
			"source": "iana",
			"compressible": false
		},
		"message/rfc822": {
			"source": "iana",
			"compressible": true,
			"extensions": ["eml", "mime"]
		},
		"message/s-http": { "source": "iana" },
		"message/sip": { "source": "iana" },
		"message/sipfrag": { "source": "iana" },
		"message/tracking-status": { "source": "iana" },
		"message/vnd.si.simp": { "source": "iana" },
		"message/vnd.wfa.wsc": {
			"source": "iana",
			"extensions": ["wsc"]
		},
		"model/3mf": {
			"source": "iana",
			"extensions": ["3mf"]
		},
		"model/e57": { "source": "iana" },
		"model/gltf+json": {
			"source": "iana",
			"compressible": true,
			"extensions": ["gltf"]
		},
		"model/gltf-binary": {
			"source": "iana",
			"compressible": true,
			"extensions": ["glb"]
		},
		"model/iges": {
			"source": "iana",
			"compressible": false,
			"extensions": ["igs", "iges"]
		},
		"model/mesh": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"msh",
				"mesh",
				"silo"
			]
		},
		"model/mtl": {
			"source": "iana",
			"extensions": ["mtl"]
		},
		"model/obj": {
			"source": "iana",
			"extensions": ["obj"]
		},
		"model/step": { "source": "iana" },
		"model/step+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["stpx"]
		},
		"model/step+zip": {
			"source": "iana",
			"compressible": false,
			"extensions": ["stpz"]
		},
		"model/step-xml+zip": {
			"source": "iana",
			"compressible": false,
			"extensions": ["stpxz"]
		},
		"model/stl": {
			"source": "iana",
			"extensions": ["stl"]
		},
		"model/vnd.collada+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["dae"]
		},
		"model/vnd.dwf": {
			"source": "iana",
			"extensions": ["dwf"]
		},
		"model/vnd.flatland.3dml": { "source": "iana" },
		"model/vnd.gdl": {
			"source": "iana",
			"extensions": ["gdl"]
		},
		"model/vnd.gs-gdl": { "source": "apache" },
		"model/vnd.gs.gdl": { "source": "iana" },
		"model/vnd.gtw": {
			"source": "iana",
			"extensions": ["gtw"]
		},
		"model/vnd.moml+xml": {
			"source": "iana",
			"compressible": true
		},
		"model/vnd.mts": {
			"source": "iana",
			"extensions": ["mts"]
		},
		"model/vnd.opengex": {
			"source": "iana",
			"extensions": ["ogex"]
		},
		"model/vnd.parasolid.transmit.binary": {
			"source": "iana",
			"extensions": ["x_b"]
		},
		"model/vnd.parasolid.transmit.text": {
			"source": "iana",
			"extensions": ["x_t"]
		},
		"model/vnd.pytha.pyox": { "source": "iana" },
		"model/vnd.rosette.annotated-data-model": { "source": "iana" },
		"model/vnd.sap.vds": {
			"source": "iana",
			"extensions": ["vds"]
		},
		"model/vnd.usdz+zip": {
			"source": "iana",
			"compressible": false,
			"extensions": ["usdz"]
		},
		"model/vnd.valve.source.compiled-map": {
			"source": "iana",
			"extensions": ["bsp"]
		},
		"model/vnd.vtu": {
			"source": "iana",
			"extensions": ["vtu"]
		},
		"model/vrml": {
			"source": "iana",
			"compressible": false,
			"extensions": ["wrl", "vrml"]
		},
		"model/x3d+binary": {
			"source": "apache",
			"compressible": false,
			"extensions": ["x3db", "x3dbz"]
		},
		"model/x3d+fastinfoset": {
			"source": "iana",
			"extensions": ["x3db"]
		},
		"model/x3d+vrml": {
			"source": "apache",
			"compressible": false,
			"extensions": ["x3dv", "x3dvz"]
		},
		"model/x3d+xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["x3d", "x3dz"]
		},
		"model/x3d-vrml": {
			"source": "iana",
			"extensions": ["x3dv"]
		},
		"multipart/alternative": {
			"source": "iana",
			"compressible": false
		},
		"multipart/appledouble": { "source": "iana" },
		"multipart/byteranges": { "source": "iana" },
		"multipart/digest": { "source": "iana" },
		"multipart/encrypted": {
			"source": "iana",
			"compressible": false
		},
		"multipart/form-data": {
			"source": "iana",
			"compressible": false
		},
		"multipart/header-set": { "source": "iana" },
		"multipart/mixed": { "source": "iana" },
		"multipart/multilingual": { "source": "iana" },
		"multipart/parallel": { "source": "iana" },
		"multipart/related": {
			"source": "iana",
			"compressible": false
		},
		"multipart/report": { "source": "iana" },
		"multipart/signed": {
			"source": "iana",
			"compressible": false
		},
		"multipart/vnd.bint.med-plus": { "source": "iana" },
		"multipart/voice-message": { "source": "iana" },
		"multipart/x-mixed-replace": { "source": "iana" },
		"text/1d-interleaved-parityfec": { "source": "iana" },
		"text/cache-manifest": {
			"source": "iana",
			"compressible": true,
			"extensions": ["appcache", "manifest"]
		},
		"text/calendar": {
			"source": "iana",
			"extensions": ["ics", "ifb"]
		},
		"text/calender": { "compressible": true },
		"text/cmd": { "compressible": true },
		"text/coffeescript": { "extensions": ["coffee", "litcoffee"] },
		"text/cql": { "source": "iana" },
		"text/cql-expression": { "source": "iana" },
		"text/cql-identifier": { "source": "iana" },
		"text/css": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true,
			"extensions": ["css"]
		},
		"text/csv": {
			"source": "iana",
			"compressible": true,
			"extensions": ["csv"]
		},
		"text/csv-schema": { "source": "iana" },
		"text/directory": { "source": "iana" },
		"text/dns": { "source": "iana" },
		"text/ecmascript": { "source": "iana" },
		"text/encaprtp": { "source": "iana" },
		"text/enriched": { "source": "iana" },
		"text/fhirpath": { "source": "iana" },
		"text/flexfec": { "source": "iana" },
		"text/fwdred": { "source": "iana" },
		"text/gff3": { "source": "iana" },
		"text/grammar-ref-list": { "source": "iana" },
		"text/html": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"html",
				"htm",
				"shtml"
			]
		},
		"text/jade": { "extensions": ["jade"] },
		"text/javascript": {
			"source": "iana",
			"compressible": true
		},
		"text/jcr-cnd": { "source": "iana" },
		"text/jsx": {
			"compressible": true,
			"extensions": ["jsx"]
		},
		"text/less": {
			"compressible": true,
			"extensions": ["less"]
		},
		"text/markdown": {
			"source": "iana",
			"compressible": true,
			"extensions": ["markdown", "md"]
		},
		"text/mathml": {
			"source": "nginx",
			"extensions": ["mml"]
		},
		"text/mdx": {
			"compressible": true,
			"extensions": ["mdx"]
		},
		"text/mizar": { "source": "iana" },
		"text/n3": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true,
			"extensions": ["n3"]
		},
		"text/parameters": {
			"source": "iana",
			"charset": "UTF-8"
		},
		"text/parityfec": { "source": "iana" },
		"text/plain": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"txt",
				"text",
				"conf",
				"def",
				"list",
				"log",
				"in",
				"ini"
			]
		},
		"text/provenance-notation": {
			"source": "iana",
			"charset": "UTF-8"
		},
		"text/prs.fallenstein.rst": { "source": "iana" },
		"text/prs.lines.tag": {
			"source": "iana",
			"extensions": ["dsc"]
		},
		"text/prs.prop.logic": { "source": "iana" },
		"text/raptorfec": { "source": "iana" },
		"text/red": { "source": "iana" },
		"text/rfc822-headers": { "source": "iana" },
		"text/richtext": {
			"source": "iana",
			"compressible": true,
			"extensions": ["rtx"]
		},
		"text/rtf": {
			"source": "iana",
			"compressible": true,
			"extensions": ["rtf"]
		},
		"text/rtp-enc-aescm128": { "source": "iana" },
		"text/rtploopback": { "source": "iana" },
		"text/rtx": { "source": "iana" },
		"text/sgml": {
			"source": "iana",
			"extensions": ["sgml", "sgm"]
		},
		"text/shaclc": { "source": "iana" },
		"text/shex": {
			"source": "iana",
			"extensions": ["shex"]
		},
		"text/slim": { "extensions": ["slim", "slm"] },
		"text/spdx": {
			"source": "iana",
			"extensions": ["spdx"]
		},
		"text/strings": { "source": "iana" },
		"text/stylus": { "extensions": ["stylus", "styl"] },
		"text/t140": { "source": "iana" },
		"text/tab-separated-values": {
			"source": "iana",
			"compressible": true,
			"extensions": ["tsv"]
		},
		"text/troff": {
			"source": "iana",
			"extensions": [
				"t",
				"tr",
				"roff",
				"man",
				"me",
				"ms"
			]
		},
		"text/turtle": {
			"source": "iana",
			"charset": "UTF-8",
			"extensions": ["ttl"]
		},
		"text/ulpfec": { "source": "iana" },
		"text/uri-list": {
			"source": "iana",
			"compressible": true,
			"extensions": [
				"uri",
				"uris",
				"urls"
			]
		},
		"text/vcard": {
			"source": "iana",
			"compressible": true,
			"extensions": ["vcard"]
		},
		"text/vnd.a": { "source": "iana" },
		"text/vnd.abc": { "source": "iana" },
		"text/vnd.ascii-art": { "source": "iana" },
		"text/vnd.curl": {
			"source": "iana",
			"extensions": ["curl"]
		},
		"text/vnd.curl.dcurl": {
			"source": "apache",
			"extensions": ["dcurl"]
		},
		"text/vnd.curl.mcurl": {
			"source": "apache",
			"extensions": ["mcurl"]
		},
		"text/vnd.curl.scurl": {
			"source": "apache",
			"extensions": ["scurl"]
		},
		"text/vnd.debian.copyright": {
			"source": "iana",
			"charset": "UTF-8"
		},
		"text/vnd.dmclientscript": { "source": "iana" },
		"text/vnd.dvb.subtitle": {
			"source": "iana",
			"extensions": ["sub"]
		},
		"text/vnd.esmertec.theme-descriptor": {
			"source": "iana",
			"charset": "UTF-8"
		},
		"text/vnd.familysearch.gedcom": {
			"source": "iana",
			"extensions": ["ged"]
		},
		"text/vnd.ficlab.flt": { "source": "iana" },
		"text/vnd.fly": {
			"source": "iana",
			"extensions": ["fly"]
		},
		"text/vnd.fmi.flexstor": {
			"source": "iana",
			"extensions": ["flx"]
		},
		"text/vnd.gml": { "source": "iana" },
		"text/vnd.graphviz": {
			"source": "iana",
			"extensions": ["gv"]
		},
		"text/vnd.hans": { "source": "iana" },
		"text/vnd.hgl": { "source": "iana" },
		"text/vnd.in3d.3dml": {
			"source": "iana",
			"extensions": ["3dml"]
		},
		"text/vnd.in3d.spot": {
			"source": "iana",
			"extensions": ["spot"]
		},
		"text/vnd.iptc.newsml": { "source": "iana" },
		"text/vnd.iptc.nitf": { "source": "iana" },
		"text/vnd.latex-z": { "source": "iana" },
		"text/vnd.motorola.reflex": { "source": "iana" },
		"text/vnd.ms-mediapackage": { "source": "iana" },
		"text/vnd.net2phone.commcenter.command": { "source": "iana" },
		"text/vnd.radisys.msml-basic-layout": { "source": "iana" },
		"text/vnd.senx.warpscript": { "source": "iana" },
		"text/vnd.si.uricatalogue": { "source": "iana" },
		"text/vnd.sosi": { "source": "iana" },
		"text/vnd.sun.j2me.app-descriptor": {
			"source": "iana",
			"charset": "UTF-8",
			"extensions": ["jad"]
		},
		"text/vnd.trolltech.linguist": {
			"source": "iana",
			"charset": "UTF-8"
		},
		"text/vnd.wap.si": { "source": "iana" },
		"text/vnd.wap.sl": { "source": "iana" },
		"text/vnd.wap.wml": {
			"source": "iana",
			"extensions": ["wml"]
		},
		"text/vnd.wap.wmlscript": {
			"source": "iana",
			"extensions": ["wmls"]
		},
		"text/vtt": {
			"source": "iana",
			"charset": "UTF-8",
			"compressible": true,
			"extensions": ["vtt"]
		},
		"text/x-asm": {
			"source": "apache",
			"extensions": ["s", "asm"]
		},
		"text/x-c": {
			"source": "apache",
			"extensions": [
				"c",
				"cc",
				"cxx",
				"cpp",
				"h",
				"hh",
				"dic"
			]
		},
		"text/x-component": {
			"source": "nginx",
			"extensions": ["htc"]
		},
		"text/x-fortran": {
			"source": "apache",
			"extensions": [
				"f",
				"for",
				"f77",
				"f90"
			]
		},
		"text/x-gwt-rpc": { "compressible": true },
		"text/x-handlebars-template": { "extensions": ["hbs"] },
		"text/x-java-source": {
			"source": "apache",
			"extensions": ["java"]
		},
		"text/x-jquery-tmpl": { "compressible": true },
		"text/x-lua": { "extensions": ["lua"] },
		"text/x-markdown": {
			"compressible": true,
			"extensions": ["mkd"]
		},
		"text/x-nfo": {
			"source": "apache",
			"extensions": ["nfo"]
		},
		"text/x-opml": {
			"source": "apache",
			"extensions": ["opml"]
		},
		"text/x-org": {
			"compressible": true,
			"extensions": ["org"]
		},
		"text/x-pascal": {
			"source": "apache",
			"extensions": ["p", "pas"]
		},
		"text/x-processing": {
			"compressible": true,
			"extensions": ["pde"]
		},
		"text/x-sass": { "extensions": ["sass"] },
		"text/x-scss": { "extensions": ["scss"] },
		"text/x-setext": {
			"source": "apache",
			"extensions": ["etx"]
		},
		"text/x-sfv": {
			"source": "apache",
			"extensions": ["sfv"]
		},
		"text/x-suse-ymp": {
			"compressible": true,
			"extensions": ["ymp"]
		},
		"text/x-uuencode": {
			"source": "apache",
			"extensions": ["uu"]
		},
		"text/x-vcalendar": {
			"source": "apache",
			"extensions": ["vcs"]
		},
		"text/x-vcard": {
			"source": "apache",
			"extensions": ["vcf"]
		},
		"text/xml": {
			"source": "iana",
			"compressible": true,
			"extensions": ["xml"]
		},
		"text/xml-external-parsed-entity": { "source": "iana" },
		"text/yaml": {
			"compressible": true,
			"extensions": ["yaml", "yml"]
		},
		"video/1d-interleaved-parityfec": { "source": "iana" },
		"video/3gpp": {
			"source": "iana",
			"extensions": ["3gp", "3gpp"]
		},
		"video/3gpp-tt": { "source": "iana" },
		"video/3gpp2": {
			"source": "iana",
			"extensions": ["3g2"]
		},
		"video/av1": { "source": "iana" },
		"video/bmpeg": { "source": "iana" },
		"video/bt656": { "source": "iana" },
		"video/celb": { "source": "iana" },
		"video/dv": { "source": "iana" },
		"video/encaprtp": { "source": "iana" },
		"video/ffv1": { "source": "iana" },
		"video/flexfec": { "source": "iana" },
		"video/h261": {
			"source": "iana",
			"extensions": ["h261"]
		},
		"video/h263": {
			"source": "iana",
			"extensions": ["h263"]
		},
		"video/h263-1998": { "source": "iana" },
		"video/h263-2000": { "source": "iana" },
		"video/h264": {
			"source": "iana",
			"extensions": ["h264"]
		},
		"video/h264-rcdo": { "source": "iana" },
		"video/h264-svc": { "source": "iana" },
		"video/h265": { "source": "iana" },
		"video/iso.segment": {
			"source": "iana",
			"extensions": ["m4s"]
		},
		"video/jpeg": {
			"source": "iana",
			"extensions": ["jpgv"]
		},
		"video/jpeg2000": { "source": "iana" },
		"video/jpm": {
			"source": "apache",
			"extensions": ["jpm", "jpgm"]
		},
		"video/jxsv": { "source": "iana" },
		"video/mj2": {
			"source": "iana",
			"extensions": ["mj2", "mjp2"]
		},
		"video/mp1s": { "source": "iana" },
		"video/mp2p": { "source": "iana" },
		"video/mp2t": {
			"source": "iana",
			"extensions": ["ts"]
		},
		"video/mp4": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"mp4",
				"mp4v",
				"mpg4"
			]
		},
		"video/mp4v-es": { "source": "iana" },
		"video/mpeg": {
			"source": "iana",
			"compressible": false,
			"extensions": [
				"mpeg",
				"mpg",
				"mpe",
				"m1v",
				"m2v"
			]
		},
		"video/mpeg4-generic": { "source": "iana" },
		"video/mpv": { "source": "iana" },
		"video/nv": { "source": "iana" },
		"video/ogg": {
			"source": "iana",
			"compressible": false,
			"extensions": ["ogv"]
		},
		"video/parityfec": { "source": "iana" },
		"video/pointer": { "source": "iana" },
		"video/quicktime": {
			"source": "iana",
			"compressible": false,
			"extensions": ["qt", "mov"]
		},
		"video/raptorfec": { "source": "iana" },
		"video/raw": { "source": "iana" },
		"video/rtp-enc-aescm128": { "source": "iana" },
		"video/rtploopback": { "source": "iana" },
		"video/rtx": { "source": "iana" },
		"video/scip": { "source": "iana" },
		"video/smpte291": { "source": "iana" },
		"video/smpte292m": { "source": "iana" },
		"video/ulpfec": { "source": "iana" },
		"video/vc1": { "source": "iana" },
		"video/vc2": { "source": "iana" },
		"video/vnd.cctv": { "source": "iana" },
		"video/vnd.dece.hd": {
			"source": "iana",
			"extensions": ["uvh", "uvvh"]
		},
		"video/vnd.dece.mobile": {
			"source": "iana",
			"extensions": ["uvm", "uvvm"]
		},
		"video/vnd.dece.mp4": { "source": "iana" },
		"video/vnd.dece.pd": {
			"source": "iana",
			"extensions": ["uvp", "uvvp"]
		},
		"video/vnd.dece.sd": {
			"source": "iana",
			"extensions": ["uvs", "uvvs"]
		},
		"video/vnd.dece.video": {
			"source": "iana",
			"extensions": ["uvv", "uvvv"]
		},
		"video/vnd.directv.mpeg": { "source": "iana" },
		"video/vnd.directv.mpeg-tts": { "source": "iana" },
		"video/vnd.dlna.mpeg-tts": { "source": "iana" },
		"video/vnd.dvb.file": {
			"source": "iana",
			"extensions": ["dvb"]
		},
		"video/vnd.fvt": {
			"source": "iana",
			"extensions": ["fvt"]
		},
		"video/vnd.hns.video": { "source": "iana" },
		"video/vnd.iptvforum.1dparityfec-1010": { "source": "iana" },
		"video/vnd.iptvforum.1dparityfec-2005": { "source": "iana" },
		"video/vnd.iptvforum.2dparityfec-1010": { "source": "iana" },
		"video/vnd.iptvforum.2dparityfec-2005": { "source": "iana" },
		"video/vnd.iptvforum.ttsavc": { "source": "iana" },
		"video/vnd.iptvforum.ttsmpeg2": { "source": "iana" },
		"video/vnd.motorola.video": { "source": "iana" },
		"video/vnd.motorola.videop": { "source": "iana" },
		"video/vnd.mpegurl": {
			"source": "iana",
			"extensions": ["mxu", "m4u"]
		},
		"video/vnd.ms-playready.media.pyv": {
			"source": "iana",
			"extensions": ["pyv"]
		},
		"video/vnd.nokia.interleaved-multimedia": { "source": "iana" },
		"video/vnd.nokia.mp4vr": { "source": "iana" },
		"video/vnd.nokia.videovoip": { "source": "iana" },
		"video/vnd.objectvideo": { "source": "iana" },
		"video/vnd.radgamettools.bink": { "source": "iana" },
		"video/vnd.radgamettools.smacker": { "source": "iana" },
		"video/vnd.sealed.mpeg1": { "source": "iana" },
		"video/vnd.sealed.mpeg4": { "source": "iana" },
		"video/vnd.sealed.swf": { "source": "iana" },
		"video/vnd.sealedmedia.softseal.mov": { "source": "iana" },
		"video/vnd.uvvu.mp4": {
			"source": "iana",
			"extensions": ["uvu", "uvvu"]
		},
		"video/vnd.vivo": {
			"source": "iana",
			"extensions": ["viv"]
		},
		"video/vnd.youtube.yt": { "source": "iana" },
		"video/vp8": { "source": "iana" },
		"video/vp9": { "source": "iana" },
		"video/webm": {
			"source": "apache",
			"compressible": false,
			"extensions": ["webm"]
		},
		"video/x-f4v": {
			"source": "apache",
			"extensions": ["f4v"]
		},
		"video/x-fli": {
			"source": "apache",
			"extensions": ["fli"]
		},
		"video/x-flv": {
			"source": "apache",
			"compressible": false,
			"extensions": ["flv"]
		},
		"video/x-m4v": {
			"source": "apache",
			"extensions": ["m4v"]
		},
		"video/x-matroska": {
			"source": "apache",
			"compressible": false,
			"extensions": [
				"mkv",
				"mk3d",
				"mks"
			]
		},
		"video/x-mng": {
			"source": "apache",
			"extensions": ["mng"]
		},
		"video/x-ms-asf": {
			"source": "apache",
			"extensions": ["asf", "asx"]
		},
		"video/x-ms-vob": {
			"source": "apache",
			"extensions": ["vob"]
		},
		"video/x-ms-wm": {
			"source": "apache",
			"extensions": ["wm"]
		},
		"video/x-ms-wmv": {
			"source": "apache",
			"compressible": false,
			"extensions": ["wmv"]
		},
		"video/x-ms-wmx": {
			"source": "apache",
			"extensions": ["wmx"]
		},
		"video/x-ms-wvx": {
			"source": "apache",
			"extensions": ["wvx"]
		},
		"video/x-msvideo": {
			"source": "apache",
			"extensions": ["avi"]
		},
		"video/x-sgi-movie": {
			"source": "apache",
			"extensions": ["movie"]
		},
		"video/x-smv": {
			"source": "apache",
			"extensions": ["smv"]
		},
		"x-conference/x-cooltalk": {
			"source": "apache",
			"extensions": ["ice"]
		},
		"x-shader/x-fragment": { "compressible": true },
		"x-shader/x-vertex": { "compressible": true }
	};
} });

//#endregion
//#region node_modules/.pnpm/mime-db@1.52.0/node_modules/mime-db/index.js
var require_mime_db = __commonJS({ "node_modules/.pnpm/mime-db@1.52.0/node_modules/mime-db/index.js"(exports, module) {
	/*!
	* mime-db
	* Copyright(c) 2014 Jonathan Ong
	* Copyright(c) 2015-2022 Douglas Christopher Wilson
	* MIT Licensed
	*/
	/**
	* Module exports.
	*/
	module.exports = require_db();
} });

//#endregion
//#region node_modules/.pnpm/mime-types@2.1.35/node_modules/mime-types/index.js
var require_mime_types = __commonJS({ "node_modules/.pnpm/mime-types@2.1.35/node_modules/mime-types/index.js"(exports) {
	/**
	* Module dependencies.
	* @private
	*/
	var db = require_mime_db();
	var extname = __require("path").extname;
	/**
	* Module variables.
	* @private
	*/
	var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
	var TEXT_TYPE_REGEXP = /^text\//i;
	/**
	* Module exports.
	* @public
	*/
	exports.charset = charset;
	exports.charsets = { lookup: charset };
	exports.contentType = contentType;
	exports.extension = extension;
	exports.extensions = Object.create(null);
	exports.lookup = lookup;
	exports.types = Object.create(null);
	populateMaps(exports.extensions, exports.types);
	/**
	* Get the default charset for a MIME type.
	*
	* @param {string} type
	* @return {boolean|string}
	*/
	function charset(type) {
		if (!type || typeof type !== "string") return false;
		var match = EXTRACT_TYPE_REGEXP.exec(type);
		var mime$1 = match && db[match[1].toLowerCase()];
		if (mime$1 && mime$1.charset) return mime$1.charset;
		if (match && TEXT_TYPE_REGEXP.test(match[1])) return "UTF-8";
		return false;
	}
	/**
	* Create a full Content-Type header given a MIME type or extension.
	*
	* @param {string} str
	* @return {boolean|string}
	*/
	function contentType(str) {
		if (!str || typeof str !== "string") return false;
		var mime$1 = str.indexOf("/") === -1 ? exports.lookup(str) : str;
		if (!mime$1) return false;
		if (mime$1.indexOf("charset") === -1) {
			var charset$1 = exports.charset(mime$1);
			if (charset$1) mime$1 += "; charset=" + charset$1.toLowerCase();
		}
		return mime$1;
	}
	/**
	* Get the default extension for a MIME type.
	*
	* @param {string} type
	* @return {boolean|string}
	*/
	function extension(type) {
		if (!type || typeof type !== "string") return false;
		var match = EXTRACT_TYPE_REGEXP.exec(type);
		var exts = match && exports.extensions[match[1].toLowerCase()];
		if (!exts || !exts.length) return false;
		return exts[0];
	}
	/**
	* Lookup the MIME type for a file path/extension.
	*
	* @param {string} path
	* @return {boolean|string}
	*/
	function lookup(path$10) {
		if (!path$10 || typeof path$10 !== "string") return false;
		var extension$1 = extname("x." + path$10).toLowerCase().substr(1);
		if (!extension$1) return false;
		return exports.types[extension$1] || false;
	}
	/**
	* Populate the extensions and types maps.
	* @private
	*/
	function populateMaps(extensions, types$6) {
		var preference = [
			"nginx",
			"apache",
			void 0,
			"iana"
		];
		Object.keys(db).forEach(function forEachMimeType(type) {
			var mime$1 = db[type];
			var exts = mime$1.extensions;
			if (!exts || !exts.length) return;
			extensions[type] = exts;
			for (var i = 0; i < exts.length; i++) {
				var extension$1 = exts[i];
				if (types$6[extension$1]) {
					var from$2 = preference.indexOf(db[types$6[extension$1]].source);
					var to = preference.indexOf(mime$1.source);
					if (types$6[extension$1] !== "application/octet-stream" && (from$2 > to || from$2 === to && types$6[extension$1].substr(0, 12) === "application/")) continue;
				}
				types$6[extension$1] = type;
			}
		});
	}
} });

//#endregion
//#region node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/defer.js
var require_defer = __commonJS({ "node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/defer.js"(exports, module) {
	module.exports = defer$1;
	/**
	* Runs provided function on next iteration of the event loop
	*
	* @param {function} fn - function to run
	*/
	function defer$1(fn) {
		var nextTick = typeof setImmediate == "function" ? setImmediate : typeof process == "object" && typeof process.nextTick == "function" ? process.nextTick : null;
		if (nextTick) nextTick(fn);
		else setTimeout(fn, 0);
	}
} });

//#endregion
//#region node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/async.js
var require_async = __commonJS({ "node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/async.js"(exports, module) {
	var defer = require_defer();
	module.exports = async$2;
	/**
	* Runs provided callback asynchronously
	* even if callback itself is not
	*
	* @param   {function} callback - callback to invoke
	* @returns {function} - augmented callback
	*/
	function async$2(callback) {
		var isAsync$1 = false;
		defer(function() {
			isAsync$1 = true;
		});
		return function async_callback(err, result) {
			if (isAsync$1) callback(err, result);
			else defer(function nextTick_callback() {
				callback(err, result);
			});
		};
	}
} });

//#endregion
//#region node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/abort.js
var require_abort = __commonJS({ "node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/abort.js"(exports, module) {
	module.exports = abort$2;
	/**
	* Aborts leftover active jobs
	*
	* @param {object} state - current state object
	*/
	function abort$2(state$1) {
		Object.keys(state$1.jobs).forEach(clean$2.bind(state$1));
		state$1.jobs = {};
	}
	/**
	* Cleans up leftover job by invoking abort function for the provided job id
	*
	* @this  state
	* @param {string|number} key - job id to abort
	*/
	function clean$2(key$1) {
		if (typeof this.jobs[key$1] == "function") this.jobs[key$1]();
	}
} });

//#endregion
//#region node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/iterate.js
var require_iterate = __commonJS({ "node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/iterate.js"(exports, module) {
	var async$1 = require_async(), abort$1 = require_abort();
	module.exports = iterate$2;
	/**
	* Iterates over each job object
	*
	* @param {array|object} list - array or object (named list) to iterate over
	* @param {function} iterator - iterator to run
	* @param {object} state - current job status
	* @param {function} callback - invoked when all elements processed
	*/
	function iterate$2(list, iterator$1, state$1, callback) {
		var key$1 = state$1["keyedList"] ? state$1["keyedList"][state$1.index] : state$1.index;
		state$1.jobs[key$1] = runJob(iterator$1, key$1, list[key$1], function(error$1, output) {
			if (!(key$1 in state$1.jobs)) return;
			delete state$1.jobs[key$1];
			if (error$1) abort$1(state$1);
			else state$1.results[key$1] = output;
			callback(error$1, state$1.results);
		});
	}
	/**
	* Runs iterator over provided job element
	*
	* @param   {function} iterator - iterator to invoke
	* @param   {string|number} key - key/index of the element in the list of jobs
	* @param   {mixed} item - job description
	* @param   {function} callback - invoked after iterator is done with the job
	* @returns {function|mixed} - job abort function or something else
	*/
	function runJob(iterator$1, key$1, item, callback) {
		var aborter;
		if (iterator$1.length == 2) aborter = iterator$1(item, async$1(callback));
		else aborter = iterator$1(item, key$1, async$1(callback));
		return aborter;
	}
} });

//#endregion
//#region node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/state.js
var require_state = __commonJS({ "node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/state.js"(exports, module) {
	module.exports = state;
	/**
	* Creates initial state object
	* for iteration over list
	*
	* @param   {array|object} list - list to iterate over
	* @param   {function|null} sortMethod - function to use for keys sort,
	*                                     or `null` to keep them as is
	* @returns {object} - initial state object
	*/
	function state(list, sortMethod) {
		var isNamedList = !Array.isArray(list), initState$2 = {
			index: 0,
			keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
			jobs: {},
			results: isNamedList ? {} : [],
			size: isNamedList ? Object.keys(list).length : list.length
		};
		if (sortMethod) initState$2.keyedList.sort(isNamedList ? sortMethod : function(a, b) {
			return sortMethod(list[a], list[b]);
		});
		return initState$2;
	}
} });

//#endregion
//#region node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/terminator.js
var require_terminator = __commonJS({ "node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/lib/terminator.js"(exports, module) {
	var abort = require_abort(), async = require_async();
	module.exports = terminator$2;
	/**
	* Terminates jobs in the attached state context
	*
	* @this  AsyncKitState#
	* @param {function} callback - final callback to invoke after termination
	*/
	function terminator$2(callback) {
		if (!Object.keys(this.jobs).length) return;
		this.index = this.size;
		abort(this);
		async(callback)(null, this.results);
	}
} });

//#endregion
//#region node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/parallel.js
var require_parallel = __commonJS({ "node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/parallel.js"(exports, module) {
	var iterate$1 = require_iterate(), initState$1 = require_state(), terminator$1 = require_terminator();
	module.exports = parallel;
	/**
	* Runs iterator over provided array elements in parallel
	*
	* @param   {array|object} list - array or object (named list) to iterate over
	* @param   {function} iterator - iterator to run
	* @param   {function} callback - invoked when all elements processed
	* @returns {function} - jobs terminator
	*/
	function parallel(list, iterator$1, callback) {
		var state$1 = initState$1(list);
		while (state$1.index < (state$1["keyedList"] || list).length) {
			iterate$1(list, iterator$1, state$1, function(error$1, result) {
				if (error$1) {
					callback(error$1, result);
					return;
				}
				if (Object.keys(state$1.jobs).length === 0) {
					callback(null, state$1.results);
					return;
				}
			});
			state$1.index++;
		}
		return terminator$1.bind(state$1, callback);
	}
} });

//#endregion
//#region node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/serialOrdered.js
var require_serialOrdered = __commonJS({ "node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/serialOrdered.js"(exports, module) {
	var iterate = require_iterate(), initState = require_state(), terminator = require_terminator();
	module.exports = serialOrdered$1;
	module.exports.ascending = ascending;
	module.exports.descending = descending;
	/**
	* Runs iterator over provided sorted array elements in series
	*
	* @param   {array|object} list - array or object (named list) to iterate over
	* @param   {function} iterator - iterator to run
	* @param   {function} sortMethod - custom sort function
	* @param   {function} callback - invoked when all elements processed
	* @returns {function} - jobs terminator
	*/
	function serialOrdered$1(list, iterator$1, sortMethod, callback) {
		var state$1 = initState(list, sortMethod);
		iterate(list, iterator$1, state$1, function iteratorHandler(error$1, result) {
			if (error$1) {
				callback(error$1, result);
				return;
			}
			state$1.index++;
			if (state$1.index < (state$1["keyedList"] || list).length) {
				iterate(list, iterator$1, state$1, iteratorHandler);
				return;
			}
			callback(null, state$1.results);
		});
		return terminator.bind(state$1, callback);
	}
	/**
	* sort helper to sort array elements in ascending order
	*
	* @param   {mixed} a - an item to compare
	* @param   {mixed} b - an item to compare
	* @returns {number} - comparison result
	*/
	function ascending(a, b) {
		return a < b ? -1 : a > b ? 1 : 0;
	}
	/**
	* sort helper to sort array elements in descending order
	*
	* @param   {mixed} a - an item to compare
	* @param   {mixed} b - an item to compare
	* @returns {number} - comparison result
	*/
	function descending(a, b) {
		return -1 * ascending(a, b);
	}
} });

//#endregion
//#region node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/serial.js
var require_serial = __commonJS({ "node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/serial.js"(exports, module) {
	var serialOrdered = require_serialOrdered();
	module.exports = serial;
	/**
	* Runs iterator over provided array elements in series
	*
	* @param   {array|object} list - array or object (named list) to iterate over
	* @param   {function} iterator - iterator to run
	* @param   {function} callback - invoked when all elements processed
	* @returns {function} - jobs terminator
	*/
	function serial(list, iterator$1, callback) {
		return serialOrdered(list, iterator$1, null, callback);
	}
} });

//#endregion
//#region node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/index.js
var require_asynckit = __commonJS({ "node_modules/.pnpm/asynckit@0.4.0/node_modules/asynckit/index.js"(exports, module) {
	module.exports = {
		parallel: require_parallel(),
		serial: require_serial(),
		serialOrdered: require_serialOrdered()
	};
} });

//#endregion
//#region node_modules/.pnpm/es-object-atoms@1.1.1/node_modules/es-object-atoms/index.js
var require_es_object_atoms = __commonJS({ "node_modules/.pnpm/es-object-atoms@1.1.1/node_modules/es-object-atoms/index.js"(exports, module) {
	/** @type {import('.')} */
	module.exports = Object;
} });

//#endregion
//#region node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/index.js
var require_es_errors = __commonJS({ "node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/index.js"(exports, module) {
	/** @type {import('.')} */
	module.exports = Error;
} });

//#endregion
//#region node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/eval.js
var require_eval = __commonJS({ "node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/eval.js"(exports, module) {
	/** @type {import('./eval')} */
	module.exports = EvalError;
} });

//#endregion
//#region node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/range.js
var require_range$1 = __commonJS({ "node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/range.js"(exports, module) {
	/** @type {import('./range')} */
	module.exports = RangeError;
} });

//#endregion
//#region node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/ref.js
var require_ref = __commonJS({ "node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/ref.js"(exports, module) {
	/** @type {import('./ref')} */
	module.exports = ReferenceError;
} });

//#endregion
//#region node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/syntax.js
var require_syntax = __commonJS({ "node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/syntax.js"(exports, module) {
	/** @type {import('./syntax')} */
	module.exports = SyntaxError;
} });

//#endregion
//#region node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/type.js
var require_type = __commonJS({ "node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/type.js"(exports, module) {
	/** @type {import('./type')} */
	module.exports = TypeError;
} });

//#endregion
//#region node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/uri.js
var require_uri = __commonJS({ "node_modules/.pnpm/es-errors@1.3.0/node_modules/es-errors/uri.js"(exports, module) {
	/** @type {import('./uri')} */
	module.exports = URIError;
} });

//#endregion
//#region node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/abs.js
var require_abs = __commonJS({ "node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/abs.js"(exports, module) {
	/** @type {import('./abs')} */
	module.exports = Math.abs;
} });

//#endregion
//#region node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/floor.js
var require_floor = __commonJS({ "node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/floor.js"(exports, module) {
	/** @type {import('./floor')} */
	module.exports = Math.floor;
} });

//#endregion
//#region node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/max.js
var require_max = __commonJS({ "node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/max.js"(exports, module) {
	/** @type {import('./max')} */
	module.exports = Math.max;
} });

//#endregion
//#region node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/min.js
var require_min = __commonJS({ "node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/min.js"(exports, module) {
	/** @type {import('./min')} */
	module.exports = Math.min;
} });

//#endregion
//#region node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/pow.js
var require_pow = __commonJS({ "node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/pow.js"(exports, module) {
	/** @type {import('./pow')} */
	module.exports = Math.pow;
} });

//#endregion
//#region node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/round.js
var require_round = __commonJS({ "node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/round.js"(exports, module) {
	/** @type {import('./round')} */
	module.exports = Math.round;
} });

//#endregion
//#region node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/isNaN.js
var require_isNaN = __commonJS({ "node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/isNaN.js"(exports, module) {
	/** @type {import('./isNaN')} */
	module.exports = Number.isNaN || function isNaN$1(a) {
		return a !== a;
	};
} });

//#endregion
//#region node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/sign.js
var require_sign$1 = __commonJS({ "node_modules/.pnpm/math-intrinsics@1.1.0/node_modules/math-intrinsics/sign.js"(exports, module) {
	var $isNaN = require_isNaN();
	/** @type {import('./sign')} */
	module.exports = function sign$1(number) {
		if ($isNaN(number) || number === 0) return number;
		return number < 0 ? -1 : 1;
	};
} });

//#endregion
//#region node_modules/.pnpm/gopd@1.2.0/node_modules/gopd/gOPD.js
var require_gOPD = __commonJS({ "node_modules/.pnpm/gopd@1.2.0/node_modules/gopd/gOPD.js"(exports, module) {
	/** @type {import('./gOPD')} */
	module.exports = Object.getOwnPropertyDescriptor;
} });

//#endregion
//#region node_modules/.pnpm/gopd@1.2.0/node_modules/gopd/index.js
var require_gopd = __commonJS({ "node_modules/.pnpm/gopd@1.2.0/node_modules/gopd/index.js"(exports, module) {
	/** @type {import('.')} */
	var $gOPD$1 = require_gOPD();
	if ($gOPD$1) try {
		$gOPD$1([], "length");
	} catch (e) {
		$gOPD$1 = null;
	}
	module.exports = $gOPD$1;
} });

//#endregion
//#region node_modules/.pnpm/es-define-property@1.0.1/node_modules/es-define-property/index.js
var require_es_define_property = __commonJS({ "node_modules/.pnpm/es-define-property@1.0.1/node_modules/es-define-property/index.js"(exports, module) {
	/** @type {import('.')} */
	var $defineProperty$2 = Object.defineProperty || false;
	if ($defineProperty$2) try {
		$defineProperty$2({}, "a", { value: 1 });
	} catch (e) {
		$defineProperty$2 = false;
	}
	module.exports = $defineProperty$2;
} });

//#endregion
//#region node_modules/.pnpm/has-symbols@1.1.0/node_modules/has-symbols/shams.js
var require_shams$1 = __commonJS({ "node_modules/.pnpm/has-symbols@1.1.0/node_modules/has-symbols/shams.js"(exports, module) {
	/** @type {import('./shams')} */
	module.exports = function hasSymbols$2() {
		if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") return false;
		if (typeof Symbol.iterator === "symbol") return true;
		/** @type {{ [k in symbol]?: unknown }} */
		var obj = {};
		var sym = Symbol("test");
		var symObj = Object(sym);
		if (typeof sym === "string") return false;
		if (Object.prototype.toString.call(sym) !== "[object Symbol]") return false;
		if (Object.prototype.toString.call(symObj) !== "[object Symbol]") return false;
		var symVal = 42;
		obj[sym] = symVal;
		for (var _ in obj) return false;
		if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) return false;
		if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) return false;
		var syms = Object.getOwnPropertySymbols(obj);
		if (syms.length !== 1 || syms[0] !== sym) return false;
		if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) return false;
		if (typeof Object.getOwnPropertyDescriptor === "function") {
			var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
			if (descriptor.value !== symVal || descriptor.enumerable !== true) return false;
		}
		return true;
	};
} });

//#endregion
//#region node_modules/.pnpm/has-symbols@1.1.0/node_modules/has-symbols/index.js
var require_has_symbols = __commonJS({ "node_modules/.pnpm/has-symbols@1.1.0/node_modules/has-symbols/index.js"(exports, module) {
	var origSymbol = typeof Symbol !== "undefined" && Symbol;
	var hasSymbolSham = require_shams$1();
	/** @type {import('.')} */
	module.exports = function hasNativeSymbols() {
		if (typeof origSymbol !== "function") return false;
		if (typeof Symbol !== "function") return false;
		if (typeof origSymbol("foo") !== "symbol") return false;
		if (typeof Symbol("bar") !== "symbol") return false;
		return hasSymbolSham();
	};
} });

//#endregion
//#region node_modules/.pnpm/get-proto@1.0.1/node_modules/get-proto/Reflect.getPrototypeOf.js
var require_Reflect_getPrototypeOf = __commonJS({ "node_modules/.pnpm/get-proto@1.0.1/node_modules/get-proto/Reflect.getPrototypeOf.js"(exports, module) {
	/** @type {import('./Reflect.getPrototypeOf')} */
	module.exports = typeof Reflect !== "undefined" && Reflect.getPrototypeOf || null;
} });

//#endregion
//#region node_modules/.pnpm/get-proto@1.0.1/node_modules/get-proto/Object.getPrototypeOf.js
var require_Object_getPrototypeOf = __commonJS({ "node_modules/.pnpm/get-proto@1.0.1/node_modules/get-proto/Object.getPrototypeOf.js"(exports, module) {
	var $Object$2 = require_es_object_atoms();
	/** @type {import('./Object.getPrototypeOf')} */
	module.exports = $Object$2.getPrototypeOf || null;
} });

//#endregion
//#region node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/implementation.js
var require_implementation = __commonJS({ "node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/implementation.js"(exports, module) {
	var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
	var toStr = Object.prototype.toString;
	var max$1 = Math.max;
	var funcType = "[object Function]";
	var concatty = function concatty$1(a, b) {
		var arr = [];
		for (var i = 0; i < a.length; i += 1) arr[i] = a[i];
		for (var j = 0; j < b.length; j += 1) arr[j + a.length] = b[j];
		return arr;
	};
	var slicy = function slicy$1(arrLike, offset) {
		var arr = [];
		for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) arr[j] = arrLike[i];
		return arr;
	};
	var joiny = function(arr, joiner) {
		var str = "";
		for (var i = 0; i < arr.length; i += 1) {
			str += arr[i];
			if (i + 1 < arr.length) str += joiner;
		}
		return str;
	};
	module.exports = function bind$5(that) {
		var target = this;
		if (typeof target !== "function" || toStr.apply(target) !== funcType) throw new TypeError(ERROR_MESSAGE + target);
		var args = slicy(arguments, 1);
		var bound;
		var binder = function() {
			if (this instanceof bound) {
				var result = target.apply(this, concatty(args, arguments));
				if (Object(result) === result) return result;
				return this;
			}
			return target.apply(that, concatty(args, arguments));
		};
		var boundLength = max$1(0, target.length - args.length);
		var boundArgs = [];
		for (var i = 0; i < boundLength; i++) boundArgs[i] = "$" + i;
		bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
		if (target.prototype) {
			var Empty = function Empty$1() {};
			Empty.prototype = target.prototype;
			bound.prototype = new Empty();
			Empty.prototype = null;
		}
		return bound;
	};
} });

//#endregion
//#region node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/index.js
var require_function_bind = __commonJS({ "node_modules/.pnpm/function-bind@1.1.2/node_modules/function-bind/index.js"(exports, module) {
	var implementation = require_implementation();
	module.exports = Function.prototype.bind || implementation;
} });

//#endregion
//#region node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/functionCall.js
var require_functionCall = __commonJS({ "node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/functionCall.js"(exports, module) {
	/** @type {import('./functionCall')} */
	module.exports = Function.prototype.call;
} });

//#endregion
//#region node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/functionApply.js
var require_functionApply = __commonJS({ "node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/functionApply.js"(exports, module) {
	/** @type {import('./functionApply')} */
	module.exports = Function.prototype.apply;
} });

//#endregion
//#region node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/reflectApply.js
var require_reflectApply = __commonJS({ "node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/reflectApply.js"(exports, module) {
	/** @type {import('./reflectApply')} */
	module.exports = typeof Reflect !== "undefined" && Reflect && Reflect.apply;
} });

//#endregion
//#region node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/actualApply.js
var require_actualApply = __commonJS({ "node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/actualApply.js"(exports, module) {
	var bind$4 = require_function_bind();
	var $apply$1 = require_functionApply();
	var $call$2 = require_functionCall();
	var $reflectApply = require_reflectApply();
	/** @type {import('./actualApply')} */
	module.exports = $reflectApply || bind$4.call($call$2, $apply$1);
} });

//#endregion
//#region node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/index.js
var require_call_bind_apply_helpers = __commonJS({ "node_modules/.pnpm/call-bind-apply-helpers@1.0.2/node_modules/call-bind-apply-helpers/index.js"(exports, module) {
	var bind$3 = require_function_bind();
	var $TypeError$2 = require_type();
	var $call$1 = require_functionCall();
	var $actualApply = require_actualApply();
	/** @type {(args: [Function, thisArg?: unknown, ...args: unknown[]]) => Function} TODO FIXME, find a way to use import('.') */
	module.exports = function callBindBasic(args) {
		if (args.length < 1 || typeof args[0] !== "function") throw new $TypeError$2("a function is required");
		return $actualApply(bind$3, $call$1, args);
	};
} });

//#endregion
//#region node_modules/.pnpm/dunder-proto@1.0.1/node_modules/dunder-proto/get.js
var require_get = __commonJS({ "node_modules/.pnpm/dunder-proto@1.0.1/node_modules/dunder-proto/get.js"(exports, module) {
	var callBind = require_call_bind_apply_helpers();
	var gOPD = require_gopd();
	var hasProtoAccessor;
	try {
		hasProtoAccessor = [].__proto__ === Array.prototype;
	} catch (e) {
		if (!e || typeof e !== "object" || !("code" in e) || e.code !== "ERR_PROTO_ACCESS") throw e;
	}
	var desc = !!hasProtoAccessor && gOPD && gOPD(Object.prototype, "__proto__");
	var $Object$1 = Object;
	var $getPrototypeOf = $Object$1.getPrototypeOf;
	/** @type {import('./get')} */
	module.exports = desc && typeof desc.get === "function" ? callBind([desc.get]) : typeof $getPrototypeOf === "function" ? function getDunder(value) {
		return $getPrototypeOf(value == null ? value : $Object$1(value));
	} : false;
} });

//#endregion
//#region node_modules/.pnpm/get-proto@1.0.1/node_modules/get-proto/index.js
var require_get_proto = __commonJS({ "node_modules/.pnpm/get-proto@1.0.1/node_modules/get-proto/index.js"(exports, module) {
	var reflectGetProto = require_Reflect_getPrototypeOf();
	var originalGetProto = require_Object_getPrototypeOf();
	var getDunderProto = require_get();
	/** @type {import('.')} */
	module.exports = reflectGetProto ? function getProto$1(O) {
		return reflectGetProto(O);
	} : originalGetProto ? function getProto$1(O) {
		if (!O || typeof O !== "object" && typeof O !== "function") throw new TypeError("getProto: not an object");
		return originalGetProto(O);
	} : getDunderProto ? function getProto$1(O) {
		return getDunderProto(O);
	} : null;
} });

//#endregion
//#region node_modules/.pnpm/hasown@2.0.2/node_modules/hasown/index.js
var require_hasown = __commonJS({ "node_modules/.pnpm/hasown@2.0.2/node_modules/hasown/index.js"(exports, module) {
	var call = Function.prototype.call;
	var $hasOwn = Object.prototype.hasOwnProperty;
	var bind$2 = require_function_bind();
	/** @type {import('.')} */
	module.exports = bind$2.call(call, $hasOwn);
} });

//#endregion
//#region node_modules/.pnpm/get-intrinsic@1.3.0/node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS({ "node_modules/.pnpm/get-intrinsic@1.3.0/node_modules/get-intrinsic/index.js"(exports, module) {
	var undefined$1;
	var $Object = require_es_object_atoms();
	var $Error = require_es_errors();
	var $EvalError = require_eval();
	var $RangeError = require_range$1();
	var $ReferenceError = require_ref();
	var $SyntaxError = require_syntax();
	var $TypeError$1 = require_type();
	var $URIError = require_uri();
	var abs = require_abs();
	var floor = require_floor();
	var max = require_max();
	var min = require_min();
	var pow = require_pow();
	var round = require_round();
	var sign = require_sign$1();
	var $Function = Function;
	var getEvalledConstructor = function(expressionSyntax) {
		try {
			return $Function("\"use strict\"; return (" + expressionSyntax + ").constructor;")();
		} catch (e) {}
	};
	var $gOPD = require_gopd();
	var $defineProperty$1 = require_es_define_property();
	var throwTypeError = function() {
		throw new $TypeError$1();
	};
	var ThrowTypeError = $gOPD ? function() {
		try {
			arguments.callee;
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				return $gOPD(arguments, "callee").get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}() : throwTypeError;
	var hasSymbols$1 = require_has_symbols()();
	var getProto = require_get_proto();
	var $ObjectGPO = require_Object_getPrototypeOf();
	var $ReflectGPO = require_Reflect_getPrototypeOf();
	var $apply = require_functionApply();
	var $call = require_functionCall();
	var needsEval = {};
	var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined$1 : getProto(Uint8Array);
	var INTRINSICS = {
		__proto__: null,
		"%AggregateError%": typeof AggregateError === "undefined" ? undefined$1 : AggregateError,
		"%Array%": Array,
		"%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined$1 : ArrayBuffer,
		"%ArrayIteratorPrototype%": hasSymbols$1 && getProto ? getProto([][Symbol.iterator]()) : undefined$1,
		"%AsyncFromSyncIteratorPrototype%": undefined$1,
		"%AsyncFunction%": needsEval,
		"%AsyncGenerator%": needsEval,
		"%AsyncGeneratorFunction%": needsEval,
		"%AsyncIteratorPrototype%": needsEval,
		"%Atomics%": typeof Atomics === "undefined" ? undefined$1 : Atomics,
		"%BigInt%": typeof BigInt === "undefined" ? undefined$1 : BigInt,
		"%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined$1 : BigInt64Array,
		"%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined$1 : BigUint64Array,
		"%Boolean%": Boolean,
		"%DataView%": typeof DataView === "undefined" ? undefined$1 : DataView,
		"%Date%": Date,
		"%decodeURI%": decodeURI,
		"%decodeURIComponent%": decodeURIComponent,
		"%encodeURI%": encodeURI,
		"%encodeURIComponent%": encodeURIComponent,
		"%Error%": $Error,
		"%eval%": eval,
		"%EvalError%": $EvalError,
		"%Float16Array%": typeof Float16Array === "undefined" ? undefined$1 : Float16Array,
		"%Float32Array%": typeof Float32Array === "undefined" ? undefined$1 : Float32Array,
		"%Float64Array%": typeof Float64Array === "undefined" ? undefined$1 : Float64Array,
		"%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined$1 : FinalizationRegistry,
		"%Function%": $Function,
		"%GeneratorFunction%": needsEval,
		"%Int8Array%": typeof Int8Array === "undefined" ? undefined$1 : Int8Array,
		"%Int16Array%": typeof Int16Array === "undefined" ? undefined$1 : Int16Array,
		"%Int32Array%": typeof Int32Array === "undefined" ? undefined$1 : Int32Array,
		"%isFinite%": isFinite,
		"%isNaN%": isNaN,
		"%IteratorPrototype%": hasSymbols$1 && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined$1,
		"%JSON%": typeof JSON === "object" ? JSON : undefined$1,
		"%Map%": typeof Map === "undefined" ? undefined$1 : Map,
		"%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols$1 || !getProto ? undefined$1 : getProto(new Map()[Symbol.iterator]()),
		"%Math%": Math,
		"%Number%": Number,
		"%Object%": $Object,
		"%Object.getOwnPropertyDescriptor%": $gOPD,
		"%parseFloat%": parseFloat,
		"%parseInt%": parseInt,
		"%Promise%": typeof Promise === "undefined" ? undefined$1 : Promise,
		"%Proxy%": typeof Proxy === "undefined" ? undefined$1 : Proxy,
		"%RangeError%": $RangeError,
		"%ReferenceError%": $ReferenceError,
		"%Reflect%": typeof Reflect === "undefined" ? undefined$1 : Reflect,
		"%RegExp%": RegExp,
		"%Set%": typeof Set === "undefined" ? undefined$1 : Set,
		"%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols$1 || !getProto ? undefined$1 : getProto(new Set()[Symbol.iterator]()),
		"%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined$1 : SharedArrayBuffer,
		"%String%": String,
		"%StringIteratorPrototype%": hasSymbols$1 && getProto ? getProto(""[Symbol.iterator]()) : undefined$1,
		"%Symbol%": hasSymbols$1 ? Symbol : undefined$1,
		"%SyntaxError%": $SyntaxError,
		"%ThrowTypeError%": ThrowTypeError,
		"%TypedArray%": TypedArray,
		"%TypeError%": $TypeError$1,
		"%Uint8Array%": typeof Uint8Array === "undefined" ? undefined$1 : Uint8Array,
		"%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined$1 : Uint8ClampedArray,
		"%Uint16Array%": typeof Uint16Array === "undefined" ? undefined$1 : Uint16Array,
		"%Uint32Array%": typeof Uint32Array === "undefined" ? undefined$1 : Uint32Array,
		"%URIError%": $URIError,
		"%WeakMap%": typeof WeakMap === "undefined" ? undefined$1 : WeakMap,
		"%WeakRef%": typeof WeakRef === "undefined" ? undefined$1 : WeakRef,
		"%WeakSet%": typeof WeakSet === "undefined" ? undefined$1 : WeakSet,
		"%Function.prototype.call%": $call,
		"%Function.prototype.apply%": $apply,
		"%Object.defineProperty%": $defineProperty$1,
		"%Object.getPrototypeOf%": $ObjectGPO,
		"%Math.abs%": abs,
		"%Math.floor%": floor,
		"%Math.max%": max,
		"%Math.min%": min,
		"%Math.pow%": pow,
		"%Math.round%": round,
		"%Math.sign%": sign,
		"%Reflect.getPrototypeOf%": $ReflectGPO
	};
	if (getProto) try {
		null.error;
	} catch (e) {
		var errorProto = getProto(getProto(e));
		INTRINSICS["%Error.prototype%"] = errorProto;
	}
	var doEval = function doEval$1(name$2) {
		var value;
		if (name$2 === "%AsyncFunction%") value = getEvalledConstructor("async function () {}");
		else if (name$2 === "%GeneratorFunction%") value = getEvalledConstructor("function* () {}");
		else if (name$2 === "%AsyncGeneratorFunction%") value = getEvalledConstructor("async function* () {}");
		else if (name$2 === "%AsyncGenerator%") {
			var fn = doEval$1("%AsyncGeneratorFunction%");
			if (fn) value = fn.prototype;
		} else if (name$2 === "%AsyncIteratorPrototype%") {
			var gen = doEval$1("%AsyncGenerator%");
			if (gen && getProto) value = getProto(gen.prototype);
		}
		INTRINSICS[name$2] = value;
		return value;
	};
	var LEGACY_ALIASES = {
		__proto__: null,
		"%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
		"%ArrayPrototype%": ["Array", "prototype"],
		"%ArrayProto_entries%": [
			"Array",
			"prototype",
			"entries"
		],
		"%ArrayProto_forEach%": [
			"Array",
			"prototype",
			"forEach"
		],
		"%ArrayProto_keys%": [
			"Array",
			"prototype",
			"keys"
		],
		"%ArrayProto_values%": [
			"Array",
			"prototype",
			"values"
		],
		"%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
		"%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
		"%AsyncGeneratorPrototype%": [
			"AsyncGeneratorFunction",
			"prototype",
			"prototype"
		],
		"%BooleanPrototype%": ["Boolean", "prototype"],
		"%DataViewPrototype%": ["DataView", "prototype"],
		"%DatePrototype%": ["Date", "prototype"],
		"%ErrorPrototype%": ["Error", "prototype"],
		"%EvalErrorPrototype%": ["EvalError", "prototype"],
		"%Float32ArrayPrototype%": ["Float32Array", "prototype"],
		"%Float64ArrayPrototype%": ["Float64Array", "prototype"],
		"%FunctionPrototype%": ["Function", "prototype"],
		"%Generator%": ["GeneratorFunction", "prototype"],
		"%GeneratorPrototype%": [
			"GeneratorFunction",
			"prototype",
			"prototype"
		],
		"%Int8ArrayPrototype%": ["Int8Array", "prototype"],
		"%Int16ArrayPrototype%": ["Int16Array", "prototype"],
		"%Int32ArrayPrototype%": ["Int32Array", "prototype"],
		"%JSONParse%": ["JSON", "parse"],
		"%JSONStringify%": ["JSON", "stringify"],
		"%MapPrototype%": ["Map", "prototype"],
		"%NumberPrototype%": ["Number", "prototype"],
		"%ObjectPrototype%": ["Object", "prototype"],
		"%ObjProto_toString%": [
			"Object",
			"prototype",
			"toString"
		],
		"%ObjProto_valueOf%": [
			"Object",
			"prototype",
			"valueOf"
		],
		"%PromisePrototype%": ["Promise", "prototype"],
		"%PromiseProto_then%": [
			"Promise",
			"prototype",
			"then"
		],
		"%Promise_all%": ["Promise", "all"],
		"%Promise_reject%": ["Promise", "reject"],
		"%Promise_resolve%": ["Promise", "resolve"],
		"%RangeErrorPrototype%": ["RangeError", "prototype"],
		"%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
		"%RegExpPrototype%": ["RegExp", "prototype"],
		"%SetPrototype%": ["Set", "prototype"],
		"%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
		"%StringPrototype%": ["String", "prototype"],
		"%SymbolPrototype%": ["Symbol", "prototype"],
		"%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
		"%TypedArrayPrototype%": ["TypedArray", "prototype"],
		"%TypeErrorPrototype%": ["TypeError", "prototype"],
		"%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
		"%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
		"%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
		"%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
		"%URIErrorPrototype%": ["URIError", "prototype"],
		"%WeakMapPrototype%": ["WeakMap", "prototype"],
		"%WeakSetPrototype%": ["WeakSet", "prototype"]
	};
	var bind$1 = require_function_bind();
	var hasOwn$1 = require_hasown();
	var $concat = bind$1.call($call, Array.prototype.concat);
	var $spliceApply = bind$1.call($apply, Array.prototype.splice);
	var $replace = bind$1.call($call, String.prototype.replace);
	var $strSlice = bind$1.call($call, String.prototype.slice);
	var $exec = bind$1.call($call, RegExp.prototype.exec);
	var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
	var reEscapeChar = /\\(\\)?/g;
	var stringToPath = function stringToPath$1(string) {
		var first$1 = $strSlice(string, 0, 1);
		var last$1 = $strSlice(string, -1);
		if (first$1 === "%" && last$1 !== "%") throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
		else if (last$1 === "%" && first$1 !== "%") throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
		var result = [];
		$replace(string, rePropName, function(match, number, quote, subString) {
			result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
		});
		return result;
	};
	var getBaseIntrinsic = function getBaseIntrinsic$1(name$2, allowMissing) {
		var intrinsicName = name$2;
		var alias;
		if (hasOwn$1(LEGACY_ALIASES, intrinsicName)) {
			alias = LEGACY_ALIASES[intrinsicName];
			intrinsicName = "%" + alias[0] + "%";
		}
		if (hasOwn$1(INTRINSICS, intrinsicName)) {
			var value = INTRINSICS[intrinsicName];
			if (value === needsEval) value = doEval(intrinsicName);
			if (typeof value === "undefined" && !allowMissing) throw new $TypeError$1("intrinsic " + name$2 + " exists, but is not available. Please file an issue!");
			return {
				alias,
				name: intrinsicName,
				value
			};
		}
		throw new $SyntaxError("intrinsic " + name$2 + " does not exist!");
	};
	module.exports = function GetIntrinsic$1(name$2, allowMissing) {
		if (typeof name$2 !== "string" || name$2.length === 0) throw new $TypeError$1("intrinsic name must be a non-empty string");
		if (arguments.length > 1 && typeof allowMissing !== "boolean") throw new $TypeError$1("\"allowMissing\" argument must be a boolean");
		if ($exec(/^%?[^%]*%?$/, name$2) === null) throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
		var parts = stringToPath(name$2);
		var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
		var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
		var intrinsicRealName = intrinsic.name;
		var value = intrinsic.value;
		var skipFurtherCaching = false;
		var alias = intrinsic.alias;
		if (alias) {
			intrinsicBaseName = alias[0];
			$spliceApply(parts, $concat([0, 1], alias));
		}
		for (var i = 1, isOwn = true; i < parts.length; i += 1) {
			var part = parts[i];
			var first$1 = $strSlice(part, 0, 1);
			var last$1 = $strSlice(part, -1);
			if ((first$1 === "\"" || first$1 === "'" || first$1 === "`" || last$1 === "\"" || last$1 === "'" || last$1 === "`") && first$1 !== last$1) throw new $SyntaxError("property names with quotes must have matching quotes");
			if (part === "constructor" || !isOwn) skipFurtherCaching = true;
			intrinsicBaseName += "." + part;
			intrinsicRealName = "%" + intrinsicBaseName + "%";
			if (hasOwn$1(INTRINSICS, intrinsicRealName)) value = INTRINSICS[intrinsicRealName];
			else if (value != null) {
				if (!(part in value)) {
					if (!allowMissing) throw new $TypeError$1("base intrinsic for " + name$2 + " exists, but the property is not available.");
					return void 0;
				}
				if ($gOPD && i + 1 >= parts.length) {
					var desc$1 = $gOPD(value, part);
					isOwn = !!desc$1;
					if (isOwn && "get" in desc$1 && !("originalValue" in desc$1.get)) value = desc$1.get;
					else value = value[part];
				} else {
					isOwn = hasOwn$1(value, part);
					value = value[part];
				}
				if (isOwn && !skipFurtherCaching) INTRINSICS[intrinsicRealName] = value;
			}
		}
		return value;
	};
} });

//#endregion
//#region node_modules/.pnpm/has-tostringtag@1.0.2/node_modules/has-tostringtag/shams.js
var require_shams = __commonJS({ "node_modules/.pnpm/has-tostringtag@1.0.2/node_modules/has-tostringtag/shams.js"(exports, module) {
	var hasSymbols = require_shams$1();
	/** @type {import('.')} */
	module.exports = function hasToStringTagShams() {
		return hasSymbols() && !!Symbol.toStringTag;
	};
} });

//#endregion
//#region node_modules/.pnpm/es-set-tostringtag@2.1.0/node_modules/es-set-tostringtag/index.js
var require_es_set_tostringtag = __commonJS({ "node_modules/.pnpm/es-set-tostringtag@2.1.0/node_modules/es-set-tostringtag/index.js"(exports, module) {
	var GetIntrinsic = require_get_intrinsic();
	var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
	var hasToStringTag = require_shams()();
	var hasOwn = require_hasown();
	var $TypeError = require_type();
	var toStringTag$1 = hasToStringTag ? Symbol.toStringTag : null;
	/** @type {import('.')} */
	module.exports = function setToStringTag$1(object, value) {
		var overrideIfSet = arguments.length > 2 && !!arguments[2] && arguments[2].force;
		var nonConfigurable = arguments.length > 2 && !!arguments[2] && arguments[2].nonConfigurable;
		if (typeof overrideIfSet !== "undefined" && typeof overrideIfSet !== "boolean" || typeof nonConfigurable !== "undefined" && typeof nonConfigurable !== "boolean") throw new $TypeError("if provided, the `overrideIfSet` and `nonConfigurable` options must be booleans");
		if (toStringTag$1 && (overrideIfSet || !hasOwn(object, toStringTag$1))) if ($defineProperty) $defineProperty(object, toStringTag$1, {
			configurable: !nonConfigurable,
			enumerable: false,
			value,
			writable: false
		});
		else object[toStringTag$1] = value;
	};
} });

//#endregion
//#region node_modules/.pnpm/form-data@4.0.2/node_modules/form-data/lib/populate.js
var require_populate = __commonJS({ "node_modules/.pnpm/form-data@4.0.2/node_modules/form-data/lib/populate.js"(exports, module) {
	module.exports = function(dst, src$2) {
		Object.keys(src$2).forEach(function(prop) {
			dst[prop] = dst[prop] || src$2[prop];
		});
		return dst;
	};
} });

//#endregion
//#region node_modules/.pnpm/form-data@4.0.2/node_modules/form-data/lib/form_data.js
var require_form_data = __commonJS({ "node_modules/.pnpm/form-data@4.0.2/node_modules/form-data/lib/form_data.js"(exports, module) {
	var CombinedStream = require_combined_stream();
	var util$8 = __require("util");
	var path$3 = __require("path");
	var http$4 = __require("http");
	var https$4 = __require("https");
	var parseUrl$2 = __require("url").parse;
	var fs$5 = __require("fs");
	var Stream$4 = __require("stream").Stream;
	var mime = require_mime_types();
	var asynckit = require_asynckit();
	var setToStringTag = require_es_set_tostringtag();
	var populate = require_populate();
	module.exports = FormData$2;
	util$8.inherits(FormData$2, CombinedStream);
	/**
	* Create readable "multipart/form-data" streams.
	* Can be used to submit forms
	* and file uploads to other web applications.
	*
	* @constructor
	* @param {Object} options - Properties to be added/overriden for FormData and CombinedStream
	*/
	function FormData$2(options) {
		if (!(this instanceof FormData$2)) return new FormData$2(options);
		this._overheadLength = 0;
		this._valueLength = 0;
		this._valuesToMeasure = [];
		CombinedStream.call(this);
		options = options || {};
		for (var option in options) this[option] = options[option];
	}
	FormData$2.LINE_BREAK = "\r\n";
	FormData$2.DEFAULT_CONTENT_TYPE = "application/octet-stream";
	FormData$2.prototype.append = function(field, value, options) {
		options = options || {};
		if (typeof options == "string") options = { filename: options };
		var append = CombinedStream.prototype.append.bind(this);
		if (typeof value == "number") value = "" + value;
		if (Array.isArray(value)) {
			this._error(new Error("Arrays are not supported."));
			return;
		}
		var header = this._multiPartHeader(field, value, options);
		var footer = this._multiPartFooter();
		append(header);
		append(value);
		append(footer);
		this._trackLength(header, value, options);
	};
	FormData$2.prototype._trackLength = function(header, value, options) {
		var valueLength = 0;
		if (options.knownLength != null) valueLength += +options.knownLength;
		else if (Buffer.isBuffer(value)) valueLength = value.length;
		else if (typeof value === "string") valueLength = Buffer.byteLength(value);
		this._valueLength += valueLength;
		this._overheadLength += Buffer.byteLength(header) + FormData$2.LINE_BREAK.length;
		if (!value || !value.path && !(value.readable && Object.prototype.hasOwnProperty.call(value, "httpVersion")) && !(value instanceof Stream$4)) return;
		if (!options.knownLength) this._valuesToMeasure.push(value);
	};
	FormData$2.prototype._lengthRetriever = function(value, callback) {
		if (Object.prototype.hasOwnProperty.call(value, "fd")) if (value.end != void 0 && value.end != Infinity && value.start != void 0) callback(null, value.end + 1 - (value.start ? value.start : 0));
		else fs$5.stat(value.path, function(err, stat) {
			var fileSize;
			if (err) {
				callback(err);
				return;
			}
			fileSize = stat.size - (value.start ? value.start : 0);
			callback(null, fileSize);
		});
		else if (Object.prototype.hasOwnProperty.call(value, "httpVersion")) callback(null, +value.headers["content-length"]);
		else if (Object.prototype.hasOwnProperty.call(value, "httpModule")) {
			value.on("response", function(response) {
				value.pause();
				callback(null, +response.headers["content-length"]);
			});
			value.resume();
		} else callback("Unknown stream");
	};
	FormData$2.prototype._multiPartHeader = function(field, value, options) {
		if (typeof options.header == "string") return options.header;
		var contentDisposition = this._getContentDisposition(value, options);
		var contentType$1 = this._getContentType(value, options);
		var contents = "";
		var headers = {
			"Content-Disposition": ["form-data", "name=\"" + field + "\""].concat(contentDisposition || []),
			"Content-Type": [].concat(contentType$1 || [])
		};
		if (typeof options.header == "object") populate(headers, options.header);
		var header;
		for (var prop in headers) if (Object.prototype.hasOwnProperty.call(headers, prop)) {
			header = headers[prop];
			if (header == null) continue;
			if (!Array.isArray(header)) header = [header];
			if (header.length) contents += prop + ": " + header.join("; ") + FormData$2.LINE_BREAK;
		}
		return "--" + this.getBoundary() + FormData$2.LINE_BREAK + contents + FormData$2.LINE_BREAK;
	};
	FormData$2.prototype._getContentDisposition = function(value, options) {
		var filename, contentDisposition;
		if (typeof options.filepath === "string") filename = path$3.normalize(options.filepath).replace(/\\/g, "/");
		else if (options.filename || value.name || value.path) filename = path$3.basename(options.filename || value.name || value.path);
		else if (value.readable && Object.prototype.hasOwnProperty.call(value, "httpVersion")) filename = path$3.basename(value.client._httpMessage.path || "");
		if (filename) contentDisposition = "filename=\"" + filename + "\"";
		return contentDisposition;
	};
	FormData$2.prototype._getContentType = function(value, options) {
		var contentType$1 = options.contentType;
		if (!contentType$1 && value.name) contentType$1 = mime.lookup(value.name);
		if (!contentType$1 && value.path) contentType$1 = mime.lookup(value.path);
		if (!contentType$1 && value.readable && Object.prototype.hasOwnProperty.call(value, "httpVersion")) contentType$1 = value.headers["content-type"];
		if (!contentType$1 && (options.filepath || options.filename)) contentType$1 = mime.lookup(options.filepath || options.filename);
		if (!contentType$1 && typeof value == "object") contentType$1 = FormData$2.DEFAULT_CONTENT_TYPE;
		return contentType$1;
	};
	FormData$2.prototype._multiPartFooter = function() {
		return function(next) {
			var footer = FormData$2.LINE_BREAK;
			var lastPart = this._streams.length === 0;
			if (lastPart) footer += this._lastBoundary();
			next(footer);
		}.bind(this);
	};
	FormData$2.prototype._lastBoundary = function() {
		return "--" + this.getBoundary() + "--" + FormData$2.LINE_BREAK;
	};
	FormData$2.prototype.getHeaders = function(userHeaders) {
		var header;
		var formHeaders = { "content-type": "multipart/form-data; boundary=" + this.getBoundary() };
		for (header in userHeaders) if (Object.prototype.hasOwnProperty.call(userHeaders, header)) formHeaders[header.toLowerCase()] = userHeaders[header];
		return formHeaders;
	};
	FormData$2.prototype.setBoundary = function(boundary) {
		this._boundary = boundary;
	};
	FormData$2.prototype.getBoundary = function() {
		if (!this._boundary) this._generateBoundary();
		return this._boundary;
	};
	FormData$2.prototype.getBuffer = function() {
		var dataBuffer = new Buffer.alloc(0);
		var boundary = this.getBoundary();
		for (var i = 0, len = this._streams.length; i < len; i++) if (typeof this._streams[i] !== "function") {
			if (Buffer.isBuffer(this._streams[i])) dataBuffer = Buffer.concat([dataBuffer, this._streams[i]]);
			else dataBuffer = Buffer.concat([dataBuffer, Buffer.from(this._streams[i])]);
			if (typeof this._streams[i] !== "string" || this._streams[i].substring(2, boundary.length + 2) !== boundary) dataBuffer = Buffer.concat([dataBuffer, Buffer.from(FormData$2.LINE_BREAK)]);
		}
		return Buffer.concat([dataBuffer, Buffer.from(this._lastBoundary())]);
	};
	FormData$2.prototype._generateBoundary = function() {
		var boundary = "--------------------------";
		for (var i = 0; i < 24; i++) boundary += Math.floor(Math.random() * 10).toString(16);
		this._boundary = boundary;
	};
	FormData$2.prototype.getLengthSync = function() {
		var knownLength = this._overheadLength + this._valueLength;
		if (this._streams.length) knownLength += this._lastBoundary().length;
		if (!this.hasKnownLength()) this._error(new Error("Cannot calculate proper length in synchronous way."));
		return knownLength;
	};
	FormData$2.prototype.hasKnownLength = function() {
		var hasKnownLength = true;
		if (this._valuesToMeasure.length) hasKnownLength = false;
		return hasKnownLength;
	};
	FormData$2.prototype.getLength = function(cb) {
		var knownLength = this._overheadLength + this._valueLength;
		if (this._streams.length) knownLength += this._lastBoundary().length;
		if (!this._valuesToMeasure.length) {
			process.nextTick(cb.bind(this, null, knownLength));
			return;
		}
		asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values$1) {
			if (err) {
				cb(err);
				return;
			}
			values$1.forEach(function(length) {
				knownLength += length;
			});
			cb(null, knownLength);
		});
	};
	FormData$2.prototype.submit = function(params, cb) {
		var request$1, options, defaults$2 = { method: "post" };
		if (typeof params == "string") {
			params = parseUrl$2(params);
			options = populate({
				port: params.port,
				path: params.pathname,
				host: params.hostname,
				protocol: params.protocol
			}, defaults$2);
		} else {
			options = populate(params, defaults$2);
			if (!options.port) options.port = options.protocol == "https:" ? 443 : 80;
		}
		options.headers = this.getHeaders(params.headers);
		if (options.protocol == "https:") request$1 = https$4.request(options);
		else request$1 = http$4.request(options);
		this.getLength(function(err, length) {
			if (err && err !== "Unknown stream") {
				this._error(err);
				return;
			}
			if (length) request$1.setHeader("Content-Length", length);
			this.pipe(request$1);
			if (cb) {
				var onResponse;
				var callback = function(error$1, responce) {
					request$1.removeListener("error", callback);
					request$1.removeListener("response", onResponse);
					return cb.call(this, error$1, responce);
				};
				onResponse = callback.bind(this, null);
				request$1.on("error", callback);
				request$1.on("response", onResponse);
			}
		}.bind(this));
		return request$1;
	};
	FormData$2.prototype._error = function(err) {
		if (!this.error) {
			this.error = err;
			this.pause();
			this.emit("error", err);
		}
	};
	FormData$2.prototype.toString = function() {
		return "[object FormData]";
	};
	setToStringTag(FormData$2, "FormData");
} });

//#endregion
//#region node_modules/.pnpm/proxy-from-env@1.1.0/node_modules/proxy-from-env/index.js
var require_proxy_from_env = __commonJS({ "node_modules/.pnpm/proxy-from-env@1.1.0/node_modules/proxy-from-env/index.js"(exports) {
	var parseUrl$1 = __require("url").parse;
	var DEFAULT_PORTS = {
		ftp: 21,
		gopher: 70,
		http: 80,
		https: 443,
		ws: 80,
		wss: 443
	};
	var stringEndsWith = String.prototype.endsWith || function(s$1) {
		return s$1.length <= this.length && this.indexOf(s$1, this.length - s$1.length) !== -1;
	};
	/**
	* @param {string|object} url - The URL, or the result from url.parse.
	* @return {string} The URL of the proxy that should handle the request to the
	*  given URL. If no proxy is set, this will be an empty string.
	*/
	function getProxyForUrl(url$3) {
		var parsedUrl = typeof url$3 === "string" ? parseUrl$1(url$3) : url$3 || {};
		var proto$2 = parsedUrl.protocol;
		var hostname = parsedUrl.host;
		var port = parsedUrl.port;
		if (typeof hostname !== "string" || !hostname || typeof proto$2 !== "string") return "";
		proto$2 = proto$2.split(":", 1)[0];
		hostname = hostname.replace(/:\d*$/, "");
		port = parseInt(port) || DEFAULT_PORTS[proto$2] || 0;
		if (!shouldProxy(hostname, port)) return "";
		var proxy = getEnv("npm_config_" + proto$2 + "_proxy") || getEnv(proto$2 + "_proxy") || getEnv("npm_config_proxy") || getEnv("all_proxy");
		if (proxy && proxy.indexOf("://") === -1) proxy = proto$2 + "://" + proxy;
		return proxy;
	}
	/**
	* Determines whether a given URL should be proxied.
	*
	* @param {string} hostname - The host name of the URL.
	* @param {number} port - The effective port of the URL.
	* @returns {boolean} Whether the given URL should be proxied.
	* @private
	*/
	function shouldProxy(hostname, port) {
		var NO_PROXY = (getEnv("npm_config_no_proxy") || getEnv("no_proxy")).toLowerCase();
		if (!NO_PROXY) return true;
		if (NO_PROXY === "*") return false;
		return NO_PROXY.split(/[,\s]/).every(function(proxy) {
			if (!proxy) return true;
			var parsedProxy = proxy.match(/^(.+):(\d+)$/);
			var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;
			var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;
			if (parsedProxyPort && parsedProxyPort !== port) return true;
			if (!/^[.*]/.test(parsedProxyHostname)) return hostname !== parsedProxyHostname;
			if (parsedProxyHostname.charAt(0) === "*") parsedProxyHostname = parsedProxyHostname.slice(1);
			return !stringEndsWith.call(hostname, parsedProxyHostname);
		});
	}
	/**
	* Get the value for an environment variable.
	*
	* @param {string} key - The name of the environment variable.
	* @return {string} The value of the environment variable.
	* @private
	*/
	function getEnv(key$1) {
		return process.env[key$1.toLowerCase()] || process.env[key$1.toUpperCase()] || "";
	}
	exports.getProxyForUrl = getProxyForUrl;
} });

//#endregion
//#region node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/common.js
var require_common = __commonJS({ "node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/common.js"(exports, module) {
	/**
	* This is the common logic for both the Node.js and web browser
	* implementations of `debug()`.
	*/
	function setup(env$2) {
		createDebug.debug = createDebug;
		createDebug.default = createDebug;
		createDebug.coerce = coerce$2;
		createDebug.disable = disable;
		createDebug.enable = enable;
		createDebug.enabled = enabled$2;
		createDebug.humanize = require_ms$1();
		createDebug.destroy = destroy$3;
		Object.keys(env$2).forEach((key$1) => {
			createDebug[key$1] = env$2[key$1];
		});
		/**
		* The currently active debug mode names, and names to skip.
		*/
		createDebug.names = [];
		createDebug.skips = [];
		/**
		* Map of special "%n" handling functions, for the debug "format" argument.
		*
		* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
		*/
		createDebug.formatters = {};
		/**
		* Selects a color for a debug namespace
		* @param {String} namespace The namespace string for the debug instance to be colored
		* @return {Number|String} An ANSI color code for the given namespace
		* @api private
		*/
		function selectColor(namespace) {
			let hash = 0;
			for (let i = 0; i < namespace.length; i++) {
				hash = (hash << 5) - hash + namespace.charCodeAt(i);
				hash |= 0;
			}
			return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
		}
		createDebug.selectColor = selectColor;
		/**
		* Create a debugger with the given `namespace`.
		*
		* @param {String} namespace
		* @return {Function}
		* @api public
		*/
		function createDebug(namespace) {
			let prevTime;
			let enableOverride = null;
			let namespacesCache;
			let enabledCache;
			function debug$21(...args) {
				if (!debug$21.enabled) return;
				const self$1 = debug$21;
				const curr = Number(new Date());
				const ms$2 = curr - (prevTime || curr);
				self$1.diff = ms$2;
				self$1.prev = prevTime;
				self$1.curr = curr;
				prevTime = curr;
				args[0] = createDebug.coerce(args[0]);
				if (typeof args[0] !== "string") args.unshift("%O");
				let index = 0;
				args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format$14) => {
					if (match === "%%") return "%";
					index++;
					const formatter = createDebug.formatters[format$14];
					if (typeof formatter === "function") {
						const val = args[index];
						match = formatter.call(self$1, val);
						args.splice(index, 1);
						index--;
					}
					return match;
				});
				createDebug.formatArgs.call(self$1, args);
				const logFn = self$1.log || createDebug.log;
				logFn.apply(self$1, args);
			}
			debug$21.namespace = namespace;
			debug$21.useColors = createDebug.useColors();
			debug$21.color = createDebug.selectColor(namespace);
			debug$21.extend = extend$1;
			debug$21.destroy = createDebug.destroy;
			Object.defineProperty(debug$21, "enabled", {
				enumerable: true,
				configurable: false,
				get: () => {
					if (enableOverride !== null) return enableOverride;
					if (namespacesCache !== createDebug.namespaces) {
						namespacesCache = createDebug.namespaces;
						enabledCache = createDebug.enabled(namespace);
					}
					return enabledCache;
				},
				set: (v$1) => {
					enableOverride = v$1;
				}
			});
			if (typeof createDebug.init === "function") createDebug.init(debug$21);
			return debug$21;
		}
		function extend$1(namespace, delimiter) {
			const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
			newDebug.log = this.log;
			return newDebug;
		}
		/**
		* Enables a debug mode by namespaces. This can include modes
		* separated by a colon and wildcards.
		*
		* @param {String} namespaces
		* @api public
		*/
		function enable(namespaces) {
			createDebug.save(namespaces);
			createDebug.namespaces = namespaces;
			createDebug.names = [];
			createDebug.skips = [];
			const split = (typeof namespaces === "string" ? namespaces : "").trim().replace(" ", ",").split(",").filter(Boolean);
			for (const ns of split) if (ns[0] === "-") createDebug.skips.push(ns.slice(1));
			else createDebug.names.push(ns);
		}
		/**
		* Checks if the given string matches a namespace template, honoring
		* asterisks as wildcards.
		*
		* @param {String} search
		* @param {String} template
		* @return {Boolean}
		*/
		function matchesTemplate(search, template$1) {
			let searchIndex = 0;
			let templateIndex = 0;
			let starIndex = -1;
			let matchIndex = 0;
			while (searchIndex < search.length) if (templateIndex < template$1.length && (template$1[templateIndex] === search[searchIndex] || template$1[templateIndex] === "*")) if (template$1[templateIndex] === "*") {
				starIndex = templateIndex;
				matchIndex = searchIndex;
				templateIndex++;
			} else {
				searchIndex++;
				templateIndex++;
			}
			else if (starIndex !== -1) {
				templateIndex = starIndex + 1;
				matchIndex++;
				searchIndex = matchIndex;
			} else return false;
			while (templateIndex < template$1.length && template$1[templateIndex] === "*") templateIndex++;
			return templateIndex === template$1.length;
		}
		/**
		* Disable debug output.
		*
		* @return {String} namespaces
		* @api public
		*/
		function disable() {
			const namespaces = [...createDebug.names, ...createDebug.skips.map((namespace) => "-" + namespace)].join(",");
			createDebug.enable("");
			return namespaces;
		}
		/**
		* Returns true if the given mode name is enabled, false otherwise.
		*
		* @param {String} name
		* @return {Boolean}
		* @api public
		*/
		function enabled$2(name$2) {
			for (const skip of createDebug.skips) if (matchesTemplate(name$2, skip)) return false;
			for (const ns of createDebug.names) if (matchesTemplate(name$2, ns)) return true;
			return false;
		}
		/**
		* Coerce `val`.
		*
		* @param {Mixed} val
		* @return {Mixed}
		* @api private
		*/
		function coerce$2(val) {
			if (val instanceof Error) return val.stack || val.message;
			return val;
		}
		/**
		* XXX DO NOT USE. This is a temporary stub function.
		* XXX It WILL be removed in the next major release.
		*/
		function destroy$3() {
			console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
		}
		createDebug.enable(createDebug.load());
		return createDebug;
	}
	module.exports = setup;
} });

//#endregion
//#region node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/browser.js
var require_browser = __commonJS({ "node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/browser.js"(exports, module) {
	/**
	* This is the web browser implementation of `debug()`.
	*/
	exports.formatArgs = formatArgs$1;
	exports.save = save$1;
	exports.load = load$1;
	exports.useColors = useColors$1;
	exports.storage = localstorage();
	exports.destroy = (() => {
		let warned = false;
		return () => {
			if (!warned) {
				warned = true;
				console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
			}
		};
	})();
	/**
	* Colors.
	*/
	exports.colors = [
		"#0000CC",
		"#0000FF",
		"#0033CC",
		"#0033FF",
		"#0066CC",
		"#0066FF",
		"#0099CC",
		"#0099FF",
		"#00CC00",
		"#00CC33",
		"#00CC66",
		"#00CC99",
		"#00CCCC",
		"#00CCFF",
		"#3300CC",
		"#3300FF",
		"#3333CC",
		"#3333FF",
		"#3366CC",
		"#3366FF",
		"#3399CC",
		"#3399FF",
		"#33CC00",
		"#33CC33",
		"#33CC66",
		"#33CC99",
		"#33CCCC",
		"#33CCFF",
		"#6600CC",
		"#6600FF",
		"#6633CC",
		"#6633FF",
		"#66CC00",
		"#66CC33",
		"#9900CC",
		"#9900FF",
		"#9933CC",
		"#9933FF",
		"#99CC00",
		"#99CC33",
		"#CC0000",
		"#CC0033",
		"#CC0066",
		"#CC0099",
		"#CC00CC",
		"#CC00FF",
		"#CC3300",
		"#CC3333",
		"#CC3366",
		"#CC3399",
		"#CC33CC",
		"#CC33FF",
		"#CC6600",
		"#CC6633",
		"#CC9900",
		"#CC9933",
		"#CCCC00",
		"#CCCC33",
		"#FF0000",
		"#FF0033",
		"#FF0066",
		"#FF0099",
		"#FF00CC",
		"#FF00FF",
		"#FF3300",
		"#FF3333",
		"#FF3366",
		"#FF3399",
		"#FF33CC",
		"#FF33FF",
		"#FF6600",
		"#FF6633",
		"#FF9900",
		"#FF9933",
		"#FFCC00",
		"#FFCC33"
	];
	/**
	* Currently only WebKit-based Web Inspectors, Firefox >= v31,
	* and the Firebug extension (any Firefox version) are known
	* to support "%c" CSS customizations.
	*
	* TODO: add a `localStorage` variable to explicitly enable/disable colors
	*/
	function useColors$1() {
		if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) return true;
		if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) return false;
		let m$1;
		return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && (m$1 = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m$1[1], 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
	}
	/**
	* Colorize log arguments if enabled.
	*
	* @api public
	*/
	function formatArgs$1(args) {
		args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
		if (!this.useColors) return;
		const c = "color: " + this.color;
		args.splice(1, 0, c, "color: inherit");
		let index = 0;
		let lastC = 0;
		args[0].replace(/%[a-zA-Z%]/g, (match) => {
			if (match === "%%") return;
			index++;
			if (match === "%c") lastC = index;
		});
		args.splice(lastC, 0, c);
	}
	/**
	* Invokes `console.debug()` when available.
	* No-op when `console.debug` is not a "function".
	* If `console.debug` is not available, falls back
	* to `console.log`.
	*
	* @api public
	*/
	exports.log = console.debug || console.log || (() => {});
	/**
	* Save `namespaces`.
	*
	* @param {String} namespaces
	* @api private
	*/
	function save$1(namespaces) {
		try {
			if (namespaces) exports.storage.setItem("debug", namespaces);
			else exports.storage.removeItem("debug");
		} catch (error$1) {}
	}
	/**
	* Load `namespaces`.
	*
	* @return {String} returns the previously persisted debug modes
	* @api private
	*/
	function load$1() {
		let r;
		try {
			r = exports.storage.getItem("debug");
		} catch (error$1) {}
		if (!r && typeof process !== "undefined" && "env" in process) r = process.env.DEBUG;
		return r;
	}
	/**
	* Localstorage attempts to return the localstorage.
	*
	* This is necessary because safari throws
	* when a user disables cookies/localstorage
	* and you attempt to access it.
	*
	* @return {LocalStorage}
	* @api private
	*/
	function localstorage() {
		try {
			return localStorage;
		} catch (error$1) {}
	}
	module.exports = require_common()(exports);
	const { formatters: formatters$1 } = module.exports;
	/**
	* Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	*/
	formatters$1.j = function(v$1) {
		try {
			return JSON.stringify(v$1);
		} catch (error$1) {
			return "[UnexpectedJSONParseError]: " + error$1.message;
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/node.js
var require_node = __commonJS({ "node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/node.js"(exports, module) {
	/**
	* Module dependencies.
	*/
	const tty = __require("tty");
	const util$7 = __require("util");
	/**
	* This is the Node.js implementation of `debug()`.
	*/
	exports.init = init;
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.destroy = util$7.deprecate(() => {}, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
	/**
	* Colors.
	*/
	exports.colors = [
		6,
		2,
		3,
		4,
		5,
		1
	];
	try {
		const supportsColor$2 = require_supports_color();
		if (supportsColor$2 && (supportsColor$2.stderr || supportsColor$2).level >= 2) exports.colors = [
			20,
			21,
			26,
			27,
			32,
			33,
			38,
			39,
			40,
			41,
			42,
			43,
			44,
			45,
			56,
			57,
			62,
			63,
			68,
			69,
			74,
			75,
			76,
			77,
			78,
			79,
			80,
			81,
			92,
			93,
			98,
			99,
			112,
			113,
			128,
			129,
			134,
			135,
			148,
			149,
			160,
			161,
			162,
			163,
			164,
			165,
			166,
			167,
			168,
			169,
			170,
			171,
			172,
			173,
			178,
			179,
			184,
			185,
			196,
			197,
			198,
			199,
			200,
			201,
			202,
			203,
			204,
			205,
			206,
			207,
			208,
			209,
			214,
			215,
			220,
			221
		];
	} catch (error$1) {}
	/**
	* Build up the default `inspectOpts` object from the environment variables.
	*
	*   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
	*/
	exports.inspectOpts = Object.keys(process.env).filter((key$1) => {
		return /^debug_/i.test(key$1);
	}).reduce((obj, key$1) => {
		const prop = key$1.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {
			return k.toUpperCase();
		});
		let val = process.env[key$1];
		if (/^(yes|on|true|enabled)$/i.test(val)) val = true;
		else if (/^(no|off|false|disabled)$/i.test(val)) val = false;
		else if (val === "null") val = null;
		else val = Number(val);
		obj[prop] = val;
		return obj;
	}, {});
	/**
	* Is stdout a TTY? Colored output is enabled when `true`.
	*/
	function useColors() {
		return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
	}
	/**
	* Adds ANSI color escape codes if enabled.
	*
	* @api public
	*/
	function formatArgs(args) {
		const { namespace: name$2, useColors: useColors$2 } = this;
		if (useColors$2) {
			const c = this.color;
			const colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c);
			const prefix = `  ${colorCode};1m${name$2} \u001B[0m`;
			args[0] = prefix + args[0].split("\n").join("\n" + prefix);
			args.push(colorCode + "m+" + module.exports.humanize(this.diff) + "\x1B[0m");
		} else args[0] = getDate() + name$2 + " " + args[0];
	}
	function getDate() {
		if (exports.inspectOpts.hideDate) return "";
		return new Date().toISOString() + " ";
	}
	/**
	* Invokes `util.formatWithOptions()` with the specified arguments and writes to stderr.
	*/
	function log(...args) {
		return process.stderr.write(util$7.formatWithOptions(exports.inspectOpts, ...args) + "\n");
	}
	/**
	* Save `namespaces`.
	*
	* @param {String} namespaces
	* @api private
	*/
	function save(namespaces) {
		if (namespaces) process.env.DEBUG = namespaces;
		else delete process.env.DEBUG;
	}
	/**
	* Load `namespaces`.
	*
	* @return {String} returns the previously persisted debug modes
	* @api private
	*/
	function load() {
		return process.env.DEBUG;
	}
	/**
	* Init logic for `debug` instances.
	*
	* Create a new `inspectOpts` object in case `useColors` is set
	* differently for a particular `debug` instance.
	*/
	function init(debug$21) {
		debug$21.inspectOpts = {};
		const keys$2 = Object.keys(exports.inspectOpts);
		for (let i = 0; i < keys$2.length; i++) debug$21.inspectOpts[keys$2[i]] = exports.inspectOpts[keys$2[i]];
	}
	module.exports = require_common()(exports);
	const { formatters } = module.exports;
	/**
	* Map %o to `util.inspect()`, all on a single line.
	*/
	formatters.o = function(v$1) {
		this.inspectOpts.colors = this.useColors;
		return util$7.inspect(v$1, this.inspectOpts).split("\n").map((str) => str.trim()).join(" ");
	};
	/**
	* Map %O to `util.inspect()`, allowing multiple lines if needed.
	*/
	formatters.O = function(v$1) {
		this.inspectOpts.colors = this.useColors;
		return util$7.inspect(v$1, this.inspectOpts);
	};
} });

//#endregion
//#region node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js
var require_src$1 = __commonJS({ "node_modules/.pnpm/debug@4.4.0/node_modules/debug/src/index.js"(exports, module) {
	/**
	* Detect Electron renderer / nwjs process, which is node, but we should
	* treat as a browser.
	*/
	if (typeof process === "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs) module.exports = require_browser();
	else module.exports = require_node();
} });

//#endregion
//#region node_modules/.pnpm/follow-redirects@1.15.9/node_modules/follow-redirects/debug.js
var require_debug$1 = __commonJS({ "node_modules/.pnpm/follow-redirects@1.15.9/node_modules/follow-redirects/debug.js"(exports, module) {
	var debug$13;
	module.exports = function() {
		if (!debug$13) {
			try {
				debug$13 = require_src$1()("follow-redirects");
			} catch (error$1) {}
			if (typeof debug$13 !== "function") debug$13 = function() {};
		}
		debug$13.apply(null, arguments);
	};
} });

//#endregion
//#region node_modules/.pnpm/follow-redirects@1.15.9/node_modules/follow-redirects/index.js
var require_follow_redirects = __commonJS({ "node_modules/.pnpm/follow-redirects@1.15.9/node_modules/follow-redirects/index.js"(exports, module) {
	var url$2 = __require("url");
	var URL$2 = url$2.URL;
	var http$3 = __require("http");
	var https$3 = __require("https");
	var Writable = __require("stream").Writable;
	var assert$6 = __require("assert");
	var debug$12 = require_debug$1();
	// istanbul ignore next
	(function detectUnsupportedEnvironment() {
		var looksLikeNode = typeof process !== "undefined";
		var looksLikeBrowser = typeof window !== "undefined" && typeof document !== "undefined";
		var looksLikeV8 = isFunction$3(Error.captureStackTrace);
		if (!looksLikeNode && (looksLikeBrowser || !looksLikeV8)) console.warn("The follow-redirects package should be excluded from browser builds.");
	})();
	var useNativeURL = false;
	try {
		assert$6(new URL$2(""));
	} catch (error$1) {
		useNativeURL = error$1.code === "ERR_INVALID_URL";
	}
	var preservedUrlFields = [
		"auth",
		"host",
		"hostname",
		"href",
		"path",
		"pathname",
		"port",
		"protocol",
		"query",
		"search",
		"hash"
	];
	var events$1 = [
		"abort",
		"aborted",
		"connect",
		"error",
		"socket",
		"timeout"
	];
	var eventHandlers = Object.create(null);
	events$1.forEach(function(event) {
		eventHandlers[event] = function(arg1, arg2, arg3) {
			this._redirectable.emit(event, arg1, arg2, arg3);
		};
	});
	var InvalidUrlError = createErrorType("ERR_INVALID_URL", "Invalid URL", TypeError);
	var RedirectionError = createErrorType("ERR_FR_REDIRECTION_FAILURE", "Redirected request failed");
	var TooManyRedirectsError = createErrorType("ERR_FR_TOO_MANY_REDIRECTS", "Maximum number of redirects exceeded", RedirectionError);
	var MaxBodyLengthExceededError = createErrorType("ERR_FR_MAX_BODY_LENGTH_EXCEEDED", "Request body larger than maxBodyLength limit");
	var WriteAfterEndError = createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
	// istanbul ignore next
	var destroy = Writable.prototype.destroy || noop$2;
	function RedirectableRequest(options, responseCallback) {
		Writable.call(this);
		this._sanitizeOptions(options);
		this._options = options;
		this._ended = false;
		this._ending = false;
		this._redirectCount = 0;
		this._redirects = [];
		this._requestBodyLength = 0;
		this._requestBodyBuffers = [];
		if (responseCallback) this.on("response", responseCallback);
		var self$1 = this;
		this._onNativeResponse = function(response) {
			try {
				self$1._processResponse(response);
			} catch (cause) {
				self$1.emit("error", cause instanceof RedirectionError ? cause : new RedirectionError({ cause }));
			}
		};
		this._performRequest();
	}
	RedirectableRequest.prototype = Object.create(Writable.prototype);
	RedirectableRequest.prototype.abort = function() {
		destroyRequest(this._currentRequest);
		this._currentRequest.abort();
		this.emit("abort");
	};
	RedirectableRequest.prototype.destroy = function(error$1) {
		destroyRequest(this._currentRequest, error$1);
		destroy.call(this, error$1);
		return this;
	};
	RedirectableRequest.prototype.write = function(data, encoding, callback) {
		if (this._ending) throw new WriteAfterEndError();
		if (!isString$5(data) && !isBuffer$1(data)) throw new TypeError("data should be a string, Buffer or Uint8Array");
		if (isFunction$3(encoding)) {
			callback = encoding;
			encoding = null;
		}
		if (data.length === 0) {
			if (callback) callback();
			return;
		}
		if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
			this._requestBodyLength += data.length;
			this._requestBodyBuffers.push({
				data,
				encoding
			});
			this._currentRequest.write(data, encoding, callback);
		} else {
			this.emit("error", new MaxBodyLengthExceededError());
			this.abort();
		}
	};
	RedirectableRequest.prototype.end = function(data, encoding, callback) {
		if (isFunction$3(data)) {
			callback = data;
			data = encoding = null;
		} else if (isFunction$3(encoding)) {
			callback = encoding;
			encoding = null;
		}
		if (!data) {
			this._ended = this._ending = true;
			this._currentRequest.end(null, null, callback);
		} else {
			var self$1 = this;
			var currentRequest = this._currentRequest;
			this.write(data, encoding, function() {
				self$1._ended = true;
				currentRequest.end(null, null, callback);
			});
			this._ending = true;
		}
	};
	RedirectableRequest.prototype.setHeader = function(name$2, value) {
		this._options.headers[name$2] = value;
		this._currentRequest.setHeader(name$2, value);
	};
	RedirectableRequest.prototype.removeHeader = function(name$2) {
		delete this._options.headers[name$2];
		this._currentRequest.removeHeader(name$2);
	};
	RedirectableRequest.prototype.setTimeout = function(msecs, callback) {
		var self$1 = this;
		function destroyOnTimeout(socket) {
			socket.setTimeout(msecs);
			socket.removeListener("timeout", socket.destroy);
			socket.addListener("timeout", socket.destroy);
		}
		function startTimer(socket) {
			if (self$1._timeout) clearTimeout(self$1._timeout);
			self$1._timeout = setTimeout(function() {
				self$1.emit("timeout");
				clearTimer();
			}, msecs);
			destroyOnTimeout(socket);
		}
		function clearTimer() {
			if (self$1._timeout) {
				clearTimeout(self$1._timeout);
				self$1._timeout = null;
			}
			self$1.removeListener("abort", clearTimer);
			self$1.removeListener("error", clearTimer);
			self$1.removeListener("response", clearTimer);
			self$1.removeListener("close", clearTimer);
			if (callback) self$1.removeListener("timeout", callback);
			if (!self$1.socket) self$1._currentRequest.removeListener("socket", startTimer);
		}
		if (callback) this.on("timeout", callback);
		if (this.socket) startTimer(this.socket);
		else this._currentRequest.once("socket", startTimer);
		this.on("socket", destroyOnTimeout);
		this.on("abort", clearTimer);
		this.on("error", clearTimer);
		this.on("response", clearTimer);
		this.on("close", clearTimer);
		return this;
	};
	[
		"flushHeaders",
		"getHeader",
		"setNoDelay",
		"setSocketKeepAlive"
	].forEach(function(method$1) {
		RedirectableRequest.prototype[method$1] = function(a, b) {
			return this._currentRequest[method$1](a, b);
		};
	});
	[
		"aborted",
		"connection",
		"socket"
	].forEach(function(property) {
		Object.defineProperty(RedirectableRequest.prototype, property, { get: function() {
			return this._currentRequest[property];
		} });
	});
	RedirectableRequest.prototype._sanitizeOptions = function(options) {
		if (!options.headers) options.headers = {};
		if (options.host) {
			if (!options.hostname) options.hostname = options.host;
			delete options.host;
		}
		if (!options.pathname && options.path) {
			var searchPos = options.path.indexOf("?");
			if (searchPos < 0) options.pathname = options.path;
			else {
				options.pathname = options.path.substring(0, searchPos);
				options.search = options.path.substring(searchPos);
			}
		}
	};
	RedirectableRequest.prototype._performRequest = function() {
		var protocol = this._options.protocol;
		var nativeProtocol = this._options.nativeProtocols[protocol];
		if (!nativeProtocol) throw new TypeError("Unsupported protocol " + protocol);
		if (this._options.agents) {
			var scheme = protocol.slice(0, -1);
			this._options.agent = this._options.agents[scheme];
		}
		var request$1 = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);
		request$1._redirectable = this;
		for (var event of events$1) request$1.on(event, eventHandlers[event]);
		this._currentUrl = /^\//.test(this._options.path) ? url$2.format(this._options) : this._options.path;
		if (this._isRedirect) {
			var i = 0;
			var self$1 = this;
			var buffers = this._requestBodyBuffers;
			(function writeNext(error$1) {
				// istanbul ignore else
				if (request$1 === self$1._currentRequest) {
					// istanbul ignore if
					if (error$1) self$1.emit("error", error$1);
					else if (i < buffers.length) {
						var buffer$1 = buffers[i++];
						// istanbul ignore else
						if (!request$1.finished) request$1.write(buffer$1.data, buffer$1.encoding, writeNext);
					} else if (self$1._ended) request$1.end();
				}
			})();
		}
	};
	RedirectableRequest.prototype._processResponse = function(response) {
		var statusCode = response.statusCode;
		if (this._options.trackRedirects) this._redirects.push({
			url: this._currentUrl,
			headers: response.headers,
			statusCode
		});
		var location = response.headers.location;
		if (!location || this._options.followRedirects === false || statusCode < 300 || statusCode >= 400) {
			response.responseUrl = this._currentUrl;
			response.redirects = this._redirects;
			this.emit("response", response);
			this._requestBodyBuffers = [];
			return;
		}
		destroyRequest(this._currentRequest);
		response.destroy();
		if (++this._redirectCount > this._options.maxRedirects) throw new TooManyRedirectsError();
		var requestHeaders;
		var beforeRedirect = this._options.beforeRedirect;
		if (beforeRedirect) requestHeaders = Object.assign({ Host: response.req.getHeader("host") }, this._options.headers);
		var method$1 = this._options.method;
		if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" || statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {
			this._options.method = "GET";
			this._requestBodyBuffers = [];
			removeMatchingHeaders(/^content-/i, this._options.headers);
		}
		var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);
		var currentUrlParts = parseUrl(this._currentUrl);
		var currentHost = currentHostHeader || currentUrlParts.host;
		var currentUrl = /^\w+:/.test(location) ? this._currentUrl : url$2.format(Object.assign(currentUrlParts, { host: currentHost }));
		var redirectUrl = resolveUrl(location, currentUrl);
		debug$12("redirecting to", redirectUrl.href);
		this._isRedirect = true;
		spreadUrlObject(redirectUrl, this._options);
		if (redirectUrl.protocol !== currentUrlParts.protocol && redirectUrl.protocol !== "https:" || redirectUrl.host !== currentHost && !isSubdomain(redirectUrl.host, currentHost)) removeMatchingHeaders(/^(?:(?:proxy-)?authorization|cookie)$/i, this._options.headers);
		if (isFunction$3(beforeRedirect)) {
			var responseDetails = {
				headers: response.headers,
				statusCode
			};
			var requestDetails = {
				url: currentUrl,
				method: method$1,
				headers: requestHeaders
			};
			beforeRedirect(this._options, responseDetails, requestDetails);
			this._sanitizeOptions(this._options);
		}
		this._performRequest();
	};
	function wrap(protocols$1) {
		var exports$1 = {
			maxRedirects: 21,
			maxBodyLength: 10 * 1024 * 1024
		};
		var nativeProtocols = {};
		Object.keys(protocols$1).forEach(function(scheme) {
			var protocol = scheme + ":";
			var nativeProtocol = nativeProtocols[protocol] = protocols$1[scheme];
			var wrappedProtocol = exports$1[scheme] = Object.create(nativeProtocol);
			function request$1(input, options, callback) {
				if (isURL(input)) input = spreadUrlObject(input);
				else if (isString$5(input)) input = spreadUrlObject(parseUrl(input));
				else {
					callback = options;
					options = validateUrl$1(input);
					input = { protocol };
				}
				if (isFunction$3(options)) {
					callback = options;
					options = null;
				}
				options = Object.assign({
					maxRedirects: exports$1.maxRedirects,
					maxBodyLength: exports$1.maxBodyLength
				}, input, options);
				options.nativeProtocols = nativeProtocols;
				if (!isString$5(options.host) && !isString$5(options.hostname)) options.hostname = "::1";
				assert$6.equal(options.protocol, protocol, "protocol mismatch");
				debug$12("options", options);
				return new RedirectableRequest(options, callback);
			}
			function get(input, options, callback) {
				var wrappedRequest = wrappedProtocol.request(input, options, callback);
				wrappedRequest.end();
				return wrappedRequest;
			}
			Object.defineProperties(wrappedProtocol, {
				request: {
					value: request$1,
					configurable: true,
					enumerable: true,
					writable: true
				},
				get: {
					value: get,
					configurable: true,
					enumerable: true,
					writable: true
				}
			});
		});
		return exports$1;
	}
	function noop$2() {}
	function parseUrl(input) {
		var parsed;
		// istanbul ignore else
		if (useNativeURL) parsed = new URL$2(input);
		else {
			parsed = validateUrl$1(url$2.parse(input));
			if (!isString$5(parsed.protocol)) throw new InvalidUrlError({ input });
		}
		return parsed;
	}
	function resolveUrl(relative, base) {
		// istanbul ignore next
		return useNativeURL ? new URL$2(relative, base) : parseUrl(url$2.resolve(base, relative));
	}
	function validateUrl$1(input) {
		if (/^\[/.test(input.hostname) && !/^\[[:0-9a-f]+\]$/i.test(input.hostname)) throw new InvalidUrlError({ input: input.href || input });
		if (/^\[/.test(input.host) && !/^\[[:0-9a-f]+\](:\d+)?$/i.test(input.host)) throw new InvalidUrlError({ input: input.href || input });
		return input;
	}
	function spreadUrlObject(urlObject, target) {
		var spread$1 = target || {};
		for (var key$1 of preservedUrlFields) spread$1[key$1] = urlObject[key$1];
		if (spread$1.hostname.startsWith("[")) spread$1.hostname = spread$1.hostname.slice(1, -1);
		if (spread$1.port !== "") spread$1.port = Number(spread$1.port);
		spread$1.path = spread$1.search ? spread$1.pathname + spread$1.search : spread$1.pathname;
		return spread$1;
	}
	function removeMatchingHeaders(regex, headers) {
		var lastValue;
		for (var header in headers) if (regex.test(header)) {
			lastValue = headers[header];
			delete headers[header];
		}
		return lastValue === null || typeof lastValue === "undefined" ? void 0 : String(lastValue).trim();
	}
	function createErrorType(code, message, baseClass) {
		function CustomError(properties) {
			// istanbul ignore else
			if (isFunction$3(Error.captureStackTrace)) Error.captureStackTrace(this, this.constructor);
			Object.assign(this, properties || {});
			this.code = code;
			this.message = this.cause ? message + ": " + this.cause.message : message;
		}
		CustomError.prototype = new (baseClass || Error)();
		Object.defineProperties(CustomError.prototype, {
			constructor: {
				value: CustomError,
				enumerable: false
			},
			name: {
				value: "Error [" + code + "]",
				enumerable: false
			}
		});
		return CustomError;
	}
	function destroyRequest(request$1, error$1) {
		for (var event of events$1) request$1.removeListener(event, eventHandlers[event]);
		request$1.on("error", noop$2);
		request$1.destroy(error$1);
	}
	function isSubdomain(subdomain, domain) {
		assert$6(isString$5(subdomain) && isString$5(domain));
		var dot = subdomain.length - domain.length - 1;
		return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
	}
	function isString$5(value) {
		return typeof value === "string" || value instanceof String;
	}
	function isFunction$3(value) {
		return typeof value === "function";
	}
	function isBuffer$1(value) {
		return typeof value === "object" && "length" in value;
	}
	function isURL(value) {
		return URL$2 && value instanceof URL$2;
	}
	module.exports = wrap({
		http: http$3,
		https: https$3
	});
	module.exports.wrap = wrap;
} });

//#endregion
//#region node_modules/.pnpm/axios@1.9.0/node_modules/axios/dist/node/axios.cjs
var require_axios = __commonJS({ "node_modules/.pnpm/axios@1.9.0/node_modules/axios/dist/node/axios.cjs"(exports, module) {
	const FormData$1 = require_form_data();
	const crypto$2 = __require("crypto");
	const url$1 = __require("url");
	const proxyFromEnv = require_proxy_from_env();
	const http$2 = __require("http");
	const https$2 = __require("https");
	const util$6 = __require("util");
	const followRedirects = require_follow_redirects();
	const zlib$1 = __require("zlib");
	const stream = __require("stream");
	const events = __require("events");
	function _interopDefaultLegacy(e) {
		return e && typeof e === "object" && "default" in e ? e : { "default": e };
	}
	const FormData__default = /* @__PURE__ */ _interopDefaultLegacy(FormData$1);
	const crypto__default = /* @__PURE__ */ _interopDefaultLegacy(crypto$2);
	const url__default = /* @__PURE__ */ _interopDefaultLegacy(url$1);
	const proxyFromEnv__default = /* @__PURE__ */ _interopDefaultLegacy(proxyFromEnv);
	const http__default = /* @__PURE__ */ _interopDefaultLegacy(http$2);
	const https__default = /* @__PURE__ */ _interopDefaultLegacy(https$2);
	const util__default = /* @__PURE__ */ _interopDefaultLegacy(util$6);
	const followRedirects__default = /* @__PURE__ */ _interopDefaultLegacy(followRedirects);
	const zlib__default = /* @__PURE__ */ _interopDefaultLegacy(zlib$1);
	const stream__default = /* @__PURE__ */ _interopDefaultLegacy(stream);
	function bind(fn, thisArg) {
		return function wrap$2() {
			return fn.apply(thisArg, arguments);
		};
	}
	const { toString: toString$2 } = Object.prototype;
	const { getPrototypeOf } = Object;
	const { iterator, toStringTag } = Symbol;
	const kindOf = ((cache$1) => (thing) => {
		const str = toString$2.call(thing);
		return cache$1[str] || (cache$1[str] = str.slice(8, -1).toLowerCase());
	})(Object.create(null));
	const kindOfTest = (type) => {
		type = type.toLowerCase();
		return (thing) => kindOf(thing) === type;
	};
	const typeOfTest = (type) => (thing) => typeof thing === type;
	/**
	* Determine if a value is an Array
	*
	* @param {Object} val The value to test
	*
	* @returns {boolean} True if value is an Array, otherwise false
	*/
	const { isArray: isArray$3 } = Array;
	/**
	* Determine if a value is undefined
	*
	* @param {*} val The value to test
	*
	* @returns {boolean} True if the value is undefined, otherwise false
	*/
	const isUndefined$1 = typeOfTest("undefined");
	/**
	* Determine if a value is a Buffer
	*
	* @param {*} val The value to test
	*
	* @returns {boolean} True if value is a Buffer, otherwise false
	*/
	function isBuffer(val) {
		return val !== null && !isUndefined$1(val) && val.constructor !== null && !isUndefined$1(val.constructor) && isFunction$2(val.constructor.isBuffer) && val.constructor.isBuffer(val);
	}
	/**
	* Determine if a value is an ArrayBuffer
	*
	* @param {*} val The value to test
	*
	* @returns {boolean} True if value is an ArrayBuffer, otherwise false
	*/
	const isArrayBuffer = kindOfTest("ArrayBuffer");
	/**
	* Determine if a value is a view on an ArrayBuffer
	*
	* @param {*} val The value to test
	*
	* @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
	*/
	function isArrayBufferView(val) {
		let result;
		if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) result = ArrayBuffer.isView(val);
		else result = val && val.buffer && isArrayBuffer(val.buffer);
		return result;
	}
	/**
	* Determine if a value is a String
	*
	* @param {*} val The value to test
	*
	* @returns {boolean} True if value is a String, otherwise false
	*/
	const isString$4 = typeOfTest("string");
	/**
	* Determine if a value is a Function
	*
	* @param {*} val The value to test
	* @returns {boolean} True if value is a Function, otherwise false
	*/
	const isFunction$2 = typeOfTest("function");
	/**
	* Determine if a value is a Number
	*
	* @param {*} val The value to test
	*
	* @returns {boolean} True if value is a Number, otherwise false
	*/
	const isNumber$3 = typeOfTest("number");
	/**
	* Determine if a value is an Object
	*
	* @param {*} thing The value to test
	*
	* @returns {boolean} True if value is an Object, otherwise false
	*/
	const isObject$5 = (thing) => thing !== null && typeof thing === "object";
	/**
	* Determine if a value is a Boolean
	*
	* @param {*} thing The value to test
	* @returns {boolean} True if value is a Boolean, otherwise false
	*/
	const isBoolean$3 = (thing) => thing === true || thing === false;
	/**
	* Determine if a value is a plain Object
	*
	* @param {*} val The value to test
	*
	* @returns {boolean} True if value is a plain Object, otherwise false
	*/
	const isPlainObject$2 = (val) => {
		if (kindOf(val) !== "object") return false;
		const prototype$2 = getPrototypeOf(val);
		return (prototype$2 === null || prototype$2 === Object.prototype || Object.getPrototypeOf(prototype$2) === null) && !(toStringTag in val) && !(iterator in val);
	};
	/**
	* Determine if a value is a Date
	*
	* @param {*} val The value to test
	*
	* @returns {boolean} True if value is a Date, otherwise false
	*/
	const isDate$1 = kindOfTest("Date");
	/**
	* Determine if a value is a File
	*
	* @param {*} val The value to test
	*
	* @returns {boolean} True if value is a File, otherwise false
	*/
	const isFile$2 = kindOfTest("File");
	/**
	* Determine if a value is a Blob
	*
	* @param {*} val The value to test
	*
	* @returns {boolean} True if value is a Blob, otherwise false
	*/
	const isBlob = kindOfTest("Blob");
	/**
	* Determine if a value is a FileList
	*
	* @param {*} val The value to test
	*
	* @returns {boolean} True if value is a File, otherwise false
	*/
	const isFileList = kindOfTest("FileList");
	/**
	* Determine if a value is a Stream
	*
	* @param {*} val The value to test
	*
	* @returns {boolean} True if value is a Stream, otherwise false
	*/
	const isStream = (val) => isObject$5(val) && isFunction$2(val.pipe);
	/**
	* Determine if a value is a FormData
	*
	* @param {*} thing The value to test
	*
	* @returns {boolean} True if value is an FormData, otherwise false
	*/
	const isFormData = (thing) => {
		let kind;
		return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction$2(thing.append) && ((kind = kindOf(thing)) === "formdata" || kind === "object" && isFunction$2(thing.toString) && thing.toString() === "[object FormData]"));
	};
	/**
	* Determine if a value is a URLSearchParams object
	*
	* @param {*} val The value to test
	*
	* @returns {boolean} True if value is a URLSearchParams object, otherwise false
	*/
	const isURLSearchParams = kindOfTest("URLSearchParams");
	const [isReadableStream, isRequest, isResponse, isHeaders] = [
		"ReadableStream",
		"Request",
		"Response",
		"Headers"
	].map(kindOfTest);
	/**
	* Trim excess whitespace off the beginning and end of a string
	*
	* @param {String} str The String to trim
	*
	* @returns {String} The String freed of excess whitespace
	*/
	const trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
	/**
	* Iterate over an Array or an Object invoking a function for each item.
	*
	* If `obj` is an Array callback will be called passing
	* the value, index, and complete array for each item.
	*
	* If 'obj' is an Object callback will be called passing
	* the value, key, and complete object for each property.
	*
	* @param {Object|Array} obj The object to iterate
	* @param {Function} fn The callback to invoke for each item
	*
	* @param {Boolean} [allOwnKeys = false]
	* @returns {any}
	*/
	function forEach(obj, fn, { allOwnKeys = false } = {}) {
		if (obj === null || typeof obj === "undefined") return;
		let i;
		let l;
		if (typeof obj !== "object") obj = [obj];
		if (isArray$3(obj)) for (i = 0, l = obj.length; i < l; i++) fn.call(null, obj[i], i, obj);
		else {
			const keys$2 = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
			const len = keys$2.length;
			let key$1;
			for (i = 0; i < len; i++) {
				key$1 = keys$2[i];
				fn.call(null, obj[key$1], key$1, obj);
			}
		}
	}
	function findKey(obj, key$1) {
		key$1 = key$1.toLowerCase();
		const keys$2 = Object.keys(obj);
		let i = keys$2.length;
		let _key;
		while (i-- > 0) {
			_key = keys$2[i];
			if (key$1 === _key.toLowerCase()) return _key;
		}
		return null;
	}
	const _global = (() => {
		if (typeof globalThis !== "undefined") return globalThis;
		return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
	})();
	const isContextDefined = (context) => !isUndefined$1(context) && context !== _global;
	/**
	* Accepts varargs expecting each argument to be an object, then
	* immutably merges the properties of each object and returns result.
	*
	* When multiple objects contain the same key the later object in
	* the arguments list will take precedence.
	*
	* Example:
	*
	* ```js
	* var result = merge({foo: 123}, {foo: 456});
	* console.log(result.foo); // outputs 456
	* ```
	*
	* @param {Object} obj1 Object to merge
	*
	* @returns {Object} Result of all merge properties
	*/
	function merge$1() {
		const { caseless } = isContextDefined(this) && this || {};
		const result = {};
		const assignValue = (val, key$1) => {
			const targetKey = caseless && findKey(result, key$1) || key$1;
			if (isPlainObject$2(result[targetKey]) && isPlainObject$2(val)) result[targetKey] = merge$1(result[targetKey], val);
			else if (isPlainObject$2(val)) result[targetKey] = merge$1({}, val);
			else if (isArray$3(val)) result[targetKey] = val.slice();
			else result[targetKey] = val;
		};
		for (let i = 0, l = arguments.length; i < l; i++) arguments[i] && forEach(arguments[i], assignValue);
		return result;
	}
	/**
	* Extends object a by mutably adding to it the properties of object b.
	*
	* @param {Object} a The object to be extended
	* @param {Object} b The object to copy properties from
	* @param {Object} thisArg The object to bind function to
	*
	* @param {Boolean} [allOwnKeys]
	* @returns {Object} The resulting value of object a
	*/
	const extend = (a, b, thisArg, { allOwnKeys } = {}) => {
		forEach(b, (val, key$1) => {
			if (thisArg && isFunction$2(val)) a[key$1] = bind(val, thisArg);
			else a[key$1] = val;
		}, { allOwnKeys });
		return a;
	};
	/**
	* Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
	*
	* @param {string} content with BOM
	*
	* @returns {string} content value without BOM
	*/
	const stripBOM = (content) => {
		if (content.charCodeAt(0) === 65279) content = content.slice(1);
		return content;
	};
	/**
	* Inherit the prototype methods from one constructor into another
	* @param {function} constructor
	* @param {function} superConstructor
	* @param {object} [props]
	* @param {object} [descriptors]
	*
	* @returns {void}
	*/
	const inherits = (constructor, superConstructor, props, descriptors$1) => {
		constructor.prototype = Object.create(superConstructor.prototype, descriptors$1);
		constructor.prototype.constructor = constructor;
		Object.defineProperty(constructor, "super", { value: superConstructor.prototype });
		props && Object.assign(constructor.prototype, props);
	};
	/**
	* Resolve object with deep prototype chain to a flat object
	* @param {Object} sourceObj source object
	* @param {Object} [destObj]
	* @param {Function|Boolean} [filter]
	* @param {Function} [propFilter]
	*
	* @returns {Object}
	*/
	const toFlatObject = (sourceObj, destObj, filter$1, propFilter) => {
		let props;
		let i;
		let prop;
		const merged = {};
		destObj = destObj || {};
		if (sourceObj == null) return destObj;
		do {
			props = Object.getOwnPropertyNames(sourceObj);
			i = props.length;
			while (i-- > 0) {
				prop = props[i];
				if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
					destObj[prop] = sourceObj[prop];
					merged[prop] = true;
				}
			}
			sourceObj = filter$1 !== false && getPrototypeOf(sourceObj);
		} while (sourceObj && (!filter$1 || filter$1(sourceObj, destObj)) && sourceObj !== Object.prototype);
		return destObj;
	};
	/**
	* Determines whether a string ends with the characters of a specified string
	*
	* @param {String} str
	* @param {String} searchString
	* @param {Number} [position= 0]
	*
	* @returns {boolean}
	*/
	const endsWith = (str, searchString, position) => {
		str = String(str);
		if (position === void 0 || position > str.length) position = str.length;
		position -= searchString.length;
		const lastIndex = str.indexOf(searchString, position);
		return lastIndex !== -1 && lastIndex === position;
	};
	/**
	* Returns new array from array like object or null if failed
	*
	* @param {*} [thing]
	*
	* @returns {?Array}
	*/
	const toArray = (thing) => {
		if (!thing) return null;
		if (isArray$3(thing)) return thing;
		let i = thing.length;
		if (!isNumber$3(i)) return null;
		const arr = new Array(i);
		while (i-- > 0) arr[i] = thing[i];
		return arr;
	};
	/**
	* Checking if the Uint8Array exists and if it does, it returns a function that checks if the
	* thing passed in is an instance of Uint8Array
	*
	* @param {TypedArray}
	*
	* @returns {Array}
	*/
	const isTypedArray = ((TypedArray$1) => {
		return (thing) => {
			return TypedArray$1 && thing instanceof TypedArray$1;
		};
	})(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
	/**
	* For each entry in the object, call the function with the key and value.
	*
	* @param {Object<any, any>} obj - The object to iterate over.
	* @param {Function} fn - The function to call for each entry.
	*
	* @returns {void}
	*/
	const forEachEntry = (obj, fn) => {
		const generator = obj && obj[iterator];
		const _iterator$1 = generator.call(obj);
		let result;
		while ((result = _iterator$1.next()) && !result.done) {
			const pair = result.value;
			fn.call(obj, pair[0], pair[1]);
		}
	};
	/**
	* It takes a regular expression and a string, and returns an array of all the matches
	*
	* @param {string} regExp - The regular expression to match against.
	* @param {string} str - The string to search.
	*
	* @returns {Array<boolean>}
	*/
	const matchAll = (regExp, str) => {
		let matches;
		const arr = [];
		while ((matches = regExp.exec(str)) !== null) arr.push(matches);
		return arr;
	};
	const isHTMLForm = kindOfTest("HTMLFormElement");
	const toCamelCase = (str) => {
		return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g, function replacer$1(m$1, p1, p2) {
			return p1.toUpperCase() + p2;
		});
	};
	const hasOwnProperty$2 = (({ hasOwnProperty: hasOwnProperty$5 }) => (obj, prop) => hasOwnProperty$5.call(obj, prop))(Object.prototype);
	/**
	* Determine if a value is a RegExp object
	*
	* @param {*} val The value to test
	*
	* @returns {boolean} True if value is a RegExp object, otherwise false
	*/
	const isRegExp$1 = kindOfTest("RegExp");
	const reduceDescriptors = (obj, reducer) => {
		const descriptors$1 = Object.getOwnPropertyDescriptors(obj);
		const reducedDescriptors = {};
		forEach(descriptors$1, (descriptor, name$2) => {
			let ret;
			if ((ret = reducer(descriptor, name$2, obj)) !== false) reducedDescriptors[name$2] = ret || descriptor;
		});
		Object.defineProperties(obj, reducedDescriptors);
	};
	/**
	* Makes all methods read-only
	* @param {Object} obj
	*/
	const freezeMethods = (obj) => {
		reduceDescriptors(obj, (descriptor, name$2) => {
			if (isFunction$2(obj) && [
				"arguments",
				"caller",
				"callee"
			].indexOf(name$2) !== -1) return false;
			const value = obj[name$2];
			if (!isFunction$2(value)) return;
			descriptor.enumerable = false;
			if ("writable" in descriptor) {
				descriptor.writable = false;
				return;
			}
			if (!descriptor.set) descriptor.set = () => {
				throw Error("Can not rewrite read-only method '" + name$2 + "'");
			};
		});
	};
	const toObjectSet = (arrayOrString, delimiter) => {
		const obj = {};
		const define$1 = (arr) => {
			arr.forEach((value) => {
				obj[value] = true;
			});
		};
		isArray$3(arrayOrString) ? define$1(arrayOrString) : define$1(String(arrayOrString).split(delimiter));
		return obj;
	};
	const noop$1 = () => {};
	const toFiniteNumber = (value, defaultValue) => {
		return value != null && Number.isFinite(value = +value) ? value : defaultValue;
	};
	/**
	* If the thing is a FormData object, return true, otherwise return false.
	*
	* @param {unknown} thing - The thing to check.
	*
	* @returns {boolean}
	*/
	function isSpecCompliantForm(thing) {
		return !!(thing && isFunction$2(thing.append) && thing[toStringTag] === "FormData" && thing[iterator]);
	}
	const toJSONObject = (obj) => {
		const stack = new Array(10);
		const visit = (source, i) => {
			if (isObject$5(source)) {
				if (stack.indexOf(source) >= 0) return;
				if (!("toJSON" in source)) {
					stack[i] = source;
					const target = isArray$3(source) ? [] : {};
					forEach(source, (value, key$1) => {
						const reducedValue = visit(value, i + 1);
						!isUndefined$1(reducedValue) && (target[key$1] = reducedValue);
					});
					stack[i] = void 0;
					return target;
				}
			}
			return source;
		};
		return visit(obj, 0);
	};
	const isAsyncFn = kindOfTest("AsyncFunction");
	const isThenable = (thing) => thing && (isObject$5(thing) || isFunction$2(thing)) && isFunction$2(thing.then) && isFunction$2(thing.catch);
	const _setImmediate = ((setImmediateSupported, postMessageSupported) => {
		if (setImmediateSupported) return setImmediate;
		return postMessageSupported ? ((token, callbacks) => {
			_global.addEventListener("message", ({ source, data }) => {
				if (source === _global && data === token) callbacks.length && callbacks.shift()();
			}, false);
			return (cb) => {
				callbacks.push(cb);
				_global.postMessage(token, "*");
			};
		})(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
	})(typeof setImmediate === "function", isFunction$2(_global.postMessage));
	const asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
	const isIterable = (thing) => thing != null && isFunction$2(thing[iterator]);
	const utils$1 = {
		isArray: isArray$3,
		isArrayBuffer,
		isBuffer,
		isFormData,
		isArrayBufferView,
		isString: isString$4,
		isNumber: isNumber$3,
		isBoolean: isBoolean$3,
		isObject: isObject$5,
		isPlainObject: isPlainObject$2,
		isReadableStream,
		isRequest,
		isResponse,
		isHeaders,
		isUndefined: isUndefined$1,
		isDate: isDate$1,
		isFile: isFile$2,
		isBlob,
		isRegExp: isRegExp$1,
		isFunction: isFunction$2,
		isStream,
		isURLSearchParams,
		isTypedArray,
		isFileList,
		forEach,
		merge: merge$1,
		extend,
		trim,
		stripBOM,
		inherits,
		toFlatObject,
		kindOf,
		kindOfTest,
		endsWith,
		toArray,
		forEachEntry,
		matchAll,
		isHTMLForm,
		hasOwnProperty: hasOwnProperty$2,
		hasOwnProp: hasOwnProperty$2,
		reduceDescriptors,
		freezeMethods,
		toObjectSet,
		toCamelCase,
		noop: noop$1,
		toFiniteNumber,
		findKey,
		global: _global,
		isContextDefined,
		isSpecCompliantForm,
		toJSONObject,
		isAsyncFn,
		isThenable,
		setImmediate: _setImmediate,
		asap,
		isIterable
	};
	/**
	* Create an Error with the specified message, config, error code, request and response.
	*
	* @param {string} message The error message.
	* @param {string} [code] The error code (for example, 'ECONNABORTED').
	* @param {Object} [config] The config.
	* @param {Object} [request] The request.
	* @param {Object} [response] The response.
	*
	* @returns {Error} The created error.
	*/
	function AxiosError(message, code, config$2, request$1, response) {
		Error.call(this);
		if (Error.captureStackTrace) Error.captureStackTrace(this, this.constructor);
		else this.stack = new Error().stack;
		this.message = message;
		this.name = "AxiosError";
		code && (this.code = code);
		config$2 && (this.config = config$2);
		request$1 && (this.request = request$1);
		if (response) {
			this.response = response;
			this.status = response.status ? response.status : null;
		}
	}
	utils$1.inherits(AxiosError, Error, { toJSON: function toJSON() {
		return {
			message: this.message,
			name: this.name,
			description: this.description,
			number: this.number,
			fileName: this.fileName,
			lineNumber: this.lineNumber,
			columnNumber: this.columnNumber,
			stack: this.stack,
			config: utils$1.toJSONObject(this.config),
			code: this.code,
			status: this.status
		};
	} });
	const prototype$1 = AxiosError.prototype;
	const descriptors = {};
	[
		"ERR_BAD_OPTION_VALUE",
		"ERR_BAD_OPTION",
		"ECONNABORTED",
		"ETIMEDOUT",
		"ERR_NETWORK",
		"ERR_FR_TOO_MANY_REDIRECTS",
		"ERR_DEPRECATED",
		"ERR_BAD_RESPONSE",
		"ERR_BAD_REQUEST",
		"ERR_CANCELED",
		"ERR_NOT_SUPPORT",
		"ERR_INVALID_URL"
	].forEach((code) => {
		descriptors[code] = { value: code };
	});
	Object.defineProperties(AxiosError, descriptors);
	Object.defineProperty(prototype$1, "isAxiosError", { value: true });
	AxiosError.from = (error$1, code, config$2, request$1, response, customProps) => {
		const axiosError = Object.create(prototype$1);
		utils$1.toFlatObject(error$1, axiosError, function filter$1(obj) {
			return obj !== Error.prototype;
		}, (prop) => {
			return prop !== "isAxiosError";
		});
		AxiosError.call(axiosError, error$1.message, code, config$2, request$1, response);
		axiosError.cause = error$1;
		axiosError.name = error$1.name;
		customProps && Object.assign(axiosError, customProps);
		return axiosError;
	};
	/**
	* Determines if the given thing is a array or js object.
	*
	* @param {string} thing - The object or array to be visited.
	*
	* @returns {boolean}
	*/
	function isVisitable(thing) {
		return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
	}
	/**
	* It removes the brackets from the end of a string
	*
	* @param {string} key - The key of the parameter.
	*
	* @returns {string} the key without the brackets.
	*/
	function removeBrackets(key$1) {
		return utils$1.endsWith(key$1, "[]") ? key$1.slice(0, -2) : key$1;
	}
	/**
	* It takes a path, a key, and a boolean, and returns a string
	*
	* @param {string} path - The path to the current key.
	* @param {string} key - The key of the current object being iterated over.
	* @param {string} dots - If true, the key will be rendered with dots instead of brackets.
	*
	* @returns {string} The path to the current key.
	*/
	function renderKey(path$10, key$1, dots) {
		if (!path$10) return key$1;
		return path$10.concat(key$1).map(function each(token, i) {
			token = removeBrackets(token);
			return !dots && i ? "[" + token + "]" : token;
		}).join(dots ? "." : "");
	}
	/**
	* If the array is an array and none of its elements are visitable, then it's a flat array.
	*
	* @param {Array<any>} arr - The array to check
	*
	* @returns {boolean}
	*/
	function isFlatArray(arr) {
		return utils$1.isArray(arr) && !arr.some(isVisitable);
	}
	const predicates = utils$1.toFlatObject(utils$1, {}, null, function filter$1(prop) {
		return /^is[A-Z]/.test(prop);
	});
	/**
	* Convert a data object to FormData
	*
	* @param {Object} obj
	* @param {?Object} [formData]
	* @param {?Object} [options]
	* @param {Function} [options.visitor]
	* @param {Boolean} [options.metaTokens = true]
	* @param {Boolean} [options.dots = false]
	* @param {?Boolean} [options.indexes = false]
	*
	* @returns {Object}
	**/
	/**
	* It converts an object into a FormData object
	*
	* @param {Object<any, any>} obj - The object to convert to form data.
	* @param {string} formData - The FormData object to append to.
	* @param {Object<string, any>} options
	*
	* @returns
	*/
	function toFormData(obj, formData, options) {
		if (!utils$1.isObject(obj)) throw new TypeError("target must be an object");
		formData = formData || new (FormData__default["default"] || FormData)();
		options = utils$1.toFlatObject(options, {
			metaTokens: true,
			dots: false,
			indexes: false
		}, false, function defined(option, source) {
			return !utils$1.isUndefined(source[option]);
		});
		const metaTokens = options.metaTokens;
		const visitor = options.visitor || defaultVisitor;
		const dots = options.dots;
		const indexes = options.indexes;
		const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
		const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);
		if (!utils$1.isFunction(visitor)) throw new TypeError("visitor must be a function");
		function convertValue(value) {
			if (value === null) return "";
			if (utils$1.isDate(value)) return value.toISOString();
			if (!useBlob && utils$1.isBlob(value)) throw new AxiosError("Blob is not supported. Use a Buffer instead.");
			if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
			return value;
		}
		/**
		* Default visitor.
		*
		* @param {*} value
		* @param {String|Number} key
		* @param {Array<String|Number>} path
		* @this {FormData}
		*
		* @returns {boolean} return true to visit the each prop of the value recursively
		*/
		function defaultVisitor(value, key$1, path$10) {
			let arr = value;
			if (value && !path$10 && typeof value === "object") {
				if (utils$1.endsWith(key$1, "{}")) {
					key$1 = metaTokens ? key$1 : key$1.slice(0, -2);
					value = JSON.stringify(value);
				} else if (utils$1.isArray(value) && isFlatArray(value) || (utils$1.isFileList(value) || utils$1.endsWith(key$1, "[]")) && (arr = utils$1.toArray(value))) {
					key$1 = removeBrackets(key$1);
					arr.forEach(function each(el, index) {
						!(utils$1.isUndefined(el) || el === null) && formData.append(
							// eslint-disable-next-line no-nested-ternary
							indexes === true ? renderKey([key$1], index, dots) : indexes === null ? key$1 : key$1 + "[]",
							convertValue(el)
);
					});
					return false;
				}
			}
			if (isVisitable(value)) return true;
			formData.append(renderKey(path$10, key$1, dots), convertValue(value));
			return false;
		}
		const stack = [];
		const exposedHelpers = Object.assign(predicates, {
			defaultVisitor,
			convertValue,
			isVisitable
		});
		function build$1(value, path$10) {
			if (utils$1.isUndefined(value)) return;
			if (stack.indexOf(value) !== -1) throw Error("Circular reference detected in " + path$10.join("."));
			stack.push(value);
			utils$1.forEach(value, function each(el, key$1) {
				const result = !(utils$1.isUndefined(el) || el === null) && visitor.call(formData, el, utils$1.isString(key$1) ? key$1.trim() : key$1, path$10, exposedHelpers);
				if (result === true) build$1(el, path$10 ? path$10.concat(key$1) : [key$1]);
			});
			stack.pop();
		}
		if (!utils$1.isObject(obj)) throw new TypeError("data must be an object");
		build$1(obj);
		return formData;
	}
	/**
	* It encodes a string by replacing all characters that are not in the unreserved set with
	* their percent-encoded equivalents
	*
	* @param {string} str - The string to encode.
	*
	* @returns {string} The encoded string.
	*/
	function encode$1(str) {
		const charMap = {
			"!": "%21",
			"'": "%27",
			"(": "%28",
			")": "%29",
			"~": "%7E",
			"%20": "+",
			"%00": "\0"
		};
		return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer$1(match) {
			return charMap[match];
		});
	}
	/**
	* It takes a params object and converts it to a FormData object
	*
	* @param {Object<string, any>} params - The parameters to be converted to a FormData object.
	* @param {Object<string, any>} options - The options object passed to the Axios constructor.
	*
	* @returns {void}
	*/
	function AxiosURLSearchParams(params, options) {
		this._pairs = [];
		params && toFormData(params, this, options);
	}
	const prototype = AxiosURLSearchParams.prototype;
	prototype.append = function append(name$2, value) {
		this._pairs.push([name$2, value]);
	};
	prototype.toString = function toString$4(encoder$2) {
		const _encode = encoder$2 ? function(value) {
			return encoder$2.call(this, value, encode$1);
		} : encode$1;
		return this._pairs.map(function each(pair) {
			return _encode(pair[0]) + "=" + _encode(pair[1]);
		}, "").join("&");
	};
	/**
	* It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
	* URI encoded counterparts
	*
	* @param {string} val The value to be encoded.
	*
	* @returns {string} The encoded value.
	*/
	function encode(val) {
		return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
	}
	/**
	* Build a URL by appending params to the end
	*
	* @param {string} url The base of the url (e.g., http://www.google.com)
	* @param {object} [params] The params to be appended
	* @param {?(object|Function)} options
	*
	* @returns {string} The formatted url
	*/
	function buildURL(url$3, params, options) {
		if (!params) return url$3;
		const _encode = options && options.encode || encode;
		if (utils$1.isFunction(options)) options = { serialize: options };
		const serializeFn = options && options.serialize;
		let serializedParams;
		if (serializeFn) serializedParams = serializeFn(params, options);
		else serializedParams = utils$1.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);
		if (serializedParams) {
			const hashmarkIndex = url$3.indexOf("#");
			if (hashmarkIndex !== -1) url$3 = url$3.slice(0, hashmarkIndex);
			url$3 += (url$3.indexOf("?") === -1 ? "?" : "&") + serializedParams;
		}
		return url$3;
	}
	var InterceptorManager = class {
		constructor() {
			this.handlers = [];
		}
		/**
		* Add a new interceptor to the stack
		*
		* @param {Function} fulfilled The function to handle `then` for a `Promise`
		* @param {Function} rejected The function to handle `reject` for a `Promise`
		*
		* @return {Number} An ID used to remove interceptor later
		*/
		use(fulfilled, rejected, options) {
			this.handlers.push({
				fulfilled,
				rejected,
				synchronous: options ? options.synchronous : false,
				runWhen: options ? options.runWhen : null
			});
			return this.handlers.length - 1;
		}
		/**
		* Remove an interceptor from the stack
		*
		* @param {Number} id The ID that was returned by `use`
		*
		* @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
		*/
		eject(id) {
			if (this.handlers[id]) this.handlers[id] = null;
		}
		/**
		* Clear all interceptors from the stack
		*
		* @returns {void}
		*/
		clear() {
			if (this.handlers) this.handlers = [];
		}
		/**
		* Iterate over all the registered interceptors
		*
		* This method is particularly useful for skipping over any
		* interceptors that may have become `null` calling `eject`.
		*
		* @param {Function} fn The function to call for each interceptor
		*
		* @returns {void}
		*/
		forEach(fn) {
			utils$1.forEach(this.handlers, function forEachHandler(h$1) {
				if (h$1 !== null) fn(h$1);
			});
		}
	};
	const InterceptorManager$1 = InterceptorManager;
	const transitionalDefaults = {
		silentJSONParsing: true,
		forcedJSONParsing: true,
		clarifyTimeoutError: false
	};
	const URLSearchParams$2 = url__default["default"].URLSearchParams;
	const ALPHA = "abcdefghijklmnopqrstuvwxyz";
	const DIGIT = "0123456789";
	const ALPHABET = {
		DIGIT,
		ALPHA,
		ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
	};
	const generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
		let str = "";
		const { length } = alphabet;
		const randomValues = new Uint32Array(size);
		crypto__default["default"].randomFillSync(randomValues);
		for (let i = 0; i < size; i++) str += alphabet[randomValues[i] % length];
		return str;
	};
	const platform$1 = {
		isNode: true,
		classes: {
			URLSearchParams: URLSearchParams$2,
			FormData: FormData__default["default"],
			Blob: typeof Blob !== "undefined" && Blob || null
		},
		ALPHABET,
		generateString,
		protocols: [
			"http",
			"https",
			"file",
			"data"
		]
	};
	const hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
	const _navigator = typeof navigator === "object" && navigator || void 0;
	/**
	* Determine if we're running in a standard browser environment
	*
	* This allows axios to run in a web worker, and react-native.
	* Both environments support XMLHttpRequest, but not fully standard globals.
	*
	* web workers:
	*  typeof window -> undefined
	*  typeof document -> undefined
	*
	* react-native:
	*  navigator.product -> 'ReactNative'
	* nativescript
	*  navigator.product -> 'NativeScript' or 'NS'
	*
	* @returns {boolean}
	*/
	const hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || [
		"ReactNative",
		"NativeScript",
		"NS"
	].indexOf(_navigator.product) < 0);
	/**
	* Determine if we're running in a standard browser webWorker environment
	*
	* Although the `isStandardBrowserEnv` method indicates that
	* `allows axios to run in a web worker`, the WebWorker will still be
	* filtered out due to its judgment standard
	* `typeof window !== 'undefined' && typeof document !== 'undefined'`.
	* This leads to a problem when axios post `FormData` in webWorker
	*/
	const hasStandardBrowserWebWorkerEnv = (() => {
		return typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
	})();
	const origin = hasBrowserEnv && window.location.href || "http://localhost";
	const utils = /* @__PURE__ */ Object.freeze({
		__proto__: null,
		hasBrowserEnv,
		hasStandardBrowserWebWorkerEnv,
		hasStandardBrowserEnv,
		navigator: _navigator,
		origin
	});
	const platform = {
		...utils,
		...platform$1
	};
	function toURLEncodedForm(data, options) {
		return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({ visitor: function(value, key$1, path$10, helpers) {
			if (platform.isNode && utils$1.isBuffer(value)) {
				this.append(key$1, value.toString("base64"));
				return false;
			}
			return helpers.defaultVisitor.apply(this, arguments);
		} }, options));
	}
	/**
	* It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
	*
	* @param {string} name - The name of the property to get.
	*
	* @returns An array of strings.
	*/
	function parsePropPath(name$2) {
		return utils$1.matchAll(/\w+|\[(\w*)]/g, name$2).map((match) => {
			return match[0] === "[]" ? "" : match[1] || match[0];
		});
	}
	/**
	* Convert an array to an object.
	*
	* @param {Array<any>} arr - The array to convert to an object.
	*
	* @returns An object with the same keys and values as the array.
	*/
	function arrayToObject(arr) {
		const obj = {};
		const keys$2 = Object.keys(arr);
		let i;
		const len = keys$2.length;
		let key$1;
		for (i = 0; i < len; i++) {
			key$1 = keys$2[i];
			obj[key$1] = arr[key$1];
		}
		return obj;
	}
	/**
	* It takes a FormData object and returns a JavaScript object
	*
	* @param {string} formData The FormData object to convert to JSON.
	*
	* @returns {Object<string, any> | null} The converted object.
	*/
	function formDataToJSON(formData) {
		function buildPath(path$10, value, target, index) {
			let name$2 = path$10[index++];
			if (name$2 === "__proto__") return true;
			const isNumericKey = Number.isFinite(+name$2);
			const isLast = index >= path$10.length;
			name$2 = !name$2 && utils$1.isArray(target) ? target.length : name$2;
			if (isLast) {
				if (utils$1.hasOwnProp(target, name$2)) target[name$2] = [target[name$2], value];
				else target[name$2] = value;
				return !isNumericKey;
			}
			if (!target[name$2] || !utils$1.isObject(target[name$2])) target[name$2] = [];
			const result = buildPath(path$10, value, target[name$2], index);
			if (result && utils$1.isArray(target[name$2])) target[name$2] = arrayToObject(target[name$2]);
			return !isNumericKey;
		}
		if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
			const obj = {};
			utils$1.forEachEntry(formData, (name$2, value) => {
				buildPath(parsePropPath(name$2), value, obj, 0);
			});
			return obj;
		}
		return null;
	}
	/**
	* It takes a string, tries to parse it, and if it fails, it returns the stringified version
	* of the input
	*
	* @param {any} rawValue - The value to be stringified.
	* @param {Function} parser - A function that parses a string into a JavaScript object.
	* @param {Function} encoder - A function that takes a value and returns a string.
	*
	* @returns {string} A stringified version of the rawValue.
	*/
	function stringifySafely(rawValue, parser, encoder$2) {
		if (utils$1.isString(rawValue)) try {
			(parser || JSON.parse)(rawValue);
			return utils$1.trim(rawValue);
		} catch (e) {
			if (e.name !== "SyntaxError") throw e;
		}
		return (encoder$2 || JSON.stringify)(rawValue);
	}
	const defaults = {
		transitional: transitionalDefaults,
		adapter: [
			"xhr",
			"http",
			"fetch"
		],
		transformRequest: [function transformRequest(data, headers) {
			const contentType$1 = headers.getContentType() || "";
			const hasJSONContentType = contentType$1.indexOf("application/json") > -1;
			const isObjectPayload = utils$1.isObject(data);
			if (isObjectPayload && utils$1.isHTMLForm(data)) data = new FormData(data);
			const isFormData$1 = utils$1.isFormData(data);
			if (isFormData$1) return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
			if (utils$1.isArrayBuffer(data) || utils$1.isBuffer(data) || utils$1.isStream(data) || utils$1.isFile(data) || utils$1.isBlob(data) || utils$1.isReadableStream(data)) return data;
			if (utils$1.isArrayBufferView(data)) return data.buffer;
			if (utils$1.isURLSearchParams(data)) {
				headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
				return data.toString();
			}
			let isFileList$1;
			if (isObjectPayload) {
				if (contentType$1.indexOf("application/x-www-form-urlencoded") > -1) return toURLEncodedForm(data, this.formSerializer).toString();
				if ((isFileList$1 = utils$1.isFileList(data)) || contentType$1.indexOf("multipart/form-data") > -1) {
					const _FormData = this.env && this.env.FormData;
					return toFormData(isFileList$1 ? { "files[]": data } : data, _FormData && new _FormData(), this.formSerializer);
				}
			}
			if (isObjectPayload || hasJSONContentType) {
				headers.setContentType("application/json", false);
				return stringifySafely(data);
			}
			return data;
		}],
		transformResponse: [function transformResponse(data) {
			const transitional = this.transitional || defaults.transitional;
			const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
			const JSONRequested = this.responseType === "json";
			if (utils$1.isResponse(data) || utils$1.isReadableStream(data)) return data;
			if (data && utils$1.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
				const silentJSONParsing = transitional && transitional.silentJSONParsing;
				const strictJSONParsing = !silentJSONParsing && JSONRequested;
				try {
					return JSON.parse(data);
				} catch (e) {
					if (strictJSONParsing) {
						if (e.name === "SyntaxError") throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
						throw e;
					}
				}
			}
			return data;
		}],
		timeout: 0,
		xsrfCookieName: "XSRF-TOKEN",
		xsrfHeaderName: "X-XSRF-TOKEN",
		maxContentLength: -1,
		maxBodyLength: -1,
		env: {
			FormData: platform.classes.FormData,
			Blob: platform.classes.Blob
		},
		validateStatus: function validateStatus(status) {
			return status >= 200 && status < 300;
		},
		headers: { common: {
			"Accept": "application/json, text/plain, */*",
			"Content-Type": void 0
		} }
	};
	utils$1.forEach([
		"delete",
		"get",
		"head",
		"post",
		"put",
		"patch"
	], (method$1) => {
		defaults.headers[method$1] = {};
	});
	const defaults$1 = defaults;
	const ignoreDuplicateOf = utils$1.toObjectSet([
		"age",
		"authorization",
		"content-length",
		"content-type",
		"etag",
		"expires",
		"from",
		"host",
		"if-modified-since",
		"if-unmodified-since",
		"last-modified",
		"location",
		"max-forwards",
		"proxy-authorization",
		"referer",
		"retry-after",
		"user-agent"
	]);
	/**
	* Parse headers into an object
	*
	* ```
	* Date: Wed, 27 Aug 2014 08:58:49 GMT
	* Content-Type: application/json
	* Connection: keep-alive
	* Transfer-Encoding: chunked
	* ```
	*
	* @param {String} rawHeaders Headers needing to be parsed
	*
	* @returns {Object} Headers parsed into an object
	*/
	const parseHeaders = (rawHeaders) => {
		const parsed = {};
		let key$1;
		let val;
		let i;
		rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
			i = line.indexOf(":");
			key$1 = line.substring(0, i).trim().toLowerCase();
			val = line.substring(i + 1).trim();
			if (!key$1 || parsed[key$1] && ignoreDuplicateOf[key$1]) return;
			if (key$1 === "set-cookie") if (parsed[key$1]) parsed[key$1].push(val);
			else parsed[key$1] = [val];
			else parsed[key$1] = parsed[key$1] ? parsed[key$1] + ", " + val : val;
		});
		return parsed;
	};
	const $internals = Symbol("internals");
	function normalizeHeader(header) {
		return header && String(header).trim().toLowerCase();
	}
	function normalizeValue(value) {
		if (value === false || value == null) return value;
		return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);
	}
	function parseTokens(str) {
		const tokens = Object.create(null);
		const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
		let match;
		while (match = tokensRE.exec(str)) tokens[match[1]] = match[2];
		return tokens;
	}
	const isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
	function matchHeaderValue(context, value, header, filter$1, isHeaderNameFilter) {
		if (utils$1.isFunction(filter$1)) return filter$1.call(this, value, header);
		if (isHeaderNameFilter) value = header;
		if (!utils$1.isString(value)) return;
		if (utils$1.isString(filter$1)) return value.indexOf(filter$1) !== -1;
		if (utils$1.isRegExp(filter$1)) return filter$1.test(value);
	}
	function formatHeader(header) {
		return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w$1, char, str) => {
			return char.toUpperCase() + str;
		});
	}
	function buildAccessors(obj, header) {
		const accessorName = utils$1.toCamelCase(" " + header);
		[
			"get",
			"set",
			"has"
		].forEach((methodName) => {
			Object.defineProperty(obj, methodName + accessorName, {
				value: function(arg1, arg2, arg3) {
					return this[methodName].call(this, header, arg1, arg2, arg3);
				},
				configurable: true
			});
		});
	}
	var AxiosHeaders = class {
		constructor(headers) {
			headers && this.set(headers);
		}
		set(header, valueOrRewrite, rewrite) {
			const self$1 = this;
			function setHeader(_value, _header, _rewrite) {
				const lHeader = normalizeHeader(_header);
				if (!lHeader) throw new Error("header name must be a non-empty string");
				const key$1 = utils$1.findKey(self$1, lHeader);
				if (!key$1 || self$1[key$1] === void 0 || _rewrite === true || _rewrite === void 0 && self$1[key$1] !== false) self$1[key$1 || _header] = normalizeValue(_value);
			}
			const setHeaders = (headers, _rewrite) => utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
			if (utils$1.isPlainObject(header) || header instanceof this.constructor) setHeaders(header, valueOrRewrite);
			else if (utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) setHeaders(parseHeaders(header), valueOrRewrite);
			else if (utils$1.isObject(header) && utils$1.isIterable(header)) {
				let obj = {}, dest, key$1;
				for (const entry of header) {
					if (!utils$1.isArray(entry)) throw TypeError("Object iterator must return a key-value pair");
					obj[key$1 = entry[0]] = (dest = obj[key$1]) ? utils$1.isArray(dest) ? [...dest, entry[1]] : [dest, entry[1]] : entry[1];
				}
				setHeaders(obj, valueOrRewrite);
			} else header != null && setHeader(valueOrRewrite, header, rewrite);
			return this;
		}
		get(header, parser) {
			header = normalizeHeader(header);
			if (header) {
				const key$1 = utils$1.findKey(this, header);
				if (key$1) {
					const value = this[key$1];
					if (!parser) return value;
					if (parser === true) return parseTokens(value);
					if (utils$1.isFunction(parser)) return parser.call(this, value, key$1);
					if (utils$1.isRegExp(parser)) return parser.exec(value);
					throw new TypeError("parser must be boolean|regexp|function");
				}
			}
		}
		has(header, matcher) {
			header = normalizeHeader(header);
			if (header) {
				const key$1 = utils$1.findKey(this, header);
				return !!(key$1 && this[key$1] !== void 0 && (!matcher || matchHeaderValue(this, this[key$1], key$1, matcher)));
			}
			return false;
		}
		delete(header, matcher) {
			const self$1 = this;
			let deleted = false;
			function deleteHeader(_header) {
				_header = normalizeHeader(_header);
				if (_header) {
					const key$1 = utils$1.findKey(self$1, _header);
					if (key$1 && (!matcher || matchHeaderValue(self$1, self$1[key$1], key$1, matcher))) {
						delete self$1[key$1];
						deleted = true;
					}
				}
			}
			if (utils$1.isArray(header)) header.forEach(deleteHeader);
			else deleteHeader(header);
			return deleted;
		}
		clear(matcher) {
			const keys$2 = Object.keys(this);
			let i = keys$2.length;
			let deleted = false;
			while (i--) {
				const key$1 = keys$2[i];
				if (!matcher || matchHeaderValue(this, this[key$1], key$1, matcher, true)) {
					delete this[key$1];
					deleted = true;
				}
			}
			return deleted;
		}
		normalize(format$14) {
			const self$1 = this;
			const headers = {};
			utils$1.forEach(this, (value, header) => {
				const key$1 = utils$1.findKey(headers, header);
				if (key$1) {
					self$1[key$1] = normalizeValue(value);
					delete self$1[header];
					return;
				}
				const normalized = format$14 ? formatHeader(header) : String(header).trim();
				if (normalized !== header) delete self$1[header];
				self$1[normalized] = normalizeValue(value);
				headers[normalized] = true;
			});
			return this;
		}
		concat(...targets) {
			return this.constructor.concat(this, ...targets);
		}
		toJSON(asStrings) {
			const obj = Object.create(null);
			utils$1.forEach(this, (value, header) => {
				value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(", ") : value);
			});
			return obj;
		}
		[Symbol.iterator]() {
			return Object.entries(this.toJSON())[Symbol.iterator]();
		}
		toString() {
			return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
		}
		getSetCookie() {
			return this.get("set-cookie") || [];
		}
		get [Symbol.toStringTag]() {
			return "AxiosHeaders";
		}
		static from(thing) {
			return thing instanceof this ? thing : new this(thing);
		}
		static concat(first$1, ...targets) {
			const computed = new this(first$1);
			targets.forEach((target) => computed.set(target));
			return computed;
		}
		static accessor(header) {
			const internals = this[$internals] = this[$internals] = { accessors: {} };
			const accessors = internals.accessors;
			const prototype$2 = this.prototype;
			function defineAccessor(_header) {
				const lHeader = normalizeHeader(_header);
				if (!accessors[lHeader]) {
					buildAccessors(prototype$2, _header);
					accessors[lHeader] = true;
				}
			}
			utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
			return this;
		}
	};
	AxiosHeaders.accessor([
		"Content-Type",
		"Content-Length",
		"Accept",
		"Accept-Encoding",
		"User-Agent",
		"Authorization"
	]);
	utils$1.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key$1) => {
		let mapped = key$1[0].toUpperCase() + key$1.slice(1);
		return {
			get: () => value,
			set(headerValue) {
				this[mapped] = headerValue;
			}
		};
	});
	utils$1.freezeMethods(AxiosHeaders);
	const AxiosHeaders$1 = AxiosHeaders;
	/**
	* Transform the data for a request or a response
	*
	* @param {Array|Function} fns A single function or Array of functions
	* @param {?Object} response The response object
	*
	* @returns {*} The resulting transformed data
	*/
	function transformData(fns, response) {
		const config$2 = this || defaults$1;
		const context = response || config$2;
		const headers = AxiosHeaders$1.from(context.headers);
		let data = context.data;
		utils$1.forEach(fns, function transform$1(fn) {
			data = fn.call(config$2, data, headers.normalize(), response ? response.status : void 0);
		});
		headers.normalize();
		return data;
	}
	function isCancel(value) {
		return !!(value && value.__CANCEL__);
	}
	/**
	* A `CanceledError` is an object that is thrown when an operation is canceled.
	*
	* @param {string=} message The message.
	* @param {Object=} config The config.
	* @param {Object=} request The request.
	*
	* @returns {CanceledError} The created error.
	*/
	function CanceledError(message, config$2, request$1) {
		AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED, config$2, request$1);
		this.name = "CanceledError";
	}
	utils$1.inherits(CanceledError, AxiosError, { __CANCEL__: true });
	/**
	* Resolve or reject a Promise based on response status.
	*
	* @param {Function} resolve A function that resolves the promise.
	* @param {Function} reject A function that rejects the promise.
	* @param {object} response The response.
	*
	* @returns {object} The response.
	*/
	function settle(resolve, reject, response) {
		const validateStatus = response.config.validateStatus;
		if (!response.status || !validateStatus || validateStatus(response.status)) resolve(response);
		else reject(new AxiosError("Request failed with status code " + response.status, [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4], response.config, response.request, response));
	}
	/**
	* Determines whether the specified URL is absolute
	*
	* @param {string} url The URL to test
	*
	* @returns {boolean} True if the specified URL is absolute, otherwise false
	*/
	function isAbsoluteURL(url$3) {
		return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url$3);
	}
	/**
	* Creates a new URL by combining the specified URLs
	*
	* @param {string} baseURL The base URL
	* @param {string} relativeURL The relative URL
	*
	* @returns {string} The combined URL
	*/
	function combineURLs(baseURL, relativeURL) {
		return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
	}
	/**
	* Creates a new URL by combining the baseURL with the requestedURL,
	* only when the requestedURL is not already an absolute URL.
	* If the requestURL is absolute, this function returns the requestedURL untouched.
	*
	* @param {string} baseURL The base URL
	* @param {string} requestedURL Absolute or relative URL to combine
	*
	* @returns {string} The combined full path
	*/
	function buildFullPath(baseURL, requestedURL, allowAbsoluteUrls) {
		let isRelativeUrl = !isAbsoluteURL(requestedURL);
		if (baseURL && (isRelativeUrl || allowAbsoluteUrls == false)) return combineURLs(baseURL, requestedURL);
		return requestedURL;
	}
	const VERSION = "1.9.0";
	function parseProtocol(url$3) {
		const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url$3);
		return match && match[1] || "";
	}
	const DATA_URL_PATTERN = /^(?:([^;]+);)?(?:[^;]+;)?(base64|),([\s\S]*)$/;
	/**
	* Parse data uri to a Buffer or Blob
	*
	* @param {String} uri
	* @param {?Boolean} asBlob
	* @param {?Object} options
	* @param {?Function} options.Blob
	*
	* @returns {Buffer|Blob}
	*/
	function fromDataURI(uri, asBlob, options) {
		const _Blob = options && options.Blob || platform.classes.Blob;
		const protocol = parseProtocol(uri);
		if (asBlob === void 0 && _Blob) asBlob = true;
		if (protocol === "data") {
			uri = protocol.length ? uri.slice(protocol.length + 1) : uri;
			const match = DATA_URL_PATTERN.exec(uri);
			if (!match) throw new AxiosError("Invalid URL", AxiosError.ERR_INVALID_URL);
			const mime$1 = match[1];
			const isBase64 = match[2];
			const body = match[3];
			const buffer$1 = Buffer.from(decodeURIComponent(body), isBase64 ? "base64" : "utf8");
			if (asBlob) {
				if (!_Blob) throw new AxiosError("Blob is not supported", AxiosError.ERR_NOT_SUPPORT);
				return new _Blob([buffer$1], { type: mime$1 });
			}
			return buffer$1;
		}
		throw new AxiosError("Unsupported protocol " + protocol, AxiosError.ERR_NOT_SUPPORT);
	}
	const kInternals = Symbol("internals");
	var AxiosTransformStream = class extends stream__default["default"].Transform {
		constructor(options) {
			options = utils$1.toFlatObject(options, {
				maxRate: 0,
				chunkSize: 64 * 1024,
				minChunkSize: 100,
				timeWindow: 500,
				ticksRate: 2,
				samplesCount: 15
			}, null, (prop, source) => {
				return !utils$1.isUndefined(source[prop]);
			});
			super({ readableHighWaterMark: options.chunkSize });
			const internals = this[kInternals] = {
				timeWindow: options.timeWindow,
				chunkSize: options.chunkSize,
				maxRate: options.maxRate,
				minChunkSize: options.minChunkSize,
				bytesSeen: 0,
				isCaptured: false,
				notifiedBytesLoaded: 0,
				ts: Date.now(),
				bytes: 0,
				onReadCallback: null
			};
			this.on("newListener", (event) => {
				if (event === "progress") {
					if (!internals.isCaptured) internals.isCaptured = true;
				}
			});
		}
		_read(size) {
			const internals = this[kInternals];
			if (internals.onReadCallback) internals.onReadCallback();
			return super._read(size);
		}
		_transform(chunk, encoding, callback) {
			const internals = this[kInternals];
			const maxRate = internals.maxRate;
			const readableHighWaterMark = this.readableHighWaterMark;
			const timeWindow = internals.timeWindow;
			const divider = 1e3 / timeWindow;
			const bytesThreshold = maxRate / divider;
			const minChunkSize = internals.minChunkSize !== false ? Math.max(internals.minChunkSize, bytesThreshold * .01) : 0;
			const pushChunk = (_chunk, _callback) => {
				const bytes = Buffer.byteLength(_chunk);
				internals.bytesSeen += bytes;
				internals.bytes += bytes;
				internals.isCaptured && this.emit("progress", internals.bytesSeen);
				if (this.push(_chunk)) process.nextTick(_callback);
				else internals.onReadCallback = () => {
					internals.onReadCallback = null;
					process.nextTick(_callback);
				};
			};
			const transformChunk = (_chunk, _callback) => {
				const chunkSize = Buffer.byteLength(_chunk);
				let chunkRemainder = null;
				let maxChunkSize = readableHighWaterMark;
				let bytesLeft;
				let passed = 0;
				if (maxRate) {
					const now = Date.now();
					if (!internals.ts || (passed = now - internals.ts) >= timeWindow) {
						internals.ts = now;
						bytesLeft = bytesThreshold - internals.bytes;
						internals.bytes = bytesLeft < 0 ? -bytesLeft : 0;
						passed = 0;
					}
					bytesLeft = bytesThreshold - internals.bytes;
				}
				if (maxRate) {
					if (bytesLeft <= 0) return setTimeout(() => {
						_callback(null, _chunk);
					}, timeWindow - passed);
					if (bytesLeft < maxChunkSize) maxChunkSize = bytesLeft;
				}
				if (maxChunkSize && chunkSize > maxChunkSize && chunkSize - maxChunkSize > minChunkSize) {
					chunkRemainder = _chunk.subarray(maxChunkSize);
					_chunk = _chunk.subarray(0, maxChunkSize);
				}
				pushChunk(_chunk, chunkRemainder ? () => {
					process.nextTick(_callback, null, chunkRemainder);
				} : _callback);
			};
			transformChunk(chunk, function transformNextChunk(err, _chunk) {
				if (err) return callback(err);
				if (_chunk) transformChunk(_chunk, transformNextChunk);
				else callback(null);
			});
		}
	};
	const AxiosTransformStream$1 = AxiosTransformStream;
	const { asyncIterator } = Symbol;
	const readBlob = async function* (blob) {
		if (blob.stream) yield* blob.stream();
		else if (blob.arrayBuffer) yield await blob.arrayBuffer();
		else if (blob[asyncIterator]) yield* blob[asyncIterator]();
		else yield blob;
	};
	const readBlob$1 = readBlob;
	const BOUNDARY_ALPHABET = platform.ALPHABET.ALPHA_DIGIT + "-_";
	const textEncoder = typeof TextEncoder === "function" ? new TextEncoder() : new util__default["default"].TextEncoder();
	const CRLF = "\r\n";
	const CRLF_BYTES = textEncoder.encode(CRLF);
	const CRLF_BYTES_COUNT = 2;
	var FormDataPart = class {
		constructor(name$2, value) {
			const { escapeName } = this.constructor;
			const isStringValue = utils$1.isString(value);
			let headers = `Content-Disposition: form-data; name="${escapeName(name$2)}"${!isStringValue && value.name ? `; filename="${escapeName(value.name)}"` : ""}${CRLF}`;
			if (isStringValue) value = textEncoder.encode(String(value).replace(/\r?\n|\r\n?/g, CRLF));
			else headers += `Content-Type: ${value.type || "application/octet-stream"}${CRLF}`;
			this.headers = textEncoder.encode(headers + CRLF);
			this.contentLength = isStringValue ? value.byteLength : value.size;
			this.size = this.headers.byteLength + this.contentLength + CRLF_BYTES_COUNT;
			this.name = name$2;
			this.value = value;
		}
		async *encode() {
			yield this.headers;
			const { value } = this;
			if (utils$1.isTypedArray(value)) yield value;
			else yield* readBlob$1(value);
			yield CRLF_BYTES;
		}
		static escapeName(name$2) {
			return String(name$2).replace(/[\r\n"]/g, (match) => ({
				"\r": "%0D",
				"\n": "%0A",
				"\"": "%22"
			})[match]);
		}
	};
	const formDataToStream = (form, headersHandler, options) => {
		const { tag = "form-data-boundary", size = 25, boundary = tag + "-" + platform.generateString(size, BOUNDARY_ALPHABET) } = options || {};
		if (!utils$1.isFormData(form)) throw TypeError("FormData instance required");
		if (boundary.length < 1 || boundary.length > 70) throw Error("boundary must be 10-70 characters long");
		const boundaryBytes = textEncoder.encode("--" + boundary + CRLF);
		const footerBytes = textEncoder.encode("--" + boundary + "--" + CRLF);
		let contentLength = footerBytes.byteLength;
		const parts = Array.from(form.entries()).map(([name$2, value]) => {
			const part = new FormDataPart(name$2, value);
			contentLength += part.size;
			return part;
		});
		contentLength += boundaryBytes.byteLength * parts.length;
		contentLength = utils$1.toFiniteNumber(contentLength);
		const computedHeaders = { "Content-Type": `multipart/form-data; boundary=${boundary}` };
		if (Number.isFinite(contentLength)) computedHeaders["Content-Length"] = contentLength;
		headersHandler && headersHandler(computedHeaders);
		return stream.Readable.from(async function* () {
			for (const part of parts) {
				yield boundaryBytes;
				yield* part.encode();
			}
			yield footerBytes;
		}());
	};
	const formDataToStream$1 = formDataToStream;
	var ZlibHeaderTransformStream = class extends stream__default["default"].Transform {
		__transform(chunk, encoding, callback) {
			this.push(chunk);
			callback();
		}
		_transform(chunk, encoding, callback) {
			if (chunk.length !== 0) {
				this._transform = this.__transform;
				if (chunk[0] !== 120) {
					const header = Buffer.alloc(2);
					header[0] = 120;
					header[1] = 156;
					this.push(header, encoding);
				}
			}
			this.__transform(chunk, encoding, callback);
		}
	};
	const ZlibHeaderTransformStream$1 = ZlibHeaderTransformStream;
	const callbackify = (fn, reducer) => {
		return utils$1.isAsyncFn(fn) ? function(...args) {
			const cb = args.pop();
			fn.apply(this, args).then((value) => {
				try {
					reducer ? cb(null, ...reducer(value)) : cb(null, value);
				} catch (err) {
					cb(err);
				}
			}, cb);
		} : fn;
	};
	const callbackify$1 = callbackify;
	/**
	* Calculate data maxRate
	* @param {Number} [samplesCount= 10]
	* @param {Number} [min= 1000]
	* @returns {Function}
	*/
	function speedometer(samplesCount, min$1) {
		samplesCount = samplesCount || 10;
		const bytes = new Array(samplesCount);
		const timestamps = new Array(samplesCount);
		let head = 0;
		let tail = 0;
		let firstSampleTS;
		min$1 = min$1 !== void 0 ? min$1 : 1e3;
		return function push(chunkLength) {
			const now = Date.now();
			const startedAt = timestamps[tail];
			if (!firstSampleTS) firstSampleTS = now;
			bytes[head] = chunkLength;
			timestamps[head] = now;
			let i = tail;
			let bytesCount = 0;
			while (i !== head) {
				bytesCount += bytes[i++];
				i = i % samplesCount;
			}
			head = (head + 1) % samplesCount;
			if (head === tail) tail = (tail + 1) % samplesCount;
			if (now - firstSampleTS < min$1) return;
			const passed = startedAt && now - startedAt;
			return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
		};
	}
	/**
	* Throttle decorator
	* @param {Function} fn
	* @param {Number} freq
	* @return {Function}
	*/
	function throttle(fn, freq) {
		let timestamp$2 = 0;
		let threshold = 1e3 / freq;
		let lastArgs;
		let timer;
		const invoke = (args, now = Date.now()) => {
			timestamp$2 = now;
			lastArgs = null;
			if (timer) {
				clearTimeout(timer);
				timer = null;
			}
			fn.apply(null, args);
		};
		const throttled = (...args) => {
			const now = Date.now();
			const passed = now - timestamp$2;
			if (passed >= threshold) invoke(args, now);
			else {
				lastArgs = args;
				if (!timer) timer = setTimeout(() => {
					timer = null;
					invoke(lastArgs);
				}, threshold - passed);
			}
		};
		const flush = () => lastArgs && invoke(lastArgs);
		return [throttled, flush];
	}
	const progressEventReducer = (listener, isDownloadStream, freq = 3) => {
		let bytesNotified = 0;
		const _speedometer = speedometer(50, 250);
		return throttle((e) => {
			const loaded = e.loaded;
			const total = e.lengthComputable ? e.total : void 0;
			const progressBytes = loaded - bytesNotified;
			const rate = _speedometer(progressBytes);
			const inRange = loaded <= total;
			bytesNotified = loaded;
			const data = {
				loaded,
				total,
				progress: total ? loaded / total : void 0,
				bytes: progressBytes,
				rate: rate ? rate : void 0,
				estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
				event: e,
				lengthComputable: total != null,
				[isDownloadStream ? "download" : "upload"]: true
			};
			listener(data);
		}, freq);
	};
	const progressEventDecorator = (total, throttled) => {
		const lengthComputable = total != null;
		return [(loaded) => throttled[0]({
			lengthComputable,
			total,
			loaded
		}), throttled[1]];
	};
	const asyncDecorator = (fn) => (...args) => utils$1.asap(() => fn(...args));
	const zlibOptions = {
		flush: zlib__default["default"].constants.Z_SYNC_FLUSH,
		finishFlush: zlib__default["default"].constants.Z_SYNC_FLUSH
	};
	const brotliOptions = {
		flush: zlib__default["default"].constants.BROTLI_OPERATION_FLUSH,
		finishFlush: zlib__default["default"].constants.BROTLI_OPERATION_FLUSH
	};
	const isBrotliSupported = utils$1.isFunction(zlib__default["default"].createBrotliDecompress);
	const { http: httpFollow, https: httpsFollow } = followRedirects__default["default"];
	const isHttps = /https:?/;
	const supportedProtocols = platform.protocols.map((protocol) => {
		return protocol + ":";
	});
	const flushOnFinish = (stream$3, [throttled, flush]) => {
		stream$3.on("end", flush).on("error", flush);
		return throttled;
	};
	/**
	* If the proxy or config beforeRedirects functions are defined, call them with the options
	* object.
	*
	* @param {Object<string, any>} options - The options object that was passed to the request.
	*
	* @returns {Object<string, any>}
	*/
	function dispatchBeforeRedirect(options, responseDetails) {
		if (options.beforeRedirects.proxy) options.beforeRedirects.proxy(options);
		if (options.beforeRedirects.config) options.beforeRedirects.config(options, responseDetails);
	}
	/**
	* If the proxy or config afterRedirects functions are defined, call them with the options
	*
	* @param {http.ClientRequestArgs} options
	* @param {AxiosProxyConfig} configProxy configuration from Axios options object
	* @param {string} location
	*
	* @returns {http.ClientRequestArgs}
	*/
	function setProxy(options, configProxy, location) {
		let proxy = configProxy;
		if (!proxy && proxy !== false) {
			const proxyUrl = proxyFromEnv__default["default"].getProxyForUrl(location);
			if (proxyUrl) proxy = new URL(proxyUrl);
		}
		if (proxy) {
			if (proxy.username) proxy.auth = (proxy.username || "") + ":" + (proxy.password || "");
			if (proxy.auth) {
				if (proxy.auth.username || proxy.auth.password) proxy.auth = (proxy.auth.username || "") + ":" + (proxy.auth.password || "");
				const base64 = Buffer.from(proxy.auth, "utf8").toString("base64");
				options.headers["Proxy-Authorization"] = "Basic " + base64;
			}
			options.headers.host = options.hostname + (options.port ? ":" + options.port : "");
			const proxyHost = proxy.hostname || proxy.host;
			options.hostname = proxyHost;
			options.host = proxyHost;
			options.port = proxy.port;
			options.path = location;
			if (proxy.protocol) options.protocol = proxy.protocol.includes(":") ? proxy.protocol : `${proxy.protocol}:`;
		}
		options.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {
			setProxy(redirectOptions, configProxy, redirectOptions.href);
		};
	}
	const isHttpAdapterSupported = typeof process !== "undefined" && utils$1.kindOf(process) === "process";
	const wrapAsync = (asyncExecutor) => {
		return new Promise((resolve, reject) => {
			let onDone;
			let isDone;
			const done$1 = (value, isRejected) => {
				if (isDone) return;
				isDone = true;
				onDone && onDone(value, isRejected);
			};
			const _resolve = (value) => {
				done$1(value);
				resolve(value);
			};
			const _reject = (reason) => {
				done$1(reason, true);
				reject(reason);
			};
			asyncExecutor(_resolve, _reject, (onDoneHandler) => onDone = onDoneHandler).catch(_reject);
		});
	};
	const resolveFamily = ({ address, family }) => {
		if (!utils$1.isString(address)) throw TypeError("address must be a string");
		return {
			address,
			family: family || (address.indexOf(".") < 0 ? 6 : 4)
		};
	};
	const buildAddressEntry = (address, family) => resolveFamily(utils$1.isObject(address) ? address : {
		address,
		family
	});
	const httpAdapter = isHttpAdapterSupported && function httpAdapter$1(config$2) {
		return wrapAsync(async function dispatchHttpRequest(resolve, reject, onDone) {
			let { data, lookup: lookup$1, family } = config$2;
			const { responseType, responseEncoding } = config$2;
			const method$1 = config$2.method.toUpperCase();
			let isDone;
			let rejected = false;
			let req;
			if (lookup$1) {
				const _lookup = callbackify$1(lookup$1, (value) => utils$1.isArray(value) ? value : [value]);
				lookup$1 = (hostname, opt, cb) => {
					_lookup(hostname, opt, (err, arg0, arg1) => {
						if (err) return cb(err);
						const addresses = utils$1.isArray(arg0) ? arg0.map((addr) => buildAddressEntry(addr)) : [buildAddressEntry(arg0, arg1)];
						opt.all ? cb(err, addresses) : cb(err, addresses[0].address, addresses[0].family);
					});
				};
			}
			const emitter = new events.EventEmitter();
			const onFinished = () => {
				if (config$2.cancelToken) config$2.cancelToken.unsubscribe(abort$4);
				if (config$2.signal) config$2.signal.removeEventListener("abort", abort$4);
				emitter.removeAllListeners();
			};
			onDone((value, isRejected) => {
				isDone = true;
				if (isRejected) {
					rejected = true;
					onFinished();
				}
			});
			function abort$4(reason) {
				emitter.emit("abort", !reason || reason.type ? new CanceledError(null, config$2, req) : reason);
			}
			emitter.once("abort", reject);
			if (config$2.cancelToken || config$2.signal) {
				config$2.cancelToken && config$2.cancelToken.subscribe(abort$4);
				if (config$2.signal) config$2.signal.aborted ? abort$4() : config$2.signal.addEventListener("abort", abort$4);
			}
			const fullPath = buildFullPath(config$2.baseURL, config$2.url, config$2.allowAbsoluteUrls);
			const parsed = new URL(fullPath, platform.hasBrowserEnv ? platform.origin : void 0);
			const protocol = parsed.protocol || supportedProtocols[0];
			if (protocol === "data:") {
				let convertedData;
				if (method$1 !== "GET") return settle(resolve, reject, {
					status: 405,
					statusText: "method not allowed",
					headers: {},
					config: config$2
				});
				try {
					convertedData = fromDataURI(config$2.url, responseType === "blob", { Blob: config$2.env && config$2.env.Blob });
				} catch (err) {
					throw AxiosError.from(err, AxiosError.ERR_BAD_REQUEST, config$2);
				}
				if (responseType === "text") {
					convertedData = convertedData.toString(responseEncoding);
					if (!responseEncoding || responseEncoding === "utf8") convertedData = utils$1.stripBOM(convertedData);
				} else if (responseType === "stream") convertedData = stream__default["default"].Readable.from(convertedData);
				return settle(resolve, reject, {
					data: convertedData,
					status: 200,
					statusText: "OK",
					headers: new AxiosHeaders$1(),
					config: config$2
				});
			}
			if (supportedProtocols.indexOf(protocol) === -1) return reject(new AxiosError("Unsupported protocol " + protocol, AxiosError.ERR_BAD_REQUEST, config$2));
			const headers = AxiosHeaders$1.from(config$2.headers).normalize();
			headers.set("User-Agent", "axios/" + VERSION, false);
			const { onUploadProgress, onDownloadProgress } = config$2;
			const maxRate = config$2.maxRate;
			let maxUploadRate = void 0;
			let maxDownloadRate = void 0;
			if (utils$1.isSpecCompliantForm(data)) {
				const userBoundary = headers.getContentType(/boundary=([-_\w\d]{10,70})/i);
				data = formDataToStream$1(data, (formHeaders) => {
					headers.set(formHeaders);
				}, {
					tag: `axios-${VERSION}-boundary`,
					boundary: userBoundary && userBoundary[1] || void 0
				});
			} else if (utils$1.isFormData(data) && utils$1.isFunction(data.getHeaders)) {
				headers.set(data.getHeaders());
				if (!headers.hasContentLength()) try {
					const knownLength = await util__default["default"].promisify(data.getLength).call(data);
					Number.isFinite(knownLength) && knownLength >= 0 && headers.setContentLength(knownLength);
				} catch (e) {}
			} else if (utils$1.isBlob(data) || utils$1.isFile(data)) {
				data.size && headers.setContentType(data.type || "application/octet-stream");
				headers.setContentLength(data.size || 0);
				data = stream__default["default"].Readable.from(readBlob$1(data));
			} else if (data && !utils$1.isStream(data)) {
				if (Buffer.isBuffer(data));
				else if (utils$1.isArrayBuffer(data)) data = Buffer.from(new Uint8Array(data));
				else if (utils$1.isString(data)) data = Buffer.from(data, "utf-8");
				else return reject(new AxiosError("Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream", AxiosError.ERR_BAD_REQUEST, config$2));
				headers.setContentLength(data.length, false);
				if (config$2.maxBodyLength > -1 && data.length > config$2.maxBodyLength) return reject(new AxiosError("Request body larger than maxBodyLength limit", AxiosError.ERR_BAD_REQUEST, config$2));
			}
			const contentLength = utils$1.toFiniteNumber(headers.getContentLength());
			if (utils$1.isArray(maxRate)) {
				maxUploadRate = maxRate[0];
				maxDownloadRate = maxRate[1];
			} else maxUploadRate = maxDownloadRate = maxRate;
			if (data && (onUploadProgress || maxUploadRate)) {
				if (!utils$1.isStream(data)) data = stream__default["default"].Readable.from(data, { objectMode: false });
				data = stream__default["default"].pipeline([data, new AxiosTransformStream$1({ maxRate: utils$1.toFiniteNumber(maxUploadRate) })], utils$1.noop);
				onUploadProgress && data.on("progress", flushOnFinish(data, progressEventDecorator(contentLength, progressEventReducer(asyncDecorator(onUploadProgress), false, 3))));
			}
			let auth = void 0;
			if (config$2.auth) {
				const username = config$2.auth.username || "";
				const password = config$2.auth.password || "";
				auth = username + ":" + password;
			}
			if (!auth && parsed.username) {
				const urlUsername = parsed.username;
				const urlPassword = parsed.password;
				auth = urlUsername + ":" + urlPassword;
			}
			auth && headers.delete("authorization");
			let path$10;
			try {
				path$10 = buildURL(parsed.pathname + parsed.search, config$2.params, config$2.paramsSerializer).replace(/^\?/, "");
			} catch (err) {
				const customErr = new Error(err.message);
				customErr.config = config$2;
				customErr.url = config$2.url;
				customErr.exists = true;
				return reject(customErr);
			}
			headers.set("Accept-Encoding", "gzip, compress, deflate" + (isBrotliSupported ? ", br" : ""), false);
			const options = {
				path: path$10,
				method: method$1,
				headers: headers.toJSON(),
				agents: {
					http: config$2.httpAgent,
					https: config$2.httpsAgent
				},
				auth,
				protocol,
				family,
				beforeRedirect: dispatchBeforeRedirect,
				beforeRedirects: {}
			};
			!utils$1.isUndefined(lookup$1) && (options.lookup = lookup$1);
			if (config$2.socketPath) options.socketPath = config$2.socketPath;
			else {
				options.hostname = parsed.hostname.startsWith("[") ? parsed.hostname.slice(1, -1) : parsed.hostname;
				options.port = parsed.port;
				setProxy(options, config$2.proxy, protocol + "//" + parsed.hostname + (parsed.port ? ":" + parsed.port : "") + options.path);
			}
			let transport;
			const isHttpsRequest = isHttps.test(options.protocol);
			options.agent = isHttpsRequest ? config$2.httpsAgent : config$2.httpAgent;
			if (config$2.transport) transport = config$2.transport;
			else if (config$2.maxRedirects === 0) transport = isHttpsRequest ? https__default["default"] : http__default["default"];
			else {
				if (config$2.maxRedirects) options.maxRedirects = config$2.maxRedirects;
				if (config$2.beforeRedirect) options.beforeRedirects.config = config$2.beforeRedirect;
				transport = isHttpsRequest ? httpsFollow : httpFollow;
			}
			if (config$2.maxBodyLength > -1) options.maxBodyLength = config$2.maxBodyLength;
			else options.maxBodyLength = Infinity;
			if (config$2.insecureHTTPParser) options.insecureHTTPParser = config$2.insecureHTTPParser;
			req = transport.request(options, function handleResponse(res) {
				if (req.destroyed) return;
				const streams = [res];
				const responseLength = +res.headers["content-length"];
				if (onDownloadProgress || maxDownloadRate) {
					const transformStream = new AxiosTransformStream$1({ maxRate: utils$1.toFiniteNumber(maxDownloadRate) });
					onDownloadProgress && transformStream.on("progress", flushOnFinish(transformStream, progressEventDecorator(responseLength, progressEventReducer(asyncDecorator(onDownloadProgress), true, 3))));
					streams.push(transformStream);
				}
				let responseStream = res;
				const lastRequest = res.req || req;
				if (config$2.decompress !== false && res.headers["content-encoding"]) {
					if (method$1 === "HEAD" || res.statusCode === 204) delete res.headers["content-encoding"];
					switch ((res.headers["content-encoding"] || "").toLowerCase()) {
						case "gzip":
						case "x-gzip":
						case "compress":
						case "x-compress":
							streams.push(zlib__default["default"].createUnzip(zlibOptions));
							delete res.headers["content-encoding"];
							break;
						case "deflate":
							streams.push(new ZlibHeaderTransformStream$1());
							streams.push(zlib__default["default"].createUnzip(zlibOptions));
							delete res.headers["content-encoding"];
							break;
						case "br": if (isBrotliSupported) {
							streams.push(zlib__default["default"].createBrotliDecompress(brotliOptions));
							delete res.headers["content-encoding"];
						}
					}
				}
				responseStream = streams.length > 1 ? stream__default["default"].pipeline(streams, utils$1.noop) : streams[0];
				const offListeners = stream__default["default"].finished(responseStream, () => {
					offListeners();
					onFinished();
				});
				const response = {
					status: res.statusCode,
					statusText: res.statusMessage,
					headers: new AxiosHeaders$1(res.headers),
					config: config$2,
					request: lastRequest
				};
				if (responseType === "stream") {
					response.data = responseStream;
					settle(resolve, reject, response);
				} else {
					const responseBuffer = [];
					let totalResponseBytes = 0;
					responseStream.on("data", function handleStreamData(chunk) {
						responseBuffer.push(chunk);
						totalResponseBytes += chunk.length;
						if (config$2.maxContentLength > -1 && totalResponseBytes > config$2.maxContentLength) {
							rejected = true;
							responseStream.destroy();
							reject(new AxiosError("maxContentLength size of " + config$2.maxContentLength + " exceeded", AxiosError.ERR_BAD_RESPONSE, config$2, lastRequest));
						}
					});
					responseStream.on("aborted", function handlerStreamAborted() {
						if (rejected) return;
						const err = new AxiosError("stream has been aborted", AxiosError.ERR_BAD_RESPONSE, config$2, lastRequest);
						responseStream.destroy(err);
						reject(err);
					});
					responseStream.on("error", function handleStreamError(err) {
						if (req.destroyed) return;
						reject(AxiosError.from(err, null, config$2, lastRequest));
					});
					responseStream.on("end", function handleStreamEnd() {
						try {
							let responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);
							if (responseType !== "arraybuffer") {
								responseData = responseData.toString(responseEncoding);
								if (!responseEncoding || responseEncoding === "utf8") responseData = utils$1.stripBOM(responseData);
							}
							response.data = responseData;
						} catch (err) {
							return reject(AxiosError.from(err, null, config$2, response.request, response));
						}
						settle(resolve, reject, response);
					});
				}
				emitter.once("abort", (err) => {
					if (!responseStream.destroyed) {
						responseStream.emit("error", err);
						responseStream.destroy();
					}
				});
			});
			emitter.once("abort", (err) => {
				reject(err);
				req.destroy(err);
			});
			req.on("error", function handleRequestError(err) {
				reject(AxiosError.from(err, null, config$2, req));
			});
			req.on("socket", function handleRequestSocket(socket) {
				socket.setKeepAlive(true, 1e3 * 60);
			});
			if (config$2.timeout) {
				const timeout$1 = parseInt(config$2.timeout, 10);
				if (Number.isNaN(timeout$1)) {
					reject(new AxiosError("error trying to parse `config.timeout` to int", AxiosError.ERR_BAD_OPTION_VALUE, config$2, req));
					return;
				}
				req.setTimeout(timeout$1, function handleRequestTimeout() {
					if (isDone) return;
					let timeoutErrorMessage = config$2.timeout ? "timeout of " + config$2.timeout + "ms exceeded" : "timeout exceeded";
					const transitional = config$2.transitional || transitionalDefaults;
					if (config$2.timeoutErrorMessage) timeoutErrorMessage = config$2.timeoutErrorMessage;
					reject(new AxiosError(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED, config$2, req));
					abort$4();
				});
			}
			if (utils$1.isStream(data)) {
				let ended = false;
				let errored = false;
				data.on("end", () => {
					ended = true;
				});
				data.once("error", (err) => {
					errored = true;
					req.destroy(err);
				});
				data.on("close", () => {
					if (!ended && !errored) abort$4(new CanceledError("Request stream has been aborted", config$2, req));
				});
				data.pipe(req);
			} else req.end(data);
		});
	};
	const isURLSameOrigin = platform.hasStandardBrowserEnv ? ((origin$1, isMSIE) => (url$3) => {
		url$3 = new URL(url$3, platform.origin);
		return origin$1.protocol === url$3.protocol && origin$1.host === url$3.host && (isMSIE || origin$1.port === url$3.port);
	})(new URL(platform.origin), platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent)) : () => true;
	const cookies = platform.hasStandardBrowserEnv ? {
		write(name$2, value, expires, path$10, domain, secure) {
			const cookie = [name$2 + "=" + encodeURIComponent(value)];
			utils$1.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
			utils$1.isString(path$10) && cookie.push("path=" + path$10);
			utils$1.isString(domain) && cookie.push("domain=" + domain);
			secure === true && cookie.push("secure");
			document.cookie = cookie.join("; ");
		},
		read(name$2) {
			const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name$2 + ")=([^;]*)"));
			return match ? decodeURIComponent(match[3]) : null;
		},
		remove(name$2) {
			this.write(name$2, "", Date.now() - 864e5);
		}
	} : {
		write() {},
		read() {
			return null;
		},
		remove() {}
	};
	const headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? { ...thing } : thing;
	/**
	* Config-specific merge-function which creates a new config-object
	* by merging two configuration objects together.
	*
	* @param {Object} config1
	* @param {Object} config2
	*
	* @returns {Object} New object resulting from merging config2 to config1
	*/
	function mergeConfig(config1, config2) {
		config2 = config2 || {};
		const config$2 = {};
		function getMergedValue(target, source, prop, caseless) {
			if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) return utils$1.merge.call({ caseless }, target, source);
			else if (utils$1.isPlainObject(source)) return utils$1.merge({}, source);
			else if (utils$1.isArray(source)) return source.slice();
			return source;
		}
		function mergeDeepProperties(a, b, prop, caseless) {
			if (!utils$1.isUndefined(b)) return getMergedValue(a, b, prop, caseless);
			else if (!utils$1.isUndefined(a)) return getMergedValue(void 0, a, prop, caseless);
		}
		function valueFromConfig2(a, b) {
			if (!utils$1.isUndefined(b)) return getMergedValue(void 0, b);
		}
		function defaultToConfig2(a, b) {
			if (!utils$1.isUndefined(b)) return getMergedValue(void 0, b);
			else if (!utils$1.isUndefined(a)) return getMergedValue(void 0, a);
		}
		function mergeDirectKeys(a, b, prop) {
			if (prop in config2) return getMergedValue(a, b);
			else if (prop in config1) return getMergedValue(void 0, a);
		}
		const mergeMap = {
			url: valueFromConfig2,
			method: valueFromConfig2,
			data: valueFromConfig2,
			baseURL: defaultToConfig2,
			transformRequest: defaultToConfig2,
			transformResponse: defaultToConfig2,
			paramsSerializer: defaultToConfig2,
			timeout: defaultToConfig2,
			timeoutMessage: defaultToConfig2,
			withCredentials: defaultToConfig2,
			withXSRFToken: defaultToConfig2,
			adapter: defaultToConfig2,
			responseType: defaultToConfig2,
			xsrfCookieName: defaultToConfig2,
			xsrfHeaderName: defaultToConfig2,
			onUploadProgress: defaultToConfig2,
			onDownloadProgress: defaultToConfig2,
			decompress: defaultToConfig2,
			maxContentLength: defaultToConfig2,
			maxBodyLength: defaultToConfig2,
			beforeRedirect: defaultToConfig2,
			transport: defaultToConfig2,
			httpAgent: defaultToConfig2,
			httpsAgent: defaultToConfig2,
			cancelToken: defaultToConfig2,
			socketPath: defaultToConfig2,
			responseEncoding: defaultToConfig2,
			validateStatus: mergeDirectKeys,
			headers: (a, b, prop) => mergeDeepProperties(headersToObject(a), headersToObject(b), prop, true)
		};
		utils$1.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
			const merge$2 = mergeMap[prop] || mergeDeepProperties;
			const configValue = merge$2(config1[prop], config2[prop], prop);
			utils$1.isUndefined(configValue) && merge$2 !== mergeDirectKeys || (config$2[prop] = configValue);
		});
		return config$2;
	}
	const resolveConfig = (config$2) => {
		const newConfig = mergeConfig({}, config$2);
		let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
		newConfig.headers = headers = AxiosHeaders$1.from(headers);
		newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config$2.params, config$2.paramsSerializer);
		if (auth) headers.set("Authorization", "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : "")));
		let contentType$1;
		if (utils$1.isFormData(data)) {
			if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) headers.setContentType(void 0);
			else if ((contentType$1 = headers.getContentType()) !== false) {
				const [type, ...tokens] = contentType$1 ? contentType$1.split(";").map((token) => token.trim()).filter(Boolean) : [];
				headers.setContentType([type || "multipart/form-data", ...tokens].join("; "));
			}
		}
		if (platform.hasStandardBrowserEnv) {
			withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
			if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(newConfig.url)) {
				const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);
				if (xsrfValue) headers.set(xsrfHeaderName, xsrfValue);
			}
		}
		return newConfig;
	};
	const isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
	const xhrAdapter = isXHRAdapterSupported && function(config$2) {
		return new Promise(function dispatchXhrRequest(resolve, reject) {
			const _config = resolveConfig(config$2);
			let requestData = _config.data;
			const requestHeaders = AxiosHeaders$1.from(_config.headers).normalize();
			let { responseType, onUploadProgress, onDownloadProgress } = _config;
			let onCanceled;
			let uploadThrottled, downloadThrottled;
			let flushUpload, flushDownload;
			function done$1() {
				flushUpload && flushUpload();
				flushDownload && flushDownload();
				_config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
				_config.signal && _config.signal.removeEventListener("abort", onCanceled);
			}
			let request$1 = new XMLHttpRequest();
			request$1.open(_config.method.toUpperCase(), _config.url, true);
			request$1.timeout = _config.timeout;
			function onloadend() {
				if (!request$1) return;
				const responseHeaders = AxiosHeaders$1.from("getAllResponseHeaders" in request$1 && request$1.getAllResponseHeaders());
				const responseData = !responseType || responseType === "text" || responseType === "json" ? request$1.responseText : request$1.response;
				const response = {
					data: responseData,
					status: request$1.status,
					statusText: request$1.statusText,
					headers: responseHeaders,
					config: config$2,
					request: request$1
				};
				settle(function _resolve(value) {
					resolve(value);
					done$1();
				}, function _reject(err) {
					reject(err);
					done$1();
				}, response);
				request$1 = null;
			}
			if ("onloadend" in request$1) request$1.onloadend = onloadend;
			else request$1.onreadystatechange = function handleLoad() {
				if (!request$1 || request$1.readyState !== 4) return;
				if (request$1.status === 0 && !(request$1.responseURL && request$1.responseURL.indexOf("file:") === 0)) return;
				setTimeout(onloadend);
			};
			request$1.onabort = function handleAbort() {
				if (!request$1) return;
				reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config$2, request$1));
				request$1 = null;
			};
			request$1.onerror = function handleError$1() {
				reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config$2, request$1));
				request$1 = null;
			};
			request$1.ontimeout = function handleTimeout() {
				let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
				const transitional = _config.transitional || transitionalDefaults;
				if (_config.timeoutErrorMessage) timeoutErrorMessage = _config.timeoutErrorMessage;
				reject(new AxiosError(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED, config$2, request$1));
				request$1 = null;
			};
			requestData === void 0 && requestHeaders.setContentType(null);
			if ("setRequestHeader" in request$1) utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key$1) {
				request$1.setRequestHeader(key$1, val);
			});
			if (!utils$1.isUndefined(_config.withCredentials)) request$1.withCredentials = !!_config.withCredentials;
			if (responseType && responseType !== "json") request$1.responseType = _config.responseType;
			if (onDownloadProgress) {
				[downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
				request$1.addEventListener("progress", downloadThrottled);
			}
			if (onUploadProgress && request$1.upload) {
				[uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
				request$1.upload.addEventListener("progress", uploadThrottled);
				request$1.upload.addEventListener("loadend", flushUpload);
			}
			if (_config.cancelToken || _config.signal) {
				onCanceled = (cancel) => {
					if (!request$1) return;
					reject(!cancel || cancel.type ? new CanceledError(null, config$2, request$1) : cancel);
					request$1.abort();
					request$1 = null;
				};
				_config.cancelToken && _config.cancelToken.subscribe(onCanceled);
				if (_config.signal) _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
			}
			const protocol = parseProtocol(_config.url);
			if (protocol && platform.protocols.indexOf(protocol) === -1) {
				reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config$2));
				return;
			}
			request$1.send(requestData || null);
		});
	};
	const composeSignals = (signals, timeout$1) => {
		const { length } = signals = signals ? signals.filter(Boolean) : [];
		if (timeout$1 || length) {
			let controller = new AbortController();
			let aborted;
			const onabort = function(reason) {
				if (!aborted) {
					aborted = true;
					unsubscribe();
					const err = reason instanceof Error ? reason : this.reason;
					controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));
				}
			};
			let timer = timeout$1 && setTimeout(() => {
				timer = null;
				onabort(new AxiosError(`timeout ${timeout$1} of ms exceeded`, AxiosError.ETIMEDOUT));
			}, timeout$1);
			const unsubscribe = () => {
				if (signals) {
					timer && clearTimeout(timer);
					timer = null;
					signals.forEach((signal$1) => {
						signal$1.unsubscribe ? signal$1.unsubscribe(onabort) : signal$1.removeEventListener("abort", onabort);
					});
					signals = null;
				}
			};
			signals.forEach((signal$1) => signal$1.addEventListener("abort", onabort));
			const { signal } = controller;
			signal.unsubscribe = () => utils$1.asap(unsubscribe);
			return signal;
		}
	};
	const composeSignals$1 = composeSignals;
	const streamChunk = function* (chunk, chunkSize) {
		let len = chunk.byteLength;
		if (!chunkSize || len < chunkSize) {
			yield chunk;
			return;
		}
		let pos = 0;
		let end;
		while (pos < len) {
			end = pos + chunkSize;
			yield chunk.slice(pos, end);
			pos = end;
		}
	};
	const readBytes = async function* (iterable, chunkSize) {
		for await (const chunk of readStream(iterable)) yield* streamChunk(chunk, chunkSize);
	};
	const readStream = async function* (stream$3) {
		if (stream$3[Symbol.asyncIterator]) {
			yield* stream$3;
			return;
		}
		const reader = stream$3.getReader();
		try {
			for (;;) {
				const { done: done$1, value } = await reader.read();
				if (done$1) break;
				yield value;
			}
		} finally {
			await reader.cancel();
		}
	};
	const trackStream = (stream$3, chunkSize, onProgress, onFinish) => {
		const iterator$1 = readBytes(stream$3, chunkSize);
		let bytes = 0;
		let done$1;
		let _onFinish = (e) => {
			if (!done$1) {
				done$1 = true;
				onFinish && onFinish(e);
			}
		};
		return new ReadableStream({
			async pull(controller) {
				try {
					const { done: done$2, value } = await iterator$1.next();
					if (done$2) {
						_onFinish();
						controller.close();
						return;
					}
					let len = value.byteLength;
					if (onProgress) {
						let loadedBytes = bytes += len;
						onProgress(loadedBytes);
					}
					controller.enqueue(new Uint8Array(value));
				} catch (err) {
					_onFinish(err);
					throw err;
				}
			},
			cancel(reason) {
				_onFinish(reason);
				return iterator$1.return();
			}
		}, { highWaterMark: 2 });
	};
	const isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
	const isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";
	const encodeText = isFetchSupported && (typeof TextEncoder === "function" ? ((encoder$2) => (str) => encoder$2.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));
	const test = (fn, ...args) => {
		try {
			return !!fn(...args);
		} catch (e) {
			return false;
		}
	};
	const supportsRequestStream = isReadableStreamSupported && test(() => {
		let duplexAccessed = false;
		const hasContentType = new Request(platform.origin, {
			body: new ReadableStream(),
			method: "POST",
			get duplex() {
				duplexAccessed = true;
				return "half";
			}
		}).headers.has("Content-Type");
		return duplexAccessed && !hasContentType;
	});
	const DEFAULT_CHUNK_SIZE = 64 * 1024;
	const supportsResponseStream = isReadableStreamSupported && test(() => utils$1.isReadableStream(new Response("").body));
	const resolvers = { stream: supportsResponseStream && ((res) => res.body) };
	isFetchSupported && ((res) => {
		[
			"text",
			"arrayBuffer",
			"blob",
			"formData",
			"stream"
		].forEach((type) => {
			!resolvers[type] && (resolvers[type] = utils$1.isFunction(res[type]) ? (res$1) => res$1[type]() : (_, config$2) => {
				throw new AxiosError(`Response type '${type}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config$2);
			});
		});
	})(new Response());
	const getBodyLength = async (body) => {
		if (body == null) return 0;
		if (utils$1.isBlob(body)) return body.size;
		if (utils$1.isSpecCompliantForm(body)) {
			const _request = new Request(platform.origin, {
				method: "POST",
				body
			});
			return (await _request.arrayBuffer()).byteLength;
		}
		if (utils$1.isArrayBufferView(body) || utils$1.isArrayBuffer(body)) return body.byteLength;
		if (utils$1.isURLSearchParams(body)) body = body + "";
		if (utils$1.isString(body)) return (await encodeText(body)).byteLength;
	};
	const resolveBodyLength = async (headers, body) => {
		const length = utils$1.toFiniteNumber(headers.getContentLength());
		return length == null ? getBodyLength(body) : length;
	};
	const fetchAdapter = isFetchSupported && (async (config$2) => {
		let { url: url$3, method: method$1, data, signal, cancelToken, timeout: timeout$1, onDownloadProgress, onUploadProgress, responseType, headers, withCredentials = "same-origin", fetchOptions } = resolveConfig(config$2);
		responseType = responseType ? (responseType + "").toLowerCase() : "text";
		let composedSignal = composeSignals$1([signal, cancelToken && cancelToken.toAbortSignal()], timeout$1);
		let request$1;
		const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
			composedSignal.unsubscribe();
		});
		let requestContentLength;
		try {
			if (onUploadProgress && supportsRequestStream && method$1 !== "get" && method$1 !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
				let _request = new Request(url$3, {
					method: "POST",
					body: data,
					duplex: "half"
				});
				let contentTypeHeader;
				if (utils$1.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) headers.setContentType(contentTypeHeader);
				if (_request.body) {
					const [onProgress, flush] = progressEventDecorator(requestContentLength, progressEventReducer(asyncDecorator(onUploadProgress)));
					data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
				}
			}
			if (!utils$1.isString(withCredentials)) withCredentials = withCredentials ? "include" : "omit";
			const isCredentialsSupported = "credentials" in Request.prototype;
			request$1 = new Request(url$3, {
				...fetchOptions,
				signal: composedSignal,
				method: method$1.toUpperCase(),
				headers: headers.normalize().toJSON(),
				body: data,
				duplex: "half",
				credentials: isCredentialsSupported ? withCredentials : void 0
			});
			let response = await fetch(request$1);
			const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
			if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
				const options = {};
				[
					"status",
					"statusText",
					"headers"
				].forEach((prop) => {
					options[prop] = response[prop];
				});
				const responseContentLength = utils$1.toFiniteNumber(response.headers.get("content-length"));
				const [onProgress, flush] = onDownloadProgress && progressEventDecorator(responseContentLength, progressEventReducer(asyncDecorator(onDownloadProgress), true)) || [];
				response = new Response(trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
					flush && flush();
					unsubscribe && unsubscribe();
				}), options);
			}
			responseType = responseType || "text";
			let responseData = await resolvers[utils$1.findKey(resolvers, responseType) || "text"](response, config$2);
			!isStreamResponse && unsubscribe && unsubscribe();
			return await new Promise((resolve, reject) => {
				settle(resolve, reject, {
					data: responseData,
					headers: AxiosHeaders$1.from(response.headers),
					status: response.status,
					statusText: response.statusText,
					config: config$2,
					request: request$1
				});
			});
		} catch (err) {
			unsubscribe && unsubscribe();
			if (err && err.name === "TypeError" && /Load failed|fetch/i.test(err.message)) throw Object.assign(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config$2, request$1), { cause: err.cause || err });
			throw AxiosError.from(err, err && err.code, config$2, request$1);
		}
	});
	const knownAdapters = {
		http: httpAdapter,
		xhr: xhrAdapter,
		fetch: fetchAdapter
	};
	utils$1.forEach(knownAdapters, (fn, value) => {
		if (fn) {
			try {
				Object.defineProperty(fn, "name", { value });
			} catch (e) {}
			Object.defineProperty(fn, "adapterName", { value });
		}
	});
	const renderReason = (reason) => `- ${reason}`;
	const isResolvedHandle = (adapter$1) => utils$1.isFunction(adapter$1) || adapter$1 === null || adapter$1 === false;
	const adapters = {
		getAdapter: (adapters$2) => {
			adapters$2 = utils$1.isArray(adapters$2) ? adapters$2 : [adapters$2];
			const { length } = adapters$2;
			let nameOrAdapter;
			let adapter$1;
			const rejectedReasons = {};
			for (let i = 0; i < length; i++) {
				nameOrAdapter = adapters$2[i];
				let id;
				adapter$1 = nameOrAdapter;
				if (!isResolvedHandle(nameOrAdapter)) {
					adapter$1 = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
					if (adapter$1 === void 0) throw new AxiosError(`Unknown adapter '${id}'`);
				}
				if (adapter$1) break;
				rejectedReasons[id || "#" + i] = adapter$1;
			}
			if (!adapter$1) {
				const reasons = Object.entries(rejectedReasons).map(([id, state$1]) => `adapter ${id} ` + (state$1 === false ? "is not supported by the environment" : "is not available in the build"));
				let s$1 = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
				throw new AxiosError(`There is no suitable adapter to dispatch the request ` + s$1, "ERR_NOT_SUPPORT");
			}
			return adapter$1;
		},
		adapters: knownAdapters
	};
	/**
	* Throws a `CanceledError` if cancellation has been requested.
	*
	* @param {Object} config The config that is to be used for the request
	*
	* @returns {void}
	*/
	function throwIfCancellationRequested(config$2) {
		if (config$2.cancelToken) config$2.cancelToken.throwIfRequested();
		if (config$2.signal && config$2.signal.aborted) throw new CanceledError(null, config$2);
	}
	/**
	* Dispatch a request to the server using the configured adapter.
	*
	* @param {object} config The config that is to be used for the request
	*
	* @returns {Promise} The Promise to be fulfilled
	*/
	function dispatchRequest(config$2) {
		throwIfCancellationRequested(config$2);
		config$2.headers = AxiosHeaders$1.from(config$2.headers);
		config$2.data = transformData.call(config$2, config$2.transformRequest);
		if ([
			"post",
			"put",
			"patch"
		].indexOf(config$2.method) !== -1) config$2.headers.setContentType("application/x-www-form-urlencoded", false);
		const adapter$1 = adapters.getAdapter(config$2.adapter || defaults$1.adapter);
		return adapter$1(config$2).then(function onAdapterResolution(response) {
			throwIfCancellationRequested(config$2);
			response.data = transformData.call(config$2, config$2.transformResponse, response);
			response.headers = AxiosHeaders$1.from(response.headers);
			return response;
		}, function onAdapterRejection(reason) {
			if (!isCancel(reason)) {
				throwIfCancellationRequested(config$2);
				if (reason && reason.response) {
					reason.response.data = transformData.call(config$2, config$2.transformResponse, reason.response);
					reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
				}
			}
			return Promise.reject(reason);
		});
	}
	const validators$1 = {};
	[
		"object",
		"boolean",
		"number",
		"function",
		"string",
		"symbol"
	].forEach((type, i) => {
		validators$1[type] = function validator$1(thing) {
			return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
		};
	});
	const deprecatedWarnings = {};
	/**
	* Transitional option validator
	*
	* @param {function|boolean?} validator - set to false if the transitional option has been removed
	* @param {string?} version - deprecated version / removed since version
	* @param {string?} message - some message with additional info
	*
	* @returns {function}
	*/
	validators$1.transitional = function transitional(validator$1, version, message) {
		function formatMessage(opt, desc$1) {
			return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc$1 + (message ? ". " + message : "");
		}
		return (value, opt, opts) => {
			if (validator$1 === false) throw new AxiosError(formatMessage(opt, " has been removed" + (version ? " in " + version : "")), AxiosError.ERR_DEPRECATED);
			if (version && !deprecatedWarnings[opt]) {
				deprecatedWarnings[opt] = true;
				console.warn(formatMessage(opt, " has been deprecated since v" + version + " and will be removed in the near future"));
			}
			return validator$1 ? validator$1(value, opt, opts) : true;
		};
	};
	validators$1.spelling = function spelling(correctSpelling) {
		return (value, opt) => {
			console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
			return true;
		};
	};
	/**
	* Assert object's properties type
	*
	* @param {object} options
	* @param {object} schema
	* @param {boolean?} allowUnknown
	*
	* @returns {object}
	*/
	function assertOptions(options, schema, allowUnknown) {
		if (typeof options !== "object") throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
		const keys$2 = Object.keys(options);
		let i = keys$2.length;
		while (i-- > 0) {
			const opt = keys$2[i];
			const validator$1 = schema[opt];
			if (validator$1) {
				const value = options[opt];
				const result = value === void 0 || validator$1(value, opt, options);
				if (result !== true) throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
				continue;
			}
			if (allowUnknown !== true) throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
		}
	}
	const validator = {
		assertOptions,
		validators: validators$1
	};
	const validators = validator.validators;
	/**
	* Create a new instance of Axios
	*
	* @param {Object} instanceConfig The default config for the instance
	*
	* @return {Axios} A new instance of Axios
	*/
	var Axios = class {
		constructor(instanceConfig) {
			this.defaults = instanceConfig || {};
			this.interceptors = {
				request: new InterceptorManager$1(),
				response: new InterceptorManager$1()
			};
		}
		/**
		* Dispatch a request
		*
		* @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
		* @param {?Object} config
		*
		* @returns {Promise} The Promise to be fulfilled
		*/
		async request(configOrUrl, config$2) {
			try {
				return await this._request(configOrUrl, config$2);
			} catch (err) {
				if (err instanceof Error) {
					let dummy = {};
					Error.captureStackTrace ? Error.captureStackTrace(dummy) : dummy = new Error();
					const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
					try {
						if (!err.stack) err.stack = stack;
						else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) err.stack += "\n" + stack;
					} catch (e) {}
				}
				throw err;
			}
		}
		_request(configOrUrl, config$2) {
			if (typeof configOrUrl === "string") {
				config$2 = config$2 || {};
				config$2.url = configOrUrl;
			} else config$2 = configOrUrl || {};
			config$2 = mergeConfig(this.defaults, config$2);
			const { transitional, paramsSerializer, headers } = config$2;
			if (transitional !== void 0) validator.assertOptions(transitional, {
				silentJSONParsing: validators.transitional(validators.boolean),
				forcedJSONParsing: validators.transitional(validators.boolean),
				clarifyTimeoutError: validators.transitional(validators.boolean)
			}, false);
			if (paramsSerializer != null) if (utils$1.isFunction(paramsSerializer)) config$2.paramsSerializer = { serialize: paramsSerializer };
			else validator.assertOptions(paramsSerializer, {
				encode: validators.function,
				serialize: validators.function
			}, true);
			if (config$2.allowAbsoluteUrls !== void 0);
			else if (this.defaults.allowAbsoluteUrls !== void 0) config$2.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;
			else config$2.allowAbsoluteUrls = true;
			validator.assertOptions(config$2, {
				baseUrl: validators.spelling("baseURL"),
				withXsrfToken: validators.spelling("withXSRFToken")
			}, true);
			config$2.method = (config$2.method || this.defaults.method || "get").toLowerCase();
			let contextHeaders = headers && utils$1.merge(headers.common, headers[config$2.method]);
			headers && utils$1.forEach([
				"delete",
				"get",
				"head",
				"post",
				"put",
				"patch",
				"common"
			], (method$1) => {
				delete headers[method$1];
			});
			config$2.headers = AxiosHeaders$1.concat(contextHeaders, headers);
			const requestInterceptorChain = [];
			let synchronousRequestInterceptors = true;
			this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
				if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config$2) === false) return;
				synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
				requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
			});
			const responseInterceptorChain = [];
			this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
				responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
			});
			let promise;
			let i = 0;
			let len;
			if (!synchronousRequestInterceptors) {
				const chain = [dispatchRequest.bind(this), void 0];
				chain.unshift.apply(chain, requestInterceptorChain);
				chain.push.apply(chain, responseInterceptorChain);
				len = chain.length;
				promise = Promise.resolve(config$2);
				while (i < len) promise = promise.then(chain[i++], chain[i++]);
				return promise;
			}
			len = requestInterceptorChain.length;
			let newConfig = config$2;
			i = 0;
			while (i < len) {
				const onFulfilled = requestInterceptorChain[i++];
				const onRejected = requestInterceptorChain[i++];
				try {
					newConfig = onFulfilled(newConfig);
				} catch (error$1) {
					onRejected.call(this, error$1);
					break;
				}
			}
			try {
				promise = dispatchRequest.call(this, newConfig);
			} catch (error$1) {
				return Promise.reject(error$1);
			}
			i = 0;
			len = responseInterceptorChain.length;
			while (i < len) promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
			return promise;
		}
		getUri(config$2) {
			config$2 = mergeConfig(this.defaults, config$2);
			const fullPath = buildFullPath(config$2.baseURL, config$2.url, config$2.allowAbsoluteUrls);
			return buildURL(fullPath, config$2.params, config$2.paramsSerializer);
		}
	};
	utils$1.forEach([
		"delete",
		"get",
		"head",
		"options"
	], function forEachMethodNoData(method$1) {
		Axios.prototype[method$1] = function(url$3, config$2) {
			return this.request(mergeConfig(config$2 || {}, {
				method: method$1,
				url: url$3,
				data: (config$2 || {}).data
			}));
		};
	});
	utils$1.forEach([
		"post",
		"put",
		"patch"
	], function forEachMethodWithData(method$1) {
		function generateHTTPMethod(isForm) {
			return function httpMethod(url$3, data, config$2) {
				return this.request(mergeConfig(config$2 || {}, {
					method: method$1,
					headers: isForm ? { "Content-Type": "multipart/form-data" } : {},
					url: url$3,
					data
				}));
			};
		}
		Axios.prototype[method$1] = generateHTTPMethod();
		Axios.prototype[method$1 + "Form"] = generateHTTPMethod(true);
	});
	const Axios$1 = Axios;
	/**
	* A `CancelToken` is an object that can be used to request cancellation of an operation.
	*
	* @param {Function} executor The executor function.
	*
	* @returns {CancelToken}
	*/
	var CancelToken = class CancelToken {
		constructor(executor) {
			if (typeof executor !== "function") throw new TypeError("executor must be a function.");
			let resolvePromise;
			this.promise = new Promise(function promiseExecutor(resolve) {
				resolvePromise = resolve;
			});
			const token = this;
			this.promise.then((cancel) => {
				if (!token._listeners) return;
				let i = token._listeners.length;
				while (i-- > 0) token._listeners[i](cancel);
				token._listeners = null;
			});
			this.promise.then = (onfulfilled) => {
				let _resolve;
				const promise = new Promise((resolve) => {
					token.subscribe(resolve);
					_resolve = resolve;
				}).then(onfulfilled);
				promise.cancel = function reject() {
					token.unsubscribe(_resolve);
				};
				return promise;
			};
			executor(function cancel(message, config$2, request$1) {
				if (token.reason) return;
				token.reason = new CanceledError(message, config$2, request$1);
				resolvePromise(token.reason);
			});
		}
		/**
		* Throws a `CanceledError` if cancellation has been requested.
		*/
		throwIfRequested() {
			if (this.reason) throw this.reason;
		}
		/**
		* Subscribe to the cancel signal
		*/
		subscribe(listener) {
			if (this.reason) {
				listener(this.reason);
				return;
			}
			if (this._listeners) this._listeners.push(listener);
			else this._listeners = [listener];
		}
		/**
		* Unsubscribe from the cancel signal
		*/
		unsubscribe(listener) {
			if (!this._listeners) return;
			const index = this._listeners.indexOf(listener);
			if (index !== -1) this._listeners.splice(index, 1);
		}
		toAbortSignal() {
			const controller = new AbortController();
			const abort$4 = (err) => {
				controller.abort(err);
			};
			this.subscribe(abort$4);
			controller.signal.unsubscribe = () => this.unsubscribe(abort$4);
			return controller.signal;
		}
		/**
		* Returns an object that contains a new `CancelToken` and a function that, when called,
		* cancels the `CancelToken`.
		*/
		static source() {
			let cancel;
			const token = new CancelToken(function executor(c) {
				cancel = c;
			});
			return {
				token,
				cancel
			};
		}
	};
	const CancelToken$1 = CancelToken;
	/**
	* Syntactic sugar for invoking a function and expanding an array for arguments.
	*
	* Common use case would be to use `Function.prototype.apply`.
	*
	*  ```js
	*  function f(x, y, z) {}
	*  var args = [1, 2, 3];
	*  f.apply(null, args);
	*  ```
	*
	* With `spread` this example can be re-written.
	*
	*  ```js
	*  spread(function(x, y, z) {})([1, 2, 3]);
	*  ```
	*
	* @param {Function} callback
	*
	* @returns {Function}
	*/
	function spread(callback) {
		return function wrap$2(arr) {
			return callback.apply(null, arr);
		};
	}
	/**
	* Determines whether the payload is an error thrown by Axios
	*
	* @param {*} payload The value to test
	*
	* @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
	*/
	function isAxiosError(payload) {
		return utils$1.isObject(payload) && payload.isAxiosError === true;
	}
	const HttpStatusCode = {
		Continue: 100,
		SwitchingProtocols: 101,
		Processing: 102,
		EarlyHints: 103,
		Ok: 200,
		Created: 201,
		Accepted: 202,
		NonAuthoritativeInformation: 203,
		NoContent: 204,
		ResetContent: 205,
		PartialContent: 206,
		MultiStatus: 207,
		AlreadyReported: 208,
		ImUsed: 226,
		MultipleChoices: 300,
		MovedPermanently: 301,
		Found: 302,
		SeeOther: 303,
		NotModified: 304,
		UseProxy: 305,
		Unused: 306,
		TemporaryRedirect: 307,
		PermanentRedirect: 308,
		BadRequest: 400,
		Unauthorized: 401,
		PaymentRequired: 402,
		Forbidden: 403,
		NotFound: 404,
		MethodNotAllowed: 405,
		NotAcceptable: 406,
		ProxyAuthenticationRequired: 407,
		RequestTimeout: 408,
		Conflict: 409,
		Gone: 410,
		LengthRequired: 411,
		PreconditionFailed: 412,
		PayloadTooLarge: 413,
		UriTooLong: 414,
		UnsupportedMediaType: 415,
		RangeNotSatisfiable: 416,
		ExpectationFailed: 417,
		ImATeapot: 418,
		MisdirectedRequest: 421,
		UnprocessableEntity: 422,
		Locked: 423,
		FailedDependency: 424,
		TooEarly: 425,
		UpgradeRequired: 426,
		PreconditionRequired: 428,
		TooManyRequests: 429,
		RequestHeaderFieldsTooLarge: 431,
		UnavailableForLegalReasons: 451,
		InternalServerError: 500,
		NotImplemented: 501,
		BadGateway: 502,
		ServiceUnavailable: 503,
		GatewayTimeout: 504,
		HttpVersionNotSupported: 505,
		VariantAlsoNegotiates: 506,
		InsufficientStorage: 507,
		LoopDetected: 508,
		NotExtended: 510,
		NetworkAuthenticationRequired: 511
	};
	Object.entries(HttpStatusCode).forEach(([key$1, value]) => {
		HttpStatusCode[value] = key$1;
	});
	const HttpStatusCode$1 = HttpStatusCode;
	/**
	* Create an instance of Axios
	*
	* @param {Object} defaultConfig The default config for the instance
	*
	* @returns {Axios} A new instance of Axios
	*/
	function createInstance(defaultConfig) {
		const context = new Axios$1(defaultConfig);
		const instance = bind(Axios$1.prototype.request, context);
		utils$1.extend(instance, Axios$1.prototype, context, { allOwnKeys: true });
		utils$1.extend(instance, context, null, { allOwnKeys: true });
		instance.create = function create$2(instanceConfig) {
			return createInstance(mergeConfig(defaultConfig, instanceConfig));
		};
		return instance;
	}
	const axios = createInstance(defaults$1);
	axios.Axios = Axios$1;
	axios.CanceledError = CanceledError;
	axios.CancelToken = CancelToken$1;
	axios.isCancel = isCancel;
	axios.VERSION = VERSION;
	axios.toFormData = toFormData;
	axios.AxiosError = AxiosError;
	axios.Cancel = axios.CanceledError;
	axios.all = function all(promises) {
		return Promise.all(promises);
	};
	axios.spread = spread;
	axios.isAxiosError = isAxiosError;
	axios.mergeConfig = mergeConfig;
	axios.AxiosHeaders = AxiosHeaders$1;
	axios.formToJSON = (thing) => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);
	axios.getAdapter = adapters.getAdapter;
	axios.HttpStatusCode = HttpStatusCode$1;
	axios.default = axios;
	module.exports = axios;
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/url.js
var require_url = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/url.js"(exports) {
	var __importDefault$5 = exports && exports.__importDefault || function(mod) {
		return mod && mod.__esModule ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.checkUrlExists = checkUrlExists;
	const axios_1$3 = __importDefault$5(require_axios());
	/**
	* Checks whether a URL is existing via a head request.
	* @param url - URL to be checked.
	* @returns Promise - resolves if the URL exists.
	*/
	async function checkUrlExists(url$3) {
		return axios_1$3.default.request({
			url: url$3,
			method: "HEAD"
		}).then((response) => response.status);
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/index.js
var require_dist$4 = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+util@4.0.2/node_modules/@sap-cloud-sdk/util/dist/index.js"(exports) {
	/**
	* [[include:util/README.md]]
	* @packageDocumentation
	* @module @sap-cloud-sdk/util
	*/
	var __createBinding$11 = exports && exports.__createBinding || (Object.create ? function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc$1 = Object.getOwnPropertyDescriptor(m$1, k);
		if (!desc$1 || ("get" in desc$1 ? !m$1.__esModule : desc$1.writable || desc$1.configurable)) desc$1 = {
			enumerable: true,
			get: function() {
				return m$1[k];
			}
		};
		Object.defineProperty(o, k2, desc$1);
	} : function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		o[k2] = m$1[k];
	});
	var __exportStar$8 = exports && exports.__exportStar || function(m$1, exports$1) {
		for (var p in m$1) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports$1, p)) __createBinding$11(exports$1, m$1, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar$8(require_array(), exports);
	__exportStar$8(require_code_block(), exports);
	__exportStar$8(require_documentation_block(), exports);
	__exportStar$8(require_equal(), exports);
	__exportStar$8(require_error_with_cause(), exports);
	__exportStar$8(require_fs(), exports);
	__exportStar$8(require_logger(), exports);
	__exportStar$8(require_nullish(), exports);
	__exportStar$8(require_object(), exports);
	__exportStar$8(require_pipe(), exports);
	__exportStar$8(require_promise(), exports);
	__exportStar$8(require_remove_slashes(), exports);
	__exportStar$8(require_string(), exports);
	__exportStar$8(require_string_formatter(), exports);
	__exportStar$8(require_types(), exports);
	__exportStar$8(require_unique_name_generator(), exports);
	__exportStar$8(require_url(), exports);
} });

//#endregion
//#region node_modules/.pnpm/jws@3.2.2/node_modules/jws/lib/data-stream.js
var require_data_stream = __commonJS({ "node_modules/.pnpm/jws@3.2.2/node_modules/jws/lib/data-stream.js"(exports, module) {
	var Buffer$7 = require_safe_buffer().Buffer;
	var Stream$3 = __require("stream");
	var util$5 = __require("util");
	function DataStream$2(data) {
		this.buffer = null;
		this.writable = true;
		this.readable = true;
		if (!data) {
			this.buffer = Buffer$7.alloc(0);
			return this;
		}
		if (typeof data.pipe === "function") {
			this.buffer = Buffer$7.alloc(0);
			data.pipe(this);
			return this;
		}
		if (data.length || typeof data === "object") {
			this.buffer = data;
			this.writable = false;
			process.nextTick(function() {
				this.emit("end", data);
				this.readable = false;
				this.emit("close");
			}.bind(this));
			return this;
		}
		throw new TypeError("Unexpected data type (" + typeof data + ")");
	}
	util$5.inherits(DataStream$2, Stream$3);
	DataStream$2.prototype.write = function write$2(data) {
		this.buffer = Buffer$7.concat([this.buffer, Buffer$7.from(data)]);
		this.emit("data", data);
	};
	DataStream$2.prototype.end = function end(data) {
		if (data) this.write(data);
		this.emit("end", data);
		this.emit("close");
		this.writable = false;
		this.readable = false;
	};
	module.exports = DataStream$2;
} });

//#endregion
//#region node_modules/.pnpm/buffer-equal-constant-time@1.0.1/node_modules/buffer-equal-constant-time/index.js
var require_buffer_equal_constant_time = __commonJS({ "node_modules/.pnpm/buffer-equal-constant-time@1.0.1/node_modules/buffer-equal-constant-time/index.js"(exports, module) {
	var Buffer$6 = __require("buffer").Buffer;
	var SlowBuffer = __require("buffer").SlowBuffer;
	module.exports = bufferEq;
	function bufferEq(a, b) {
		if (!Buffer$6.isBuffer(a) || !Buffer$6.isBuffer(b)) return false;
		if (a.length !== b.length) return false;
		var c = 0;
		for (var i = 0; i < a.length; i++) c |= a[i] ^ b[i];
		return c === 0;
	}
	bufferEq.install = function() {
		Buffer$6.prototype.equal = SlowBuffer.prototype.equal = function equal$1(that) {
			return bufferEq(this, that);
		};
	};
	var origBufEqual = Buffer$6.prototype.equal;
	var origSlowBufEqual = SlowBuffer.prototype.equal;
	bufferEq.restore = function() {
		Buffer$6.prototype.equal = origBufEqual;
		SlowBuffer.prototype.equal = origSlowBufEqual;
	};
} });

//#endregion
//#region node_modules/.pnpm/ecdsa-sig-formatter@1.0.11/node_modules/ecdsa-sig-formatter/src/param-bytes-for-alg.js
var require_param_bytes_for_alg = __commonJS({ "node_modules/.pnpm/ecdsa-sig-formatter@1.0.11/node_modules/ecdsa-sig-formatter/src/param-bytes-for-alg.js"(exports, module) {
	function getParamSize(keySize) {
		var result = (keySize / 8 | 0) + (keySize % 8 === 0 ? 0 : 1);
		return result;
	}
	var paramBytesForAlg = {
		ES256: getParamSize(256),
		ES384: getParamSize(384),
		ES512: getParamSize(521)
	};
	function getParamBytesForAlg$1(alg) {
		var paramBytes = paramBytesForAlg[alg];
		if (paramBytes) return paramBytes;
		throw new Error("Unknown algorithm \"" + alg + "\"");
	}
	module.exports = getParamBytesForAlg$1;
} });

//#endregion
//#region node_modules/.pnpm/ecdsa-sig-formatter@1.0.11/node_modules/ecdsa-sig-formatter/src/ecdsa-sig-formatter.js
var require_ecdsa_sig_formatter = __commonJS({ "node_modules/.pnpm/ecdsa-sig-formatter@1.0.11/node_modules/ecdsa-sig-formatter/src/ecdsa-sig-formatter.js"(exports, module) {
	var Buffer$5 = require_safe_buffer().Buffer;
	var getParamBytesForAlg = require_param_bytes_for_alg();
	var MAX_OCTET = 128, CLASS_UNIVERSAL = 0, PRIMITIVE_BIT = 32, TAG_SEQ = 16, TAG_INT = 2, ENCODED_TAG_SEQ = TAG_SEQ | PRIMITIVE_BIT | CLASS_UNIVERSAL << 6, ENCODED_TAG_INT = TAG_INT | CLASS_UNIVERSAL << 6;
	function base64Url(base64) {
		return base64.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
	}
	function signatureAsBuffer(signature) {
		if (Buffer$5.isBuffer(signature)) return signature;
		else if ("string" === typeof signature) return Buffer$5.from(signature, "base64");
		throw new TypeError("ECDSA signature must be a Base64 string or a Buffer");
	}
	function derToJose(signature, alg) {
		signature = signatureAsBuffer(signature);
		var paramBytes = getParamBytesForAlg(alg);
		var maxEncodedParamLength = paramBytes + 1;
		var inputLength = signature.length;
		var offset = 0;
		if (signature[offset++] !== ENCODED_TAG_SEQ) throw new Error("Could not find expected \"seq\"");
		var seqLength = signature[offset++];
		if (seqLength === (MAX_OCTET | 1)) seqLength = signature[offset++];
		if (inputLength - offset < seqLength) throw new Error("\"seq\" specified length of \"" + seqLength + "\", only \"" + (inputLength - offset) + "\" remaining");
		if (signature[offset++] !== ENCODED_TAG_INT) throw new Error("Could not find expected \"int\" for \"r\"");
		var rLength = signature[offset++];
		if (inputLength - offset - 2 < rLength) throw new Error("\"r\" specified length of \"" + rLength + "\", only \"" + (inputLength - offset - 2) + "\" available");
		if (maxEncodedParamLength < rLength) throw new Error("\"r\" specified length of \"" + rLength + "\", max of \"" + maxEncodedParamLength + "\" is acceptable");
		var rOffset = offset;
		offset += rLength;
		if (signature[offset++] !== ENCODED_TAG_INT) throw new Error("Could not find expected \"int\" for \"s\"");
		var sLength = signature[offset++];
		if (inputLength - offset !== sLength) throw new Error("\"s\" specified length of \"" + sLength + "\", expected \"" + (inputLength - offset) + "\"");
		if (maxEncodedParamLength < sLength) throw new Error("\"s\" specified length of \"" + sLength + "\", max of \"" + maxEncodedParamLength + "\" is acceptable");
		var sOffset = offset;
		offset += sLength;
		if (offset !== inputLength) throw new Error("Expected to consume entire buffer, but \"" + (inputLength - offset) + "\" bytes remain");
		var rPadding = paramBytes - rLength, sPadding = paramBytes - sLength;
		var dst = Buffer$5.allocUnsafe(rPadding + rLength + sPadding + sLength);
		for (offset = 0; offset < rPadding; ++offset) dst[offset] = 0;
		signature.copy(dst, offset, rOffset + Math.max(-rPadding, 0), rOffset + rLength);
		offset = paramBytes;
		for (var o = offset; offset < o + sPadding; ++offset) dst[offset] = 0;
		signature.copy(dst, offset, sOffset + Math.max(-sPadding, 0), sOffset + sLength);
		dst = dst.toString("base64");
		dst = base64Url(dst);
		return dst;
	}
	function countPadding(buf, start, stop) {
		var padding = 0;
		while (start + padding < stop && buf[start + padding] === 0) ++padding;
		var needsSign = buf[start + padding] >= MAX_OCTET;
		if (needsSign) --padding;
		return padding;
	}
	function joseToDer(signature, alg) {
		signature = signatureAsBuffer(signature);
		var paramBytes = getParamBytesForAlg(alg);
		var signatureBytes = signature.length;
		if (signatureBytes !== paramBytes * 2) throw new TypeError("\"" + alg + "\" signatures must be \"" + paramBytes * 2 + "\" bytes, saw \"" + signatureBytes + "\"");
		var rPadding = countPadding(signature, 0, paramBytes);
		var sPadding = countPadding(signature, paramBytes, signature.length);
		var rLength = paramBytes - rPadding;
		var sLength = paramBytes - sPadding;
		var rsBytes = 2 + rLength + 1 + 1 + sLength;
		var shortLength = rsBytes < MAX_OCTET;
		var dst = Buffer$5.allocUnsafe((shortLength ? 2 : 3) + rsBytes);
		var offset = 0;
		dst[offset++] = ENCODED_TAG_SEQ;
		if (shortLength) dst[offset++] = rsBytes;
		else {
			dst[offset++] = MAX_OCTET | 1;
			dst[offset++] = rsBytes & 255;
		}
		dst[offset++] = ENCODED_TAG_INT;
		dst[offset++] = rLength;
		if (rPadding < 0) {
			dst[offset++] = 0;
			offset += signature.copy(dst, offset, 0, paramBytes);
		} else offset += signature.copy(dst, offset, rPadding, paramBytes);
		dst[offset++] = ENCODED_TAG_INT;
		dst[offset++] = sLength;
		if (sPadding < 0) {
			dst[offset++] = 0;
			signature.copy(dst, offset, paramBytes);
		} else signature.copy(dst, offset, paramBytes + sPadding);
		return dst;
	}
	module.exports = {
		derToJose,
		joseToDer
	};
} });

//#endregion
//#region node_modules/.pnpm/jwa@1.4.1/node_modules/jwa/index.js
var require_jwa = __commonJS({ "node_modules/.pnpm/jwa@1.4.1/node_modules/jwa/index.js"(exports, module) {
	var bufferEqual = require_buffer_equal_constant_time();
	var Buffer$4 = require_safe_buffer().Buffer;
	var crypto$1 = __require("crypto");
	var formatEcdsa = require_ecdsa_sig_formatter();
	var util$4 = __require("util");
	var MSG_INVALID_ALGORITHM = "\"%s\" is not a valid algorithm.\n  Supported algorithms are:\n  \"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"PS256\", \"PS384\", \"PS512\", \"ES256\", \"ES384\", \"ES512\" and \"none\".";
	var MSG_INVALID_SECRET = "secret must be a string or buffer";
	var MSG_INVALID_VERIFIER_KEY = "key must be a string or a buffer";
	var MSG_INVALID_SIGNER_KEY = "key must be a string, a buffer or an object";
	var supportsKeyObjects = typeof crypto$1.createPublicKey === "function";
	if (supportsKeyObjects) {
		MSG_INVALID_VERIFIER_KEY += " or a KeyObject";
		MSG_INVALID_SECRET += "or a KeyObject";
	}
	function checkIsPublicKey(key$1) {
		if (Buffer$4.isBuffer(key$1)) return;
		if (typeof key$1 === "string") return;
		if (!supportsKeyObjects) throw typeError(MSG_INVALID_VERIFIER_KEY);
		if (typeof key$1 !== "object") throw typeError(MSG_INVALID_VERIFIER_KEY);
		if (typeof key$1.type !== "string") throw typeError(MSG_INVALID_VERIFIER_KEY);
		if (typeof key$1.asymmetricKeyType !== "string") throw typeError(MSG_INVALID_VERIFIER_KEY);
		if (typeof key$1.export !== "function") throw typeError(MSG_INVALID_VERIFIER_KEY);
	}
	function checkIsPrivateKey(key$1) {
		if (Buffer$4.isBuffer(key$1)) return;
		if (typeof key$1 === "string") return;
		if (typeof key$1 === "object") return;
		throw typeError(MSG_INVALID_SIGNER_KEY);
	}
	function checkIsSecretKey(key$1) {
		if (Buffer$4.isBuffer(key$1)) return;
		if (typeof key$1 === "string") return key$1;
		if (!supportsKeyObjects) throw typeError(MSG_INVALID_SECRET);
		if (typeof key$1 !== "object") throw typeError(MSG_INVALID_SECRET);
		if (key$1.type !== "secret") throw typeError(MSG_INVALID_SECRET);
		if (typeof key$1.export !== "function") throw typeError(MSG_INVALID_SECRET);
	}
	function fromBase64(base64) {
		return base64.replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
	}
	function toBase64(base64url$1) {
		base64url$1 = base64url$1.toString();
		var padding = 4 - base64url$1.length % 4;
		if (padding !== 4) for (var i = 0; i < padding; ++i) base64url$1 += "=";
		return base64url$1.replace(/\-/g, "+").replace(/_/g, "/");
	}
	function typeError(template$1) {
		var args = [].slice.call(arguments, 1);
		var errMsg = util$4.format.bind(util$4, template$1).apply(null, args);
		return new TypeError(errMsg);
	}
	function bufferOrString(obj) {
		return Buffer$4.isBuffer(obj) || typeof obj === "string";
	}
	function normalizeInput(thing) {
		if (!bufferOrString(thing)) thing = JSON.stringify(thing);
		return thing;
	}
	function createHmacSigner(bits) {
		return function sign$1(thing, secret) {
			checkIsSecretKey(secret);
			thing = normalizeInput(thing);
			var hmac = crypto$1.createHmac("sha" + bits, secret);
			var sig = (hmac.update(thing), hmac.digest("base64"));
			return fromBase64(sig);
		};
	}
	function createHmacVerifier(bits) {
		return function verify(thing, signature, secret) {
			var computedSig = createHmacSigner(bits)(thing, secret);
			return bufferEqual(Buffer$4.from(signature), Buffer$4.from(computedSig));
		};
	}
	function createKeySigner(bits) {
		return function sign$1(thing, privateKey) {
			checkIsPrivateKey(privateKey);
			thing = normalizeInput(thing);
			var signer = crypto$1.createSign("RSA-SHA" + bits);
			var sig = (signer.update(thing), signer.sign(privateKey, "base64"));
			return fromBase64(sig);
		};
	}
	function createKeyVerifier(bits) {
		return function verify(thing, signature, publicKey) {
			checkIsPublicKey(publicKey);
			thing = normalizeInput(thing);
			signature = toBase64(signature);
			var verifier = crypto$1.createVerify("RSA-SHA" + bits);
			verifier.update(thing);
			return verifier.verify(publicKey, signature, "base64");
		};
	}
	function createPSSKeySigner(bits) {
		return function sign$1(thing, privateKey) {
			checkIsPrivateKey(privateKey);
			thing = normalizeInput(thing);
			var signer = crypto$1.createSign("RSA-SHA" + bits);
			var sig = (signer.update(thing), signer.sign({
				key: privateKey,
				padding: crypto$1.constants.RSA_PKCS1_PSS_PADDING,
				saltLength: crypto$1.constants.RSA_PSS_SALTLEN_DIGEST
			}, "base64"));
			return fromBase64(sig);
		};
	}
	function createPSSKeyVerifier(bits) {
		return function verify(thing, signature, publicKey) {
			checkIsPublicKey(publicKey);
			thing = normalizeInput(thing);
			signature = toBase64(signature);
			var verifier = crypto$1.createVerify("RSA-SHA" + bits);
			verifier.update(thing);
			return verifier.verify({
				key: publicKey,
				padding: crypto$1.constants.RSA_PKCS1_PSS_PADDING,
				saltLength: crypto$1.constants.RSA_PSS_SALTLEN_DIGEST
			}, signature, "base64");
		};
	}
	function createECDSASigner(bits) {
		var inner = createKeySigner(bits);
		return function sign$1() {
			var signature = inner.apply(null, arguments);
			signature = formatEcdsa.derToJose(signature, "ES" + bits);
			return signature;
		};
	}
	function createECDSAVerifer(bits) {
		var inner = createKeyVerifier(bits);
		return function verify(thing, signature, publicKey) {
			signature = formatEcdsa.joseToDer(signature, "ES" + bits).toString("base64");
			var result = inner(thing, signature, publicKey);
			return result;
		};
	}
	function createNoneSigner() {
		return function sign$1() {
			return "";
		};
	}
	function createNoneVerifier() {
		return function verify(thing, signature) {
			return signature === "";
		};
	}
	module.exports = function jwa$2(algorithm) {
		var signerFactories = {
			hs: createHmacSigner,
			rs: createKeySigner,
			ps: createPSSKeySigner,
			es: createECDSASigner,
			none: createNoneSigner
		};
		var verifierFactories = {
			hs: createHmacVerifier,
			rs: createKeyVerifier,
			ps: createPSSKeyVerifier,
			es: createECDSAVerifer,
			none: createNoneVerifier
		};
		var match = algorithm.match(/^(RS|PS|ES|HS)(256|384|512)$|^(none)$/i);
		if (!match) throw typeError(MSG_INVALID_ALGORITHM, algorithm);
		var algo = (match[1] || match[3]).toLowerCase();
		var bits = match[2];
		return {
			sign: signerFactories[algo](bits),
			verify: verifierFactories[algo](bits)
		};
	};
} });

//#endregion
//#region node_modules/.pnpm/jws@3.2.2/node_modules/jws/lib/tostring.js
var require_tostring = __commonJS({ "node_modules/.pnpm/jws@3.2.2/node_modules/jws/lib/tostring.js"(exports, module) {
	var Buffer$3 = __require("buffer").Buffer;
	module.exports = function toString$4(obj) {
		if (typeof obj === "string") return obj;
		if (typeof obj === "number" || Buffer$3.isBuffer(obj)) return obj.toString();
		return JSON.stringify(obj);
	};
} });

//#endregion
//#region node_modules/.pnpm/jws@3.2.2/node_modules/jws/lib/sign-stream.js
var require_sign_stream = __commonJS({ "node_modules/.pnpm/jws@3.2.2/node_modules/jws/lib/sign-stream.js"(exports, module) {
	var Buffer$2 = require_safe_buffer().Buffer;
	var DataStream$1 = require_data_stream();
	var jwa$1 = require_jwa();
	var Stream$2 = __require("stream");
	var toString$1 = require_tostring();
	var util$3 = __require("util");
	function base64url(string, encoding) {
		return Buffer$2.from(string, encoding).toString("base64").replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
	}
	function jwsSecuredInput(header, payload, encoding) {
		encoding = encoding || "utf8";
		var encodedHeader = base64url(toString$1(header), "binary");
		var encodedPayload = base64url(toString$1(payload), encoding);
		return util$3.format("%s.%s", encodedHeader, encodedPayload);
	}
	function jwsSign(opts) {
		var header = opts.header;
		var payload = opts.payload;
		var secretOrKey = opts.secret || opts.privateKey;
		var encoding = opts.encoding;
		var algo = jwa$1(header.alg);
		var securedInput = jwsSecuredInput(header, payload, encoding);
		var signature = algo.sign(securedInput, secretOrKey);
		return util$3.format("%s.%s", securedInput, signature);
	}
	function SignStream$1(opts) {
		var secret = opts.secret || opts.privateKey || opts.key;
		var secretStream = new DataStream$1(secret);
		this.readable = true;
		this.header = opts.header;
		this.encoding = opts.encoding;
		this.secret = this.privateKey = this.key = secretStream;
		this.payload = new DataStream$1(opts.payload);
		this.secret.once("close", function() {
			if (!this.payload.writable && this.readable) this.sign();
		}.bind(this));
		this.payload.once("close", function() {
			if (!this.secret.writable && this.readable) this.sign();
		}.bind(this));
	}
	util$3.inherits(SignStream$1, Stream$2);
	SignStream$1.prototype.sign = function sign$1() {
		try {
			var signature = jwsSign({
				header: this.header,
				payload: this.payload.buffer,
				secret: this.secret.buffer,
				encoding: this.encoding
			});
			this.emit("done", signature);
			this.emit("data", signature);
			this.emit("end");
			this.readable = false;
			return signature;
		} catch (e) {
			this.readable = false;
			this.emit("error", e);
			this.emit("close");
		}
	};
	SignStream$1.sign = jwsSign;
	module.exports = SignStream$1;
} });

//#endregion
//#region node_modules/.pnpm/jws@3.2.2/node_modules/jws/lib/verify-stream.js
var require_verify_stream = __commonJS({ "node_modules/.pnpm/jws@3.2.2/node_modules/jws/lib/verify-stream.js"(exports, module) {
	var Buffer$1 = require_safe_buffer().Buffer;
	var DataStream = require_data_stream();
	var jwa = require_jwa();
	var Stream$1 = __require("stream");
	var toString = require_tostring();
	var util$2 = __require("util");
	var JWS_REGEX = /^[a-zA-Z0-9\-_]+?\.[a-zA-Z0-9\-_]+?\.([a-zA-Z0-9\-_]+)?$/;
	function isObject$4(thing) {
		return Object.prototype.toString.call(thing) === "[object Object]";
	}
	function safeJsonParse(thing) {
		if (isObject$4(thing)) return thing;
		try {
			return JSON.parse(thing);
		} catch (e) {
			return void 0;
		}
	}
	function headerFromJWS(jwsSig) {
		var encodedHeader = jwsSig.split(".", 1)[0];
		return safeJsonParse(Buffer$1.from(encodedHeader, "base64").toString("binary"));
	}
	function securedInputFromJWS(jwsSig) {
		return jwsSig.split(".", 2).join(".");
	}
	function signatureFromJWS(jwsSig) {
		return jwsSig.split(".")[2];
	}
	function payloadFromJWS(jwsSig, encoding) {
		encoding = encoding || "utf8";
		var payload = jwsSig.split(".")[1];
		return Buffer$1.from(payload, "base64").toString(encoding);
	}
	function isValidJws(string) {
		return JWS_REGEX.test(string) && !!headerFromJWS(string);
	}
	function jwsVerify(jwsSig, algorithm, secretOrKey) {
		if (!algorithm) {
			var err = new Error("Missing algorithm parameter for jws.verify");
			err.code = "MISSING_ALGORITHM";
			throw err;
		}
		jwsSig = toString(jwsSig);
		var signature = signatureFromJWS(jwsSig);
		var securedInput = securedInputFromJWS(jwsSig);
		var algo = jwa(algorithm);
		return algo.verify(securedInput, signature, secretOrKey);
	}
	function jwsDecode(jwsSig, opts) {
		opts = opts || {};
		jwsSig = toString(jwsSig);
		if (!isValidJws(jwsSig)) return null;
		var header = headerFromJWS(jwsSig);
		if (!header) return null;
		var payload = payloadFromJWS(jwsSig);
		if (header.typ === "JWT" || opts.json) payload = JSON.parse(payload, opts.encoding);
		return {
			header,
			payload,
			signature: signatureFromJWS(jwsSig)
		};
	}
	function VerifyStream$1(opts) {
		opts = opts || {};
		var secretOrKey = opts.secret || opts.publicKey || opts.key;
		var secretStream = new DataStream(secretOrKey);
		this.readable = true;
		this.algorithm = opts.algorithm;
		this.encoding = opts.encoding;
		this.secret = this.publicKey = this.key = secretStream;
		this.signature = new DataStream(opts.signature);
		this.secret.once("close", function() {
			if (!this.signature.writable && this.readable) this.verify();
		}.bind(this));
		this.signature.once("close", function() {
			if (!this.secret.writable && this.readable) this.verify();
		}.bind(this));
	}
	util$2.inherits(VerifyStream$1, Stream$1);
	VerifyStream$1.prototype.verify = function verify() {
		try {
			var valid$2 = jwsVerify(this.signature.buffer, this.algorithm, this.key.buffer);
			var obj = jwsDecode(this.signature.buffer, this.encoding);
			this.emit("done", valid$2, obj);
			this.emit("data", valid$2);
			this.emit("end");
			this.readable = false;
			return valid$2;
		} catch (e) {
			this.readable = false;
			this.emit("error", e);
			this.emit("close");
		}
	};
	VerifyStream$1.decode = jwsDecode;
	VerifyStream$1.isValid = isValidJws;
	VerifyStream$1.verify = jwsVerify;
	module.exports = VerifyStream$1;
} });

//#endregion
//#region node_modules/.pnpm/jws@3.2.2/node_modules/jws/index.js
var require_jws = __commonJS({ "node_modules/.pnpm/jws@3.2.2/node_modules/jws/index.js"(exports) {
	var SignStream = require_sign_stream();
	var VerifyStream = require_verify_stream();
	var ALGORITHMS = [
		"HS256",
		"HS384",
		"HS512",
		"RS256",
		"RS384",
		"RS512",
		"PS256",
		"PS384",
		"PS512",
		"ES256",
		"ES384",
		"ES512"
	];
	exports.ALGORITHMS = ALGORITHMS;
	exports.sign = SignStream.sign;
	exports.verify = VerifyStream.verify;
	exports.decode = VerifyStream.decode;
	exports.isValid = VerifyStream.isValid;
	exports.createSign = function createSign(opts) {
		return new SignStream(opts);
	};
	exports.createVerify = function createVerify(opts) {
		return new VerifyStream(opts);
	};
} });

//#endregion
//#region node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/decode.js
var require_decode = __commonJS({ "node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/decode.js"(exports, module) {
	var jws$2 = require_jws();
	module.exports = function(jwt, options) {
		options = options || {};
		var decoded = jws$2.decode(jwt, options);
		if (!decoded) return null;
		var payload = decoded.payload;
		if (typeof payload === "string") try {
			var obj = JSON.parse(payload);
			if (obj !== null && typeof obj === "object") payload = obj;
		} catch (e) {}
		if (options.complete === true) return {
			header: decoded.header,
			payload,
			signature: decoded.signature
		};
		return payload;
	};
} });

//#endregion
//#region node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/JsonWebTokenError.js
var require_JsonWebTokenError = __commonJS({ "node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/JsonWebTokenError.js"(exports, module) {
	var JsonWebTokenError$3 = function(message, error$1) {
		Error.call(this, message);
		if (Error.captureStackTrace) Error.captureStackTrace(this, this.constructor);
		this.name = "JsonWebTokenError";
		this.message = message;
		if (error$1) this.inner = error$1;
	};
	JsonWebTokenError$3.prototype = Object.create(Error.prototype);
	JsonWebTokenError$3.prototype.constructor = JsonWebTokenError$3;
	module.exports = JsonWebTokenError$3;
} });

//#endregion
//#region node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/NotBeforeError.js
var require_NotBeforeError = __commonJS({ "node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/NotBeforeError.js"(exports, module) {
	var JsonWebTokenError$2 = require_JsonWebTokenError();
	var NotBeforeError$1 = function(message, date) {
		JsonWebTokenError$2.call(this, message);
		this.name = "NotBeforeError";
		this.date = date;
	};
	NotBeforeError$1.prototype = Object.create(JsonWebTokenError$2.prototype);
	NotBeforeError$1.prototype.constructor = NotBeforeError$1;
	module.exports = NotBeforeError$1;
} });

//#endregion
//#region node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/TokenExpiredError.js
var require_TokenExpiredError = __commonJS({ "node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/TokenExpiredError.js"(exports, module) {
	var JsonWebTokenError$1 = require_JsonWebTokenError();
	var TokenExpiredError$1 = function(message, expiredAt) {
		JsonWebTokenError$1.call(this, message);
		this.name = "TokenExpiredError";
		this.expiredAt = expiredAt;
	};
	TokenExpiredError$1.prototype = Object.create(JsonWebTokenError$1.prototype);
	TokenExpiredError$1.prototype.constructor = TokenExpiredError$1;
	module.exports = TokenExpiredError$1;
} });

//#endregion
//#region node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/timespan.js
var require_timespan = __commonJS({ "node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/timespan.js"(exports, module) {
	var ms = require_ms$1();
	module.exports = function(time, iat) {
		var timestamp$2 = iat || Math.floor(Date.now() / 1e3);
		if (typeof time === "string") {
			var milliseconds = ms(time);
			if (typeof milliseconds === "undefined") return;
			return Math.floor(timestamp$2 + milliseconds / 1e3);
		} else if (typeof time === "number") return timestamp$2 + time;
		else return;
	};
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/internal/constants.js
var require_constants$1 = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/internal/constants.js"(exports, module) {
	const SEMVER_SPEC_VERSION = "2.0.0";
	const MAX_LENGTH$2 = 256;
	const MAX_SAFE_INTEGER$2 = Number.MAX_SAFE_INTEGER || 9007199254740991;
	const MAX_SAFE_COMPONENT_LENGTH$1 = 16;
	const MAX_SAFE_BUILD_LENGTH$1 = MAX_LENGTH$2 - 6;
	const RELEASE_TYPES = [
		"major",
		"premajor",
		"minor",
		"preminor",
		"patch",
		"prepatch",
		"prerelease"
	];
	module.exports = {
		MAX_LENGTH: MAX_LENGTH$2,
		MAX_SAFE_COMPONENT_LENGTH: MAX_SAFE_COMPONENT_LENGTH$1,
		MAX_SAFE_BUILD_LENGTH: MAX_SAFE_BUILD_LENGTH$1,
		MAX_SAFE_INTEGER: MAX_SAFE_INTEGER$2,
		RELEASE_TYPES,
		SEMVER_SPEC_VERSION,
		FLAG_INCLUDE_PRERELEASE: 1,
		FLAG_LOOSE: 2
	};
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/internal/debug.js
var require_debug = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/internal/debug.js"(exports, module) {
	const debug$11 = typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {};
	module.exports = debug$11;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/internal/re.js
var require_re = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/internal/re.js"(exports, module) {
	const { MAX_SAFE_COMPONENT_LENGTH, MAX_SAFE_BUILD_LENGTH, MAX_LENGTH: MAX_LENGTH$1 } = require_constants$1();
	const debug$10 = require_debug();
	exports = module.exports = {};
	const re$4 = exports.re = [];
	const safeRe = exports.safeRe = [];
	const src$1 = exports.src = [];
	const safeSrc = exports.safeSrc = [];
	const t$4 = exports.t = {};
	let R = 0;
	const LETTERDASHNUMBER = "[a-zA-Z0-9-]";
	const safeRegexReplacements = [
		["\\s", 1],
		["\\d", MAX_LENGTH$1],
		[LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH]
	];
	const makeSafeRegex = (value) => {
		for (const [token, max$2] of safeRegexReplacements) value = value.split(`${token}*`).join(`${token}{0,${max$2}}`).split(`${token}+`).join(`${token}{1,${max$2}}`);
		return value;
	};
	const createToken = (name$2, value, isGlobal) => {
		const safe = makeSafeRegex(value);
		const index = R++;
		debug$10(name$2, index, value);
		t$4[name$2] = index;
		src$1[index] = value;
		safeSrc[index] = safe;
		re$4[index] = new RegExp(value, isGlobal ? "g" : void 0);
		safeRe[index] = new RegExp(safe, isGlobal ? "g" : void 0);
	};
	createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
	createToken("NUMERICIDENTIFIERLOOSE", "\\d+");
	createToken("NONNUMERICIDENTIFIER", `\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);
	createToken("MAINVERSION", `(${src$1[t$4.NUMERICIDENTIFIER]})\\.(${src$1[t$4.NUMERICIDENTIFIER]})\\.(${src$1[t$4.NUMERICIDENTIFIER]})`);
	createToken("MAINVERSIONLOOSE", `(${src$1[t$4.NUMERICIDENTIFIERLOOSE]})\\.(${src$1[t$4.NUMERICIDENTIFIERLOOSE]})\\.(${src$1[t$4.NUMERICIDENTIFIERLOOSE]})`);
	createToken("PRERELEASEIDENTIFIER", `(?:${src$1[t$4.NUMERICIDENTIFIER]}|${src$1[t$4.NONNUMERICIDENTIFIER]})`);
	createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src$1[t$4.NUMERICIDENTIFIERLOOSE]}|${src$1[t$4.NONNUMERICIDENTIFIER]})`);
	createToken("PRERELEASE", `(?:-(${src$1[t$4.PRERELEASEIDENTIFIER]}(?:\\.${src$1[t$4.PRERELEASEIDENTIFIER]})*))`);
	createToken("PRERELEASELOOSE", `(?:-?(${src$1[t$4.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src$1[t$4.PRERELEASEIDENTIFIERLOOSE]})*))`);
	createToken("BUILDIDENTIFIER", `${LETTERDASHNUMBER}+`);
	createToken("BUILD", `(?:\\+(${src$1[t$4.BUILDIDENTIFIER]}(?:\\.${src$1[t$4.BUILDIDENTIFIER]})*))`);
	createToken("FULLPLAIN", `v?${src$1[t$4.MAINVERSION]}${src$1[t$4.PRERELEASE]}?${src$1[t$4.BUILD]}?`);
	createToken("FULL", `^${src$1[t$4.FULLPLAIN]}$`);
	createToken("LOOSEPLAIN", `[v=\\s]*${src$1[t$4.MAINVERSIONLOOSE]}${src$1[t$4.PRERELEASELOOSE]}?${src$1[t$4.BUILD]}?`);
	createToken("LOOSE", `^${src$1[t$4.LOOSEPLAIN]}$`);
	createToken("GTLT", "((?:<|>)?=?)");
	createToken("XRANGEIDENTIFIERLOOSE", `${src$1[t$4.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
	createToken("XRANGEIDENTIFIER", `${src$1[t$4.NUMERICIDENTIFIER]}|x|X|\\*`);
	createToken("XRANGEPLAIN", `[v=\\s]*(${src$1[t$4.XRANGEIDENTIFIER]})(?:\\.(${src$1[t$4.XRANGEIDENTIFIER]})(?:\\.(${src$1[t$4.XRANGEIDENTIFIER]})(?:${src$1[t$4.PRERELEASE]})?${src$1[t$4.BUILD]}?)?)?`);
	createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src$1[t$4.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src$1[t$4.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src$1[t$4.XRANGEIDENTIFIERLOOSE]})(?:${src$1[t$4.PRERELEASELOOSE]})?${src$1[t$4.BUILD]}?)?)?`);
	createToken("XRANGE", `^${src$1[t$4.GTLT]}\\s*${src$1[t$4.XRANGEPLAIN]}$`);
	createToken("XRANGELOOSE", `^${src$1[t$4.GTLT]}\\s*${src$1[t$4.XRANGEPLAINLOOSE]}$`);
	createToken("COERCEPLAIN", `(^|[^\\d])(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`);
	createToken("COERCE", `${src$1[t$4.COERCEPLAIN]}(?:$|[^\\d])`);
	createToken("COERCEFULL", src$1[t$4.COERCEPLAIN] + `(?:${src$1[t$4.PRERELEASE]})?(?:${src$1[t$4.BUILD]})?(?:$|[^\\d])`);
	createToken("COERCERTL", src$1[t$4.COERCE], true);
	createToken("COERCERTLFULL", src$1[t$4.COERCEFULL], true);
	createToken("LONETILDE", "(?:~>?)");
	createToken("TILDETRIM", `(\\s*)${src$1[t$4.LONETILDE]}\\s+`, true);
	exports.tildeTrimReplace = "$1~";
	createToken("TILDE", `^${src$1[t$4.LONETILDE]}${src$1[t$4.XRANGEPLAIN]}$`);
	createToken("TILDELOOSE", `^${src$1[t$4.LONETILDE]}${src$1[t$4.XRANGEPLAINLOOSE]}$`);
	createToken("LONECARET", "(?:\\^)");
	createToken("CARETTRIM", `(\\s*)${src$1[t$4.LONECARET]}\\s+`, true);
	exports.caretTrimReplace = "$1^";
	createToken("CARET", `^${src$1[t$4.LONECARET]}${src$1[t$4.XRANGEPLAIN]}$`);
	createToken("CARETLOOSE", `^${src$1[t$4.LONECARET]}${src$1[t$4.XRANGEPLAINLOOSE]}$`);
	createToken("COMPARATORLOOSE", `^${src$1[t$4.GTLT]}\\s*(${src$1[t$4.LOOSEPLAIN]})$|^$`);
	createToken("COMPARATOR", `^${src$1[t$4.GTLT]}\\s*(${src$1[t$4.FULLPLAIN]})$|^$`);
	createToken("COMPARATORTRIM", `(\\s*)${src$1[t$4.GTLT]}\\s*(${src$1[t$4.LOOSEPLAIN]}|${src$1[t$4.XRANGEPLAIN]})`, true);
	exports.comparatorTrimReplace = "$1$2$3";
	createToken("HYPHENRANGE", `^\\s*(${src$1[t$4.XRANGEPLAIN]})\\s+-\\s+(${src$1[t$4.XRANGEPLAIN]})\\s*$`);
	createToken("HYPHENRANGELOOSE", `^\\s*(${src$1[t$4.XRANGEPLAINLOOSE]})\\s+-\\s+(${src$1[t$4.XRANGEPLAINLOOSE]})\\s*$`);
	createToken("STAR", "(<|>)?=?\\s*\\*");
	createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
	createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/internal/parse-options.js
var require_parse_options = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/internal/parse-options.js"(exports, module) {
	const looseOption = Object.freeze({ loose: true });
	const emptyOpts = Object.freeze({});
	const parseOptions$3 = (options) => {
		if (!options) return emptyOpts;
		if (typeof options !== "object") return looseOption;
		return options;
	};
	module.exports = parseOptions$3;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/internal/identifiers.js
var require_identifiers = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/internal/identifiers.js"(exports, module) {
	const numeric = /^[0-9]+$/;
	const compareIdentifiers$1 = (a, b) => {
		const anum = numeric.test(a);
		const bnum = numeric.test(b);
		if (anum && bnum) {
			a = +a;
			b = +b;
		}
		return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
	};
	const rcompareIdentifiers = (a, b) => compareIdentifiers$1(b, a);
	module.exports = {
		compareIdentifiers: compareIdentifiers$1,
		rcompareIdentifiers
	};
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/classes/semver.js
var require_semver$1 = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/classes/semver.js"(exports, module) {
	const debug$9 = require_debug();
	const { MAX_LENGTH, MAX_SAFE_INTEGER: MAX_SAFE_INTEGER$1 } = require_constants$1();
	const { safeRe: re$3, safeSrc: src, t: t$3 } = require_re();
	const parseOptions$2 = require_parse_options();
	const { compareIdentifiers } = require_identifiers();
	var SemVer$15 = class SemVer$15 {
		constructor(version, options) {
			options = parseOptions$2(options);
			if (version instanceof SemVer$15) if (version.loose === !!options.loose && version.includePrerelease === !!options.includePrerelease) return version;
			else version = version.version;
			else if (typeof version !== "string") throw new TypeError(`Invalid version. Must be a string. Got type "${typeof version}".`);
			if (version.length > MAX_LENGTH) throw new TypeError(`version is longer than ${MAX_LENGTH} characters`);
			debug$9("SemVer", version, options);
			this.options = options;
			this.loose = !!options.loose;
			this.includePrerelease = !!options.includePrerelease;
			const m$1 = version.trim().match(options.loose ? re$3[t$3.LOOSE] : re$3[t$3.FULL]);
			if (!m$1) throw new TypeError(`Invalid Version: ${version}`);
			this.raw = version;
			this.major = +m$1[1];
			this.minor = +m$1[2];
			this.patch = +m$1[3];
			if (this.major > MAX_SAFE_INTEGER$1 || this.major < 0) throw new TypeError("Invalid major version");
			if (this.minor > MAX_SAFE_INTEGER$1 || this.minor < 0) throw new TypeError("Invalid minor version");
			if (this.patch > MAX_SAFE_INTEGER$1 || this.patch < 0) throw new TypeError("Invalid patch version");
			if (!m$1[4]) this.prerelease = [];
			else this.prerelease = m$1[4].split(".").map((id) => {
				if (/^[0-9]+$/.test(id)) {
					const num = +id;
					if (num >= 0 && num < MAX_SAFE_INTEGER$1) return num;
				}
				return id;
			});
			this.build = m$1[5] ? m$1[5].split(".") : [];
			this.format();
		}
		format() {
			this.version = `${this.major}.${this.minor}.${this.patch}`;
			if (this.prerelease.length) this.version += `-${this.prerelease.join(".")}`;
			return this.version;
		}
		toString() {
			return this.version;
		}
		compare(other) {
			debug$9("SemVer.compare", this.version, this.options, other);
			if (!(other instanceof SemVer$15)) {
				if (typeof other === "string" && other === this.version) return 0;
				other = new SemVer$15(other, this.options);
			}
			if (other.version === this.version) return 0;
			return this.compareMain(other) || this.comparePre(other);
		}
		compareMain(other) {
			if (!(other instanceof SemVer$15)) other = new SemVer$15(other, this.options);
			return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
		}
		comparePre(other) {
			if (!(other instanceof SemVer$15)) other = new SemVer$15(other, this.options);
			if (this.prerelease.length && !other.prerelease.length) return -1;
			else if (!this.prerelease.length && other.prerelease.length) return 1;
			else if (!this.prerelease.length && !other.prerelease.length) return 0;
			let i = 0;
			do {
				const a = this.prerelease[i];
				const b = other.prerelease[i];
				debug$9("prerelease compare", i, a, b);
				if (a === void 0 && b === void 0) return 0;
				else if (b === void 0) return 1;
				else if (a === void 0) return -1;
				else if (a === b) continue;
				else return compareIdentifiers(a, b);
			} while (++i);
		}
		compareBuild(other) {
			if (!(other instanceof SemVer$15)) other = new SemVer$15(other, this.options);
			let i = 0;
			do {
				const a = this.build[i];
				const b = other.build[i];
				debug$9("build compare", i, a, b);
				if (a === void 0 && b === void 0) return 0;
				else if (b === void 0) return 1;
				else if (a === void 0) return -1;
				else if (a === b) continue;
				else return compareIdentifiers(a, b);
			} while (++i);
		}
		inc(release, identifier, identifierBase) {
			if (release.startsWith("pre")) {
				if (!identifier && identifierBase === false) throw new Error("invalid increment argument: identifier is empty");
				if (identifier) {
					const r = new RegExp(`^${this.options.loose ? src[t$3.PRERELEASELOOSE] : src[t$3.PRERELEASE]}$`);
					const match = `-${identifier}`.match(r);
					if (!match || match[1] !== identifier) throw new Error(`invalid identifier: ${identifier}`);
				}
			}
			switch (release) {
				case "premajor":
					this.prerelease.length = 0;
					this.patch = 0;
					this.minor = 0;
					this.major++;
					this.inc("pre", identifier, identifierBase);
					break;
				case "preminor":
					this.prerelease.length = 0;
					this.patch = 0;
					this.minor++;
					this.inc("pre", identifier, identifierBase);
					break;
				case "prepatch":
					this.prerelease.length = 0;
					this.inc("patch", identifier, identifierBase);
					this.inc("pre", identifier, identifierBase);
					break;
				case "prerelease":
					if (this.prerelease.length === 0) this.inc("patch", identifier, identifierBase);
					this.inc("pre", identifier, identifierBase);
					break;
				case "release":
					if (this.prerelease.length === 0) throw new Error(`version ${this.raw} is not a prerelease`);
					this.prerelease.length = 0;
					break;
				case "major":
					if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) this.major++;
					this.minor = 0;
					this.patch = 0;
					this.prerelease = [];
					break;
				case "minor":
					if (this.patch !== 0 || this.prerelease.length === 0) this.minor++;
					this.patch = 0;
					this.prerelease = [];
					break;
				case "patch":
					if (this.prerelease.length === 0) this.patch++;
					this.prerelease = [];
					break;
				case "pre": {
					const base = Number(identifierBase) ? 1 : 0;
					if (this.prerelease.length === 0) this.prerelease = [base];
					else {
						let i = this.prerelease.length;
						while (--i >= 0) if (typeof this.prerelease[i] === "number") {
							this.prerelease[i]++;
							i = -2;
						}
						if (i === -1) {
							if (identifier === this.prerelease.join(".") && identifierBase === false) throw new Error("invalid increment argument: identifier already exists");
							this.prerelease.push(base);
						}
					}
					if (identifier) {
						let prerelease$2 = [identifier, base];
						if (identifierBase === false) prerelease$2 = [identifier];
						if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
							if (isNaN(this.prerelease[1])) this.prerelease = prerelease$2;
						} else this.prerelease = prerelease$2;
					}
					break;
				}
				default: throw new Error(`invalid increment argument: ${release}`);
			}
			this.raw = this.format();
			if (this.build.length) this.raw += `+${this.build.join(".")}`;
			return this;
		}
	};
	module.exports = SemVer$15;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/parse.js
var require_parse = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/parse.js"(exports, module) {
	const SemVer$14 = require_semver$1();
	const parse$6 = (version, options, throwErrors = false) => {
		if (version instanceof SemVer$14) return version;
		try {
			return new SemVer$14(version, options);
		} catch (er) {
			if (!throwErrors) return null;
			throw er;
		}
	};
	module.exports = parse$6;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/valid.js
var require_valid$1 = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/valid.js"(exports, module) {
	const parse$5 = require_parse();
	const valid$1 = (version, options) => {
		const v$1 = parse$5(version, options);
		return v$1 ? v$1.version : null;
	};
	module.exports = valid$1;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/clean.js
var require_clean = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/clean.js"(exports, module) {
	const parse$4 = require_parse();
	const clean$1 = (version, options) => {
		const s$1 = parse$4(version.trim().replace(/^[=v]+/, ""), options);
		return s$1 ? s$1.version : null;
	};
	module.exports = clean$1;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/inc.js
var require_inc = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/inc.js"(exports, module) {
	const SemVer$13 = require_semver$1();
	const inc$1 = (version, release, options, identifier, identifierBase) => {
		if (typeof options === "string") {
			identifierBase = identifier;
			identifier = options;
			options = void 0;
		}
		try {
			return new SemVer$13(version instanceof SemVer$13 ? version.version : version, options).inc(release, identifier, identifierBase).version;
		} catch (er) {
			return null;
		}
	};
	module.exports = inc$1;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/diff.js
var require_diff = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/diff.js"(exports, module) {
	const parse$3 = require_parse();
	const diff$1 = (version1, version2) => {
		const v1 = parse$3(version1, null, true);
		const v2 = parse$3(version2, null, true);
		const comparison = v1.compare(v2);
		if (comparison === 0) return null;
		const v1Higher = comparison > 0;
		const highVersion = v1Higher ? v1 : v2;
		const lowVersion = v1Higher ? v2 : v1;
		const highHasPre = !!highVersion.prerelease.length;
		const lowHasPre = !!lowVersion.prerelease.length;
		if (lowHasPre && !highHasPre) {
			if (!lowVersion.patch && !lowVersion.minor) return "major";
			if (lowVersion.compareMain(highVersion) === 0) {
				if (lowVersion.minor && !lowVersion.patch) return "minor";
				return "patch";
			}
		}
		const prefix = highHasPre ? "pre" : "";
		if (v1.major !== v2.major) return prefix + "major";
		if (v1.minor !== v2.minor) return prefix + "minor";
		if (v1.patch !== v2.patch) return prefix + "patch";
		return "prerelease";
	};
	module.exports = diff$1;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/major.js
var require_major = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/major.js"(exports, module) {
	const SemVer$12 = require_semver$1();
	const major$1 = (a, loose) => new SemVer$12(a, loose).major;
	module.exports = major$1;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/minor.js
var require_minor = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/minor.js"(exports, module) {
	const SemVer$11 = require_semver$1();
	const minor$1 = (a, loose) => new SemVer$11(a, loose).minor;
	module.exports = minor$1;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/patch.js
var require_patch = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/patch.js"(exports, module) {
	const SemVer$10 = require_semver$1();
	const patch$1 = (a, loose) => new SemVer$10(a, loose).patch;
	module.exports = patch$1;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/prerelease.js
var require_prerelease = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/prerelease.js"(exports, module) {
	const parse$2 = require_parse();
	const prerelease$1 = (version, options) => {
		const parsed = parse$2(version, options);
		return parsed && parsed.prerelease.length ? parsed.prerelease : null;
	};
	module.exports = prerelease$1;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/compare.js
var require_compare = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/compare.js"(exports, module) {
	const SemVer$9 = require_semver$1();
	const compare$11 = (a, b, loose) => new SemVer$9(a, loose).compare(new SemVer$9(b, loose));
	module.exports = compare$11;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/rcompare.js
var require_rcompare = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/rcompare.js"(exports, module) {
	const compare$10 = require_compare();
	const rcompare$1 = (a, b, loose) => compare$10(b, a, loose);
	module.exports = rcompare$1;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/compare-loose.js
var require_compare_loose = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/compare-loose.js"(exports, module) {
	const compare$9 = require_compare();
	const compareLoose$1 = (a, b) => compare$9(a, b, true);
	module.exports = compareLoose$1;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/compare-build.js
var require_compare_build = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/compare-build.js"(exports, module) {
	const SemVer$8 = require_semver$1();
	const compareBuild$3 = (a, b, loose) => {
		const versionA = new SemVer$8(a, loose);
		const versionB = new SemVer$8(b, loose);
		return versionA.compare(versionB) || versionA.compareBuild(versionB);
	};
	module.exports = compareBuild$3;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/sort.js
var require_sort = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/sort.js"(exports, module) {
	const compareBuild$2 = require_compare_build();
	const sort$1 = (list, loose) => list.sort((a, b) => compareBuild$2(a, b, loose));
	module.exports = sort$1;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/rsort.js
var require_rsort = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/rsort.js"(exports, module) {
	const compareBuild$1 = require_compare_build();
	const rsort$1 = (list, loose) => list.sort((a, b) => compareBuild$1(b, a, loose));
	module.exports = rsort$1;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/gt.js
var require_gt = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/gt.js"(exports, module) {
	const compare$8 = require_compare();
	const gt$4 = (a, b, loose) => compare$8(a, b, loose) > 0;
	module.exports = gt$4;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/lt.js
var require_lt = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/lt.js"(exports, module) {
	const compare$7 = require_compare();
	const lt$3 = (a, b, loose) => compare$7(a, b, loose) < 0;
	module.exports = lt$3;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/eq.js
var require_eq = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/eq.js"(exports, module) {
	const compare$6 = require_compare();
	const eq$2 = (a, b, loose) => compare$6(a, b, loose) === 0;
	module.exports = eq$2;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/neq.js
var require_neq = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/neq.js"(exports, module) {
	const compare$5 = require_compare();
	const neq$2 = (a, b, loose) => compare$5(a, b, loose) !== 0;
	module.exports = neq$2;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/gte.js
var require_gte = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/gte.js"(exports, module) {
	const compare$4 = require_compare();
	const gte$3 = (a, b, loose) => compare$4(a, b, loose) >= 0;
	module.exports = gte$3;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/lte.js
var require_lte = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/lte.js"(exports, module) {
	const compare$3 = require_compare();
	const lte$3 = (a, b, loose) => compare$3(a, b, loose) <= 0;
	module.exports = lte$3;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/cmp.js
var require_cmp = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/cmp.js"(exports, module) {
	const eq$1 = require_eq();
	const neq$1 = require_neq();
	const gt$3 = require_gt();
	const gte$2 = require_gte();
	const lt$2 = require_lt();
	const lte$2 = require_lte();
	const cmp$2 = (a, op, b, loose) => {
		switch (op) {
			case "===":
				if (typeof a === "object") a = a.version;
				if (typeof b === "object") b = b.version;
				return a === b;
			case "!==":
				if (typeof a === "object") a = a.version;
				if (typeof b === "object") b = b.version;
				return a !== b;
			case "":
			case "=":
			case "==": return eq$1(a, b, loose);
			case "!=": return neq$1(a, b, loose);
			case ">": return gt$3(a, b, loose);
			case ">=": return gte$2(a, b, loose);
			case "<": return lt$2(a, b, loose);
			case "<=": return lte$2(a, b, loose);
			default: throw new TypeError(`Invalid operator: ${op}`);
		}
	};
	module.exports = cmp$2;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/coerce.js
var require_coerce = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/coerce.js"(exports, module) {
	const SemVer$7 = require_semver$1();
	const parse$1 = require_parse();
	const { safeRe: re$2, t: t$2 } = require_re();
	const coerce$1 = (version, options) => {
		if (version instanceof SemVer$7) return version;
		if (typeof version === "number") version = String(version);
		if (typeof version !== "string") return null;
		options = options || {};
		let match = null;
		if (!options.rtl) match = version.match(options.includePrerelease ? re$2[t$2.COERCEFULL] : re$2[t$2.COERCE]);
		else {
			const coerceRtlRegex = options.includePrerelease ? re$2[t$2.COERCERTLFULL] : re$2[t$2.COERCERTL];
			let next;
			while ((next = coerceRtlRegex.exec(version)) && (!match || match.index + match[0].length !== version.length)) {
				if (!match || next.index + next[0].length !== match.index + match[0].length) match = next;
				coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length;
			}
			coerceRtlRegex.lastIndex = -1;
		}
		if (match === null) return null;
		const major$2 = match[2];
		const minor$2 = match[3] || "0";
		const patch$2 = match[4] || "0";
		const prerelease$2 = options.includePrerelease && match[5] ? `-${match[5]}` : "";
		const build$1 = options.includePrerelease && match[6] ? `+${match[6]}` : "";
		return parse$1(`${major$2}.${minor$2}.${patch$2}${prerelease$2}${build$1}`, options);
	};
	module.exports = coerce$1;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/internal/lrucache.js
var require_lrucache = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/internal/lrucache.js"(exports, module) {
	var LRUCache = class {
		constructor() {
			this.max = 1e3;
			this.map = new Map();
		}
		get(key$1) {
			const value = this.map.get(key$1);
			if (value === void 0) return void 0;
			else {
				this.map.delete(key$1);
				this.map.set(key$1, value);
				return value;
			}
		}
		delete(key$1) {
			return this.map.delete(key$1);
		}
		set(key$1, value) {
			const deleted = this.delete(key$1);
			if (!deleted && value !== void 0) {
				if (this.map.size >= this.max) {
					const firstKey = this.map.keys().next().value;
					this.delete(firstKey);
				}
				this.map.set(key$1, value);
			}
			return this;
		}
	};
	module.exports = LRUCache;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/classes/range.js
var require_range = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/classes/range.js"(exports, module) {
	const SPACE_CHARACTERS = /\s+/g;
	var Range$11 = class Range$11 {
		constructor(range, options) {
			options = parseOptions$1(options);
			if (range instanceof Range$11) if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) return range;
			else return new Range$11(range.raw, options);
			if (range instanceof Comparator$4) {
				this.raw = range.value;
				this.set = [[range]];
				this.formatted = void 0;
				return this;
			}
			this.options = options;
			this.loose = !!options.loose;
			this.includePrerelease = !!options.includePrerelease;
			this.raw = range.trim().replace(SPACE_CHARACTERS, " ");
			this.set = this.raw.split("||").map((r) => this.parseRange(r.trim())).filter((c) => c.length);
			if (!this.set.length) throw new TypeError(`Invalid SemVer Range: ${this.raw}`);
			if (this.set.length > 1) {
				const first$1 = this.set[0];
				this.set = this.set.filter((c) => !isNullSet(c[0]));
				if (this.set.length === 0) this.set = [first$1];
				else if (this.set.length > 1) {
					for (const c of this.set) if (c.length === 1 && isAny(c[0])) {
						this.set = [c];
						break;
					}
				}
			}
			this.formatted = void 0;
		}
		get range() {
			if (this.formatted === void 0) {
				this.formatted = "";
				for (let i = 0; i < this.set.length; i++) {
					if (i > 0) this.formatted += "||";
					const comps = this.set[i];
					for (let k = 0; k < comps.length; k++) {
						if (k > 0) this.formatted += " ";
						this.formatted += comps[k].toString().trim();
					}
				}
			}
			return this.formatted;
		}
		format() {
			return this.range;
		}
		toString() {
			return this.range;
		}
		parseRange(range) {
			const memoOpts = (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) | (this.options.loose && FLAG_LOOSE);
			const memoKey = memoOpts + ":" + range;
			const cached = cache.get(memoKey);
			if (cached) return cached;
			const loose = this.options.loose;
			const hr = loose ? re$1[t$1.HYPHENRANGELOOSE] : re$1[t$1.HYPHENRANGE];
			range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
			debug$8("hyphen replace", range);
			range = range.replace(re$1[t$1.COMPARATORTRIM], comparatorTrimReplace);
			debug$8("comparator trim", range);
			range = range.replace(re$1[t$1.TILDETRIM], tildeTrimReplace);
			debug$8("tilde trim", range);
			range = range.replace(re$1[t$1.CARETTRIM], caretTrimReplace);
			debug$8("caret trim", range);
			let rangeList = range.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
			if (loose) rangeList = rangeList.filter((comp) => {
				debug$8("loose invalid filter", comp, this.options);
				return !!comp.match(re$1[t$1.COMPARATORLOOSE]);
			});
			debug$8("range list", rangeList);
			const rangeMap = new Map();
			const comparators = rangeList.map((comp) => new Comparator$4(comp, this.options));
			for (const comp of comparators) {
				if (isNullSet(comp)) return [comp];
				rangeMap.set(comp.value, comp);
			}
			if (rangeMap.size > 1 && rangeMap.has("")) rangeMap.delete("");
			const result = [...rangeMap.values()];
			cache.set(memoKey, result);
			return result;
		}
		intersects(range, options) {
			if (!(range instanceof Range$11)) throw new TypeError("a Range is required");
			return this.set.some((thisComparators) => {
				return isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => {
					return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
						return rangeComparators.every((rangeComparator) => {
							return thisComparator.intersects(rangeComparator, options);
						});
					});
				});
			});
		}
		test(version) {
			if (!version) return false;
			if (typeof version === "string") try {
				version = new SemVer$6(version, this.options);
			} catch (er) {
				return false;
			}
			for (let i = 0; i < this.set.length; i++) if (testSet(this.set[i], version, this.options)) return true;
			return false;
		}
	};
	module.exports = Range$11;
	const LRU = require_lrucache();
	const cache = new LRU();
	const parseOptions$1 = require_parse_options();
	const Comparator$4 = require_comparator();
	const debug$8 = require_debug();
	const SemVer$6 = require_semver$1();
	const { safeRe: re$1, t: t$1, comparatorTrimReplace, tildeTrimReplace, caretTrimReplace } = require_re();
	const { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = require_constants$1();
	const isNullSet = (c) => c.value === "<0.0.0-0";
	const isAny = (c) => c.value === "";
	const isSatisfiable = (comparators, options) => {
		let result = true;
		const remainingComparators = comparators.slice();
		let testComparator = remainingComparators.pop();
		while (result && remainingComparators.length) {
			result = remainingComparators.every((otherComparator) => {
				return testComparator.intersects(otherComparator, options);
			});
			testComparator = remainingComparators.pop();
		}
		return result;
	};
	const parseComparator = (comp, options) => {
		debug$8("comp", comp, options);
		comp = replaceCarets(comp, options);
		debug$8("caret", comp);
		comp = replaceTildes(comp, options);
		debug$8("tildes", comp);
		comp = replaceXRanges(comp, options);
		debug$8("xrange", comp);
		comp = replaceStars(comp, options);
		debug$8("stars", comp);
		return comp;
	};
	const isX = (id) => !id || id.toLowerCase() === "x" || id === "*";
	const replaceTildes = (comp, options) => {
		return comp.trim().split(/\s+/).map((c) => replaceTilde(c, options)).join(" ");
	};
	const replaceTilde = (comp, options) => {
		const r = options.loose ? re$1[t$1.TILDELOOSE] : re$1[t$1.TILDE];
		return comp.replace(r, (_, M, m$1, p, pr) => {
			debug$8("tilde", comp, _, M, m$1, p, pr);
			let ret;
			if (isX(M)) ret = "";
			else if (isX(m$1)) ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
			else if (isX(p)) ret = `>=${M}.${m$1}.0 <${M}.${+m$1 + 1}.0-0`;
			else if (pr) {
				debug$8("replaceTilde pr", pr);
				ret = `>=${M}.${m$1}.${p}-${pr} <${M}.${+m$1 + 1}.0-0`;
			} else ret = `>=${M}.${m$1}.${p} <${M}.${+m$1 + 1}.0-0`;
			debug$8("tilde return", ret);
			return ret;
		});
	};
	const replaceCarets = (comp, options) => {
		return comp.trim().split(/\s+/).map((c) => replaceCaret(c, options)).join(" ");
	};
	const replaceCaret = (comp, options) => {
		debug$8("caret", comp, options);
		const r = options.loose ? re$1[t$1.CARETLOOSE] : re$1[t$1.CARET];
		const z = options.includePrerelease ? "-0" : "";
		return comp.replace(r, (_, M, m$1, p, pr) => {
			debug$8("caret", comp, _, M, m$1, p, pr);
			let ret;
			if (isX(M)) ret = "";
			else if (isX(m$1)) ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
			else if (isX(p)) if (M === "0") ret = `>=${M}.${m$1}.0${z} <${M}.${+m$1 + 1}.0-0`;
			else ret = `>=${M}.${m$1}.0${z} <${+M + 1}.0.0-0`;
			else if (pr) {
				debug$8("replaceCaret pr", pr);
				if (M === "0") if (m$1 === "0") ret = `>=${M}.${m$1}.${p}-${pr} <${M}.${m$1}.${+p + 1}-0`;
				else ret = `>=${M}.${m$1}.${p}-${pr} <${M}.${+m$1 + 1}.0-0`;
				else ret = `>=${M}.${m$1}.${p}-${pr} <${+M + 1}.0.0-0`;
			} else {
				debug$8("no pr");
				if (M === "0") if (m$1 === "0") ret = `>=${M}.${m$1}.${p}${z} <${M}.${m$1}.${+p + 1}-0`;
				else ret = `>=${M}.${m$1}.${p}${z} <${M}.${+m$1 + 1}.0-0`;
				else ret = `>=${M}.${m$1}.${p} <${+M + 1}.0.0-0`;
			}
			debug$8("caret return", ret);
			return ret;
		});
	};
	const replaceXRanges = (comp, options) => {
		debug$8("replaceXRanges", comp, options);
		return comp.split(/\s+/).map((c) => replaceXRange(c, options)).join(" ");
	};
	const replaceXRange = (comp, options) => {
		comp = comp.trim();
		const r = options.loose ? re$1[t$1.XRANGELOOSE] : re$1[t$1.XRANGE];
		return comp.replace(r, (ret, gtlt, M, m$1, p, pr) => {
			debug$8("xRange", comp, ret, gtlt, M, m$1, p, pr);
			const xM = isX(M);
			const xm = xM || isX(m$1);
			const xp = xm || isX(p);
			const anyX = xp;
			if (gtlt === "=" && anyX) gtlt = "";
			pr = options.includePrerelease ? "-0" : "";
			if (xM) if (gtlt === ">" || gtlt === "<") ret = "<0.0.0-0";
			else ret = "*";
			else if (gtlt && anyX) {
				if (xm) m$1 = 0;
				p = 0;
				if (gtlt === ">") {
					gtlt = ">=";
					if (xm) {
						M = +M + 1;
						m$1 = 0;
						p = 0;
					} else {
						m$1 = +m$1 + 1;
						p = 0;
					}
				} else if (gtlt === "<=") {
					gtlt = "<";
					if (xm) M = +M + 1;
					else m$1 = +m$1 + 1;
				}
				if (gtlt === "<") pr = "-0";
				ret = `${gtlt + M}.${m$1}.${p}${pr}`;
			} else if (xm) ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
			else if (xp) ret = `>=${M}.${m$1}.0${pr} <${M}.${+m$1 + 1}.0-0`;
			debug$8("xRange return", ret);
			return ret;
		});
	};
	const replaceStars = (comp, options) => {
		debug$8("replaceStars", comp, options);
		return comp.trim().replace(re$1[t$1.STAR], "");
	};
	const replaceGTE0 = (comp, options) => {
		debug$8("replaceGTE0", comp, options);
		return comp.trim().replace(re$1[options.includePrerelease ? t$1.GTE0PRE : t$1.GTE0], "");
	};
	const hyphenReplace = (incPr) => ($0, from$2, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr) => {
		if (isX(fM)) from$2 = "";
		else if (isX(fm)) from$2 = `>=${fM}.0.0${incPr ? "-0" : ""}`;
		else if (isX(fp)) from$2 = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
		else if (fpr) from$2 = `>=${from$2}`;
		else from$2 = `>=${from$2}${incPr ? "-0" : ""}`;
		if (isX(tM)) to = "";
		else if (isX(tm)) to = `<${+tM + 1}.0.0-0`;
		else if (isX(tp)) to = `<${tM}.${+tm + 1}.0-0`;
		else if (tpr) to = `<=${tM}.${tm}.${tp}-${tpr}`;
		else if (incPr) to = `<${tM}.${tm}.${+tp + 1}-0`;
		else to = `<=${to}`;
		return `${from$2} ${to}`.trim();
	};
	const testSet = (set$1, version, options) => {
		for (let i = 0; i < set$1.length; i++) if (!set$1[i].test(version)) return false;
		if (version.prerelease.length && !options.includePrerelease) {
			for (let i = 0; i < set$1.length; i++) {
				debug$8(set$1[i].semver);
				if (set$1[i].semver === Comparator$4.ANY) continue;
				if (set$1[i].semver.prerelease.length > 0) {
					const allowed = set$1[i].semver;
					if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) return true;
				}
			}
			return false;
		}
		return true;
	};
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/classes/comparator.js
var require_comparator = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/classes/comparator.js"(exports, module) {
	const ANY$2 = Symbol("SemVer ANY");
	var Comparator$3 = class Comparator$3 {
		static get ANY() {
			return ANY$2;
		}
		constructor(comp, options) {
			options = parseOptions(options);
			if (comp instanceof Comparator$3) if (comp.loose === !!options.loose) return comp;
			else comp = comp.value;
			comp = comp.trim().split(/\s+/).join(" ");
			debug$7("comparator", comp, options);
			this.options = options;
			this.loose = !!options.loose;
			this.parse(comp);
			if (this.semver === ANY$2) this.value = "";
			else this.value = this.operator + this.semver.version;
			debug$7("comp", this);
		}
		parse(comp) {
			const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
			const m$1 = comp.match(r);
			if (!m$1) throw new TypeError(`Invalid comparator: ${comp}`);
			this.operator = m$1[1] !== void 0 ? m$1[1] : "";
			if (this.operator === "=") this.operator = "";
			if (!m$1[2]) this.semver = ANY$2;
			else this.semver = new SemVer$5(m$1[2], this.options.loose);
		}
		toString() {
			return this.value;
		}
		test(version) {
			debug$7("Comparator.test", version, this.options.loose);
			if (this.semver === ANY$2 || version === ANY$2) return true;
			if (typeof version === "string") try {
				version = new SemVer$5(version, this.options);
			} catch (er) {
				return false;
			}
			return cmp$1(version, this.operator, this.semver, this.options);
		}
		intersects(comp, options) {
			if (!(comp instanceof Comparator$3)) throw new TypeError("a Comparator is required");
			if (this.operator === "") {
				if (this.value === "") return true;
				return new Range$10(comp.value, options).test(this.value);
			} else if (comp.operator === "") {
				if (comp.value === "") return true;
				return new Range$10(this.value, options).test(comp.semver);
			}
			options = parseOptions(options);
			if (options.includePrerelease && (this.value === "<0.0.0-0" || comp.value === "<0.0.0-0")) return false;
			if (!options.includePrerelease && (this.value.startsWith("<0.0.0") || comp.value.startsWith("<0.0.0"))) return false;
			if (this.operator.startsWith(">") && comp.operator.startsWith(">")) return true;
			if (this.operator.startsWith("<") && comp.operator.startsWith("<")) return true;
			if (this.semver.version === comp.semver.version && this.operator.includes("=") && comp.operator.includes("=")) return true;
			if (cmp$1(this.semver, "<", comp.semver, options) && this.operator.startsWith(">") && comp.operator.startsWith("<")) return true;
			if (cmp$1(this.semver, ">", comp.semver, options) && this.operator.startsWith("<") && comp.operator.startsWith(">")) return true;
			return false;
		}
	};
	module.exports = Comparator$3;
	const parseOptions = require_parse_options();
	const { safeRe: re, t } = require_re();
	const cmp$1 = require_cmp();
	const debug$7 = require_debug();
	const SemVer$5 = require_semver$1();
	const Range$10 = require_range();
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/satisfies.js
var require_satisfies = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/functions/satisfies.js"(exports, module) {
	const Range$9 = require_range();
	const satisfies$4 = (version, range, options) => {
		try {
			range = new Range$9(range, options);
		} catch (er) {
			return false;
		}
		return range.test(version);
	};
	module.exports = satisfies$4;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/ranges/to-comparators.js
var require_to_comparators = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/ranges/to-comparators.js"(exports, module) {
	const Range$8 = require_range();
	const toComparators$1 = (range, options) => new Range$8(range, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
	module.exports = toComparators$1;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/ranges/max-satisfying.js
var require_max_satisfying = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/ranges/max-satisfying.js"(exports, module) {
	const SemVer$4 = require_semver$1();
	const Range$7 = require_range();
	const maxSatisfying$1 = (versions, range, options) => {
		let max$2 = null;
		let maxSV = null;
		let rangeObj = null;
		try {
			rangeObj = new Range$7(range, options);
		} catch (er) {
			return null;
		}
		versions.forEach((v$1) => {
			if (rangeObj.test(v$1)) {
				if (!max$2 || maxSV.compare(v$1) === -1) {
					max$2 = v$1;
					maxSV = new SemVer$4(max$2, options);
				}
			}
		});
		return max$2;
	};
	module.exports = maxSatisfying$1;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/ranges/min-satisfying.js
var require_min_satisfying = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/ranges/min-satisfying.js"(exports, module) {
	const SemVer$3 = require_semver$1();
	const Range$6 = require_range();
	const minSatisfying$1 = (versions, range, options) => {
		let min$1 = null;
		let minSV = null;
		let rangeObj = null;
		try {
			rangeObj = new Range$6(range, options);
		} catch (er) {
			return null;
		}
		versions.forEach((v$1) => {
			if (rangeObj.test(v$1)) {
				if (!min$1 || minSV.compare(v$1) === 1) {
					min$1 = v$1;
					minSV = new SemVer$3(min$1, options);
				}
			}
		});
		return min$1;
	};
	module.exports = minSatisfying$1;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/ranges/min-version.js
var require_min_version = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/ranges/min-version.js"(exports, module) {
	const SemVer$2 = require_semver$1();
	const Range$5 = require_range();
	const gt$2 = require_gt();
	const minVersion$1 = (range, loose) => {
		range = new Range$5(range, loose);
		let minver = new SemVer$2("0.0.0");
		if (range.test(minver)) return minver;
		minver = new SemVer$2("0.0.0-0");
		if (range.test(minver)) return minver;
		minver = null;
		for (let i = 0; i < range.set.length; ++i) {
			const comparators = range.set[i];
			let setMin = null;
			comparators.forEach((comparator) => {
				const compver = new SemVer$2(comparator.semver.version);
				switch (comparator.operator) {
					case ">":
						if (compver.prerelease.length === 0) compver.patch++;
						else compver.prerelease.push(0);
						compver.raw = compver.format();
					case "":
					case ">=":
						if (!setMin || gt$2(compver, setMin)) setMin = compver;
						break;
					case "<":
					case "<=": break;
					default: throw new Error(`Unexpected operation: ${comparator.operator}`);
				}
			});
			if (setMin && (!minver || gt$2(minver, setMin))) minver = setMin;
		}
		if (minver && range.test(minver)) return minver;
		return null;
	};
	module.exports = minVersion$1;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/ranges/valid.js
var require_valid = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/ranges/valid.js"(exports, module) {
	const Range$4 = require_range();
	const validRange$1 = (range, options) => {
		try {
			return new Range$4(range, options).range || "*";
		} catch (er) {
			return null;
		}
	};
	module.exports = validRange$1;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/ranges/outside.js
var require_outside = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/ranges/outside.js"(exports, module) {
	const SemVer$1 = require_semver$1();
	const Comparator$2 = require_comparator();
	const { ANY: ANY$1 } = Comparator$2;
	const Range$3 = require_range();
	const satisfies$3 = require_satisfies();
	const gt$1 = require_gt();
	const lt$1 = require_lt();
	const lte$1 = require_lte();
	const gte$1 = require_gte();
	const outside$3 = (version, range, hilo, options) => {
		version = new SemVer$1(version, options);
		range = new Range$3(range, options);
		let gtfn, ltefn, ltfn, comp, ecomp;
		switch (hilo) {
			case ">":
				gtfn = gt$1;
				ltefn = lte$1;
				ltfn = lt$1;
				comp = ">";
				ecomp = ">=";
				break;
			case "<":
				gtfn = lt$1;
				ltefn = gte$1;
				ltfn = gt$1;
				comp = "<";
				ecomp = "<=";
				break;
			default: throw new TypeError("Must provide a hilo val of \"<\" or \">\"");
		}
		if (satisfies$3(version, range, options)) return false;
		for (let i = 0; i < range.set.length; ++i) {
			const comparators = range.set[i];
			let high = null;
			let low = null;
			comparators.forEach((comparator) => {
				if (comparator.semver === ANY$1) comparator = new Comparator$2(">=0.0.0");
				high = high || comparator;
				low = low || comparator;
				if (gtfn(comparator.semver, high.semver, options)) high = comparator;
				else if (ltfn(comparator.semver, low.semver, options)) low = comparator;
			});
			if (high.operator === comp || high.operator === ecomp) return false;
			if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) return false;
			else if (low.operator === ecomp && ltfn(version, low.semver)) return false;
		}
		return true;
	};
	module.exports = outside$3;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/ranges/gtr.js
var require_gtr = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/ranges/gtr.js"(exports, module) {
	const outside$2 = require_outside();
	const gtr$1 = (version, range, options) => outside$2(version, range, ">", options);
	module.exports = gtr$1;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/ranges/ltr.js
var require_ltr = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/ranges/ltr.js"(exports, module) {
	const outside$1 = require_outside();
	const ltr$1 = (version, range, options) => outside$1(version, range, "<", options);
	module.exports = ltr$1;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/ranges/intersects.js
var require_intersects = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/ranges/intersects.js"(exports, module) {
	const Range$2 = require_range();
	const intersects$1 = (r1, r2, options) => {
		r1 = new Range$2(r1, options);
		r2 = new Range$2(r2, options);
		return r1.intersects(r2, options);
	};
	module.exports = intersects$1;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/ranges/simplify.js
var require_simplify = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/ranges/simplify.js"(exports, module) {
	const satisfies$2 = require_satisfies();
	const compare$2 = require_compare();
	module.exports = (versions, range, options) => {
		const set$1 = [];
		let first$1 = null;
		let prev = null;
		const v$1 = versions.sort((a, b) => compare$2(a, b, options));
		for (const version of v$1) {
			const included = satisfies$2(version, range, options);
			if (included) {
				prev = version;
				if (!first$1) first$1 = version;
			} else {
				if (prev) set$1.push([first$1, prev]);
				prev = null;
				first$1 = null;
			}
		}
		if (first$1) set$1.push([first$1, null]);
		const ranges = [];
		for (const [min$1, max$2] of set$1) if (min$1 === max$2) ranges.push(min$1);
		else if (!max$2 && min$1 === v$1[0]) ranges.push("*");
		else if (!max$2) ranges.push(`>=${min$1}`);
		else if (min$1 === v$1[0]) ranges.push(`<=${max$2}`);
		else ranges.push(`${min$1} - ${max$2}`);
		const simplified = ranges.join(" || ");
		const original = typeof range.raw === "string" ? range.raw : String(range);
		return simplified.length < original.length ? simplified : range;
	};
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/ranges/subset.js
var require_subset = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/ranges/subset.js"(exports, module) {
	const Range$1 = require_range();
	const Comparator$1 = require_comparator();
	const { ANY } = Comparator$1;
	const satisfies$1 = require_satisfies();
	const compare$1 = require_compare();
	const subset$1 = (sub, dom, options = {}) => {
		if (sub === dom) return true;
		sub = new Range$1(sub, options);
		dom = new Range$1(dom, options);
		let sawNonNull = false;
		OUTER: for (const simpleSub of sub.set) {
			for (const simpleDom of dom.set) {
				const isSub = simpleSubset(simpleSub, simpleDom, options);
				sawNonNull = sawNonNull || isSub !== null;
				if (isSub) continue OUTER;
			}
			if (sawNonNull) return false;
		}
		return true;
	};
	const minimumVersionWithPreRelease = [new Comparator$1(">=0.0.0-0")];
	const minimumVersion = [new Comparator$1(">=0.0.0")];
	const simpleSubset = (sub, dom, options) => {
		if (sub === dom) return true;
		if (sub.length === 1 && sub[0].semver === ANY) if (dom.length === 1 && dom[0].semver === ANY) return true;
		else if (options.includePrerelease) sub = minimumVersionWithPreRelease;
		else sub = minimumVersion;
		if (dom.length === 1 && dom[0].semver === ANY) if (options.includePrerelease) return true;
		else dom = minimumVersion;
		const eqSet = new Set();
		let gt$5, lt$4;
		for (const c of sub) if (c.operator === ">" || c.operator === ">=") gt$5 = higherGT(gt$5, c, options);
		else if (c.operator === "<" || c.operator === "<=") lt$4 = lowerLT(lt$4, c, options);
		else eqSet.add(c.semver);
		if (eqSet.size > 1) return null;
		let gtltComp;
		if (gt$5 && lt$4) {
			gtltComp = compare$1(gt$5.semver, lt$4.semver, options);
			if (gtltComp > 0) return null;
			else if (gtltComp === 0 && (gt$5.operator !== ">=" || lt$4.operator !== "<=")) return null;
		}
		for (const eq$3 of eqSet) {
			if (gt$5 && !satisfies$1(eq$3, String(gt$5), options)) return null;
			if (lt$4 && !satisfies$1(eq$3, String(lt$4), options)) return null;
			for (const c of dom) if (!satisfies$1(eq$3, String(c), options)) return false;
			return true;
		}
		let higher, lower;
		let hasDomLT, hasDomGT;
		let needDomLTPre = lt$4 && !options.includePrerelease && lt$4.semver.prerelease.length ? lt$4.semver : false;
		let needDomGTPre = gt$5 && !options.includePrerelease && gt$5.semver.prerelease.length ? gt$5.semver : false;
		if (needDomLTPre && needDomLTPre.prerelease.length === 1 && lt$4.operator === "<" && needDomLTPre.prerelease[0] === 0) needDomLTPre = false;
		for (const c of dom) {
			hasDomGT = hasDomGT || c.operator === ">" || c.operator === ">=";
			hasDomLT = hasDomLT || c.operator === "<" || c.operator === "<=";
			if (gt$5) {
				if (needDomGTPre) {
					if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch) needDomGTPre = false;
				}
				if (c.operator === ">" || c.operator === ">=") {
					higher = higherGT(gt$5, c, options);
					if (higher === c && higher !== gt$5) return false;
				} else if (gt$5.operator === ">=" && !satisfies$1(gt$5.semver, String(c), options)) return false;
			}
			if (lt$4) {
				if (needDomLTPre) {
					if (c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch) needDomLTPre = false;
				}
				if (c.operator === "<" || c.operator === "<=") {
					lower = lowerLT(lt$4, c, options);
					if (lower === c && lower !== lt$4) return false;
				} else if (lt$4.operator === "<=" && !satisfies$1(lt$4.semver, String(c), options)) return false;
			}
			if (!c.operator && (lt$4 || gt$5) && gtltComp !== 0) return false;
		}
		if (gt$5 && hasDomLT && !lt$4 && gtltComp !== 0) return false;
		if (lt$4 && hasDomGT && !gt$5 && gtltComp !== 0) return false;
		if (needDomGTPre || needDomLTPre) return false;
		return true;
	};
	const higherGT = (a, b, options) => {
		if (!a) return b;
		const comp = compare$1(a.semver, b.semver, options);
		return comp > 0 ? a : comp < 0 ? b : b.operator === ">" && a.operator === ">=" ? b : a;
	};
	const lowerLT = (a, b, options) => {
		if (!a) return b;
		const comp = compare$1(a.semver, b.semver, options);
		return comp < 0 ? a : comp > 0 ? b : b.operator === "<" && a.operator === "<=" ? b : a;
	};
	module.exports = subset$1;
} });

//#endregion
//#region node_modules/.pnpm/semver@7.7.1/node_modules/semver/index.js
var require_semver = __commonJS({ "node_modules/.pnpm/semver@7.7.1/node_modules/semver/index.js"(exports, module) {
	const internalRe = require_re();
	const constants$2 = require_constants$1();
	const SemVer = require_semver$1();
	const identifiers = require_identifiers();
	const parse = require_parse();
	const valid = require_valid$1();
	const clean = require_clean();
	const inc = require_inc();
	const diff = require_diff();
	const major = require_major();
	const minor = require_minor();
	const patch = require_patch();
	const prerelease = require_prerelease();
	const compare = require_compare();
	const rcompare = require_rcompare();
	const compareLoose = require_compare_loose();
	const compareBuild = require_compare_build();
	const sort = require_sort();
	const rsort = require_rsort();
	const gt = require_gt();
	const lt = require_lt();
	const eq = require_eq();
	const neq = require_neq();
	const gte = require_gte();
	const lte = require_lte();
	const cmp = require_cmp();
	const coerce = require_coerce();
	const Comparator = require_comparator();
	const Range = require_range();
	const satisfies = require_satisfies();
	const toComparators = require_to_comparators();
	const maxSatisfying = require_max_satisfying();
	const minSatisfying = require_min_satisfying();
	const minVersion = require_min_version();
	const validRange = require_valid();
	const outside = require_outside();
	const gtr = require_gtr();
	const ltr = require_ltr();
	const intersects = require_intersects();
	const simplifyRange = require_simplify();
	const subset = require_subset();
	module.exports = {
		parse,
		valid,
		clean,
		inc,
		diff,
		major,
		minor,
		patch,
		prerelease,
		compare,
		rcompare,
		compareLoose,
		compareBuild,
		sort,
		rsort,
		gt,
		lt,
		eq,
		neq,
		gte,
		lte,
		cmp,
		coerce,
		Comparator,
		Range,
		satisfies,
		toComparators,
		maxSatisfying,
		minSatisfying,
		minVersion,
		validRange,
		outside,
		gtr,
		ltr,
		intersects,
		simplifyRange,
		subset,
		SemVer,
		re: internalRe.re,
		src: internalRe.src,
		tokens: internalRe.t,
		SEMVER_SPEC_VERSION: constants$2.SEMVER_SPEC_VERSION,
		RELEASE_TYPES: constants$2.RELEASE_TYPES,
		compareIdentifiers: identifiers.compareIdentifiers,
		rcompareIdentifiers: identifiers.rcompareIdentifiers
	};
} });

//#endregion
//#region node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/asymmetricKeyDetailsSupported.js
var require_asymmetricKeyDetailsSupported = __commonJS({ "node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/asymmetricKeyDetailsSupported.js"(exports, module) {
	const semver$2 = require_semver();
	module.exports = semver$2.satisfies(process.version, ">=15.7.0");
} });

//#endregion
//#region node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/rsaPssKeyDetailsSupported.js
var require_rsaPssKeyDetailsSupported = __commonJS({ "node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/rsaPssKeyDetailsSupported.js"(exports, module) {
	const semver$1 = require_semver();
	module.exports = semver$1.satisfies(process.version, ">=16.9.0");
} });

//#endregion
//#region node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/validateAsymmetricKey.js
var require_validateAsymmetricKey = __commonJS({ "node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/validateAsymmetricKey.js"(exports, module) {
	const ASYMMETRIC_KEY_DETAILS_SUPPORTED = require_asymmetricKeyDetailsSupported();
	const RSA_PSS_KEY_DETAILS_SUPPORTED = require_rsaPssKeyDetailsSupported();
	const allowedAlgorithmsForKeys = {
		"ec": [
			"ES256",
			"ES384",
			"ES512"
		],
		"rsa": [
			"RS256",
			"PS256",
			"RS384",
			"PS384",
			"RS512",
			"PS512"
		],
		"rsa-pss": [
			"PS256",
			"PS384",
			"PS512"
		]
	};
	const allowedCurves = {
		ES256: "prime256v1",
		ES384: "secp384r1",
		ES512: "secp521r1"
	};
	module.exports = function(algorithm, key$1) {
		if (!algorithm || !key$1) return;
		const keyType = key$1.asymmetricKeyType;
		if (!keyType) return;
		const allowedAlgorithms = allowedAlgorithmsForKeys[keyType];
		if (!allowedAlgorithms) throw new Error(`Unknown key type "${keyType}".`);
		if (!allowedAlgorithms.includes(algorithm)) throw new Error(`"alg" parameter for "${keyType}" key type must be one of: ${allowedAlgorithms.join(", ")}.`);
		/* istanbul ignore next */
		if (ASYMMETRIC_KEY_DETAILS_SUPPORTED) switch (keyType) {
			case "ec":
				const keyCurve = key$1.asymmetricKeyDetails.namedCurve;
				const allowedCurve = allowedCurves[algorithm];
				if (keyCurve !== allowedCurve) throw new Error(`"alg" parameter "${algorithm}" requires curve "${allowedCurve}".`);
				break;
			case "rsa-pss":
				if (RSA_PSS_KEY_DETAILS_SUPPORTED) {
					const length = parseInt(algorithm.slice(-3), 10);
					const { hashAlgorithm, mgf1HashAlgorithm, saltLength } = key$1.asymmetricKeyDetails;
					if (hashAlgorithm !== `sha${length}` || mgf1HashAlgorithm !== hashAlgorithm) throw new Error(`Invalid key for this operation, its RSA-PSS parameters do not meet the requirements of "alg" ${algorithm}.`);
					if (saltLength !== void 0 && saltLength > length >> 3) throw new Error(`Invalid key for this operation, its RSA-PSS parameter saltLength does not meet the requirements of "alg" ${algorithm}.`);
				}
				break;
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/psSupported.js
var require_psSupported = __commonJS({ "node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/lib/psSupported.js"(exports, module) {
	var semver = require_semver();
	module.exports = semver.satisfies(process.version, "^6.12.0 || >=8.0.0");
} });

//#endregion
//#region node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/verify.js
var require_verify$1 = __commonJS({ "node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/verify.js"(exports, module) {
	const JsonWebTokenError = require_JsonWebTokenError();
	const NotBeforeError = require_NotBeforeError();
	const TokenExpiredError = require_TokenExpiredError();
	const decode = require_decode();
	const timespan$1 = require_timespan();
	const validateAsymmetricKey$1 = require_validateAsymmetricKey();
	const PS_SUPPORTED$1 = require_psSupported();
	const jws$1 = require_jws();
	const { KeyObject: KeyObject$1, createSecretKey: createSecretKey$1, createPublicKey } = __require("crypto");
	const PUB_KEY_ALGS = [
		"RS256",
		"RS384",
		"RS512"
	];
	const EC_KEY_ALGS = [
		"ES256",
		"ES384",
		"ES512"
	];
	const RSA_KEY_ALGS = [
		"RS256",
		"RS384",
		"RS512"
	];
	const HS_ALGS = [
		"HS256",
		"HS384",
		"HS512"
	];
	if (PS_SUPPORTED$1) {
		PUB_KEY_ALGS.splice(PUB_KEY_ALGS.length, 0, "PS256", "PS384", "PS512");
		RSA_KEY_ALGS.splice(RSA_KEY_ALGS.length, 0, "PS256", "PS384", "PS512");
	}
	module.exports = function(jwtString, secretOrPublicKey, options, callback) {
		if (typeof options === "function" && !callback) {
			callback = options;
			options = {};
		}
		if (!options) options = {};
		options = Object.assign({}, options);
		let done$1;
		if (callback) done$1 = callback;
		else done$1 = function(err, data) {
			if (err) throw err;
			return data;
		};
		if (options.clockTimestamp && typeof options.clockTimestamp !== "number") return done$1(new JsonWebTokenError("clockTimestamp must be a number"));
		if (options.nonce !== void 0 && (typeof options.nonce !== "string" || options.nonce.trim() === "")) return done$1(new JsonWebTokenError("nonce must be a non-empty string"));
		if (options.allowInvalidAsymmetricKeyTypes !== void 0 && typeof options.allowInvalidAsymmetricKeyTypes !== "boolean") return done$1(new JsonWebTokenError("allowInvalidAsymmetricKeyTypes must be a boolean"));
		const clockTimestamp = options.clockTimestamp || Math.floor(Date.now() / 1e3);
		if (!jwtString) return done$1(new JsonWebTokenError("jwt must be provided"));
		if (typeof jwtString !== "string") return done$1(new JsonWebTokenError("jwt must be a string"));
		const parts = jwtString.split(".");
		if (parts.length !== 3) return done$1(new JsonWebTokenError("jwt malformed"));
		let decodedToken;
		try {
			decodedToken = decode(jwtString, { complete: true });
		} catch (err) {
			return done$1(err);
		}
		if (!decodedToken) return done$1(new JsonWebTokenError("invalid token"));
		const header = decodedToken.header;
		let getSecret;
		if (typeof secretOrPublicKey === "function") {
			if (!callback) return done$1(new JsonWebTokenError("verify must be called asynchronous if secret or public key is provided as a callback"));
			getSecret = secretOrPublicKey;
		} else getSecret = function(header$1, secretCallback) {
			return secretCallback(null, secretOrPublicKey);
		};
		return getSecret(header, function(err, secretOrPublicKey$1) {
			if (err) return done$1(new JsonWebTokenError("error in secret or public key callback: " + err.message));
			const hasSignature = parts[2].trim() !== "";
			if (!hasSignature && secretOrPublicKey$1) return done$1(new JsonWebTokenError("jwt signature is required"));
			if (hasSignature && !secretOrPublicKey$1) return done$1(new JsonWebTokenError("secret or public key must be provided"));
			if (!hasSignature && !options.algorithms) return done$1(new JsonWebTokenError("please specify \"none\" in \"algorithms\" to verify unsigned tokens"));
			if (secretOrPublicKey$1 != null && !(secretOrPublicKey$1 instanceof KeyObject$1)) try {
				secretOrPublicKey$1 = createPublicKey(secretOrPublicKey$1);
			} catch (_) {
				try {
					secretOrPublicKey$1 = createSecretKey$1(typeof secretOrPublicKey$1 === "string" ? Buffer.from(secretOrPublicKey$1) : secretOrPublicKey$1);
				} catch (_$1) {
					return done$1(new JsonWebTokenError("secretOrPublicKey is not valid key material"));
				}
			}
			if (!options.algorithms) if (secretOrPublicKey$1.type === "secret") options.algorithms = HS_ALGS;
			else if (["rsa", "rsa-pss"].includes(secretOrPublicKey$1.asymmetricKeyType)) options.algorithms = RSA_KEY_ALGS;
			else if (secretOrPublicKey$1.asymmetricKeyType === "ec") options.algorithms = EC_KEY_ALGS;
			else options.algorithms = PUB_KEY_ALGS;
			if (options.algorithms.indexOf(decodedToken.header.alg) === -1) return done$1(new JsonWebTokenError("invalid algorithm"));
			if (header.alg.startsWith("HS") && secretOrPublicKey$1.type !== "secret") return done$1(new JsonWebTokenError(`secretOrPublicKey must be a symmetric key when using ${header.alg}`));
			else if (/^(?:RS|PS|ES)/.test(header.alg) && secretOrPublicKey$1.type !== "public") return done$1(new JsonWebTokenError(`secretOrPublicKey must be an asymmetric key when using ${header.alg}`));
			if (!options.allowInvalidAsymmetricKeyTypes) try {
				validateAsymmetricKey$1(header.alg, secretOrPublicKey$1);
			} catch (e) {
				return done$1(e);
			}
			let valid$2;
			try {
				valid$2 = jws$1.verify(jwtString, decodedToken.header.alg, secretOrPublicKey$1);
			} catch (e) {
				return done$1(e);
			}
			if (!valid$2) return done$1(new JsonWebTokenError("invalid signature"));
			const payload = decodedToken.payload;
			if (typeof payload.nbf !== "undefined" && !options.ignoreNotBefore) {
				if (typeof payload.nbf !== "number") return done$1(new JsonWebTokenError("invalid nbf value"));
				if (payload.nbf > clockTimestamp + (options.clockTolerance || 0)) return done$1(new NotBeforeError("jwt not active", new Date(payload.nbf * 1e3)));
			}
			if (typeof payload.exp !== "undefined" && !options.ignoreExpiration) {
				if (typeof payload.exp !== "number") return done$1(new JsonWebTokenError("invalid exp value"));
				if (clockTimestamp >= payload.exp + (options.clockTolerance || 0)) return done$1(new TokenExpiredError("jwt expired", new Date(payload.exp * 1e3)));
			}
			if (options.audience) {
				const audiences$1 = Array.isArray(options.audience) ? options.audience : [options.audience];
				const target = Array.isArray(payload.aud) ? payload.aud : [payload.aud];
				const match = target.some(function(targetAudience) {
					return audiences$1.some(function(audience) {
						return audience instanceof RegExp ? audience.test(targetAudience) : audience === targetAudience;
					});
				});
				if (!match) return done$1(new JsonWebTokenError("jwt audience invalid. expected: " + audiences$1.join(" or ")));
			}
			if (options.issuer) {
				const invalid_issuer = typeof options.issuer === "string" && payload.iss !== options.issuer || Array.isArray(options.issuer) && options.issuer.indexOf(payload.iss) === -1;
				if (invalid_issuer) return done$1(new JsonWebTokenError("jwt issuer invalid. expected: " + options.issuer));
			}
			if (options.subject) {
				if (payload.sub !== options.subject) return done$1(new JsonWebTokenError("jwt subject invalid. expected: " + options.subject));
			}
			if (options.jwtid) {
				if (payload.jti !== options.jwtid) return done$1(new JsonWebTokenError("jwt jwtid invalid. expected: " + options.jwtid));
			}
			if (options.nonce) {
				if (payload.nonce !== options.nonce) return done$1(new JsonWebTokenError("jwt nonce invalid. expected: " + options.nonce));
			}
			if (options.maxAge) {
				if (typeof payload.iat !== "number") return done$1(new JsonWebTokenError("iat required when maxAge is specified"));
				const maxAgeTimestamp = timespan$1(options.maxAge, payload.iat);
				if (typeof maxAgeTimestamp === "undefined") return done$1(new JsonWebTokenError("\"maxAge\" should be a number of seconds or string representing a timespan eg: \"1d\", \"20h\", 60"));
				if (clockTimestamp >= maxAgeTimestamp + (options.clockTolerance || 0)) return done$1(new TokenExpiredError("maxAge exceeded", new Date(maxAgeTimestamp * 1e3)));
			}
			if (options.complete === true) {
				const signature = decodedToken.signature;
				return done$1(null, {
					header,
					payload,
					signature
				});
			}
			return done$1(null, payload);
		});
	};
} });

//#endregion
//#region node_modules/.pnpm/lodash.includes@4.3.0/node_modules/lodash.includes/index.js
var require_lodash$6 = __commonJS({ "node_modules/.pnpm/lodash.includes@4.3.0/node_modules/lodash.includes/index.js"(exports, module) {
	/**
	* lodash (Custom Build) <https://lodash.com/>
	* Build: `lodash modularize exports="npm" -o ./`
	* Copyright jQuery Foundation and other contributors <https://jquery.org/>
	* Released under MIT license <https://lodash.com/license>
	* Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	* Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	*/
	/** Used as references for various `Number` constants. */
	var INFINITY$2 = Infinity, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER$2 = 17976931348623157e292, NAN$2 = NaN;
	/** `Object#toString` result references. */
	var argsTag = "[object Arguments]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", stringTag$1 = "[object String]", symbolTag$2 = "[object Symbol]";
	/** Used to match leading and trailing whitespace. */
	var reTrim$2 = /^\s+|\s+$/g;
	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex$2 = /^[-+]0x[0-9a-f]+$/i;
	/** Used to detect binary string values. */
	var reIsBinary$2 = /^0b[01]+$/i;
	/** Used to detect octal string values. */
	var reIsOctal$2 = /^0o[0-7]+$/i;
	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;
	/** Built-in method references without a dependency on `root`. */
	var freeParseInt$2 = parseInt;
	/**
	* A specialized version of `_.map` for arrays without support for iteratee
	* shorthands.
	*
	* @private
	* @param {Array} [array] The array to iterate over.
	* @param {Function} iteratee The function invoked per iteration.
	* @returns {Array} Returns the new mapped array.
	*/
	function arrayMap(array, iteratee) {
		var index = -1, length = array ? array.length : 0, result = Array(length);
		while (++index < length) result[index] = iteratee(array[index], index, array);
		return result;
	}
	/**
	* The base implementation of `_.findIndex` and `_.findLastIndex` without
	* support for iteratee shorthands.
	*
	* @private
	* @param {Array} array The array to inspect.
	* @param {Function} predicate The function invoked per iteration.
	* @param {number} fromIndex The index to search from.
	* @param {boolean} [fromRight] Specify iterating from right to left.
	* @returns {number} Returns the index of the matched value, else `-1`.
	*/
	function baseFindIndex(array, predicate, fromIndex, fromRight) {
		var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
		while (fromRight ? index-- : ++index < length) if (predicate(array[index], index, array)) return index;
		return -1;
	}
	/**
	* The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	*
	* @private
	* @param {Array} array The array to inspect.
	* @param {*} value The value to search for.
	* @param {number} fromIndex The index to search from.
	* @returns {number} Returns the index of the matched value, else `-1`.
	*/
	function baseIndexOf(array, value, fromIndex) {
		if (value !== value) return baseFindIndex(array, baseIsNaN, fromIndex);
		var index = fromIndex - 1, length = array.length;
		while (++index < length) if (array[index] === value) return index;
		return -1;
	}
	/**
	* The base implementation of `_.isNaN` without support for number objects.
	*
	* @private
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	*/
	function baseIsNaN(value) {
		return value !== value;
	}
	/**
	* The base implementation of `_.times` without support for iteratee shorthands
	* or max array length checks.
	*
	* @private
	* @param {number} n The number of times to invoke `iteratee`.
	* @param {Function} iteratee The function invoked per iteration.
	* @returns {Array} Returns the array of results.
	*/
	function baseTimes(n, iteratee) {
		var index = -1, result = Array(n);
		while (++index < n) result[index] = iteratee(index);
		return result;
	}
	/**
	* The base implementation of `_.values` and `_.valuesIn` which creates an
	* array of `object` property values corresponding to the property names
	* of `props`.
	*
	* @private
	* @param {Object} object The object to query.
	* @param {Array} props The property names to get values for.
	* @returns {Object} Returns the array of property values.
	*/
	function baseValues(object, props) {
		return arrayMap(props, function(key$1) {
			return object[key$1];
		});
	}
	/**
	* Creates a unary function that invokes `func` with its argument transformed.
	*
	* @private
	* @param {Function} func The function to wrap.
	* @param {Function} transform The argument transform.
	* @returns {Function} Returns the new function.
	*/
	function overArg$1(func, transform$1) {
		return function(arg) {
			return func(transform$1(arg));
		};
	}
	/** Used for built-in method references. */
	var objectProto$6 = Object.prototype;
	/** Used to check objects for own properties. */
	var hasOwnProperty$1 = objectProto$6.hasOwnProperty;
	/**
	* Used to resolve the
	* [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	* of values.
	*/
	var objectToString$7 = objectProto$6.toString;
	/** Built-in value references. */
	var propertyIsEnumerable = objectProto$6.propertyIsEnumerable;
	var nativeKeys = overArg$1(Object.keys, Object), nativeMax = Math.max;
	/**
	* Creates an array of the enumerable property names of the array-like `value`.
	*
	* @private
	* @param {*} value The value to query.
	* @param {boolean} inherited Specify returning inherited property names.
	* @returns {Array} Returns the array of property names.
	*/
	function arrayLikeKeys(value, inherited) {
		var result = isArray$2(value) || isArguments(value) ? baseTimes(value.length, String) : [];
		var length = result.length, skipIndexes = !!length;
		for (var key$1 in value) if ((inherited || hasOwnProperty$1.call(value, key$1)) && !(skipIndexes && (key$1 == "length" || isIndex(key$1, length)))) result.push(key$1);
		return result;
	}
	/**
	* The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	*
	* @private
	* @param {Object} object The object to query.
	* @returns {Array} Returns the array of property names.
	*/
	function baseKeys(object) {
		if (!isPrototype(object)) return nativeKeys(object);
		var result = [];
		for (var key$1 in Object(object)) if (hasOwnProperty$1.call(object, key$1) && key$1 != "constructor") result.push(key$1);
		return result;
	}
	/**
	* Checks if `value` is a valid array-like index.
	*
	* @private
	* @param {*} value The value to check.
	* @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	* @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	*/
	function isIndex(value, length) {
		length = length == null ? MAX_SAFE_INTEGER : length;
		return !!length && (typeof value == "number" || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
	}
	/**
	* Checks if `value` is likely a prototype object.
	*
	* @private
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	*/
	function isPrototype(value) {
		var Ctor = value && value.constructor, proto$2 = typeof Ctor == "function" && Ctor.prototype || objectProto$6;
		return value === proto$2;
	}
	/**
	* Checks if `value` is in `collection`. If `collection` is a string, it's
	* checked for a substring of `value`, otherwise
	* [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	* is used for equality comparisons. If `fromIndex` is negative, it's used as
	* the offset from the end of `collection`.
	*
	* @static
	* @memberOf _
	* @since 0.1.0
	* @category Collection
	* @param {Array|Object|string} collection The collection to inspect.
	* @param {*} value The value to search for.
	* @param {number} [fromIndex=0] The index to search from.
	* @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
	* @returns {boolean} Returns `true` if `value` is found, else `false`.
	* @example
	*
	* _.includes([1, 2, 3], 1);
	* // => true
	*
	* _.includes([1, 2, 3], 1, 2);
	* // => false
	*
	* _.includes({ 'a': 1, 'b': 2 }, 1);
	* // => true
	*
	* _.includes('abcd', 'bc');
	* // => true
	*/
	function includes$1(collection, value, fromIndex, guard) {
		collection = isArrayLike(collection) ? collection : values(collection);
		fromIndex = fromIndex && !guard ? toInteger$2(fromIndex) : 0;
		var length = collection.length;
		if (fromIndex < 0) fromIndex = nativeMax(length + fromIndex, 0);
		return isString$3(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
	}
	/**
	* Checks if `value` is likely an `arguments` object.
	*
	* @static
	* @memberOf _
	* @since 0.1.0
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is an `arguments` object,
	*  else `false`.
	* @example
	*
	* _.isArguments(function() { return arguments; }());
	* // => true
	*
	* _.isArguments([1, 2, 3]);
	* // => false
	*/
	function isArguments(value) {
		return isArrayLikeObject(value) && hasOwnProperty$1.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString$7.call(value) == argsTag);
	}
	/**
	* Checks if `value` is classified as an `Array` object.
	*
	* @static
	* @memberOf _
	* @since 0.1.0
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is an array, else `false`.
	* @example
	*
	* _.isArray([1, 2, 3]);
	* // => true
	*
	* _.isArray(document.body.children);
	* // => false
	*
	* _.isArray('abc');
	* // => false
	*
	* _.isArray(_.noop);
	* // => false
	*/
	var isArray$2 = Array.isArray;
	/**
	* Checks if `value` is array-like. A value is considered array-like if it's
	* not a function and has a `value.length` that's an integer greater than or
	* equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	*
	* @static
	* @memberOf _
	* @since 4.0.0
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	* @example
	*
	* _.isArrayLike([1, 2, 3]);
	* // => true
	*
	* _.isArrayLike(document.body.children);
	* // => true
	*
	* _.isArrayLike('abc');
	* // => true
	*
	* _.isArrayLike(_.noop);
	* // => false
	*/
	function isArrayLike(value) {
		return value != null && isLength(value.length) && !isFunction$1(value);
	}
	/**
	* This method is like `_.isArrayLike` except that it also checks if `value`
	* is an object.
	*
	* @static
	* @memberOf _
	* @since 4.0.0
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is an array-like object,
	*  else `false`.
	* @example
	*
	* _.isArrayLikeObject([1, 2, 3]);
	* // => true
	*
	* _.isArrayLikeObject(document.body.children);
	* // => true
	*
	* _.isArrayLikeObject('abc');
	* // => false
	*
	* _.isArrayLikeObject(_.noop);
	* // => false
	*/
	function isArrayLikeObject(value) {
		return isObjectLike$6(value) && isArrayLike(value);
	}
	/**
	* Checks if `value` is classified as a `Function` object.
	*
	* @static
	* @memberOf _
	* @since 0.1.0
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is a function, else `false`.
	* @example
	*
	* _.isFunction(_);
	* // => true
	*
	* _.isFunction(/abc/);
	* // => false
	*/
	function isFunction$1(value) {
		var tag = isObject$3(value) ? objectToString$7.call(value) : "";
		return tag == funcTag || tag == genTag;
	}
	/**
	* Checks if `value` is a valid array-like length.
	*
	* **Note:** This method is loosely based on
	* [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	*
	* @static
	* @memberOf _
	* @since 4.0.0
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	* @example
	*
	* _.isLength(3);
	* // => true
	*
	* _.isLength(Number.MIN_VALUE);
	* // => false
	*
	* _.isLength(Infinity);
	* // => false
	*
	* _.isLength('3');
	* // => false
	*/
	function isLength(value) {
		return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}
	/**
	* Checks if `value` is the
	* [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	* of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	*
	* @static
	* @memberOf _
	* @since 0.1.0
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is an object, else `false`.
	* @example
	*
	* _.isObject({});
	* // => true
	*
	* _.isObject([1, 2, 3]);
	* // => true
	*
	* _.isObject(_.noop);
	* // => true
	*
	* _.isObject(null);
	* // => false
	*/
	function isObject$3(value) {
		var type = typeof value;
		return !!value && (type == "object" || type == "function");
	}
	/**
	* Checks if `value` is object-like. A value is object-like if it's not `null`
	* and has a `typeof` result of "object".
	*
	* @static
	* @memberOf _
	* @since 4.0.0
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	* @example
	*
	* _.isObjectLike({});
	* // => true
	*
	* _.isObjectLike([1, 2, 3]);
	* // => true
	*
	* _.isObjectLike(_.noop);
	* // => false
	*
	* _.isObjectLike(null);
	* // => false
	*/
	function isObjectLike$6(value) {
		return !!value && typeof value == "object";
	}
	/**
	* Checks if `value` is classified as a `String` primitive or object.
	*
	* @static
	* @since 0.1.0
	* @memberOf _
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is a string, else `false`.
	* @example
	*
	* _.isString('abc');
	* // => true
	*
	* _.isString(1);
	* // => false
	*/
	function isString$3(value) {
		return typeof value == "string" || !isArray$2(value) && isObjectLike$6(value) && objectToString$7.call(value) == stringTag$1;
	}
	/**
	* Checks if `value` is classified as a `Symbol` primitive or object.
	*
	* @static
	* @memberOf _
	* @since 4.0.0
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	* @example
	*
	* _.isSymbol(Symbol.iterator);
	* // => true
	*
	* _.isSymbol('abc');
	* // => false
	*/
	function isSymbol$3(value) {
		return typeof value == "symbol" || isObjectLike$6(value) && objectToString$7.call(value) == symbolTag$2;
	}
	/**
	* Converts `value` to a finite number.
	*
	* @static
	* @memberOf _
	* @since 4.12.0
	* @category Lang
	* @param {*} value The value to convert.
	* @returns {number} Returns the converted number.
	* @example
	*
	* _.toFinite(3.2);
	* // => 3.2
	*
	* _.toFinite(Number.MIN_VALUE);
	* // => 5e-324
	*
	* _.toFinite(Infinity);
	* // => 1.7976931348623157e+308
	*
	* _.toFinite('3.2');
	* // => 3.2
	*/
	function toFinite$2(value) {
		if (!value) return value === 0 ? value : 0;
		value = toNumber$2(value);
		if (value === INFINITY$2 || value === -INFINITY$2) {
			var sign$1 = value < 0 ? -1 : 1;
			return sign$1 * MAX_INTEGER$2;
		}
		return value === value ? value : 0;
	}
	/**
	* Converts `value` to an integer.
	*
	* **Note:** This method is loosely based on
	* [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	*
	* @static
	* @memberOf _
	* @since 4.0.0
	* @category Lang
	* @param {*} value The value to convert.
	* @returns {number} Returns the converted integer.
	* @example
	*
	* _.toInteger(3.2);
	* // => 3
	*
	* _.toInteger(Number.MIN_VALUE);
	* // => 0
	*
	* _.toInteger(Infinity);
	* // => 1.7976931348623157e+308
	*
	* _.toInteger('3.2');
	* // => 3
	*/
	function toInteger$2(value) {
		var result = toFinite$2(value), remainder = result % 1;
		return result === result ? remainder ? result - remainder : result : 0;
	}
	/**
	* Converts `value` to a number.
	*
	* @static
	* @memberOf _
	* @since 4.0.0
	* @category Lang
	* @param {*} value The value to process.
	* @returns {number} Returns the number.
	* @example
	*
	* _.toNumber(3.2);
	* // => 3.2
	*
	* _.toNumber(Number.MIN_VALUE);
	* // => 5e-324
	*
	* _.toNumber(Infinity);
	* // => Infinity
	*
	* _.toNumber('3.2');
	* // => 3.2
	*/
	function toNumber$2(value) {
		if (typeof value == "number") return value;
		if (isSymbol$3(value)) return NAN$2;
		if (isObject$3(value)) {
			var other = typeof value.valueOf == "function" ? value.valueOf() : value;
			value = isObject$3(other) ? other + "" : other;
		}
		if (typeof value != "string") return value === 0 ? value : +value;
		value = value.replace(reTrim$2, "");
		var isBinary = reIsBinary$2.test(value);
		return isBinary || reIsOctal$2.test(value) ? freeParseInt$2(value.slice(2), isBinary ? 2 : 8) : reIsBadHex$2.test(value) ? NAN$2 : +value;
	}
	/**
	* Creates an array of the own enumerable property names of `object`.
	*
	* **Note:** Non-object values are coerced to objects. See the
	* [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	* for more details.
	*
	* @static
	* @since 0.1.0
	* @memberOf _
	* @category Object
	* @param {Object} object The object to query.
	* @returns {Array} Returns the array of property names.
	* @example
	*
	* function Foo() {
	*   this.a = 1;
	*   this.b = 2;
	* }
	*
	* Foo.prototype.c = 3;
	*
	* _.keys(new Foo);
	* // => ['a', 'b'] (iteration order is not guaranteed)
	*
	* _.keys('hi');
	* // => ['0', '1']
	*/
	function keys(object) {
		return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}
	/**
	* Creates an array of the own enumerable string keyed property values of `object`.
	*
	* **Note:** Non-object values are coerced to objects.
	*
	* @static
	* @since 0.1.0
	* @memberOf _
	* @category Object
	* @param {Object} object The object to query.
	* @returns {Array} Returns the array of property values.
	* @example
	*
	* function Foo() {
	*   this.a = 1;
	*   this.b = 2;
	* }
	*
	* Foo.prototype.c = 3;
	*
	* _.values(new Foo);
	* // => [1, 2] (iteration order is not guaranteed)
	*
	* _.values('hi');
	* // => ['h', 'i']
	*/
	function values(object) {
		return object ? baseValues(object, keys(object)) : [];
	}
	module.exports = includes$1;
} });

//#endregion
//#region node_modules/.pnpm/lodash.isboolean@3.0.3/node_modules/lodash.isboolean/index.js
var require_lodash$5 = __commonJS({ "node_modules/.pnpm/lodash.isboolean@3.0.3/node_modules/lodash.isboolean/index.js"(exports, module) {
	/**
	* lodash 3.0.3 (Custom Build) <https://lodash.com/>
	* Build: `lodash modularize exports="npm" -o ./`
	* Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
	* Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	* Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	* Available under MIT license <https://lodash.com/license>
	*/
	/** `Object#toString` result references. */
	var boolTag = "[object Boolean]";
	/** Used for built-in method references. */
	var objectProto$5 = Object.prototype;
	/**
	* Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	* of values.
	*/
	var objectToString$6 = objectProto$5.toString;
	/**
	* Checks if `value` is classified as a boolean primitive or object.
	*
	* @static
	* @memberOf _
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	* @example
	*
	* _.isBoolean(false);
	* // => true
	*
	* _.isBoolean(null);
	* // => false
	*/
	function isBoolean$2(value) {
		return value === true || value === false || isObjectLike$5(value) && objectToString$6.call(value) == boolTag;
	}
	/**
	* Checks if `value` is object-like. A value is object-like if it's not `null`
	* and has a `typeof` result of "object".
	*
	* @static
	* @memberOf _
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	* @example
	*
	* _.isObjectLike({});
	* // => true
	*
	* _.isObjectLike([1, 2, 3]);
	* // => true
	*
	* _.isObjectLike(_.noop);
	* // => false
	*
	* _.isObjectLike(null);
	* // => false
	*/
	function isObjectLike$5(value) {
		return !!value && typeof value == "object";
	}
	module.exports = isBoolean$2;
} });

//#endregion
//#region node_modules/.pnpm/lodash.isinteger@4.0.4/node_modules/lodash.isinteger/index.js
var require_lodash$4 = __commonJS({ "node_modules/.pnpm/lodash.isinteger@4.0.4/node_modules/lodash.isinteger/index.js"(exports, module) {
	/**
	* lodash (Custom Build) <https://lodash.com/>
	* Build: `lodash modularize exports="npm" -o ./`
	* Copyright jQuery Foundation and other contributors <https://jquery.org/>
	* Released under MIT license <https://lodash.com/license>
	* Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	* Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	*/
	/** Used as references for various `Number` constants. */
	var INFINITY$1 = Infinity, MAX_INTEGER$1 = 17976931348623157e292, NAN$1 = NaN;
	/** `Object#toString` result references. */
	var symbolTag$1 = "[object Symbol]";
	/** Used to match leading and trailing whitespace. */
	var reTrim$1 = /^\s+|\s+$/g;
	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex$1 = /^[-+]0x[0-9a-f]+$/i;
	/** Used to detect binary string values. */
	var reIsBinary$1 = /^0b[01]+$/i;
	/** Used to detect octal string values. */
	var reIsOctal$1 = /^0o[0-7]+$/i;
	/** Built-in method references without a dependency on `root`. */
	var freeParseInt$1 = parseInt;
	/** Used for built-in method references. */
	var objectProto$4 = Object.prototype;
	/**
	* Used to resolve the
	* [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	* of values.
	*/
	var objectToString$5 = objectProto$4.toString;
	/**
	* Checks if `value` is an integer.
	*
	* **Note:** This method is based on
	* [`Number.isInteger`](https://mdn.io/Number/isInteger).
	*
	* @static
	* @memberOf _
	* @since 4.0.0
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is an integer, else `false`.
	* @example
	*
	* _.isInteger(3);
	* // => true
	*
	* _.isInteger(Number.MIN_VALUE);
	* // => false
	*
	* _.isInteger(Infinity);
	* // => false
	*
	* _.isInteger('3');
	* // => false
	*/
	function isInteger$1(value) {
		return typeof value == "number" && value == toInteger$1(value);
	}
	/**
	* Checks if `value` is the
	* [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	* of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	*
	* @static
	* @memberOf _
	* @since 0.1.0
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is an object, else `false`.
	* @example
	*
	* _.isObject({});
	* // => true
	*
	* _.isObject([1, 2, 3]);
	* // => true
	*
	* _.isObject(_.noop);
	* // => true
	*
	* _.isObject(null);
	* // => false
	*/
	function isObject$2(value) {
		var type = typeof value;
		return !!value && (type == "object" || type == "function");
	}
	/**
	* Checks if `value` is object-like. A value is object-like if it's not `null`
	* and has a `typeof` result of "object".
	*
	* @static
	* @memberOf _
	* @since 4.0.0
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	* @example
	*
	* _.isObjectLike({});
	* // => true
	*
	* _.isObjectLike([1, 2, 3]);
	* // => true
	*
	* _.isObjectLike(_.noop);
	* // => false
	*
	* _.isObjectLike(null);
	* // => false
	*/
	function isObjectLike$4(value) {
		return !!value && typeof value == "object";
	}
	/**
	* Checks if `value` is classified as a `Symbol` primitive or object.
	*
	* @static
	* @memberOf _
	* @since 4.0.0
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	* @example
	*
	* _.isSymbol(Symbol.iterator);
	* // => true
	*
	* _.isSymbol('abc');
	* // => false
	*/
	function isSymbol$2(value) {
		return typeof value == "symbol" || isObjectLike$4(value) && objectToString$5.call(value) == symbolTag$1;
	}
	/**
	* Converts `value` to a finite number.
	*
	* @static
	* @memberOf _
	* @since 4.12.0
	* @category Lang
	* @param {*} value The value to convert.
	* @returns {number} Returns the converted number.
	* @example
	*
	* _.toFinite(3.2);
	* // => 3.2
	*
	* _.toFinite(Number.MIN_VALUE);
	* // => 5e-324
	*
	* _.toFinite(Infinity);
	* // => 1.7976931348623157e+308
	*
	* _.toFinite('3.2');
	* // => 3.2
	*/
	function toFinite$1(value) {
		if (!value) return value === 0 ? value : 0;
		value = toNumber$1(value);
		if (value === INFINITY$1 || value === -INFINITY$1) {
			var sign$1 = value < 0 ? -1 : 1;
			return sign$1 * MAX_INTEGER$1;
		}
		return value === value ? value : 0;
	}
	/**
	* Converts `value` to an integer.
	*
	* **Note:** This method is loosely based on
	* [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	*
	* @static
	* @memberOf _
	* @since 4.0.0
	* @category Lang
	* @param {*} value The value to convert.
	* @returns {number} Returns the converted integer.
	* @example
	*
	* _.toInteger(3.2);
	* // => 3
	*
	* _.toInteger(Number.MIN_VALUE);
	* // => 0
	*
	* _.toInteger(Infinity);
	* // => 1.7976931348623157e+308
	*
	* _.toInteger('3.2');
	* // => 3
	*/
	function toInteger$1(value) {
		var result = toFinite$1(value), remainder = result % 1;
		return result === result ? remainder ? result - remainder : result : 0;
	}
	/**
	* Converts `value` to a number.
	*
	* @static
	* @memberOf _
	* @since 4.0.0
	* @category Lang
	* @param {*} value The value to process.
	* @returns {number} Returns the number.
	* @example
	*
	* _.toNumber(3.2);
	* // => 3.2
	*
	* _.toNumber(Number.MIN_VALUE);
	* // => 5e-324
	*
	* _.toNumber(Infinity);
	* // => Infinity
	*
	* _.toNumber('3.2');
	* // => 3.2
	*/
	function toNumber$1(value) {
		if (typeof value == "number") return value;
		if (isSymbol$2(value)) return NAN$1;
		if (isObject$2(value)) {
			var other = typeof value.valueOf == "function" ? value.valueOf() : value;
			value = isObject$2(other) ? other + "" : other;
		}
		if (typeof value != "string") return value === 0 ? value : +value;
		value = value.replace(reTrim$1, "");
		var isBinary = reIsBinary$1.test(value);
		return isBinary || reIsOctal$1.test(value) ? freeParseInt$1(value.slice(2), isBinary ? 2 : 8) : reIsBadHex$1.test(value) ? NAN$1 : +value;
	}
	module.exports = isInteger$1;
} });

//#endregion
//#region node_modules/.pnpm/lodash.isnumber@3.0.3/node_modules/lodash.isnumber/index.js
var require_lodash$3 = __commonJS({ "node_modules/.pnpm/lodash.isnumber@3.0.3/node_modules/lodash.isnumber/index.js"(exports, module) {
	/**
	* lodash 3.0.3 (Custom Build) <https://lodash.com/>
	* Build: `lodash modularize exports="npm" -o ./`
	* Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
	* Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	* Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	* Available under MIT license <https://lodash.com/license>
	*/
	/** `Object#toString` result references. */
	var numberTag = "[object Number]";
	/** Used for built-in method references. */
	var objectProto$3 = Object.prototype;
	/**
	* Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	* of values.
	*/
	var objectToString$4 = objectProto$3.toString;
	/**
	* Checks if `value` is object-like. A value is object-like if it's not `null`
	* and has a `typeof` result of "object".
	*
	* @static
	* @memberOf _
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	* @example
	*
	* _.isObjectLike({});
	* // => true
	*
	* _.isObjectLike([1, 2, 3]);
	* // => true
	*
	* _.isObjectLike(_.noop);
	* // => false
	*
	* _.isObjectLike(null);
	* // => false
	*/
	function isObjectLike$3(value) {
		return !!value && typeof value == "object";
	}
	/**
	* Checks if `value` is classified as a `Number` primitive or object.
	*
	* **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
	* as numbers, use the `_.isFinite` method.
	*
	* @static
	* @memberOf _
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	* @example
	*
	* _.isNumber(3);
	* // => true
	*
	* _.isNumber(Number.MIN_VALUE);
	* // => true
	*
	* _.isNumber(Infinity);
	* // => true
	*
	* _.isNumber('3');
	* // => false
	*/
	function isNumber$2(value) {
		return typeof value == "number" || isObjectLike$3(value) && objectToString$4.call(value) == numberTag;
	}
	module.exports = isNumber$2;
} });

//#endregion
//#region node_modules/.pnpm/lodash.isplainobject@4.0.6/node_modules/lodash.isplainobject/index.js
var require_lodash$2 = __commonJS({ "node_modules/.pnpm/lodash.isplainobject@4.0.6/node_modules/lodash.isplainobject/index.js"(exports, module) {
	/**
	* lodash (Custom Build) <https://lodash.com/>
	* Build: `lodash modularize exports="npm" -o ./`
	* Copyright jQuery Foundation and other contributors <https://jquery.org/>
	* Released under MIT license <https://lodash.com/license>
	* Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	* Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	*/
	/** `Object#toString` result references. */
	var objectTag = "[object Object]";
	/**
	* Checks if `value` is a host object in IE < 9.
	*
	* @private
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	*/
	function isHostObject(value) {
		var result = false;
		if (value != null && typeof value.toString != "function") try {
			result = !!(value + "");
		} catch (e) {}
		return result;
	}
	/**
	* Creates a unary function that invokes `func` with its argument transformed.
	*
	* @private
	* @param {Function} func The function to wrap.
	* @param {Function} transform The argument transform.
	* @returns {Function} Returns the new function.
	*/
	function overArg(func, transform$1) {
		return function(arg) {
			return func(transform$1(arg));
		};
	}
	/** Used for built-in method references. */
	var funcProto = Function.prototype, objectProto$2 = Object.prototype;
	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto$2.hasOwnProperty;
	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);
	/**
	* Used to resolve the
	* [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	* of values.
	*/
	var objectToString$3 = objectProto$2.toString;
	/** Built-in value references. */
	var getPrototype = overArg(Object.getPrototypeOf, Object);
	/**
	* Checks if `value` is object-like. A value is object-like if it's not `null`
	* and has a `typeof` result of "object".
	*
	* @static
	* @memberOf _
	* @since 4.0.0
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	* @example
	*
	* _.isObjectLike({});
	* // => true
	*
	* _.isObjectLike([1, 2, 3]);
	* // => true
	*
	* _.isObjectLike(_.noop);
	* // => false
	*
	* _.isObjectLike(null);
	* // => false
	*/
	function isObjectLike$2(value) {
		return !!value && typeof value == "object";
	}
	/**
	* Checks if `value` is a plain object, that is, an object created by the
	* `Object` constructor or one with a `[[Prototype]]` of `null`.
	*
	* @static
	* @memberOf _
	* @since 0.8.0
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	* @example
	*
	* function Foo() {
	*   this.a = 1;
	* }
	*
	* _.isPlainObject(new Foo);
	* // => false
	*
	* _.isPlainObject([1, 2, 3]);
	* // => false
	*
	* _.isPlainObject({ 'x': 0, 'y': 0 });
	* // => true
	*
	* _.isPlainObject(Object.create(null));
	* // => true
	*/
	function isPlainObject$1(value) {
		if (!isObjectLike$2(value) || objectToString$3.call(value) != objectTag || isHostObject(value)) return false;
		var proto$2 = getPrototype(value);
		if (proto$2 === null) return true;
		var Ctor = hasOwnProperty.call(proto$2, "constructor") && proto$2.constructor;
		return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
	}
	module.exports = isPlainObject$1;
} });

//#endregion
//#region node_modules/.pnpm/lodash.isstring@4.0.1/node_modules/lodash.isstring/index.js
var require_lodash$1 = __commonJS({ "node_modules/.pnpm/lodash.isstring@4.0.1/node_modules/lodash.isstring/index.js"(exports, module) {
	/**
	* lodash 4.0.1 (Custom Build) <https://lodash.com/>
	* Build: `lodash modularize exports="npm" -o ./`
	* Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
	* Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	* Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	* Available under MIT license <https://lodash.com/license>
	*/
	/** `Object#toString` result references. */
	var stringTag = "[object String]";
	/** Used for built-in method references. */
	var objectProto$1 = Object.prototype;
	/**
	* Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	* of values.
	*/
	var objectToString$2 = objectProto$1.toString;
	/**
	* Checks if `value` is classified as an `Array` object.
	*
	* @static
	* @memberOf _
	* @type Function
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	* @example
	*
	* _.isArray([1, 2, 3]);
	* // => true
	*
	* _.isArray(document.body.children);
	* // => false
	*
	* _.isArray('abc');
	* // => false
	*
	* _.isArray(_.noop);
	* // => false
	*/
	var isArray$1 = Array.isArray;
	/**
	* Checks if `value` is object-like. A value is object-like if it's not `null`
	* and has a `typeof` result of "object".
	*
	* @static
	* @memberOf _
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	* @example
	*
	* _.isObjectLike({});
	* // => true
	*
	* _.isObjectLike([1, 2, 3]);
	* // => true
	*
	* _.isObjectLike(_.noop);
	* // => false
	*
	* _.isObjectLike(null);
	* // => false
	*/
	function isObjectLike$1(value) {
		return !!value && typeof value == "object";
	}
	/**
	* Checks if `value` is classified as a `String` primitive or object.
	*
	* @static
	* @memberOf _
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	* @example
	*
	* _.isString('abc');
	* // => true
	*
	* _.isString(1);
	* // => false
	*/
	function isString$2(value) {
		return typeof value == "string" || !isArray$1(value) && isObjectLike$1(value) && objectToString$2.call(value) == stringTag;
	}
	module.exports = isString$2;
} });

//#endregion
//#region node_modules/.pnpm/lodash.once@4.1.1/node_modules/lodash.once/index.js
var require_lodash = __commonJS({ "node_modules/.pnpm/lodash.once@4.1.1/node_modules/lodash.once/index.js"(exports, module) {
	/**
	* lodash (Custom Build) <https://lodash.com/>
	* Build: `lodash modularize exports="npm" -o ./`
	* Copyright jQuery Foundation and other contributors <https://jquery.org/>
	* Released under MIT license <https://lodash.com/license>
	* Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	* Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	*/
	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = "Expected a function";
	/** Used as references for various `Number` constants. */
	var INFINITY = Infinity, MAX_INTEGER = 17976931348623157e292, NAN = NaN;
	/** `Object#toString` result references. */
	var symbolTag = "[object Symbol]";
	/** Used to match leading and trailing whitespace. */
	var reTrim = /^\s+|\s+$/g;
	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;
	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;
	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	/**
	* Used to resolve the
	* [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	* of values.
	*/
	var objectToString$1 = objectProto.toString;
	/**
	* Creates a function that invokes `func`, with the `this` binding and arguments
	* of the created function, while it's called less than `n` times. Subsequent
	* calls to the created function return the result of the last `func` invocation.
	*
	* @static
	* @memberOf _
	* @since 3.0.0
	* @category Function
	* @param {number} n The number of calls at which `func` is no longer invoked.
	* @param {Function} func The function to restrict.
	* @returns {Function} Returns the new restricted function.
	* @example
	*
	* jQuery(element).on('click', _.before(5, addContactToList));
	* // => Allows adding up to 4 contacts to the list.
	*/
	function before(n, func) {
		var result;
		if (typeof func != "function") throw new TypeError(FUNC_ERROR_TEXT);
		n = toInteger(n);
		return function() {
			if (--n > 0) result = func.apply(this, arguments);
			if (n <= 1) func = void 0;
			return result;
		};
	}
	/**
	* Creates a function that is restricted to invoking `func` once. Repeat calls
	* to the function return the value of the first invocation. The `func` is
	* invoked with the `this` binding and arguments of the created function.
	*
	* @static
	* @memberOf _
	* @since 0.1.0
	* @category Function
	* @param {Function} func The function to restrict.
	* @returns {Function} Returns the new restricted function.
	* @example
	*
	* var initialize = _.once(createApplication);
	* initialize();
	* initialize();
	* // => `createApplication` is invoked once
	*/
	function once$1(func) {
		return before(2, func);
	}
	/**
	* Checks if `value` is the
	* [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	* of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	*
	* @static
	* @memberOf _
	* @since 0.1.0
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is an object, else `false`.
	* @example
	*
	* _.isObject({});
	* // => true
	*
	* _.isObject([1, 2, 3]);
	* // => true
	*
	* _.isObject(_.noop);
	* // => true
	*
	* _.isObject(null);
	* // => false
	*/
	function isObject$1(value) {
		var type = typeof value;
		return !!value && (type == "object" || type == "function");
	}
	/**
	* Checks if `value` is object-like. A value is object-like if it's not `null`
	* and has a `typeof` result of "object".
	*
	* @static
	* @memberOf _
	* @since 4.0.0
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	* @example
	*
	* _.isObjectLike({});
	* // => true
	*
	* _.isObjectLike([1, 2, 3]);
	* // => true
	*
	* _.isObjectLike(_.noop);
	* // => false
	*
	* _.isObjectLike(null);
	* // => false
	*/
	function isObjectLike(value) {
		return !!value && typeof value == "object";
	}
	/**
	* Checks if `value` is classified as a `Symbol` primitive or object.
	*
	* @static
	* @memberOf _
	* @since 4.0.0
	* @category Lang
	* @param {*} value The value to check.
	* @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	* @example
	*
	* _.isSymbol(Symbol.iterator);
	* // => true
	*
	* _.isSymbol('abc');
	* // => false
	*/
	function isSymbol$1(value) {
		return typeof value == "symbol" || isObjectLike(value) && objectToString$1.call(value) == symbolTag;
	}
	/**
	* Converts `value` to a finite number.
	*
	* @static
	* @memberOf _
	* @since 4.12.0
	* @category Lang
	* @param {*} value The value to convert.
	* @returns {number} Returns the converted number.
	* @example
	*
	* _.toFinite(3.2);
	* // => 3.2
	*
	* _.toFinite(Number.MIN_VALUE);
	* // => 5e-324
	*
	* _.toFinite(Infinity);
	* // => 1.7976931348623157e+308
	*
	* _.toFinite('3.2');
	* // => 3.2
	*/
	function toFinite(value) {
		if (!value) return value === 0 ? value : 0;
		value = toNumber(value);
		if (value === INFINITY || value === -INFINITY) {
			var sign$1 = value < 0 ? -1 : 1;
			return sign$1 * MAX_INTEGER;
		}
		return value === value ? value : 0;
	}
	/**
	* Converts `value` to an integer.
	*
	* **Note:** This method is loosely based on
	* [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	*
	* @static
	* @memberOf _
	* @since 4.0.0
	* @category Lang
	* @param {*} value The value to convert.
	* @returns {number} Returns the converted integer.
	* @example
	*
	* _.toInteger(3.2);
	* // => 3
	*
	* _.toInteger(Number.MIN_VALUE);
	* // => 0
	*
	* _.toInteger(Infinity);
	* // => 1.7976931348623157e+308
	*
	* _.toInteger('3.2');
	* // => 3
	*/
	function toInteger(value) {
		var result = toFinite(value), remainder = result % 1;
		return result === result ? remainder ? result - remainder : result : 0;
	}
	/**
	* Converts `value` to a number.
	*
	* @static
	* @memberOf _
	* @since 4.0.0
	* @category Lang
	* @param {*} value The value to process.
	* @returns {number} Returns the number.
	* @example
	*
	* _.toNumber(3.2);
	* // => 3.2
	*
	* _.toNumber(Number.MIN_VALUE);
	* // => 5e-324
	*
	* _.toNumber(Infinity);
	* // => Infinity
	*
	* _.toNumber('3.2');
	* // => 3.2
	*/
	function toNumber(value) {
		if (typeof value == "number") return value;
		if (isSymbol$1(value)) return NAN;
		if (isObject$1(value)) {
			var other = typeof value.valueOf == "function" ? value.valueOf() : value;
			value = isObject$1(other) ? other + "" : other;
		}
		if (typeof value != "string") return value === 0 ? value : +value;
		value = value.replace(reTrim, "");
		var isBinary = reIsBinary.test(value);
		return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
	}
	module.exports = once$1;
} });

//#endregion
//#region node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/sign.js
var require_sign = __commonJS({ "node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/sign.js"(exports, module) {
	const timespan = require_timespan();
	const PS_SUPPORTED = require_psSupported();
	const validateAsymmetricKey = require_validateAsymmetricKey();
	const jws = require_jws();
	const includes = require_lodash$6();
	const isBoolean$1 = require_lodash$5();
	const isInteger = require_lodash$4();
	const isNumber$1 = require_lodash$3();
	const isPlainObject = require_lodash$2();
	const isString$1 = require_lodash$1();
	const once = require_lodash();
	const { KeyObject, createSecretKey, createPrivateKey } = __require("crypto");
	const SUPPORTED_ALGS = [
		"RS256",
		"RS384",
		"RS512",
		"ES256",
		"ES384",
		"ES512",
		"HS256",
		"HS384",
		"HS512",
		"none"
	];
	if (PS_SUPPORTED) SUPPORTED_ALGS.splice(3, 0, "PS256", "PS384", "PS512");
	const sign_options_schema = {
		expiresIn: {
			isValid: function(value) {
				return isInteger(value) || isString$1(value) && value;
			},
			message: "\"expiresIn\" should be a number of seconds or string representing a timespan"
		},
		notBefore: {
			isValid: function(value) {
				return isInteger(value) || isString$1(value) && value;
			},
			message: "\"notBefore\" should be a number of seconds or string representing a timespan"
		},
		audience: {
			isValid: function(value) {
				return isString$1(value) || Array.isArray(value);
			},
			message: "\"audience\" must be a string or array"
		},
		algorithm: {
			isValid: includes.bind(null, SUPPORTED_ALGS),
			message: "\"algorithm\" must be a valid string enum value"
		},
		header: {
			isValid: isPlainObject,
			message: "\"header\" must be an object"
		},
		encoding: {
			isValid: isString$1,
			message: "\"encoding\" must be a string"
		},
		issuer: {
			isValid: isString$1,
			message: "\"issuer\" must be a string"
		},
		subject: {
			isValid: isString$1,
			message: "\"subject\" must be a string"
		},
		jwtid: {
			isValid: isString$1,
			message: "\"jwtid\" must be a string"
		},
		noTimestamp: {
			isValid: isBoolean$1,
			message: "\"noTimestamp\" must be a boolean"
		},
		keyid: {
			isValid: isString$1,
			message: "\"keyid\" must be a string"
		},
		mutatePayload: {
			isValid: isBoolean$1,
			message: "\"mutatePayload\" must be a boolean"
		},
		allowInsecureKeySizes: {
			isValid: isBoolean$1,
			message: "\"allowInsecureKeySizes\" must be a boolean"
		},
		allowInvalidAsymmetricKeyTypes: {
			isValid: isBoolean$1,
			message: "\"allowInvalidAsymmetricKeyTypes\" must be a boolean"
		}
	};
	const registered_claims_schema = {
		iat: {
			isValid: isNumber$1,
			message: "\"iat\" should be a number of seconds"
		},
		exp: {
			isValid: isNumber$1,
			message: "\"exp\" should be a number of seconds"
		},
		nbf: {
			isValid: isNumber$1,
			message: "\"nbf\" should be a number of seconds"
		}
	};
	function validate(schema, allowUnknown, object, parameterName) {
		if (!isPlainObject(object)) throw new Error("Expected \"" + parameterName + "\" to be a plain object.");
		Object.keys(object).forEach(function(key$1) {
			const validator$1 = schema[key$1];
			if (!validator$1) {
				if (!allowUnknown) throw new Error("\"" + key$1 + "\" is not allowed in \"" + parameterName + "\"");
				return;
			}
			if (!validator$1.isValid(object[key$1])) throw new Error(validator$1.message);
		});
	}
	function validateOptions(options) {
		return validate(sign_options_schema, false, options, "options");
	}
	function validatePayload(payload) {
		return validate(registered_claims_schema, true, payload, "payload");
	}
	const options_to_payload = {
		"audience": "aud",
		"issuer": "iss",
		"subject": "sub",
		"jwtid": "jti"
	};
	const options_for_objects = [
		"expiresIn",
		"notBefore",
		"noTimestamp",
		"audience",
		"issuer",
		"subject",
		"jwtid"
	];
	module.exports = function(payload, secretOrPrivateKey, options, callback) {
		if (typeof options === "function") {
			callback = options;
			options = {};
		} else options = options || {};
		const isObjectPayload = typeof payload === "object" && !Buffer.isBuffer(payload);
		const header = Object.assign({
			alg: options.algorithm || "HS256",
			typ: isObjectPayload ? "JWT" : void 0,
			kid: options.keyid
		}, options.header);
		function failure(err) {
			if (callback) return callback(err);
			throw err;
		}
		if (!secretOrPrivateKey && options.algorithm !== "none") return failure(new Error("secretOrPrivateKey must have a value"));
		if (secretOrPrivateKey != null && !(secretOrPrivateKey instanceof KeyObject)) try {
			secretOrPrivateKey = createPrivateKey(secretOrPrivateKey);
		} catch (_) {
			try {
				secretOrPrivateKey = createSecretKey(typeof secretOrPrivateKey === "string" ? Buffer.from(secretOrPrivateKey) : secretOrPrivateKey);
			} catch (_$1) {
				return failure(new Error("secretOrPrivateKey is not valid key material"));
			}
		}
		if (header.alg.startsWith("HS") && secretOrPrivateKey.type !== "secret") return failure(new Error(`secretOrPrivateKey must be a symmetric key when using ${header.alg}`));
		else if (/^(?:RS|PS|ES)/.test(header.alg)) {
			if (secretOrPrivateKey.type !== "private") return failure(new Error(`secretOrPrivateKey must be an asymmetric key when using ${header.alg}`));
			if (!options.allowInsecureKeySizes && !header.alg.startsWith("ES") && secretOrPrivateKey.asymmetricKeyDetails !== void 0 && secretOrPrivateKey.asymmetricKeyDetails.modulusLength < 2048) return failure(new Error(`secretOrPrivateKey has a minimum key size of 2048 bits for ${header.alg}`));
		}
		if (typeof payload === "undefined") return failure(new Error("payload is required"));
		else if (isObjectPayload) {
			try {
				validatePayload(payload);
			} catch (error$1) {
				return failure(error$1);
			}
			if (!options.mutatePayload) payload = Object.assign({}, payload);
		} else {
			const invalid_options = options_for_objects.filter(function(opt) {
				return typeof options[opt] !== "undefined";
			});
			if (invalid_options.length > 0) return failure(new Error("invalid " + invalid_options.join(",") + " option for " + typeof payload + " payload"));
		}
		if (typeof payload.exp !== "undefined" && typeof options.expiresIn !== "undefined") return failure(new Error("Bad \"options.expiresIn\" option the payload already has an \"exp\" property."));
		if (typeof payload.nbf !== "undefined" && typeof options.notBefore !== "undefined") return failure(new Error("Bad \"options.notBefore\" option the payload already has an \"nbf\" property."));
		try {
			validateOptions(options);
		} catch (error$1) {
			return failure(error$1);
		}
		if (!options.allowInvalidAsymmetricKeyTypes) try {
			validateAsymmetricKey(header.alg, secretOrPrivateKey);
		} catch (error$1) {
			return failure(error$1);
		}
		const timestamp$2 = payload.iat || Math.floor(Date.now() / 1e3);
		if (options.noTimestamp) delete payload.iat;
		else if (isObjectPayload) payload.iat = timestamp$2;
		if (typeof options.notBefore !== "undefined") {
			try {
				payload.nbf = timespan(options.notBefore, timestamp$2);
			} catch (err) {
				return failure(err);
			}
			if (typeof payload.nbf === "undefined") return failure(new Error("\"notBefore\" should be a number of seconds or string representing a timespan eg: \"1d\", \"20h\", 60"));
		}
		if (typeof options.expiresIn !== "undefined" && typeof payload === "object") {
			try {
				payload.exp = timespan(options.expiresIn, timestamp$2);
			} catch (err) {
				return failure(err);
			}
			if (typeof payload.exp === "undefined") return failure(new Error("\"expiresIn\" should be a number of seconds or string representing a timespan eg: \"1d\", \"20h\", 60"));
		}
		Object.keys(options_to_payload).forEach(function(key$1) {
			const claim = options_to_payload[key$1];
			if (typeof options[key$1] !== "undefined") {
				if (typeof payload[claim] !== "undefined") return failure(new Error("Bad \"options." + key$1 + "\" option. The payload already has an \"" + claim + "\" property."));
				payload[claim] = options[key$1];
			}
		});
		const encoding = options.encoding || "utf8";
		if (typeof callback === "function") {
			callback = callback && once(callback);
			jws.createSign({
				header,
				privateKey: secretOrPrivateKey,
				payload,
				encoding
			}).once("error", callback).once("done", function(signature) {
				if (!options.allowInsecureKeySizes && /^(?:RS|PS)/.test(header.alg) && signature.length < 256) return callback(new Error(`secretOrPrivateKey has a minimum key size of 2048 bits for ${header.alg}`));
				callback(null, signature);
			});
		} else {
			let signature = jws.sign({
				header,
				payload,
				secret: secretOrPrivateKey,
				encoding
			});
			if (!options.allowInsecureKeySizes && /^(?:RS|PS)/.test(header.alg) && signature.length < 256) throw new Error(`secretOrPrivateKey has a minimum key size of 2048 bits for ${header.alg}`);
			return signature;
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/index.js
var require_jsonwebtoken = __commonJS({ "node_modules/.pnpm/jsonwebtoken@9.0.2/node_modules/jsonwebtoken/index.js"(exports, module) {
	module.exports = {
		decode: require_decode(),
		verify: require_verify$1(),
		sign: require_sign(),
		JsonWebTokenError: require_JsonWebTokenError(),
		NotBeforeError: require_NotBeforeError(),
		TokenExpiredError: require_TokenExpiredError()
	};
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/cache.js
var require_cache$1 = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/cache.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.Cache = void 0;
	/**
	* Representation of a cache to transiently store objects locally for faster access.
	* @typeParam T - Type of the cache entries.
	* @internal
	*/
	var Cache = class {
		/**
		* Creates an instance of Cache.
		* @param defaultValidityTime - The default validity time in milliseconds. Use 0 for unlimited cache duration.
		*/
		constructor(defaultValidityTime) {
			this.defaultValidityTime = defaultValidityTime;
			this.cache = {};
		}
		/**
		* Clear all cached items.
		*/
		clear() {
			this.cache = {};
		}
		/**
		* Specifies whether an entry with a given key is defined in cache.
		* @param key - The entry's key.
		* @returns A boolean value that indicates whether the entry exists in cache.
		*/
		hasKey(key$1) {
			return this.cache.hasOwnProperty(key$1);
		}
		/**
		* Getter of cached entries.
		* @param key - The key of the entry to retrieve.
		* @returns The corresponding entry to the provided key if it is still valid, returns `undefined` otherwise.
		*/
		get(key$1) {
			return key$1 && this.hasKey(key$1) && !isExpired(this.cache[key$1]) ? this.cache[key$1].entry : void 0;
		}
		/**
		* Setter of entries in cache.
		* @param key - The entry's key.
		* @param item - The entry to cache.
		*/
		set(key$1, item) {
			if (key$1) {
				const expires = item.expires ?? this.inferDefaultExpirationTime();
				this.cache[key$1] = {
					entry: item.entry,
					expires
				};
			}
		}
		inferDefaultExpirationTime() {
			const now = new Date();
			return this.defaultValidityTime ? now.setMilliseconds(now.getMilliseconds() + this.defaultValidityTime).valueOf() : void 0;
		}
	};
	exports.Cache = Cache;
	function isExpired(item) {
		if (item.expires === void 0) return false;
		return item.expires < Date.now();
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/subdomain-replacer.js
var require_subdomain_replacer = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/subdomain-replacer.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getIssuerSubdomain = getIssuerSubdomain;
	const url_1 = __require("url");
	/**
	* @internal
	*/
	function getIssuerSubdomain(decodedJwt) {
		const iss = decodedJwt?.iss;
		if (iss) {
			if (!isValidUrl(iss)) throw new Error(`Issuer URL in JWT is not a valid URL: "${iss}".`);
			return getHost(new url_1.URL(iss)).split(".")[0];
		}
	}
	function getHost(url$3) {
		const { host } = url$3;
		if (!host || host.indexOf(".") === -1) throw new Error(`Failed to determine sub-domain: invalid host in "${url$3}".`);
		return host;
	}
	function isValidUrl(url$3) {
		try {
			new url_1.URL(url$3);
			return true;
		} catch {
			return false;
		}
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/jwt/jwt.js
var require_jwt$1 = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/jwt/jwt.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.verificationKeyCache = exports.defaultTenantId = void 0;
	exports.userId = userId;
	exports.getDefaultTenantId = getDefaultTenantId;
	exports.getTenantId = getTenantId;
	exports.getSubdomain = getSubdomain;
	exports.audiences = audiences;
	exports.decodeJwt = decodeJwt;
	exports.decodeJwtComplete = decodeJwtComplete;
	exports.retrieveJwt = retrieveJwt;
	exports.wrapJwtInHeader = wrapJwtInHeader;
	exports.isXsuaaToken = isXsuaaToken;
	exports.getJwtPair = getJwtPair;
	exports.isUserToken = isUserToken;
	const util_1$28 = require_dist$4();
	const jsonwebtoken_1 = require_jsonwebtoken();
	const cache_1$3 = require_cache$1();
	const subdomain_replacer_1$1 = require_subdomain_replacer();
	const logger$24 = (0, util_1$28.createLogger)({
		package: "connectivity",
		messageContext: "jwt"
	});
	/**
	* @internal
	*/
	exports.defaultTenantId = "provider-tenant";
	function makeArray(val) {
		return val ? Array.isArray(val) ? val : [val] : [];
	}
	/**
	* @internal
	* Get the user ID from the JWT payload.
	* @param jwtPayload - Token payload to read the user ID from.
	* @returns The user ID, if available.
	*/
	function userId({ user_id }) {
		logger$24.debug(`JWT user_id is: ${user_id}.`);
		return user_id;
	}
	/**
	* @internal
	* Get the default tenant ID.
	* @returns The default tenant ID.
	*/
	function getDefaultTenantId() {
		logger$24.debug("Could not determine tenant from JWT nor XSUAA, identity or destination service binding. Client Credentials token is cached without tenant information.");
		return exports.defaultTenantId;
	}
	/**
	* Get the tenant ID of a decoded JWT, based on its `zid` or if not available `app_tid` property.
	* @param jwt - Token to read the tenant ID from.
	* @returns The tenant ID, if available.
	*/
	function getTenantId(jwt) {
		const decodedJwt = jwt ? decodeJwt(jwt) : {};
		logger$24.debug(`JWT zid is: ${decodedJwt.zid}, app_tid is: ${decodedJwt.app_tid}.`);
		return decodedJwt.zid || decodedJwt.app_tid || void 0;
	}
	/**
	* Check if the given JWT is not an IAS token.
	* Currently, there are only two domains for IAS tokens:
	* `accounts.ondemand.com` and `accounts400.onemand.com`.
	* @param decodedJwt - The decoded JWT to check.
	* @returns Whether the given JWT is not an IAS token.
	*/
	function isNotIasToken(decodedJwt) {
		return !decodedJwt.iss?.includes("accounts.ondemand.com") && !decodedJwt.iss?.includes("accounts400.ondemand.com");
	}
	/**
	* @internal
	* Retrieve the subdomain from the decoded XSUAA JWT or ISS object.
	* If it is an IAS JWT, or the passed object doesn't contain an ISS propety,
	* returns `undefined`.
	* @param jwt - JWT or ISS object to retrieve the subdomain from.
	* @returns The subdomain, if available.
	*/
	function getSubdomain(jwt) {
		const decodedJwt = jwt ? decodeJwt(jwt) : {};
		return decodedJwt?.ext_attr?.zdn || (isNotIasToken(decodedJwt) ? (0, subdomain_replacer_1$1.getIssuerSubdomain)(decodedJwt) : void 0);
	}
	/**
	* @internal
	* Retrieve the audiences of a decoded JWT based on the audiences and scopes in the token.
	* @param decodedToken - Token to retrieve the audiences from.
	* @returns A set of audiences.
	*/
	function audiences(decodedToken) {
		const parsedAudiences = audiencesFromAud(decodedToken);
		return parsedAudiences.length ? parsedAudiences : audiencesFromScope(decodedToken);
	}
	function audiencesFromAud({ aud }) {
		return makeArray(aud).map((audience) => audience.split(".")[0]);
	}
	function audiencesFromScope({ scope }) {
		return makeArray(scope).reduce((aud, s$1) => s$1.includes(".") ? [...aud, s$1.split(".")[0]] : aud, []);
	}
	/**
	* Decode JWT.
	* @param token - JWT to be decoded.
	* @returns Decoded payload.
	*/
	function decodeJwt(token) {
		return typeof token === "string" ? decodeJwtComplete(token).payload : token;
	}
	/**
	* Decode JWT and return the complete decoded token.
	* @param token - JWT to be decoded.
	* @returns Decoded token containing payload, header and signature.
	* @internal
	*/
	function decodeJwtComplete(token) {
		const decodedToken = (0, jsonwebtoken_1.decode)(token, {
			complete: true,
			json: true
		});
		if (decodedToken !== null && isJwtWithPayloadObject(decodedToken)) return decodedToken;
		throw new Error("JwtError: The given jwt payload does not encode valid JSON.");
	}
	/**
	* Retrieve JWT from a request that is based on the node `IncomingMessage`. Fails if no authorization header is given or has the wrong format. Expected format is 'Bearer <TOKEN>'.
	* @param req - Request to retrieve the JWT from.
	* @returns JWT found in header.
	*/
	function retrieveJwt(req) {
		const authHeader = getAuthHeader$1(req);
		if (validateAuthHeader(authHeader)) return authHeader?.split(" ")[1];
	}
	function getAuthHeader$1(req) {
		const authHeader = (0, util_1$28.pickValueIgnoreCase)(req.headers, "authorization");
		if (authHeader) return Array.isArray(authHeader) ? authHeader[0] : authHeader;
	}
	function validateAuthHeader(header) {
		if (typeof header === "undefined") {
			logger$24.warn("Authorization header not set.");
			return false;
		}
		const [authType, token] = header.split(" ");
		if (typeof token === "undefined") {
			logger$24.warn("Token in auth header missing.");
			return false;
		}
		if (authType.toLowerCase() !== "bearer") {
			logger$24.warn("Authorization type is not Bearer.");
			return false;
		}
		return true;
	}
	/**
	* 15 minutes is the default value used by the xssec lib.
	* @internal
	*/
	exports.verificationKeyCache = new cache_1$3.Cache(9e5);
	/**
	* Wraps the access token in header's authorization.
	* @param token - Token to attach in request header
	* @returns The request header that holds the access token
	* @internal
	*/
	function wrapJwtInHeader(token) {
		return { headers: { Authorization: "Bearer " + token } };
	}
	/**
	* Checks if the given JWT was issued by XSUAA based on the `iss` property and the UAA domain of the XSUAA.
	* @param decodedJwt - JWT to be checked.
	* @returns Whether the JWT was issued by XSUAA.
	* @internal
	*/
	function isXsuaaToken(decodedJwt) {
		return decodedJwt?.ext_attr?.enhancer === "XSUAA";
	}
	/**
	* Build JwtPair from an encoded JWT.
	* @internal
	*/
	function getJwtPair(encodedJwt) {
		return {
			encoded: encodedJwt,
			decoded: decodeJwt(encodedJwt)
		};
	}
	/**
	* The user JWT can be a full JWT containing user information but also a reduced one setting only the iss value
	* This method divides the two cases.
	* @param token - Token to be investigated
	* @returns Boolean value with true if the input is a UserJwtPair
	* @internal
	*/
	function isUserToken(token) {
		if (!token) return false;
		const keys$2 = Object.keys(token.decoded);
		return !(keys$2.length === 1 && keys$2[0] === "iss");
	}
	function isJwtWithPayloadObject(decoded) {
		return typeof decoded.payload !== "string";
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap+xsenv@5.5.0/node_modules/@sap/xsenv/lib/filter.js
var require_filter = __commonJS({ "node_modules/.pnpm/@sap+xsenv@5.5.0/node_modules/@sap/xsenv/lib/filter.js"(exports, module) {
	const assert$5 = __require("assert");
	module.exports.apply = apply;
	function apply(services, filter$1) {
		assert$5(typeof filter$1 === "string" || typeof filter$1 === "object" || typeof filter$1 === "function", "bad filter type: " + typeof filter$1);
		if (!services) return [];
		if (typeof filter$1 === "string") return services[filter$1] ? [services[filter$1]] : [];
		var result = [];
		for (var key$1 in services) if (applyFilter(services[key$1], filter$1)) result.push(services[key$1]);
		return result;
	}
	function applyFilter(service, filter$1) {
		if (typeof filter$1 === "function") return filter$1(service);
		var match = false;
		for (var key$1 in filter$1) if (service[key$1] === filter$1[key$1] || /tags?/.test(key$1) && service.tags && service.tags.indexOf(filter$1[key$1]) >= 0) match = true;
		else return false;
		return match;
	}
} });

//#endregion
//#region node_modules/.pnpm/assert-plus@1.0.0/node_modules/assert-plus/assert.js
var require_assert = __commonJS({ "node_modules/.pnpm/assert-plus@1.0.0/node_modules/assert-plus/assert.js"(exports, module) {
	var assert$4 = __require("assert");
	var Stream = __require("stream").Stream;
	var util$1 = __require("util");
	var UUID_REGEXP = /^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/;
	function _capitalize(str) {
		return str.charAt(0).toUpperCase() + str.slice(1);
	}
	function _toss(name$2, expected, oper, arg, actual) {
		throw new assert$4.AssertionError({
			message: util$1.format("%s (%s) is required", name$2, expected),
			actual: actual === void 0 ? typeof arg : actual(arg),
			expected,
			operator: oper || "===",
			stackStartFunction: _toss.caller
		});
	}
	function _getClass(arg) {
		return Object.prototype.toString.call(arg).slice(8, -1);
	}
	function noop() {}
	var types = {
		bool: { check: function(arg) {
			return typeof arg === "boolean";
		} },
		func: { check: function(arg) {
			return typeof arg === "function";
		} },
		string: { check: function(arg) {
			return typeof arg === "string";
		} },
		object: { check: function(arg) {
			return typeof arg === "object" && arg !== null;
		} },
		number: { check: function(arg) {
			return typeof arg === "number" && !isNaN(arg);
		} },
		finite: { check: function(arg) {
			return typeof arg === "number" && !isNaN(arg) && isFinite(arg);
		} },
		buffer: {
			check: function(arg) {
				return Buffer.isBuffer(arg);
			},
			operator: "Buffer.isBuffer"
		},
		array: {
			check: function(arg) {
				return Array.isArray(arg);
			},
			operator: "Array.isArray"
		},
		stream: {
			check: function(arg) {
				return arg instanceof Stream;
			},
			operator: "instanceof",
			actual: _getClass
		},
		date: {
			check: function(arg) {
				return arg instanceof Date;
			},
			operator: "instanceof",
			actual: _getClass
		},
		regexp: {
			check: function(arg) {
				return arg instanceof RegExp;
			},
			operator: "instanceof",
			actual: _getClass
		},
		uuid: {
			check: function(arg) {
				return typeof arg === "string" && UUID_REGEXP.test(arg);
			},
			operator: "isUUID"
		}
	};
	function _setExports(ndebug) {
		var keys$2 = Object.keys(types);
		var out;
		if (process.env.NODE_NDEBUG) out = noop;
		else out = function(arg, msg) {
			if (!arg) _toss(msg, "true", arg);
		};
		keys$2.forEach(function(k) {
			if (ndebug) {
				out[k] = noop;
				return;
			}
			var type = types[k];
			out[k] = function(arg, msg) {
				if (!type.check(arg)) _toss(msg, k, type.operator, arg, type.actual);
			};
		});
		keys$2.forEach(function(k) {
			var name$2 = "optional" + _capitalize(k);
			if (ndebug) {
				out[name$2] = noop;
				return;
			}
			var type = types[k];
			out[name$2] = function(arg, msg) {
				if (arg === void 0 || arg === null) return;
				if (!type.check(arg)) _toss(msg, k, type.operator, arg, type.actual);
			};
		});
		keys$2.forEach(function(k) {
			var name$2 = "arrayOf" + _capitalize(k);
			if (ndebug) {
				out[name$2] = noop;
				return;
			}
			var type = types[k];
			var expected = "[" + k + "]";
			out[name$2] = function(arg, msg) {
				if (!Array.isArray(arg)) _toss(msg, expected, type.operator, arg, type.actual);
				var i;
				for (i = 0; i < arg.length; i++) if (!type.check(arg[i])) _toss(msg, expected, type.operator, arg, type.actual);
			};
		});
		keys$2.forEach(function(k) {
			var name$2 = "optionalArrayOf" + _capitalize(k);
			if (ndebug) {
				out[name$2] = noop;
				return;
			}
			var type = types[k];
			var expected = "[" + k + "]";
			out[name$2] = function(arg, msg) {
				if (arg === void 0 || arg === null) return;
				if (!Array.isArray(arg)) _toss(msg, expected, type.operator, arg, type.actual);
				var i;
				for (i = 0; i < arg.length; i++) if (!type.check(arg[i])) _toss(msg, expected, type.operator, arg, type.actual);
			};
		});
		Object.keys(assert$4).forEach(function(k) {
			if (k === "AssertionError") {
				out[k] = assert$4[k];
				return;
			}
			if (ndebug) {
				out[k] = noop;
				return;
			}
			out[k] = assert$4[k];
		});
		out._setExports = _setExports;
		return out;
	}
	module.exports = _setExports(process.env.NODE_NDEBUG);
} });

//#endregion
//#region node_modules/.pnpm/extsprintf@1.4.1/node_modules/extsprintf/lib/extsprintf.js
var require_extsprintf = __commonJS({ "node_modules/.pnpm/extsprintf@1.4.1/node_modules/extsprintf/lib/extsprintf.js"(exports) {
	var mod_assert = __require("assert");
	var mod_util$1 = __require("util");
	exports.sprintf = jsSprintf;
	exports.printf = jsPrintf;
	exports.fprintf = jsFprintf;
	function jsSprintf(ofmt) {
		var regex = [
			"([^%]*)",
			"%",
			"(['\\-+ #0]*?)",
			"([1-9]\\d*)?",
			"(\\.([1-9]\\d*))?",
			"[lhjztL]*?",
			"([diouxXfFeEgGaAcCsSp%jr])"
		].join("");
		var re$5 = new RegExp(regex);
		var args = Array.prototype.slice.call(arguments, 1);
		var fmt = ofmt;
		var flags, width, precision, conversion;
		var left, pad, sign$1, arg, match;
		var ret = "";
		var argn = 1;
		var posn = 0;
		var convposn;
		var curconv;
		mod_assert.equal("string", typeof fmt, "first argument must be a format string");
		while ((match = re$5.exec(fmt)) !== null) {
			ret += match[1];
			fmt = fmt.substring(match[0].length);
			curconv = match[0].substring(match[1].length);
			convposn = posn + match[1].length + 1;
			posn += match[0].length;
			flags = match[2] || "";
			width = match[3] || 0;
			precision = match[4] || "";
			conversion = match[6];
			left = false;
			sign$1 = false;
			pad = " ";
			if (conversion == "%") {
				ret += "%";
				continue;
			}
			if (args.length === 0) throw jsError(ofmt, convposn, curconv, "has no matching argument (too few arguments passed)");
			arg = args.shift();
			argn++;
			if (flags.match(/[\' #]/)) throw jsError(ofmt, convposn, curconv, "uses unsupported flags");
			if (precision.length > 0) throw jsError(ofmt, convposn, curconv, "uses non-zero precision (not supported)");
			if (flags.match(/-/)) left = true;
			if (flags.match(/0/)) pad = "0";
			if (flags.match(/\+/)) sign$1 = true;
			switch (conversion) {
				case "s":
					if (arg === void 0 || arg === null) throw jsError(ofmt, convposn, curconv, "attempted to print undefined or null as a string (argument " + argn + " to sprintf)");
					ret += doPad(pad, width, left, arg.toString());
					break;
				case "d": arg = Math.floor(arg);
				case "f":
					sign$1 = sign$1 && arg > 0 ? "+" : "";
					ret += sign$1 + doPad(pad, width, left, arg.toString());
					break;
				case "x":
					ret += doPad(pad, width, left, arg.toString(16));
					break;
				case "j":
					if (width === 0) width = 10;
					ret += mod_util$1.inspect(arg, false, width);
					break;
				case "r":
					ret += dumpException(arg);
					break;
				default: throw jsError(ofmt, convposn, curconv, "is not supported");
			}
		}
		ret += fmt;
		return ret;
	}
	function jsError(fmtstr, convposn, curconv, reason) {
		mod_assert.equal(typeof fmtstr, "string");
		mod_assert.equal(typeof curconv, "string");
		mod_assert.equal(typeof convposn, "number");
		mod_assert.equal(typeof reason, "string");
		return new Error("format string \"" + fmtstr + "\": conversion specifier \"" + curconv + "\" at character " + convposn + " " + reason);
	}
	function jsPrintf() {
		var args = Array.prototype.slice.call(arguments);
		args.unshift(process.stdout);
		jsFprintf.apply(null, args);
	}
	function jsFprintf(stream$3) {
		var args = Array.prototype.slice.call(arguments, 1);
		return stream$3.write(jsSprintf.apply(this, args));
	}
	function doPad(chr, width, left, str) {
		var ret = str;
		while (ret.length < width) if (left) ret += chr;
		else ret = chr + ret;
		return ret;
	}
	function dumpException(ex) {
		var ret;
		if (!(ex instanceof Error)) throw new Error(jsSprintf("invalid type for %%r: %j", ex));
		ret = "EXCEPTION: " + ex.constructor.name + ": " + ex.stack;
		if (ex.cause && typeof ex.cause === "function") {
			var cex = ex.cause();
			if (cex) ret += "\nCaused by: " + dumpException(cex);
		}
		return ret;
	}
} });

//#endregion
//#region node_modules/.pnpm/core-util-is@1.0.2/node_modules/core-util-is/lib/util.js
var require_util$1 = __commonJS({ "node_modules/.pnpm/core-util-is@1.0.2/node_modules/core-util-is/lib/util.js"(exports) {
	function isArray(arg) {
		if (Array.isArray) return Array.isArray(arg);
		return objectToString(arg) === "[object Array]";
	}
	exports.isArray = isArray;
	function isBoolean(arg) {
		return typeof arg === "boolean";
	}
	exports.isBoolean = isBoolean;
	function isNull(arg) {
		return arg === null;
	}
	exports.isNull = isNull;
	function isNullOrUndefined(arg) {
		return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;
	function isNumber(arg) {
		return typeof arg === "number";
	}
	exports.isNumber = isNumber;
	function isString(arg) {
		return typeof arg === "string";
	}
	exports.isString = isString;
	function isSymbol(arg) {
		return typeof arg === "symbol";
	}
	exports.isSymbol = isSymbol;
	function isUndefined(arg) {
		return arg === void 0;
	}
	exports.isUndefined = isUndefined;
	function isRegExp(re$5) {
		return objectToString(re$5) === "[object RegExp]";
	}
	exports.isRegExp = isRegExp;
	function isObject(arg) {
		return typeof arg === "object" && arg !== null;
	}
	exports.isObject = isObject;
	function isDate(d$1) {
		return objectToString(d$1) === "[object Date]";
	}
	exports.isDate = isDate;
	function isError(e) {
		return objectToString(e) === "[object Error]" || e instanceof Error;
	}
	exports.isError = isError;
	function isFunction(arg) {
		return typeof arg === "function";
	}
	exports.isFunction = isFunction;
	function isPrimitive(arg) {
		return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || typeof arg === "undefined";
	}
	exports.isPrimitive = isPrimitive;
	exports.isBuffer = Buffer.isBuffer;
	function objectToString(o) {
		return Object.prototype.toString.call(o);
	}
} });

//#endregion
//#region node_modules/.pnpm/verror@1.10.1/node_modules/verror/lib/verror.js
var require_verror = __commonJS({ "node_modules/.pnpm/verror@1.10.1/node_modules/verror/lib/verror.js"(exports, module) {
	var mod_assertplus = require_assert();
	var mod_util = __require("util");
	var mod_extsprintf = require_extsprintf();
	var mod_isError = require_util$1().isError;
	var sprintf = mod_extsprintf.sprintf;
	module.exports = VError$4;
	VError$4.VError = VError$4;
	VError$4.SError = SError;
	VError$4.WError = WError;
	VError$4.MultiError = MultiError;
	function parseConstructorArguments(args) {
		var argv, options, sprintf_args, shortmessage, k;
		mod_assertplus.object(args, "args");
		mod_assertplus.bool(args.strict, "args.strict");
		mod_assertplus.array(args.argv, "args.argv");
		argv = args.argv;
		if (argv.length === 0) {
			options = {};
			sprintf_args = [];
		} else if (mod_isError(argv[0])) {
			options = { "cause": argv[0] };
			sprintf_args = argv.slice(1);
		} else if (typeof argv[0] === "object") {
			options = {};
			for (k in argv[0]) options[k] = argv[0][k];
			sprintf_args = argv.slice(1);
		} else {
			mod_assertplus.string(argv[0], "first argument to VError, SError, or WError constructor must be a string, object, or Error");
			options = {};
			sprintf_args = argv;
		}
		mod_assertplus.object(options);
		if (!options.strict && !args.strict) sprintf_args = sprintf_args.map(function(a) {
			return a === null ? "null" : a === void 0 ? "undefined" : a;
		});
		if (sprintf_args.length === 0) shortmessage = "";
		else shortmessage = sprintf.apply(null, sprintf_args);
		return {
			"options": options,
			"shortmessage": shortmessage
		};
	}
	function VError$4() {
		var args, obj, parsed, cause, ctor, message, k;
		args = Array.prototype.slice.call(arguments, 0);
		if (!(this instanceof VError$4)) {
			obj = Object.create(VError$4.prototype);
			VError$4.apply(obj, arguments);
			return obj;
		}
		parsed = parseConstructorArguments({
			"argv": args,
			"strict": false
		});
		if (parsed.options.name) {
			mod_assertplus.string(parsed.options.name, "error's \"name\" must be a string");
			this.name = parsed.options.name;
		}
		this.jse_shortmsg = parsed.shortmessage;
		message = parsed.shortmessage;
		cause = parsed.options.cause;
		if (cause) {
			mod_assertplus.ok(mod_isError(cause), "cause is not an Error");
			this.jse_cause = cause;
			if (!parsed.options.skipCauseMessage) message += ": " + cause.message;
		}
		this.jse_info = {};
		if (parsed.options.info) for (k in parsed.options.info) this.jse_info[k] = parsed.options.info[k];
		this.message = message;
		Error.call(this, message);
		if (Error.captureStackTrace) {
			ctor = parsed.options.constructorOpt || this.constructor;
			Error.captureStackTrace(this, ctor);
		}
		return this;
	}
	mod_util.inherits(VError$4, Error);
	VError$4.prototype.name = "VError";
	VError$4.prototype.toString = function ve_toString() {
		var str = this.hasOwnProperty("name") && this.name || this.constructor.name || this.constructor.prototype.name;
		if (this.message) str += ": " + this.message;
		return str;
	};
	VError$4.prototype.cause = function ve_cause() {
		var cause = VError$4.cause(this);
		return cause === null ? void 0 : cause;
	};
	VError$4.cause = function(err) {
		mod_assertplus.ok(mod_isError(err), "err must be an Error");
		return mod_isError(err.jse_cause) ? err.jse_cause : null;
	};
	VError$4.info = function(err) {
		var rv, cause, k;
		mod_assertplus.ok(mod_isError(err), "err must be an Error");
		cause = VError$4.cause(err);
		if (cause !== null) rv = VError$4.info(cause);
		else rv = {};
		if (typeof err.jse_info == "object" && err.jse_info !== null) for (k in err.jse_info) rv[k] = err.jse_info[k];
		return rv;
	};
	VError$4.findCauseByName = function(err, name$2) {
		var cause;
		mod_assertplus.ok(mod_isError(err), "err must be an Error");
		mod_assertplus.string(name$2, "name");
		mod_assertplus.ok(name$2.length > 0, "name cannot be empty");
		for (cause = err; cause !== null; cause = VError$4.cause(cause)) {
			mod_assertplus.ok(mod_isError(cause));
			if (cause.name == name$2) return cause;
		}
		return null;
	};
	VError$4.hasCauseWithName = function(err, name$2) {
		return VError$4.findCauseByName(err, name$2) !== null;
	};
	VError$4.fullStack = function(err) {
		mod_assertplus.ok(mod_isError(err), "err must be an Error");
		var cause = VError$4.cause(err);
		if (cause) return err.stack + "\ncaused by: " + VError$4.fullStack(cause);
		return err.stack;
	};
	VError$4.errorFromList = function(errors$4) {
		mod_assertplus.arrayOfObject(errors$4, "errors");
		if (errors$4.length === 0) return null;
		errors$4.forEach(function(e) {
			mod_assertplus.ok(mod_isError(e));
		});
		if (errors$4.length == 1) return errors$4[0];
		return new MultiError(errors$4);
	};
	VError$4.errorForEach = function(err, func) {
		mod_assertplus.ok(mod_isError(err), "err must be an Error");
		mod_assertplus.func(func, "func");
		if (err instanceof MultiError) err.errors().forEach(function iterError(e) {
			func(e);
		});
		else func(err);
	};
	function SError() {
		var args, obj, parsed, options;
		args = Array.prototype.slice.call(arguments, 0);
		if (!(this instanceof SError)) {
			obj = Object.create(SError.prototype);
			SError.apply(obj, arguments);
			return obj;
		}
		parsed = parseConstructorArguments({
			"argv": args,
			"strict": true
		});
		options = parsed.options;
		VError$4.call(this, options, "%s", parsed.shortmessage);
		return this;
	}
	mod_util.inherits(SError, VError$4);
	function MultiError(errors$4) {
		mod_assertplus.array(errors$4, "list of errors");
		mod_assertplus.ok(errors$4.length > 0, "must be at least one error");
		this.ase_errors = errors$4;
		VError$4.call(this, { "cause": errors$4[0] }, "first of %d error%s", errors$4.length, errors$4.length == 1 ? "" : "s");
	}
	mod_util.inherits(MultiError, VError$4);
	MultiError.prototype.name = "MultiError";
	MultiError.prototype.errors = function me_errors() {
		return this.ase_errors.slice(0);
	};
	function WError() {
		var args, obj, parsed, options;
		args = Array.prototype.slice.call(arguments, 0);
		if (!(this instanceof WError)) {
			obj = Object.create(WError.prototype);
			WError.apply(obj, args);
			return obj;
		}
		parsed = parseConstructorArguments({
			"argv": args,
			"strict": false
		});
		options = parsed.options;
		options["skipCauseMessage"] = true;
		VError$4.call(this, options, "%s", parsed.shortmessage);
		return this;
	}
	mod_util.inherits(WError, VError$4);
	WError.prototype.name = "WError";
	WError.prototype.toString = function we_toString() {
		var str = this.hasOwnProperty("name") && this.name || this.constructor.name || this.constructor.prototype.name;
		if (this.message) str += ": " + this.message;
		if (this.jse_cause && this.jse_cause.message) str += "; caused by " + this.jse_cause.toString();
		return str;
	};
	WError.prototype.cause = function we_cause(c) {
		if (mod_isError(c)) this.jse_cause = c;
		return this.jse_cause;
	};
} });

//#endregion
//#region node_modules/.pnpm/@sap+xsenv@5.5.0/node_modules/@sap/xsenv/lib/cfservice.js
var require_cfservice = __commonJS({ "node_modules/.pnpm/@sap+xsenv@5.5.0/node_modules/@sap/xsenv/lib/cfservice.js"(exports) {
	var filter = require_filter();
	var VError$3 = require_verror();
	exports.readCFServices = readCFServices$1;
	exports.filterCFServices = filterCFServices$1;
	function readCFServices$1() {
		if (!process.env.VCAP_SERVICES) return;
		try {
			var services = JSON.parse(process.env.VCAP_SERVICES);
		} catch (err) {
			throw new VError$3(err, "Environment variable VCAP_SERVICES is not a valid JSON string.");
		}
		var result = {};
		for (var s$1 in services) for (var si in services[s$1]) {
			var svc = services[s$1][si];
			result[svc.name] = svc;
		}
		return result;
	}
	/**
	* Returns an array of Cloud Foundry services matching the given filter.
	*
	* @param filterQuery {(string|Object|function)}
	*  - if string, returns the service with the same service instance name (name property)
	*  - if Object, should have some of these properties [name, label, tag, plan] and returns all services
	*    where all of the given properties match. Given tag matches if it is present in the tags array.
	*  - if function, should take a service object as argument and return true only if it matches the filter
	* @returns Arrays of matching service objects, empty if no matches
	*/
	function filterCFServices$1(filterQuery) {
		return filter.apply(readCFServices$1(), filterQuery);
	}
} });

//#endregion
//#region node_modules/.pnpm/clone@2.1.2/node_modules/clone/clone.js
var require_clone = __commonJS({ "node_modules/.pnpm/clone@2.1.2/node_modules/clone/clone.js"(exports, module) {
	var clone = function() {
		"use strict";
		function _instanceof(obj, type) {
			return type != null && obj instanceof type;
		}
		var nativeMap;
		try {
			nativeMap = Map;
		} catch (_) {
			nativeMap = function() {};
		}
		var nativeSet;
		try {
			nativeSet = Set;
		} catch (_) {
			nativeSet = function() {};
		}
		var nativePromise;
		try {
			nativePromise = Promise;
		} catch (_) {
			nativePromise = function() {};
		}
		/**
		* Clones (copies) an Object using deep copying.
		*
		* This function supports circular references by default, but if you are certain
		* there are no circular references in your object, you can save some CPU time
		* by calling clone(obj, false).
		*
		* Caution: if `circular` is false and `parent` contains circular references,
		* your program may enter an infinite loop and crash.
		*
		* @param `parent` - the object to be cloned
		* @param `circular` - set to true if the object to be cloned may contain
		*    circular references. (optional - true by default)
		* @param `depth` - set to a number if the object is only to be cloned to
		*    a particular depth. (optional - defaults to Infinity)
		* @param `prototype` - sets the prototype to be used when cloning an object.
		*    (optional - defaults to parent prototype).
		* @param `includeNonEnumerable` - set to true if the non-enumerable properties
		*    should be cloned as well. Non-enumerable properties on the prototype
		*    chain will be ignored. (optional - false by default)
		*/
		function clone$1(parent, circular, depth, prototype$2, includeNonEnumerable) {
			if (typeof circular === "object") {
				depth = circular.depth;
				prototype$2 = circular.prototype;
				includeNonEnumerable = circular.includeNonEnumerable;
				circular = circular.circular;
			}
			var allParents = [];
			var allChildren = [];
			var useBuffer = typeof Buffer != "undefined";
			if (typeof circular == "undefined") circular = true;
			if (typeof depth == "undefined") depth = Infinity;
			function _clone(parent$1, depth$1) {
				if (parent$1 === null) return null;
				if (depth$1 === 0) return parent$1;
				var child$1;
				var proto$2;
				if (typeof parent$1 != "object") return parent$1;
				if (_instanceof(parent$1, nativeMap)) child$1 = new nativeMap();
				else if (_instanceof(parent$1, nativeSet)) child$1 = new nativeSet();
				else if (_instanceof(parent$1, nativePromise)) child$1 = new nativePromise(function(resolve, reject) {
					parent$1.then(function(value) {
						resolve(_clone(value, depth$1 - 1));
					}, function(err) {
						reject(_clone(err, depth$1 - 1));
					});
				});
				else if (clone$1.__isArray(parent$1)) child$1 = [];
				else if (clone$1.__isRegExp(parent$1)) {
					child$1 = new RegExp(parent$1.source, __getRegExpFlags(parent$1));
					if (parent$1.lastIndex) child$1.lastIndex = parent$1.lastIndex;
				} else if (clone$1.__isDate(parent$1)) child$1 = new Date(parent$1.getTime());
				else if (useBuffer && Buffer.isBuffer(parent$1)) {
					if (Buffer.allocUnsafe) child$1 = Buffer.allocUnsafe(parent$1.length);
					else child$1 = new Buffer(parent$1.length);
					parent$1.copy(child$1);
					return child$1;
				} else if (_instanceof(parent$1, Error)) child$1 = Object.create(parent$1);
				else if (typeof prototype$2 == "undefined") {
					proto$2 = Object.getPrototypeOf(parent$1);
					child$1 = Object.create(proto$2);
				} else {
					child$1 = Object.create(prototype$2);
					proto$2 = prototype$2;
				}
				if (circular) {
					var index = allParents.indexOf(parent$1);
					if (index != -1) return allChildren[index];
					allParents.push(parent$1);
					allChildren.push(child$1);
				}
				if (_instanceof(parent$1, nativeMap)) parent$1.forEach(function(value, key$1) {
					var keyChild = _clone(key$1, depth$1 - 1);
					var valueChild = _clone(value, depth$1 - 1);
					child$1.set(keyChild, valueChild);
				});
				if (_instanceof(parent$1, nativeSet)) parent$1.forEach(function(value) {
					var entryChild = _clone(value, depth$1 - 1);
					child$1.add(entryChild);
				});
				for (var i in parent$1) {
					var attrs;
					if (proto$2) attrs = Object.getOwnPropertyDescriptor(proto$2, i);
					if (attrs && attrs.set == null) continue;
					child$1[i] = _clone(parent$1[i], depth$1 - 1);
				}
				if (Object.getOwnPropertySymbols) {
					var symbols = Object.getOwnPropertySymbols(parent$1);
					for (var i = 0; i < symbols.length; i++) {
						var symbol = symbols[i];
						var descriptor = Object.getOwnPropertyDescriptor(parent$1, symbol);
						if (descriptor && !descriptor.enumerable && !includeNonEnumerable) continue;
						child$1[symbol] = _clone(parent$1[symbol], depth$1 - 1);
						if (!descriptor.enumerable) Object.defineProperty(child$1, symbol, { enumerable: false });
					}
				}
				if (includeNonEnumerable) {
					var allPropertyNames = Object.getOwnPropertyNames(parent$1);
					for (var i = 0; i < allPropertyNames.length; i++) {
						var propertyName = allPropertyNames[i];
						var descriptor = Object.getOwnPropertyDescriptor(parent$1, propertyName);
						if (descriptor && descriptor.enumerable) continue;
						child$1[propertyName] = _clone(parent$1[propertyName], depth$1 - 1);
						Object.defineProperty(child$1, propertyName, { enumerable: false });
					}
				}
				return child$1;
			}
			return _clone(parent, depth);
		}
		/**
		* Simple flat clone using prototype, accepts only objects, usefull for property
		* override on FLAT configuration object (no nested props).
		*
		* USE WITH CAUTION! This may not behave as you wish if you do not know how this
		* works.
		*/
		clone$1.clonePrototype = function clonePrototype(parent) {
			if (parent === null) return null;
			var c = function() {};
			c.prototype = parent;
			return new c();
		};
		function __objToStr(o) {
			return Object.prototype.toString.call(o);
		}
		clone$1.__objToStr = __objToStr;
		function __isDate(o) {
			return typeof o === "object" && __objToStr(o) === "[object Date]";
		}
		clone$1.__isDate = __isDate;
		function __isArray(o) {
			return typeof o === "object" && __objToStr(o) === "[object Array]";
		}
		clone$1.__isArray = __isArray;
		function __isRegExp(o) {
			return typeof o === "object" && __objToStr(o) === "[object RegExp]";
		}
		clone$1.__isRegExp = __isRegExp;
		function __getRegExpFlags(re$5) {
			var flags = "";
			if (re$5.global) flags += "g";
			if (re$5.ignoreCase) flags += "i";
			if (re$5.multiline) flags += "m";
			return flags;
		}
		clone$1.__getRegExpFlags = __getRegExpFlags;
		return clone$1;
	}();
	if (typeof module === "object" && module.exports) module.exports = clone;
} });

//#endregion
//#region node_modules/.pnpm/node-cache@5.1.2/node_modules/node-cache/lib/node_cache.js
var require_node_cache$1 = __commonJS({ "node_modules/.pnpm/node-cache@5.1.2/node_modules/node-cache/lib/node_cache.js"(exports, module) {
	(function() {
		var EventEmitter$5, NodeCache$1, clone$1, splice = [].splice, boundMethodCheck = function(instance, Constructor) {
			if (!(instance instanceof Constructor)) throw new Error("Bound instance method accessed before binding");
		}, indexOf$1 = [].indexOf;
		clone$1 = require_clone();
		EventEmitter$5 = __require("events").EventEmitter;
		module.exports = NodeCache$1 = function() {
			class NodeCache$2 extends EventEmitter$5 {
				constructor(options = {}) {
					super();
					this.get = this.get.bind(this);
					this.mget = this.mget.bind(this);
					this.set = this.set.bind(this);
					this.mset = this.mset.bind(this);
					this.del = this.del.bind(this);
					this.take = this.take.bind(this);
					this.ttl = this.ttl.bind(this);
					this.getTtl = this.getTtl.bind(this);
					this.keys = this.keys.bind(this);
					this.has = this.has.bind(this);
					this.getStats = this.getStats.bind(this);
					this.flushAll = this.flushAll.bind(this);
					this.flushStats = this.flushStats.bind(this);
					this.close = this.close.bind(this);
					this._checkData = this._checkData.bind(this);
					this._check = this._check.bind(this);
					this._isInvalidKey = this._isInvalidKey.bind(this);
					this._wrap = this._wrap.bind(this);
					this._getValLength = this._getValLength.bind(this);
					this._error = this._error.bind(this);
					this._initErrors = this._initErrors.bind(this);
					this.options = options;
					this._initErrors();
					this.data = {};
					this.options = Object.assign({
						forceString: false,
						objectValueSize: 80,
						promiseValueSize: 80,
						arrayValueSize: 40,
						stdTTL: 0,
						checkperiod: 600,
						useClones: true,
						deleteOnExpire: true,
						enableLegacyCallbacks: false,
						maxKeys: -1
					}, this.options);
					if (this.options.enableLegacyCallbacks) {
						console.warn("WARNING! node-cache legacy callback support will drop in v6.x");
						[
							"get",
							"mget",
							"set",
							"del",
							"ttl",
							"getTtl",
							"keys",
							"has"
						].forEach((methodKey) => {
							var oldMethod;
							oldMethod = this[methodKey];
							this[methodKey] = function(...args) {
								var cb, err, ref, res;
								ref = args, [...args] = ref, [cb] = splice.call(args, -1);
								if (typeof cb === "function") try {
									res = oldMethod(...args);
									cb(null, res);
								} catch (error1) {
									err = error1;
									cb(err);
								}
								else return oldMethod(...args, cb);
							};
						});
					}
					this.stats = {
						hits: 0,
						misses: 0,
						keys: 0,
						ksize: 0,
						vsize: 0
					};
					this.validKeyTypes = ["string", "number"];
					this._checkData();
					return;
				}
				get(key$1) {
					var _ret, err;
					boundMethodCheck(this, NodeCache$2);
					if ((err = this._isInvalidKey(key$1)) != null) throw err;
					if (this.data[key$1] != null && this._check(key$1, this.data[key$1])) {
						this.stats.hits++;
						_ret = this._unwrap(this.data[key$1]);
						return _ret;
					} else {
						this.stats.misses++;
						return void 0;
					}
				}
				mget(keys$2) {
					var _err, err, i, key$1, len, oRet;
					boundMethodCheck(this, NodeCache$2);
					if (!Array.isArray(keys$2)) {
						_err = this._error("EKEYSTYPE");
						throw _err;
					}
					oRet = {};
					for (i = 0, len = keys$2.length; i < len; i++) {
						key$1 = keys$2[i];
						if ((err = this._isInvalidKey(key$1)) != null) throw err;
						if (this.data[key$1] != null && this._check(key$1, this.data[key$1])) {
							this.stats.hits++;
							oRet[key$1] = this._unwrap(this.data[key$1]);
						} else this.stats.misses++;
					}
					return oRet;
				}
				set(key$1, value, ttl) {
					var _err, err, existent;
					boundMethodCheck(this, NodeCache$2);
					if (this.options.maxKeys > -1 && this.stats.keys >= this.options.maxKeys) {
						_err = this._error("ECACHEFULL");
						throw _err;
					}
					if (this.options.forceString && false);
					if (ttl == null) ttl = this.options.stdTTL;
					if ((err = this._isInvalidKey(key$1)) != null) throw err;
					existent = false;
					if (this.data[key$1]) {
						existent = true;
						this.stats.vsize -= this._getValLength(this._unwrap(this.data[key$1], false));
					}
					this.data[key$1] = this._wrap(value, ttl);
					this.stats.vsize += this._getValLength(value);
					if (!existent) {
						this.stats.ksize += this._getKeyLength(key$1);
						this.stats.keys++;
					}
					this.emit("set", key$1, value);
					return true;
				}
				mset(keyValueSet) {
					var _err, err, i, j, key$1, keyValuePair, len, len1, ttl, val;
					boundMethodCheck(this, NodeCache$2);
					if (this.options.maxKeys > -1 && this.stats.keys + keyValueSet.length >= this.options.maxKeys) {
						_err = this._error("ECACHEFULL");
						throw _err;
					}
					for (i = 0, len = keyValueSet.length; i < len; i++) {
						keyValuePair = keyValueSet[i];
						({key: key$1, val, ttl} = keyValuePair);
						if (ttl && typeof ttl !== "number") {
							_err = this._error("ETTLTYPE");
							throw _err;
						}
						if ((err = this._isInvalidKey(key$1)) != null) throw err;
					}
					for (j = 0, len1 = keyValueSet.length; j < len1; j++) {
						keyValuePair = keyValueSet[j];
						({key: key$1, val, ttl} = keyValuePair);
						this.set(key$1, val, ttl);
					}
					return true;
				}
				del(keys$2) {
					var delCount, err, i, key$1, len, oldVal;
					boundMethodCheck(this, NodeCache$2);
					if (!Array.isArray(keys$2)) keys$2 = [keys$2];
					delCount = 0;
					for (i = 0, len = keys$2.length; i < len; i++) {
						key$1 = keys$2[i];
						if ((err = this._isInvalidKey(key$1)) != null) throw err;
						if (this.data[key$1] != null) {
							this.stats.vsize -= this._getValLength(this._unwrap(this.data[key$1], false));
							this.stats.ksize -= this._getKeyLength(key$1);
							this.stats.keys--;
							delCount++;
							oldVal = this.data[key$1];
							delete this.data[key$1];
							this.emit("del", key$1, oldVal.v);
						}
					}
					return delCount;
				}
				take(key$1) {
					var _ret;
					boundMethodCheck(this, NodeCache$2);
					_ret = this.get(key$1);
					if (_ret != null) this.del(key$1);
					return _ret;
				}
				ttl(key$1, ttl) {
					var err;
					boundMethodCheck(this, NodeCache$2);
					ttl || (ttl = this.options.stdTTL);
					if (!key$1) return false;
					if ((err = this._isInvalidKey(key$1)) != null) throw err;
					if (this.data[key$1] != null && this._check(key$1, this.data[key$1])) {
						if (ttl >= 0) this.data[key$1] = this._wrap(this.data[key$1].v, ttl, false);
						else this.del(key$1);
						return true;
					} else return false;
				}
				getTtl(key$1) {
					var _ttl, err;
					boundMethodCheck(this, NodeCache$2);
					if (!key$1) return void 0;
					if ((err = this._isInvalidKey(key$1)) != null) throw err;
					if (this.data[key$1] != null && this._check(key$1, this.data[key$1])) {
						_ttl = this.data[key$1].t;
						return _ttl;
					} else return void 0;
				}
				keys() {
					var _keys;
					boundMethodCheck(this, NodeCache$2);
					_keys = Object.keys(this.data);
					return _keys;
				}
				has(key$1) {
					var _exists;
					boundMethodCheck(this, NodeCache$2);
					_exists = this.data[key$1] != null && this._check(key$1, this.data[key$1]);
					return _exists;
				}
				getStats() {
					boundMethodCheck(this, NodeCache$2);
					return this.stats;
				}
				flushAll(_startPeriod = true) {
					boundMethodCheck(this, NodeCache$2);
					this.data = {};
					this.stats = {
						hits: 0,
						misses: 0,
						keys: 0,
						ksize: 0,
						vsize: 0
					};
					this._killCheckPeriod();
					this._checkData(_startPeriod);
					this.emit("flush");
				}
				flushStats() {
					boundMethodCheck(this, NodeCache$2);
					this.stats = {
						hits: 0,
						misses: 0,
						keys: 0,
						ksize: 0,
						vsize: 0
					};
					this.emit("flush_stats");
				}
				close() {
					boundMethodCheck(this, NodeCache$2);
					this._killCheckPeriod();
				}
				_checkData(startPeriod = true) {
					var key$1, ref, value;
					boundMethodCheck(this, NodeCache$2);
					ref = this.data;
					for (key$1 in ref) {
						value = ref[key$1];
						this._check(key$1, value);
					}
					if (startPeriod && this.options.checkperiod > 0) {
						this.checkTimeout = setTimeout(this._checkData, this.options.checkperiod * 1e3, startPeriod);
						if (this.checkTimeout != null && this.checkTimeout.unref != null) this.checkTimeout.unref();
					}
				}
				_killCheckPeriod() {
					if (this.checkTimeout != null) return clearTimeout(this.checkTimeout);
				}
				_check(key$1, data) {
					var _retval;
					boundMethodCheck(this, NodeCache$2);
					_retval = true;
					if (data.t !== 0 && data.t < Date.now()) {
						if (this.options.deleteOnExpire) {
							_retval = false;
							this.del(key$1);
						}
						this.emit("expired", key$1, this._unwrap(data));
					}
					return _retval;
				}
				_isInvalidKey(key$1) {
					var ref;
					boundMethodCheck(this, NodeCache$2);
					if (ref = typeof key$1, indexOf$1.call(this.validKeyTypes, ref) < 0) return this._error("EKEYTYPE", { type: typeof key$1 });
				}
				_wrap(value, ttl, asClone = true) {
					var livetime, now, oReturn, ttlMultiplicator;
					boundMethodCheck(this, NodeCache$2);
					if (!this.options.useClones) asClone = false;
					now = Date.now();
					livetime = 0;
					ttlMultiplicator = 1e3;
					if (ttl === 0) livetime = 0;
					else if (ttl) livetime = now + ttl * ttlMultiplicator;
					else if (this.options.stdTTL === 0) livetime = this.options.stdTTL;
					else livetime = now + this.options.stdTTL * ttlMultiplicator;
					return oReturn = {
						t: livetime,
						v: asClone ? clone$1(value) : value
					};
				}
				_unwrap(value, asClone = true) {
					if (!this.options.useClones) asClone = false;
					if (value.v != null) if (asClone) return clone$1(value.v);
					else return value.v;
					return null;
				}
				_getKeyLength(key$1) {
					return key$1.toString().length;
				}
				_getValLength(value) {
					boundMethodCheck(this, NodeCache$2);
					if (typeof value === "string") return value.length;
					else if (this.options.forceString) return JSON.stringify(value).length;
					else if (Array.isArray(value)) return this.options.arrayValueSize * value.length;
					else if (typeof value === "number") return 8;
					else if (typeof (value != null ? value.then : void 0) === "function") return this.options.promiseValueSize;
					else if (typeof Buffer !== "undefined" && Buffer !== null ? Buffer.isBuffer(value) : void 0) return value.length;
					else if (value != null && typeof value === "object") return this.options.objectValueSize * Object.keys(value).length;
					else if (typeof value === "boolean") return 8;
					else return 0;
				}
				_error(type, data = {}) {
					var error$1;
					boundMethodCheck(this, NodeCache$2);
					error$1 = new Error();
					error$1.name = type;
					error$1.errorcode = type;
					error$1.message = this.ERRORS[type] != null ? this.ERRORS[type](data) : "-";
					error$1.data = data;
					return error$1;
				}
				_initErrors() {
					var _errMsg, _errT, ref;
					boundMethodCheck(this, NodeCache$2);
					this.ERRORS = {};
					ref = this._ERRORS;
					for (_errT in ref) {
						_errMsg = ref[_errT];
						this.ERRORS[_errT] = this.createErrorMessage(_errMsg);
					}
				}
				createErrorMessage(errMsg) {
					return function(args) {
						return errMsg.replace("__key", args.type);
					};
				}
			}
			NodeCache$2.prototype._ERRORS = {
				"ENOTFOUND": "Key `__key` not found",
				"ECACHEFULL": "Cache max keys amount exceeded",
				"EKEYTYPE": "The key argument has to be of type `string` or `number`. Found: `__key`",
				"EKEYSTYPE": "The keys argument has to be an array.",
				"ETTLTYPE": "The ttl argument has to be a number."
			};
			return NodeCache$2;
		}.call(this);
	}).call(exports);
} });

//#endregion
//#region node_modules/.pnpm/node-cache@5.1.2/node_modules/node-cache/index.js
var require_node_cache = __commonJS({ "node_modules/.pnpm/node-cache@5.1.2/node_modules/node-cache/index.js"(exports, module) {
	(function() {
		var exports$1;
		exports$1 = module.exports = require_node_cache$1();
		exports$1.version = "5.1.2";
	}).call(exports);
} });

//#endregion
//#region node_modules/.pnpm/@sap+xsenv@5.5.0/node_modules/@sap/xsenv/lib/redactServiceData.js
var require_redactServiceData = __commonJS({ "node_modules/.pnpm/@sap+xsenv@5.5.0/node_modules/@sap/xsenv/lib/redactServiceData.js"(exports, module) {
	let debug$6 = require_src$1()("xsenv");
	const secretKeys = [
		"certificate",
		"key",
		"verificationkey",
		"clientsecret",
		"password",
		"usersecret"
	];
	module.exports.redactServicesSecretData = redactServicesSecretData$2;
	function redactServicesSecretData$2(serviceData) {
		if (!serviceData) return {};
		debug$6("Redacting Services Secret Data");
		let services = JSON.parse(JSON.stringify(serviceData));
		if (!Object.keys(services) || Object.keys(services).length === 0) {
			debug$6("Did not find any services keys in service data.");
			return;
		}
		for (let service in services) {
			if (!services[service].credentials) return;
			for (let sk in secretKeys) {
				let skey = secretKeys[sk];
				if (services[service].credentials[skey]) services[service].credentials[skey] = "redacted";
			}
		}
		debug$6(services);
		return services;
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap+xsenv@5.5.0/node_modules/@sap/xsenv/lib/k8sservice.js
var require_k8sservice = __commonJS({ "node_modules/.pnpm/@sap+xsenv@5.5.0/node_modules/@sap/xsenv/lib/k8sservice.js"(exports) {
	const fs$4 = __require("fs");
	const assert$3 = __require("assert");
	const path$2 = __require("path");
	const debug$5 = require_src$1()("xsenv");
	const DEFAULT_SECRETS_PATH = "/etc/secrets/sapcp/";
	const NodeCache = require_node_cache();
	const k8sSecretsCache = new NodeCache({ stdTTL: 9 * 60 });
	const redactServicesSecretData$1 = require_redactServiceData().redactServicesSecretData;
	exports.readK8SServices = readK8SServices$1;
	const isFile$1 = (filePath) => fs$4.statSync(filePath).isFile();
	const isDirectory$1 = (dirPath) => fs$4.statSync(dirPath).isDirectory();
	function isJsonObject(str) {
		return /^{(.|\r?\n?)*}(\s)*$/.test(str);
	}
	function readFileContent(filePath) {
		let content = fs$4.readFileSync(filePath).toString("utf-8");
		const parseAllJson = process.env.XSENV_PARSE_ALL_JSON === "true" || false;
		if (!parseAllJson) {
			if (!isJsonObject(content)) return content;
		}
		try {
			content = JSON.parse(content);
		} catch (err) {
			debug$5("Content of file %s is not valid JSON object", filePath);
		}
		return content;
	}
	function readFiles$1(dirPath) {
		const result = {};
		for (let file of fs$4.readdirSync(dirPath)) {
			const filePath = path$2.join(dirPath, file);
			if (isFile$1(filePath)) result[file] = readFileContent(filePath);
		}
		return result;
	}
	function parseTags(tags, serviceName) {
		if (!tags) return [serviceName];
		if (process.env.XSENV_PARSE_ALL_JSON) return [...tags];
		return JSON.parse(tags);
	}
	function readInstance(serviceName, instanceName, instancePath) {
		const credentials = readFiles$1(instancePath);
		const tags = parseTags(credentials.tags, serviceName);
		if (!tags.includes(serviceName)) tags.push(serviceName);
		return {
			credentials,
			name: instanceName,
			label: credentials.label || serviceName,
			tags
		};
	}
	function readServiceInstances(serviceName, servicePath) {
		const result = {};
		for (let instanceName of fs$4.readdirSync(servicePath)) {
			const instancePath = path$2.join(servicePath, instanceName);
			if (isDirectory$1(instancePath)) result[instanceName] = readInstance(serviceName, instanceName, instancePath);
		}
		return result;
	}
	function readSecrets(secretsPath) {
		assert$3(isDirectory$1(secretsPath), "secrets path must be a directory");
		const result = {};
		for (let serviceName of fs$4.readdirSync(secretsPath)) {
			const servicePath = path$2.join(secretsPath, serviceName);
			if (isDirectory$1(servicePath)) Object.assign(result, readServiceInstances(serviceName, servicePath));
		}
		return result;
	}
	function readK8SServices$1(secretsPath, disableCache) {
		secretsPath = secretsPath || DEFAULT_SECRETS_PATH;
		assert$3(typeof secretsPath === "string", "secrets directory path must be string");
		let result = void 0;
		let cachedSecrets = k8sSecretsCache.get(`${secretsPath}-services`);
		if (cachedSecrets && !disableCache) {
			debug$5(`Cached Secrets found: ${secretsPath}-services`);
			let redactedResult = redactServicesSecretData$1(cachedSecrets);
			debug$5(redactedResult);
			return cachedSecrets;
		}
		if (fs$4.existsSync(secretsPath)) {
			result = readSecrets(secretsPath);
			debug$5(`Caching Secret: ${secretsPath}-services`);
			let redactedResult = redactServicesSecretData$1(result);
			debug$5(redactedResult);
			k8sSecretsCache.set(`${secretsPath}-services`, result);
		}
		return result;
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap+xsenv@5.5.0/node_modules/@sap/xsenv/lib/serviceBindingService.js
var require_serviceBindingService = __commonJS({ "node_modules/.pnpm/@sap+xsenv@5.5.0/node_modules/@sap/xsenv/lib/serviceBindingService.js"(exports) {
	const fs$3 = __require("fs");
	const assert$2 = __require("assert");
	const path$1 = __require("path");
	const debug$4 = require_src$1()("xsenv");
	exports.readServiceBindingServices = readServiceBindingServices$1;
	const isDirectory = (dirPath) => fs$3.statSync(dirPath).isDirectory();
	function readFiles(dirPath) {
		const result = {};
		for (const dirEntry of fs$3.readdirSync(dirPath, { withFileTypes: true })) {
			const filePath = path$1.join(dirPath, dirEntry.name);
			if (isFile(filePath, dirEntry)) result[dirEntry.name] = fs$3.readFileSync(filePath, "utf8");
		}
		return result;
	}
	function isFile(p, entry) {
		if (entry.isFile()) return true;
		if (entry.isSymbolicLink()) {
			const target = fs$3.realpathSync(p);
			const targetStat = fs$3.statSync(target);
			if (targetStat.isFile()) return true;
		}
		return false;
	}
	const DEFAULT_META_DATA_PROPERTIES = {
		type: true,
		provider: true
	};
	function parseJsonSafe(str) {
		try {
			return JSON.parse(str);
		} catch (error$1) {
			return void 0;
		}
	}
	function buildBindingWithoutMetaData(properties) {
		const binding = { credentials: {} };
		for (const propertyName in properties) if (propertyName in DEFAULT_META_DATA_PROPERTIES) binding[propertyName] = properties[propertyName];
		else binding.credentials[propertyName] = properties[propertyName];
		return binding;
	}
	function parseProperties(properties, metaData = []) {
		const result = {};
		for (const metaDataProperty of metaData) {
			const { name: name$2 } = metaDataProperty;
			const text = properties[name$2];
			if (name$2 && typeof text !== "undefined") switch (metaDataProperty.format) {
				case "text": {
					result[name$2] = text;
					break;
				}
				case "json": {
					const value = parseJsonSafe(text);
					if (metaDataProperty.container) Object.assign(result, value);
					else result[name$2] = value;
					break;
				}
				default: debug$4("Unexpected format %s", metaDataProperty.format);
			}
			else debug$4("Missing property %s", name$2);
		}
		return result;
	}
	function readBinding(bindingPath, bindingName) {
		const properties = readFiles(bindingPath);
		const metaDataString = properties[".metadata"];
		let metaData;
		if (metaDataString) {
			metaData = parseJsonSafe(metaDataString);
			if (typeof metaData === "undefined") debug$4("Cannot parse JSON: %s/.metadata", bindingPath);
		}
		let binding;
		if (metaData) {
			binding = parseProperties(properties, metaData.metaDataProperties);
			binding.credentials = parseProperties(properties, metaData.credentialProperties);
		} else binding = buildBindingWithoutMetaData(properties);
		if (!binding.type) return void 0;
		binding.name = bindingName;
		return binding;
	}
	function readServiceBindingsServicesFromPath(serviceBindingRoot) {
		assert$2(isDirectory(serviceBindingRoot), "secrets path must be a directory");
		const bindings = {};
		for (const bindingEntry of fs$3.readdirSync(serviceBindingRoot, { withFileTypes: true })) if (bindingEntry.isDirectory()) {
			const bindingPath = path$1.join(serviceBindingRoot, bindingEntry.name);
			const binding = readBinding(bindingPath, bindingEntry.name);
			if (binding) bindings[binding.name] = binding;
		}
		return bindings;
	}
	function readServiceBindingServices$1(serviceBindingRoot) {
		serviceBindingRoot = serviceBindingRoot || process.env.SERVICE_BINDING_ROOT;
		if (typeof serviceBindingRoot === "string" && serviceBindingRoot.length > 0) return fs$3.existsSync(serviceBindingRoot) ? readServiceBindingsServicesFromPath(serviceBindingRoot) : void 0;
		else return void 0;
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap+xsenv@5.5.0/node_modules/@sap/xsenv/lib/xsservices.js
var require_xsservices = __commonJS({ "node_modules/.pnpm/@sap+xsenv@5.5.0/node_modules/@sap/xsenv/lib/xsservices.js"(exports) {
	var assert$1 = __require("assert");
	var VError$2 = require_verror();
	var debug$3 = require_src$1()("xsenv");
	var fs$2 = __require("fs");
	var serviceFilter = require_filter();
	const readCFServices = require_cfservice().readCFServices;
	const readK8SServices = require_k8sservice().readK8SServices;
	const readServiceBindingServices = require_serviceBindingService().readServiceBindingServices;
	const redactServicesSecretData = require_redactServiceData().redactServicesSecretData;
	exports.getServices = getServices;
	exports.filterServices = filterServices;
	exports.serviceCredentials = serviceCredentials;
	exports.readServices = readServices;
	/**
	* Looks up and returns bound Cloud Foundry or K8S services.
	* If a service is not found - returns default service configuration loaded from a JSON file. The order of lookup is VCAP_SERVICES ->
	* mounted secrets path in K8S -> default service configuration.
	*
	* @param path {string} A string containing the mount path where the secrets are located in K8S. By default is "/etc/secrets/sapcp".
	* @param query {object} describes requested Cloud Foundry services, each property value is a filter
	*  as described in filterCFServices.
	* @param servicesFile {string} path to JSON file to load default service configuration (default is default-services.json).
	*  If null, do not load default service configuration.
	*
	* @returns {object} with the same properties as in query argument where the value of each
	*  property is the respective service credentials object.
	* @throws Error, if for some of the requested services no or multiple instances are found; Error, if query parameter is not provided
	*/
	function getServices(arg1, arg2, arg3) {
		const path$10 = typeof arg1 === "string" ? arg1 : void 0;
		const query = typeof arg1 === "string" ? arg2 : arg1;
		const servicesFile = typeof arg1 === "string" ? arg3 : arg2;
		assert$1(query && typeof query === "object", "Missing mandatory query parameter");
		var defaultServices = loadDefaultServices(servicesFile);
		var result = {};
		for (var key$1 in query) {
			var matches = filterServices(path$10, query[key$1]);
			if (matches.length === 1) result[key$1] = matches[0].credentials;
			else if (matches.length > 1) throw new VError$2("Found %d services matching %s", matches.length, key$1);
			else {
				if (!defaultServices[key$1]) throw new VError$2("No service matches %s", key$1);
				debug$3("No service in VCAP_SERVICES matches %s. Returning default configuration from %s", key$1, servicesFile);
				result[key$1] = defaultServices[key$1];
			}
		}
		return result;
	}
	function loadDefaultServices(servicesFile) {
		var defaultServices = {};
		if (servicesFile !== null) {
			servicesFile = servicesFile || "default-services.json";
			if (fs$2.existsSync(servicesFile)) {
				debug$3("Loading default service configuration from %s", servicesFile);
				try {
					defaultServices = JSON.parse(fs$2.readFileSync(servicesFile, "utf8"));
				} catch (err) {
					throw new VError$2(err, "Could not parse %s", servicesFile);
				}
			}
		}
		return defaultServices;
	}
	/**
	* Filters for service in service configuration from CloudFoundry (environment variable <code>VCAP_SERVICES</code>)
	* or mounted K8S secrets if no results found in <code>VCAP_SERVICES</code>.
	*
	* @param path {string} A string containing the mount path where the secrets are located in K8S.
	* @param filter Filter used to find a bound service, see filterCFServices
	* @return Array of objects representing all found service instances (credentials and its meta data)
	* @throws Error in case no or multiple matching services are found
	*/
	function filterServices(arg1, arg2) {
		const path$10 = arguments.length === 1 ? void 0 : arg1;
		const filter$1 = arguments.length === 1 ? arg1 : arg2;
		let filterResults = filterCFServices(path$10, filter$1);
		if (!hasResults(filterResults)) filterResults = filterServiceBindingServices(path$10, filter$1);
		if (!hasResults(filterResults)) filterResults = filterK8SServices(path$10, filter$1);
		return filterResults;
	}
	function filterCFServices(path$10, filter$1) {
		const results = serviceFilter.apply(readCFServices(), filter$1);
		logFilterResults("CF", filter$1, path$10, results);
		return results;
	}
	function filterServiceBindingServices(path$10, filter$1) {
		const results = serviceFilter.apply(readServiceBindingServices(path$10), filter$1);
		logFilterResults("Service Binding", filter$1, path$10 || "default", results);
		return results;
	}
	function filterK8SServices(path$10, filter$1) {
		const results = serviceFilter.apply(readK8SServices(path$10), filter$1);
		logFilterResults("K8s", filter$1, path$10 || "default", results);
		return results;
	}
	function hasResults(results) {
		return results && Array.isArray(results) && results.length > 0;
	}
	function logFilterResults(serviceType, filter$1, path$10, results) {
		let redactedResult = redactServicesSecretData(results);
		debug$3("%s Service filter with filter: %s and path: %s, returned: %s.", serviceType, filter$1, path$10, redactedResult);
	}
	/**
	* Reads service credentials configuration from CloudFoundry environment variable <code>VCAP_SERVICES</code>
	* or mounted K8S secrets.
	*
	* @param path {string} A string containing the mount path where the secrets are mounted in K8S environment.
	* @param filter Filter used to find a bound Cloud Foundry service, see filterCFServices
	* @return Credentials property of found service
	* @throws Error in case no or multiple matching services are found
	*/
	function serviceCredentials(arg1, arg2) {
		const path$10 = arguments.length === 1 ? void 0 : arg1;
		const filter$1 = arguments.length === 1 ? arg1 : arg2;
		var matches = path$10 ? filterServices(path$10, filter$1) : filterServices(filter$1);
		if (matches.length !== 1) throw new VError$2("Found %d matching services", matches.length);
		return matches[0].credentials;
	}
	/**
	* Reads service configuration from CloudFoundry environment variable <code>VCAP_SERVICES</code>
	* or mounted K8S secrets if <code>VCAP_SERVICES</code> is empty.
	*
	* @param path {string} A string containing the mount path where the secrets are mounted in K8S environment.
	* @param options {object} An object with options to customize behavior. Currently allows only to disable K8s secrets caching.
	* @return Object with appropriate services or empty object if no CF or K8S services found.
	* @throws Error in case bad CF json or bad path.
	*/
	function readServices(path$10, options) {
		let cfServices = readCFServices();
		if (cfServices && Object.keys(cfServices).length > 0) {
			let redactedServices$1 = redactServicesSecretData(cfServices);
			debug$3("Found VCAP_SERVICES, returning: %s", redactedServices$1);
			return cfServices;
		}
		let serviceBindingServices = readServiceBindingServices(path$10);
		if (serviceBindingServices && Object.keys(serviceBindingServices).length > 0) {
			let redactedServices$1 = redactServicesSecretData(serviceBindingServices);
			debug$3("Found Service Bindings, returning: %s", redactedServices$1);
			return serviceBindingServices;
		}
		let k8sServices = readK8SServices(path$10, options && options.disableCache);
		let redactedServices = redactServicesSecretData(k8sServices);
		debug$3("Empty VCAP_SERVICES, returning K8s services: %s.", JSON.stringify(redactedServices));
		return k8sServices || {};
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap+xsenv@5.5.0/node_modules/@sap/xsenv/lib/cacert.js
var require_cacert = __commonJS({ "node_modules/.pnpm/@sap+xsenv@5.5.0/node_modules/@sap/xsenv/lib/cacert.js"(exports) {
	var debug$2 = require_src$1()("xsenv");
	var path = __require("path");
	var fs$1 = __require("fs");
	var assert = __require("assert");
	var VError$1 = require_verror();
	exports.loadCertificates = loadCertificates;
	function loadCertificates(certPath) {
		assert(!certPath || typeof certPath === "string", "certPath argument should be a string");
		certPath = certPath || process.env.XS_CACERT_PATH;
		if (certPath) {
			debug$2("Loading certificate(s) %s", certPath);
			try {
				return certPath.split(path.delimiter).map(function(f) {
					return fs$1.readFileSync(f);
				});
			} catch (err) {
				throw new VError$1(err, "Could not load certificate(s) " + certPath);
			}
		}
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap+xsenv@5.5.0/node_modules/@sap/xsenv/lib/loadEnv.js
var require_loadEnv = __commonJS({ "node_modules/.pnpm/@sap+xsenv@5.5.0/node_modules/@sap/xsenv/lib/loadEnv.js"(exports, module) {
	var fs = __require("fs");
	var debug$1 = require_src$1()("xsenv");
	var VError = require_verror();
	module.exports = loadEnv;
	function loadEnv(jsonFile) {
		jsonFile = jsonFile || "default-env.json";
		if (!fs.existsSync(jsonFile)) return;
		debug$1("Loading environment from %s", jsonFile);
		try {
			var json$1 = JSON.parse(fs.readFileSync(jsonFile, "utf8"));
		} catch (err) {
			throw new VError(err, "Could not parse %s", jsonFile);
		}
		for (var key$1 in json$1) {
			if (key$1 in process.env) continue;
			var val = json$1[key$1];
			if (typeof val === "object") process.env[key$1] = JSON.stringify(val);
			else process.env[key$1] = val + "";
		}
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap+xsenv@5.5.0/node_modules/@sap/xsenv/index.js
var require_xsenv = __commonJS({ "node_modules/.pnpm/@sap+xsenv@5.5.0/node_modules/@sap/xsenv/index.js"(exports) {
	var cfservice = require_cfservice();
	var xsservices = require_xsservices();
	var cacert = require_cacert();
	exports.loadCertificates = cacert.loadCertificates;
	exports.loadEnv = require_loadEnv();
	exports.getServices = xsservices.getServices;
	exports.filterServices = xsservices.filterServices;
	exports.serviceCredentials = xsservices.serviceCredentials;
	exports.readServices = xsservices.readServices;
	exports.readCFServices = cfservice.readCFServices;
	exports.cfServiceCredentials = xsservices.serviceCredentials;
	exports.filterCFServices = cfservice.filterCFServices;
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/environment-accessor/service-bindings.js
var require_service_bindings = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/environment-accessor/service-bindings.js"(exports) {
	var __createBinding$10 = exports && exports.__createBinding || (Object.create ? function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc$1 = Object.getOwnPropertyDescriptor(m$1, k);
		if (!desc$1 || ("get" in desc$1 ? !m$1.__esModule : desc$1.writable || desc$1.configurable)) desc$1 = {
			enumerable: true,
			get: function() {
				return m$1[k];
			}
		};
		Object.defineProperty(o, k2, desc$1);
	} : function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		o[k2] = m$1[k];
	});
	var __setModuleDefault$2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v$1) {
		Object.defineProperty(o, "default", {
			enumerable: true,
			value: v$1
		});
	} : function(o, v$1) {
		o["default"] = v$1;
	});
	var __importStar$2 = exports && exports.__importStar || function() {
		var ownKeys$2 = function(o) {
			ownKeys$2 = Object.getOwnPropertyNames || function(o$1) {
				var ar = [];
				for (var k in o$1) if (Object.prototype.hasOwnProperty.call(o$1, k)) ar[ar.length] = k;
				return ar;
			};
			return ownKeys$2(o);
		};
		return function(mod) {
			if (mod && mod.__esModule) return mod;
			var result = {};
			if (mod != null) {
				for (var k = ownKeys$2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding$10(result, mod, k[i]);
			}
			__setModuleDefault$2(result, mod);
			return result;
		};
	}();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getServiceBindings = getServiceBindings;
	exports.getServiceBinding = getServiceBinding;
	exports.resolveServiceBinding = resolveServiceBinding;
	exports.getServiceBindingByInstanceName = getServiceBindingByInstanceName;
	const util_1$27 = require_dist$4();
	const xsenv = __importStar$2(require_xsenv());
	const logger$23 = (0, util_1$27.createLogger)({
		package: "connectivity",
		messageContext: "environment-accessor"
	});
	/**
	* Services getter for a given service.
	* @param service - Service name.
	* @returns List of service bindings of the given type. Returns an empty array if no service binding exists for the given type.
	* @internal
	*/
	function getServiceBindings(service) {
		return xsenv.filterServices({ label: service });
	}
	/**
	* Returns the first found instance for the given service type.
	* Internally uses xsenv library to read configurations from VCAP_SERVICES.
	* @param service - The service type.
	* @returns The first found service.
	*/
	function getServiceBinding(service) {
		const services = xsenv.filterServices({ label: service });
		if (!services.length) logger$23.warn(`Could not find service binding of type '${service}'. This might cause errors in other parts of the application.`);
		else if (services.length > 1) logger$23.warn(`Found more than one service binding for service type '${service}':${services.map(({ name: name$2 }) => `\n\t- ${name$2}`).join("")}\nSelecting the first one.`);
		return services[0];
	}
	/**
	* Takes a string that represents the service type and resolves it by calling {@link getServiceBinding}.
	* If the parameter is already an instance of {@link Service}, it is returned directly.
	*
	* Throws an error when no service can be found for the given type.
	* @param service - A string representing the service type or a {@link Service} instance.
	* @returns A {@link Service} instance.
	* @internal
	*/
	function resolveServiceBinding(service) {
		if (typeof service === "string") {
			const serviceInstance = getServiceBinding(service);
			if (!serviceInstance) throw Error(`Could not find service binding of type '${service}'.`);
			return serviceInstance;
		}
		return service;
	}
	/**
	* Filters services based on service instance name.
	*
	* Throws an error if no or multiple services exist.
	* @param serviceInstanceName - A string representing the service instance name.
	* @returns A {@link Service} instance.
	* @internal
	*/
	function getServiceBindingByInstanceName(serviceInstanceName) {
		const service = xsenv.filterServices(serviceInstanceName);
		if (!service.length) throw Error(`Could not find service with name: '${serviceInstanceName}'.`);
		if (service.length > 1) throw Error(`Found multiple services with name: '${serviceInstanceName}'.`);
		return service[0];
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/environment-accessor/service-credentials.js
var require_service_credentials = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/environment-accessor/service-credentials.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getServiceCredentials = getServiceCredentials;
	const util_1$26 = require_dist$4();
	const jwt_1$15 = require_jwt$1();
	const service_bindings_1 = require_service_bindings();
	const logger$22 = (0, util_1$26.createLogger)({
		package: "connectivity",
		messageContext: "environment-accessor"
	});
	/**
	* @internal
	* Retrieves a service binding of the given type and tries to match it based on the JWT, if given.
	* Returns `undefined` if no match is found.
	* If no JWT is given, returns the first binding of the given service type, if available.
	* @param service - The service type.
	* @param token - Either an encoded or decoded JWT.
	* @returns The service credentials, otherwise `undefined`.
	*/
	function getServiceCredentials(service, token) {
		const credentialsList = getServiceBindingsWithCredentials(service);
		if (!credentialsList.length) {
			logger$22.debug(`Could not find binding to service '${service}', that includes credentials.`);
			return;
		}
		if (token) {
			const credentials = getCredentialsWithJwt(service, credentialsList, typeof token === "string" ? (0, jwt_1$15.decodeJwt)(token) : token);
			return credentials;
		}
		logger$22.debug(`No JWT given to select binding to service '${service}'.`);
		return getCredentialsWithoutJwt(service, credentialsList);
	}
	/**
	* Credentials list getter for a given service.
	* @param service - Service name.
	* @returns Fetched credentials objects of existing service in 'VCAP_SERVICES'.
	*/
	function getServiceBindingsWithCredentials(service) {
		const services = (0, service_bindings_1.getServiceBindings)(service);
		const serviceCredentials$1 = services.map(({ credentials }) => credentials).filter((credentials) => credentials);
		if (serviceCredentials$1.length < services.length) {
			const difference = services.length - serviceCredentials$1.length;
			logger$22.warn(`Ignoring ${difference} service binding${difference > 1 ? "s" : ""} of service type '${service}' because of missing credentials.`);
		}
		return serviceCredentials$1;
	}
	/**
	* @internal
	* Takes a JWT and uses the client_id and audience claims to determine the XSUAA service instance
	* that issued the JWT. Returns the credentials if a match is found, otherwise throws an error.
	* If no decoded JWT is specified, then returns the first existing XSUAA credential service plan "application".
	* @param token - Either an encoded or decoded JWT.
	* @returns The credentials for a match, otherwise `null`.
	*/
	function getCredentialsWithJwt(service, credentials, token) {
		const eligibleCredentials = credentials.filter((c) => matchesClientId(c, token) || matchesAudience(c, token));
		logResult(service, eligibleCredentials, true);
		return eligibleCredentials[0];
	}
	function getCredentialsWithoutJwt(service, credentials) {
		logResult(service, credentials, false);
		return credentials[0];
	}
	function logResult(service, credentials, usedToken) {
		if (credentials.length === 1) logger$22.debug(`Found one service binding for service '${service}'${usingJwtText(usedToken)}. ${appNames(credentials)}`);
		else if (credentials.length > 1) logger$22.warn(`Found multiple bindings for service '${service}'${usingJwtText(usedToken)}. ${appNames(credentials)}\nChoosing first one ('${credentials[0].xsappname}').`);
		else if (usedToken) logger$22.warn(`Found no service binding for service '${service}' matching either the token's client id or audience.`);
	}
	function usingJwtText(usedToken) {
		return usedToken ? " using JWT" : "";
	}
	function appNames(credentials) {
		const names = credentials.map(({ xsappname }) => xsappname);
		if (names.length) return names.length === 1 ? `App name: ${names[0]}.` : `App names:${names.map((name$2) => `\n\t- ${name$2}`).join("")}`;
		return "";
	}
	/**
	* @internal
	* Checks whether the client id in the token and in the given credentials match.
	* @param credentials - Credentials to check.
	* @param token - Token to check.
	* @returns Whether client ids match.
	*/
	function matchesClientId(credentials, token) {
		return credentials.clientid === token.client_id;
	}
	/**
	* @internal
	* Checks whether the audiences in the token and in the given credentials match.
	* @param credentials - Credentials to check.
	* @param token - Token to check.
	* @returns Whether audiences match.
	*/
	function matchesAudience(credentials, token) {
		return (0, jwt_1$15.audiences)(token).includes(credentials.xsappname);
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/environment-accessor/destination.js
var require_destination$2 = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/environment-accessor/destination.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getDestinationServiceCredentials = getDestinationServiceCredentials;
	const service_credentials_1$1 = require_service_credentials();
	/**
	* Utility function to get destination service credentials, including error handling.
	* @internal
	*/
	function getDestinationServiceCredentials() {
		const credentials = (0, service_credentials_1$1.getServiceCredentials)("destination");
		if (!credentials) throw new Error("Could not find binding to the destination service.");
		return credentials;
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/environment-accessor/environment-accessor-types.js
var require_environment_accessor_types = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/environment-accessor/environment-accessor-types.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
} });

//#endregion
//#region node_modules/.pnpm/jwt-decode@4.0.0/node_modules/jwt-decode/build/cjs/index.js
var require_cjs = __commonJS({ "node_modules/.pnpm/jwt-decode@4.0.0/node_modules/jwt-decode/build/cjs/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.jwtDecode = exports.InvalidTokenError = void 0;
	var InvalidTokenError = class extends Error {};
	exports.InvalidTokenError = InvalidTokenError;
	InvalidTokenError.prototype.name = "InvalidTokenError";
	function b64DecodeUnicode(str) {
		return decodeURIComponent(atob(str).replace(/(.)/g, (m$1, p) => {
			let code = p.charCodeAt(0).toString(16).toUpperCase();
			if (code.length < 2) code = "0" + code;
			return "%" + code;
		}));
	}
	function base64UrlDecode(str) {
		let output = str.replace(/-/g, "+").replace(/_/g, "/");
		switch (output.length % 4) {
			case 0: break;
			case 2:
				output += "==";
				break;
			case 3:
				output += "=";
				break;
			default: throw new Error("base64 string is not of the correct length");
		}
		try {
			return b64DecodeUnicode(output);
		} catch (err) {
			return atob(output);
		}
	}
	function jwtDecode$1(token, options) {
		if (typeof token !== "string") throw new InvalidTokenError("Invalid token specified: must be a string");
		options || (options = {});
		const pos = options.header === true ? 0 : 1;
		const part = token.split(".")[pos];
		if (typeof part !== "string") throw new InvalidTokenError(`Invalid token specified: missing part #${pos + 1}`);
		let decoded;
		try {
			decoded = base64UrlDecode(part);
		} catch (e) {
			throw new InvalidTokenError(`Invalid token specified: invalid base64 for part #${pos + 1} (${e.message})`);
		}
		try {
			return JSON.parse(decoded);
		} catch (e) {
			throw new InvalidTokenError(`Invalid token specified: invalid json for part #${pos + 1} (${e.message})`);
		}
	}
	exports.jwtDecode = jwtDecode$1;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/XssecError.js
var require_XssecError = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/XssecError.js"(exports, module) {
	/**
	* Base class for XssecErrors.
	*/
	var XssecError$4 = class extends Error {
		/** 
		* @type {number} Suggested HTTP response code for consumer application catching this error
		*/
		statusCode;
		constructor(message) {
			super(message);
			this.name = "XssecError";
			this.statusCode = 500;
		}
		/** 
		* @type {number} Lowercased version of {@link statusCode} for backward-compatibility
		*/
		get statuscode() {
			return this.statusCode;
		}
	};
	module.exports = XssecError$4;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/ValidationError.js
var require_ValidationError = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/ValidationError.js"(exports, module) {
	const XssecError$3 = require_XssecError();
	/**
	* Base class for errors thrown when a token failed validation.
	*/
	var ValidationError$10 = class extends XssecError$3 {
		constructor(message) {
			super(message);
			this.name = "ValidationError";
			this.statusCode = 401;
		}
	};
	module.exports = ValidationError$10;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/InvalidJwtError.js
var require_InvalidJwtError = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/InvalidJwtError.js"(exports, module) {
	const ValidationError$9 = require_ValidationError();
	var InvalidJwtError$2 = class extends ValidationError$9 {
		/** @type {Error} Error encountered during parsing */
		parseError;
		constructor(jwt, parseError, message = "JWT could not be parsed.") {
			super(jwt, message);
			this.name = "InvalidJwtError";
			this.jwt = jwt;
			this.parseError = parseError;
		}
	};
	module.exports = InvalidJwtError$2;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/util/constants.js
var require_constants = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/util/constants.js"(exports, module) {
	module.exports = {
		APP_TID_HEADER: "x-app_tid",
		AZP_HEADER: "x-azp",
		CLIENT_CERTIFICATE_HEADER: "x-client_cert",
		CLIENTID_HEADER: "x-client_id",
		CORRELATIONID_HEADER_VCAP: "x-vcap-request-id",
		CORRELATIONID_HEADERS: [
			"x-correlation-id",
			"x-request-id",
			"x-correlationid",
			"x-vcap-request-id"
		],
		DEFAULT_TIMEOUT: 2e3,
		DEFAULT_JWT_BEARER_FETCH_TIMEOUT: 1e4,
		FORWARDED_CLIENTCERTIFICATE_HEADER: "x-forwarded-client-cert",
		MAX_TIMEOUT: 1e4,
		GRANTTYPE_SAML2BEARER: "urn:ietf:params:oauth:grant-type:saml2-bearer",
		GRANTTYPE_JWTBEARER: "urn:ietf:params:oauth:grant-type:jwt-bearer",
		GRANTTYPE_USERTOKEN: "user_token",
		GRANTTYPE_REFRESHTOKEN: "refresh_token",
		GRANTTYPE_PASSWORD: "password",
		GRANTTYPE_CLIENTCREDENTIALS: "client_credentials",
		GRANTTYPE_AUTHORIZATIONCODE: "authorization_code",
		GRANTTYPE_IMPLICIT: "implicit",
		HTTP_SCHEME: "http://",
		HTTPS_SCHEME: "https://",
		PEM_HEADER: "-----BEGIN CERTIFICATE-----",
		PEM_FOOTER: "-----END CERTIFICATE-----",
		USER_AGENT: "nodejs-xssec-4",
		SERVICE_PLAN_HEADER: "x-osb_plan",
		TOKEN_DATE_LEEWAY: 60,
		X5T_CNF_CLAIM: "x5t#S256",
		ZID_HEADER: "x-zid",
		ZID_QUERY_PARAMETER: "zid"
	};
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/token/Token.js
var require_Token = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/token/Token.js"(exports, module) {
	const { jwtDecode } = require_cjs();
	const InvalidJwtError$1 = require_InvalidJwtError();
	const { TOKEN_DATE_LEEWAY } = require_constants();
	/**
	* @typedef {import('../util/Types').JwtHeader} JwtHeader
	* @typedef {import('../util/Types').JwtPayload} JwtPayload
	*/
	var Token$4 = class {
		#jwt;
		/** @type {JwtHeader} */
		#header;
		/** @type {JwtPayload} */
		#payload;
		/**
		* @param {string} jwt 
		* @param {object} [content] - optional parsed header and payload
		* @param {string} [content.header] - parsed header
		* @param {string} [content.payload] - parsed payload
		*/
		constructor(jwt, { header, payload } = {}) {
			this.#jwt = jwt;
			if (header && payload) {
				this.#header = header;
				this.#payload = payload;
			} else this.#parseJwt(jwt);
		}
		#parseJwt(jwt) {
			try {
				this.#header = jwtDecode(jwt, { header: true });
				this.#payload = jwtDecode(jwt);
			} catch (e) {
				throw new InvalidJwtError$1(jwt, e);
			}
		}
		get audiences() {
			if (this.payload.aud) return Array.isArray(this.payload.aud) ? this.payload.aud : [this.payload.aud];
			else return null;
		}
		get azp() {
			return this.payload.azp;
		}
		get clientId() {
			if (this.azp) return this.azp;
			if (this.audiences == null || this.audiences.length != 1) return null;
			return this.audiences[0] || this.payload.cid;
		}
		get email() {
			return this.payload.email;
		}
		/**
		* Returns whether the token is expired based on claim exp (expiration time).
		* There is a 1min leeway after the exp in which the token still counts as valid to account for clock skew.
		* @return {Boolean} false if token has a positive {@link remainingTime}, true otherwise
		*/
		get expired() {
			return this.remainingTime <= 0;
		}
		get expirationDate() {
			return this.payload.exp ? new Date(this.payload.exp * 1e3) : null;
		}
		get familyName() {
			return this.payload.ext_attr?.family_name || this.payload.family_name;
		}
		get givenName() {
			return this.payload.ext_attr?.given_name || this.payload.given_name;
		}
		get grantType() {
			return this.payload.grant_type;
		}
		/** @return {JwtHeader} Token header as parsed object */
		get header() {
			return this.#header;
		}
		get issuer() {
			return this.payload.iss;
		}
		get issueDate() {
			return this.payload.iat ? new Date(this.payload.iat * 1e3) : null;
		}
		/** @return {String} JWT used to construct this Token instance as raw String */
		get jwt() {
			return this.#jwt;
		}
		/**
		* Returns whether the token is not yet valid based on the optional nbf (no use before) claim.
		* There is a 1min leeway before the nbf in which the token already counts as valid to account for clock skew.
		* @return {Boolean} true if token has nbf and nbf date lies in future, false otherwise 
		*/
		get notYetValid() {
			return this.payload.nbf != null && Math.floor(Date.now() / 1e3) + TOKEN_DATE_LEEWAY < this.payload.nbf;
		}
		get origin() {
			return this.payload.origin;
		}
		/** @return {JwtPayload} Token payload as parsed object */
		get payload() {
			return this.#payload;
		}
		/**
		* Returns the remaining time until expiration in seconds based on claim exp (expiration time).
		* There is a 1min leeway after the exp in which the token still counts as valid to account for clock skew.
		* @returns seconds until expiration or 0 if expired
		*/
		get remainingTime() {
			return Math.max(0, this.payload.exp + TOKEN_DATE_LEEWAY - Math.floor(Date.now() / 1e3));
		}
		get subject() {
			return this.payload.sub;
		}
		get userName() {
			return this.payload.user_name;
		}
		get userId() {
			return this.payload.user_uuid;
		}
		getAudiencesArray() {
			return this.audiences;
		}
		getAzp() {
			return this.azp;
		}
		getClientId = function() {
			return this.clientId;
		};
		getEmail() {
			return this.email;
		}
		getExpirationDate() {
			return this.expirationDate;
		}
		getFamilyName() {
			return this.familyName;
		}
		getGivenName() {
			return this.givenName;
		}
		getGrantType() {
			return this.grantType;
		}
		getHeader() {
			return this.header;
		}
		getIssuedAt() {
			return this.issueDate;
		}
		getIssuer() {
			if (this.issuer && !this.issuer.startsWith("http")) return `https://${this.issuer}`;
			else return this.issuer;
		}
		getPayload() {
			return this.payload;
		}
		getSubject() {
			return this.subject;
		}
		getTokenValue() {
			return this.jwt;
		}
		getUserId() {
			return this.userId;
		}
	};
	module.exports = Token$4;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/MissingJwtError.js
var require_MissingJwtError = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/MissingJwtError.js"(exports, module) {
	const ValidationError$8 = require_ValidationError();
	var MissingJwtError$2 = class extends ValidationError$8 {
		constructor(message = "Request contains no jwt bearer token and jwt was not explicitly passed to library.") {
			super(message);
			this.name = "MissingJwtError";
		}
	};
	module.exports = MissingJwtError$2;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/context/SecurityContext.js
var require_SecurityContext = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/context/SecurityContext.js"(exports, module) {
	const { CORRELATIONID_HEADERS, FORWARDED_CLIENTCERTIFICATE_HEADER } = require_constants();
	/** 
	* @typedef {import('../service/Service')} Service
	* @typedef {import('../token/Token')} Token
	* @typedef {import('../util/Types').SecurityContextConfig} SecurityContextConfig
	*/
	/**
	* @template {Service} S - The type of the service.
	* @template {Token} T - The type of the token.
	*/
	var SecurityContext$8 = class {
		/** @type {S} */
		#service;
		/** @type {T} */
		#token;
		/** @type {SecurityContextConfig} */
		config;
		/**
		* @param {S} service - The service instance.
		* @param {T} token - The token instance.
		* @param {SecurityContextConfig} contextConfig - The security context configuration.
		*/
		constructor(service, token, contextConfig) {
			this.#service = service;
			this.#token = token;
			this.config = contextConfig;
		}
		/**
		* The Service instance on which this SecurityContext has been created.
		* @returns {S} service
		*/
		get service() {
			return this.#service;
		}
		/**
		* @deprecated Use the constructor to set the Service instance.
		* @param {S} service
		*/
		set service(service) {
			this.#service = service;
		}
		/**
		* The Token instance from which this SecurityContext has ben created.
		* @returns {T} token
		*/
		get token() {
			return this.#token;
		}
		/**
		* @deprecated Use the constructor to set the Token instance.
		* @param {T} token
		*/
		set token(token) {
			this.#token = token;
		}
		getAppToken() {
			return this.token.jwt;
		}
		getEmail() {
			return this.getUserInfo().email;
		}
		getExpirationDate() {
			return this.token.expirationDate;
		}
		getFamilyName() {
			return this.getUserInfo().familyName;
		}
		getGivenName() {
			return this.getUserInfo().givenName;
		}
		getGrantType() {
			return this.token.grantType;
		}
		getLogonName() {
			return this.getUserInfo().logonName;
		}
		getUserInfo() {
			return {
				email: this.token.email,
				familyName: this.token.familyName,
				givenName: this.token.givenName,
				logonName: this.token.payload.user_name
			};
		}
		getTokenInfo() {
			return this.token;
		}
		/**
		* Tries to fill up missing properties of the security context configuration from the req object in the configuration.
		* @param {SecurityContextConfig} contextConfig 
		*/
		static buildContextConfig(contextConfig) {
			let { req } = contextConfig;
			for (let i = 0; contextConfig.correlationId == null && i < CORRELATIONID_HEADERS.length; i++) contextConfig.correlationId = req?.headers?.[CORRELATIONID_HEADERS[i]];
			contextConfig.clientCertificatePem ??= req?.headers?.[FORWARDED_CLIENTCERTIFICATE_HEADER];
			contextConfig.jwt ??= req?.headers?.authorization?.split(" ")[1];
			contextConfig.skipValidation ??= false;
		}
	};
	module.exports = SecurityContext$8;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/configuration/ConfigurationError.js
var require_ConfigurationError = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/configuration/ConfigurationError.js"(exports, module) {
	const XssecError$2 = require_XssecError();
	/**
	* Base class for errors thrown when the library was inappropriately configured.
	*/
	var ConfigurationError$8 = class extends XssecError$2 {
		constructor(message) {
			super(message);
			this.name = "ConfigurationError";
			this.statusCode = 500;
		}
	};
	module.exports = ConfigurationError$8;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/TokenValidationError.js
var require_TokenValidationError = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/TokenValidationError.js"(exports, module) {
	const ValidationError$7 = require_ValidationError();
	/** @typedef {import("../../token/Token")} Token */
	/**
	* Base class for errors thrown when a token fails validation.
	*/
	var TokenValidationError$10 = class extends ValidationError$7 {
		/** @type {Token} */
		token;
		constructor(token, message = "Token is not valid.") {
			super(message);
			this.name = "TokenValidationError";
			this.token = token;
		}
	};
	module.exports = TokenValidationError$10;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/ExpiredTokenError.js
var require_ExpiredTokenError = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/ExpiredTokenError.js"(exports, module) {
	const TokenValidationError$9 = require_TokenValidationError();
	var ExpiredTokenError$2 = class extends TokenValidationError$9 {
		constructor(token, message = "Token is expired.") {
			super(token, message);
			this.name = "ExpiredTokenError";
		}
	};
	module.exports = ExpiredTokenError$2;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/InvalidClientCertificateError.js
var require_InvalidClientCertificateError = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/InvalidClientCertificateError.js"(exports, module) {
	const ValidationError$6 = require_ValidationError();
	var InvalidClientCertificateError$2 = class extends ValidationError$6 {
		/** @type {Error} Error encountered during parsing */
		parseError;
		constructor(clientCertificate, parseError, message = `The forwarded client certificate could not be parsed as X509 certificate: ${parseError.message}`) {
			super(message);
			this.name = "InvalidClientCertificateError";
			this.clientCertificate = clientCertificate;
			this.parseError = parseError;
		}
	};
	module.exports = InvalidClientCertificateError$2;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/configuration/InvalidCredentialsError.js
var require_InvalidCredentialsError = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/configuration/InvalidCredentialsError.js"(exports, module) {
	const ConfigurationError$7 = require_ConfigurationError();
	var InvalidCredentialsError$2 = class extends ConfigurationError$7 {
		constructor(message = "The service credentials are missing mandatory properties.") {
			super(message);
			this.name = "InvalidCredentialsError";
		}
	};
	module.exports = InvalidCredentialsError$2;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/InvalidIssuerError.js
var require_InvalidIssuerError = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/InvalidIssuerError.js"(exports, module) {
	const TokenValidationError$8 = require_TokenValidationError();
	var InvalidIssuerError$2 = class extends TokenValidationError$8 {
		/** @type {Error} Error encountered during parsing */
		parseError;
		constructor(token, parseError, message = `Issuer ${token.issuer} was not a valid domain or URL for use with https. Protocol schemes other than https:// are not supported.`) {
			super(token, message);
			this.name = "InvalidIssuerError";
			this.parseError = parseError;
		}
	};
	module.exports = InvalidIssuerError$2;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/InvalidTokenSignatureError.js
var require_InvalidTokenSignatureError = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/InvalidTokenSignatureError.js"(exports, module) {
	const TokenValidationError$7 = require_TokenValidationError();
	var InvalidTokenSignatureError$2 = class extends TokenValidationError$7 {
		constructor(token, message = "Token signature is invalid.") {
			super(token, message);
			this.name = "InvalidTokenSignatureError";
		}
	};
	module.exports = InvalidTokenSignatureError$2;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/MissingClientCertificateError.js
var require_MissingClientCertificateError = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/MissingClientCertificateError.js"(exports, module) {
	const ValidationError$5 = require_ValidationError();
	var MissingClientCertificateError$2 = class extends ValidationError$5 {
		constructor(message = "Request is missing a forwarded client certificate which is required to validate the token.") {
			super(message);
			this.name = "MissingClientCertificateError";
		}
	};
	module.exports = MissingClientCertificateError$2;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/MissingIssuerError.js
var require_MissingIssuerError = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/MissingIssuerError.js"(exports, module) {
	const TokenValidationError$6 = require_TokenValidationError();
	var MissingIssuerError$2 = class extends TokenValidationError$6 {
		constructor(token, message = "Token is missing an issuer which is required to validate the signature.") {
			super(token, message);
			this.name = "MissingIssuerError";
		}
	};
	module.exports = MissingIssuerError$2;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/MissingKidError.js
var require_MissingKidError = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/MissingKidError.js"(exports, module) {
	const ValidationError$4 = require_ValidationError();
	var MissingKidError$4 = class extends ValidationError$4 {
		/** @type {string} kid */
		kid;
		constructor(kid, message = `JWKS is missing key for kid=${kid} specified in token header.`) {
			super(message);
			this.name = "MissingKidError";
			this.kid = kid;
		}
	};
	module.exports = MissingKidError$4;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/MissingVerificationKeyError.js
var require_MissingVerificationKeyError = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/MissingVerificationKeyError.js"(exports, module) {
	const ValidationError$3 = require_ValidationError();
	var MissingVerificationKeyError$2 = class extends ValidationError$3 {
		constructor(message = "XSUAA service credentials are missing a verificationkey that would be required as JWKS fallback to validate the given token.") {
			super(message);
			this.name = "MissingVerificationKeyError";
		}
	};
	module.exports = MissingVerificationKeyError$2;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/network/NetworkError.js
var require_NetworkError = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/network/NetworkError.js"(exports, module) {
	const XssecError$1 = require_XssecError();
	/**
	* Base class for errors thrown when a network error occurs, such as a failed server request.
	*/
	var NetworkError$3 = class extends XssecError$1 {
		/** @type {String} */
		correlationId;
		constructor(message = "A network error has occured.") {
			super(message);
			this.name = "NetworkError";
			this.statusCode = 500;
		}
	};
	module.exports = NetworkError$3;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/NotYetValidTokenError.js
var require_NotYetValidTokenError = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/NotYetValidTokenError.js"(exports, module) {
	const TokenValidationError$5 = require_TokenValidationError();
	var NotYetValidTokenError$2 = class extends TokenValidationError$5 {
		constructor(token, message = "The token is not yet valid because its 'nbf' (no use before) date lies in the future.") {
			super(token, message);
			this.name = "NotYetValidTokenError";
		}
	};
	module.exports = NotYetValidTokenError$2;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/network/RequestError.js
var require_RequestError = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/network/RequestError.js"(exports, module) {
	const NetworkError$2 = require_NetworkError();
	/**
	* An error that occurs while sending a request, e.g. when there is no network connection.
	*/
	var RequestError$4 = class extends NetworkError$2 {
		/** @type {import("https").RequestOptions & {name: string}} */
		request;
		/** @type {Error|Error[]} the original error(s) of the HTTP client for debugging. Do not code against this property as the internal HTTP client implementation may change anytime. */
		originalError;
		constructor(url$3, request$1, originalError, message = `HTTP request [${request$1.name}] to ${url$3} could not be sent due to: ${originalError.toString()}.`) {
			super(message);
			this.name = "RequestError";
			this.url = url$3;
			this.request = request$1;
			this.originalError = originalError;
		}
	};
	module.exports = RequestError$4;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/network/ResponseError.js
var require_ResponseError = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/network/ResponseError.js"(exports, module) {
	const NetworkError$1 = require_NetworkError();
	var ResponseError$4 = class extends NetworkError$1 {
		constructor(url$3, request$1, responseCode, responseText, message = `HTTP response from ${url$3} was ${responseCode}: ${responseText}.`) {
			super(message);
			this.name = "ResponseError";
			this.url = url$3;
			this.request = request$1;
			this.responseCode = responseCode;
			this.responseText = responseText;
		}
	};
	module.exports = ResponseError$4;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/network/TimeoutError.js
var require_TimeoutError = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/network/TimeoutError.js"(exports, module) {
	const RequestError$3 = require_RequestError();
	/**
	* An error that occurs when a request times out because the server did not send a response within the specified timeout interval.
	*/
	var TimeoutError$2 = class extends RequestError$3 {
		constructor(url$3, request$1, originalError, message = `HTTP request [${request$1.name}] to ${url$3} timed out after ${request$1.timeout} ms.`) {
			super(url$3, request$1, originalError, message);
			this.name = "TimeoutError";
		}
	};
	module.exports = TimeoutError$2;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/UnsupportedAlgorithmError.js
var require_UnsupportedAlgorithmError = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/UnsupportedAlgorithmError.js"(exports, module) {
	const TokenValidationError$4 = require_TokenValidationError();
	var UnsupportedAlgorithmError$2 = class extends TokenValidationError$4 {
		constructor(token, alg, message = `Algorithm ${alg} specified in token header is not supported.`) {
			super(token, message);
			this.name = "UnsupportedAlgorithmError";
			this.alg = alg;
		}
	};
	module.exports = UnsupportedAlgorithmError$2;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/UntrustedIssuerError.js
var require_UntrustedIssuerError = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/UntrustedIssuerError.js"(exports, module) {
	const TokenValidationError$3 = require_TokenValidationError();
	var UntrustedIssuerError$2 = class extends TokenValidationError$3 {
		constructor(token, message = "Token issuer is not trusted because it is not a (sub)domain contained in the domains property of the service credentials.") {
			super(token, message);
			this.name = "UntrustedIssuerError";
		}
	};
	module.exports = UntrustedIssuerError$2;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/WrongAudienceError.js
var require_WrongAudienceError = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/WrongAudienceError.js"(exports, module) {
	const TokenValidationError$2 = require_TokenValidationError();
	/**
	* @typedef {import("../service/Service").Service} Service
	*/
	var WrongAudienceError$5 = class extends TokenValidationError$2 {
		/** @type {string[]} token audiences */
		audiences;
		/** @type {Service|Service[]} service(s) on which context creation was attempted */
		service;
		constructor(token, service, message = "Token was issued for a different audience than this service.") {
			super(token, message);
			this.name = "WrongAudienceError";
			this.service = service;
			this.audiences = token.audiences;
		}
	};
	module.exports = WrongAudienceError$5;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/X5tError.js
var require_X5tError = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/validation/X5tError.js"(exports, module) {
	const TokenValidationError$1 = require_TokenValidationError();
	var X5tError$2 = class extends TokenValidationError$1 {
		/** @type {String} client certificate used for x5t validation */
		cert;
		constructor(token, cert, message = "X5t validation of token failed.") {
			super(token, message);
			this.name = "X5tError";
			this.cert = cert;
		}
	};
	module.exports = X5tError$2;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/index.js
var require_error = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/index.js"(exports, module) {
	const ConfigurationError$6 = require_ConfigurationError();
	const ExpiredTokenError$1 = require_ExpiredTokenError();
	const InvalidClientCertificateError$1 = require_InvalidClientCertificateError();
	const InvalidCredentialsError$1 = require_InvalidCredentialsError();
	const InvalidIssuerError$1 = require_InvalidIssuerError();
	const InvalidJwtError = require_InvalidJwtError();
	const InvalidTokenSignatureError$1 = require_InvalidTokenSignatureError();
	const MissingClientCertificateError$1 = require_MissingClientCertificateError();
	const MissingIssuerError$1 = require_MissingIssuerError();
	const MissingJwtError$1 = require_MissingJwtError();
	const MissingKidError$3 = require_MissingKidError();
	const MissingVerificationKeyError$1 = require_MissingVerificationKeyError();
	const NetworkError = require_NetworkError();
	const NotYetValidTokenError$1 = require_NotYetValidTokenError();
	const RequestError$2 = require_RequestError();
	const ResponseError$3 = require_ResponseError();
	const TimeoutError$1 = require_TimeoutError();
	const TokenValidationError = require_TokenValidationError();
	const UnsupportedAlgorithmError$1 = require_UnsupportedAlgorithmError();
	const UntrustedIssuerError$1 = require_UntrustedIssuerError();
	const ValidationError$2 = require_ValidationError();
	const WrongAudienceError$4 = require_WrongAudienceError();
	const X5tError$1 = require_X5tError();
	const XssecError = require_XssecError();
	module.exports = {
		ConfigurationError: ConfigurationError$6,
		ExpiredTokenError: ExpiredTokenError$1,
		InvalidClientCertificateError: InvalidClientCertificateError$1,
		InvalidCredentialsError: InvalidCredentialsError$1,
		InvalidIssuerError: InvalidIssuerError$1,
		InvalidJwtError,
		InvalidTokenSignatureError: InvalidTokenSignatureError$1,
		MissingClientCertificateError: MissingClientCertificateError$1,
		MissingIssuerError: MissingIssuerError$1,
		MissingJwtError: MissingJwtError$1,
		MissingKidError: MissingKidError$3,
		MissingVerificationKeyError: MissingVerificationKeyError$1,
		NetworkError,
		NotYetValidTokenError: NotYetValidTokenError$1,
		RequestError: RequestError$2,
		ResponseError: ResponseError$3,
		TimeoutError: TimeoutError$1,
		TokenValidationError,
		UnsupportedAlgorithmError: UnsupportedAlgorithmError$1,
		UntrustedIssuerError: UntrustedIssuerError$1,
		ValidationError: ValidationError$2,
		WrongAudienceError: WrongAudienceError$4,
		X5tError: X5tError$1,
		XssecError
	};
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/context/createSecurityContext.js
var require_createSecurityContext = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/context/createSecurityContext.js"(exports, module) {
	const Token$3 = require_Token();
	const MissingJwtError = require_MissingJwtError();
	const SecurityContext$7 = require_SecurityContext();
	const { WrongAudienceError: WrongAudienceError$3 } = require_error();
	module.exports = createSecurityContext$5;
	/**
	* @typedef {import("../service/Service")} Service
	* @typedef {import("../util/Types").SecurityContextConfig} SecurityContextConfig
	*/
	/**
	* Tries to create a new security context by authenticating the user via the given service(s) based on a jwt token.
	* If the jwt is missing or cannot be validated, an error will be thrown.
	* The contextConfig must either contain a jwt token directly or a req object from whose Authorization header the jwt can be extracted as Bearer token.
	* @template {Service} T - The type of the service from which the security context is created
	* @param {T|T[]} services - The service or array of services to authenticate the user
	* @param {SecurityContextConfig} contextConfig - The configuration object containing the jwt token or req object
	* @returns {ReturnType<T['createSecurityContext']>} - A promise that resolves to the security context created by the target service
	* @throws {import('../error/XssecError')} - Error with a descriptive message and a suggested statusCode for the application response. The cause of the error can be checked via instanceof against the various XssecError subclasses.
	*/
	async function createSecurityContext$5(services, contextConfig) {
		contextConfig = { ...contextConfig };
		SecurityContext$7.buildContextConfig(contextConfig);
		if (contextConfig.jwt == null) throw new MissingJwtError();
		const token = new Token$3(contextConfig.jwt);
		services = Array.isArray(services) ? services : services != null ? [services] : [];
		const targetService = findServiceForToken(services, token);
		if (targetService == null) throw new WrongAudienceError$3(token, services, `The audiences of the token fit none of the supplied services.`);
		return targetService.createSecurityContext(token, contextConfig);
	}
	/**
	* Tries to find a service from the list for which the given token was issued based on logic implemented by individual subclasses of {@link Service}.
	* @param {Service[]} services 
	* @param {Token} token 
	* @returns {Service|undefined}
	*/
	function findServiceForToken(services, token) {
		return services.find((s$1) => s$1.acceptsTokenAudience(token));
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/context/IdentityServiceSecurityContext.js
var require_IdentityServiceSecurityContext = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/context/IdentityServiceSecurityContext.js"(exports, module) {
	const ConfigurationError$5 = require_ConfigurationError();
	const SecurityContext$6 = require_SecurityContext();
	/**
	* @typedef {import('../service/IdentityService')} IdentityService
	* @typedef {import('../token/IdentityServiceToken')} IdentityServiceToken
	*/
	/** @extends {SecurityContext<IdentityService, IdentityServiceToken>} */
	var IdentityServiceSecurityContext$2 = class extends SecurityContext$6 {
		/**
		* Returns the service plans of the consumer application.
		* This method is only available if the context was created from an app2service token and a service with proof token validation enabled.
		* @returns {string[]}
		*/
		get servicePlans() {
			if (!this.service.hasProofTokenEnabled()) throw new ConfigurationError$5("This property is only available on IdentityServiceSecurityContexts created on an IdentityService with proofToken validation enabled.");
			return this.config.servicePlans;
		}
		/**
		* Checks whether the token from which this context was created is a token fetched by the OAuth 2.0 client for internal use.
		* This method requires the IdentityService instance to have x5t validation enabled.
		* @returns true if the token was fetched via client credentials flow with the credentials of this context's IdentityService instance, false otherwise.
		*/
		isInternal() {
			if (!this.service.hasX5tEnabled()) throw new ConfigurationError$5("This method is only available on IdentityServiceSecurityContexts created on an IdentityService instance with x5t validation enabled.");
			return this.token.azp === this.service.credentials.clientid && this.token.subject === this.service.credentials.clientid && this.token.appTid === this.service.credentials.app_tid;
		}
		getUserInfo() {
			return {
				...super.getUserInfo(),
				logonName: this.token.payload.user_name || this.token.email || this.token.payload.user_uuid || ""
			};
		}
	};
	module.exports = IdentityServiceSecurityContext$2;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/util/Logger.js
var require_Logger = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/util/Logger.js"(exports, module) {
	var Logger$1 = class {
		constructor(loggingConfig$1, prefix) {
			this.loggingConfig = loggingConfig$1;
			this.prefix = prefix;
		}
		info(message, args) {
			message = `[${this.prefix}] ${message}`;
			if (args?.correlationId) message += ` (Correlation Id: ${args.correlationId})`;
			this.loggingConfig.info(message, args);
		}
		warn(message, args) {
			message = `[${this.prefix}] ${message}`;
			if (args?.correlationId) message += ` (Correlation Id: ${args.correlationId})`;
			this.loggingConfig.warn(message, args);
		}
		error(message, args) {
			message = `[${this.prefix}] ${message}`;
			if (args?.correlationId) message += ` (Correlation Id: ${args.correlationId})`;
			this.loggingConfig.error(message, args);
		}
		debug(message, args) {
			message = `[${this.prefix}] ${message}`;
			if (args?.correlationId) message += ` (Correlation Id: ${args.correlationId})`;
			this.loggingConfig.debug(message, args);
		}
	};
	module.exports = Logger$1;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/util/logging.js
var require_logging = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/util/logging.js"(exports, module) {
	const debug = require_src$1();
	const Logger = require_Logger();
	const debugLogger = debug("xssec");
	debugLogger.log = console.log.bind(console);
	let loggingConfig = {
		info: (message, ...args) => debugLogger(message, ...args),
		warn: (message, ...args) => debugLogger(message, ...args),
		error: (message, ...args) => debugLogger(message, ...args),
		debug: (message, ...args) => debugLogger(message, ...args)
	};
	function getLogger$7(prefix = "") {
		return new Logger(loggingConfig, prefix);
	}
	function setLoggers(loggers) {
		Object.assign(loggingConfig, loggers);
	}
	module.exports = {
		getLogger: getLogger$7,
		setLoggers
	};
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/context/XsuaaSecurityContext.js
var require_XsuaaSecurityContext = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/context/XsuaaSecurityContext.js"(exports, module) {
	const SecurityContext$5 = require_SecurityContext();
	const { getLogger: getLogger$6 } = require_logging();
	const { GRANTTYPE_CLIENTCREDENTIALS: GRANTTYPE_CLIENTCREDENTIALS$1 } = require_constants();
	/**
	* @typedef {import("../token/XsuaaToken")} XsuaaToken
	* @typedef {import("../service/XsuaaService")} XsuaaService
	* @typedef {import('../util/Types').SecurityContextConfig} SecurityContextConfig
	*/
	const LOG$6 = getLogger$6("XsuaaSecurityContext.js");
	/** @extends {SecurityContext<XsuaaService, XsuaaToken>} */
	var XsuaaSecurityContext$4 = class extends SecurityContext$5 {
		/**
		* @param {XsuaaService} service 
		* @param {XsuaaToken} token 
		* @param {SecurityContextConfig} contextConfig 
		*/
		constructor(service, token, contextConfig) {
			super(service, token, contextConfig);
		}
		/**
		* Checks if the token of this context was issued for the given scope.
		* @param {String} scope 
		* @returns {Boolean}
		*/
		checkScope(scope) {
			return this.token.scopes.includes(scope);
		}
		/**
		* Checks if the token of this context was issued for the given scope, ignoring the xsappname prefix of the service that was used to create this context when copmaring with the token's scopes.
		* @param {String} scope 
		* @returns {Boolean}
		*/
		checkLocalScope(scope) {
			return this.token.scopes.includes(`${this.service.credentials.xsappname}.${scope}`);
		}
		checkFollowingInstanceScope(scope) {
			const clientId = this.token.payload.client_id;
			if (!clientId?.startsWith("sb-")) return false;
			const appId = clientId.substring(3);
			if (!appId.includes("|")) return false;
			return this.checkScope(`${appId}.${scope}`);
		}
		getAttributes() {
			const attributes = this.token.xsUserAttributes ?? {};
			return Object.keys(attributes).length !== 0 ? attributes : null;
		}
		getAttribute(name$2) {
			return this.token.getXsUserAttribute(name$2) || null;
		}
		getAdditionalAuthAttribute(name$2) {
			const additionalAuthAttributes = this.getAdditionalAuthAttributes();
			if (!additionalAuthAttributes) {
				LOG$6.debug("\nThe access token contains no additional authentication attributes.\n");
				return null;
			}
			if (!name$2) {
				LOG$6.debug("\nInvalid attribute name (may not be null, empty, or undefined).");
				return null;
			}
			if (!additionalAuthAttributes[name$2]) {
				LOG$6.debug("\nNo attribute \"" + name$2 + "\" found as additional authentication attribute.");
				return null;
			}
			return additionalAuthAttributes[name$2];
		}
		getAdditionalAuthAttributes() {
			return this.token.azAttributes || null;
		}
		getAppTID() {
			return this.token.zid;
		}
		getClientId() {
			return this.token.getClientId();
		}
		getCloneServiceInstanceId() {
			return this.token.extAttributes?.serviceinstanceid || null;
		}
		getEmail() {
			return this.#ifNotClientCredentialsToken("XsuaaSecurityContext.getEmail", this.getUserInfo().email);
		}
		getFamilyName() {
			return this.#ifNotClientCredentialsToken("XsuaaSecurityContext.getFamilyName", this.getUserInfo().familyName);
		}
		getGivenName() {
			return this.#ifNotClientCredentialsToken("XsuaaSecurityContext.getGivenName", this.getUserInfo().givenName);
		}
		getLogonName() {
			return this.#ifNotClientCredentialsToken("XsuaaSecurityContext.getLogonName", this.getUserInfo().logonName);
		}
		getOrigin() {
			return this.token.origin;
		}
		getSubaccountId() {
			return this.token.subAccountId;
		}
		getSubdomain() {
			return this.token.extAttributes?.zdn ?? null;
		}
		getUniquePrincipalName(origin$1, logonName) {
			if (!this.#ifNotClientCredentialsToken("XsuaaSecurityContext.getUniquePrincipalName", true)) return null;
			if (!origin$1) {
				LOG$6.debug("Origin claim not set in JWT. Cannot create unique user name. Returning null.");
				return null;
			}
			if (!logonName) {
				LOG$6.debug("User login name claim not set in JWT. Cannot create unique user name. Returning null.");
				return null;
			}
			if (origin$1.includes("/")) {
				LOG$6.debug("Illegal '/' character detected in origin claim of JWT. Cannot create unique user name. Retuning null.");
				return null;
			}
			return `user/${origin$1}/${logonName}`;
		}
		getUserName() {
			if (this.token.grantType === GRANTTYPE_CLIENTCREDENTIALS$1) return `client/${this.getClientId()}`;
			else return this.getUniquePrincipalName(this.token.origin, this.getLogonName());
		}
		getZoneId() {
			return this.token.zid;
		}
		hasAttributes() {
			return this.#ifNotClientCredentialsToken("XsuaaSecurityContext.hasAttributes", this.token.xsUserAttributes != null);
		}
		isInForeignMode() {
			return this.service.credentials.clientid.includes("!b") && this.token.audiences.some((aud) => aud.includes(`|${this.service.credentials.clientid}`));
		}
		#ifNotClientCredentialsToken(functionName, value) {
			if (this.token.grantType === GRANTTYPE_CLIENTCREDENTIALS$1) {
				LOG$6.debug(`Call to ${functionName} not allowed with a token of grant type ${GRANTTYPE_CLIENTCREDENTIALS$1}.`);
				return null;
			}
			return value;
		}
	};
	module.exports = XsuaaSecurityContext$4;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/context/XsaSecurityContext.js
var require_XsaSecurityContext = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/context/XsaSecurityContext.js"(exports, module) {
	const XsuaaSecurityContext$3 = require_XsuaaSecurityContext();
	/**
	* @typedef {import("../context/SecurityContext")} SecurityContext
	* @typedef {import("../service/XsaService")} XsaService
	* @typedef {import("../token/XsaToken")} XsaToken
	*/
	/** @extends {XsuaaSecurityContext} */
	var XsaSecurityContext$2 = class extends XsuaaSecurityContext$3 {
		/**
		* 
		* @param {XsaService} service 
		* @param {XsaToken} token 
		* @param {*} contextConfig 
		*/
		constructor(service, token, contextConfig) {
			super(service, token, contextConfig);
		}
		/**
		* The Service instance on which this SecurityContext has been created.
		* @returns {XsaService} service
		*/
		get service() {
			return super.service;
		}
		/**
		* @deprecated Use the constructor to set the Service instance.
		* @param {XsaService} service
		*/
		set service(service) {
			super.service = service;
		}
		/**
		* The Token instance from which this SecurityContext has ben created.
		* @returns {XsaToken} token
		*/
		get token() {
			return super.token;
		}
		/**
		* @deprecated Use the constructor to set the Token instance.
		* @param {XsaToken} token
		*/
		set token(token) {
			super.token = token;
		}
	};
	module.exports = XsaSecurityContext$2;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/context/UaaSecurityContext.js
var require_UaaSecurityContext = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/context/UaaSecurityContext.js"(exports, module) {
	const XsuaaSecurityContext$2 = require_XsuaaSecurityContext();
	/**
	* @typedef {import("../context/SecurityContext")} SecurityContext
	* @typedef {import("../service/UaaService")} UaaService
	* @typedef {import("../token/UaaToken")} UaaToken
	*/
	/** @extends {XsuaaSecurityContext} */
	var UaaSecurityContext$2 = class extends XsuaaSecurityContext$2 {
		/**
		* 
		* @param {UaaService} service 
		* @param {UaaToken} token 
		* @param {*} contextConfig 
		*/
		constructor(service, token, contextConfig) {
			super(service, token, contextConfig);
		}
		/**
		* The Service instance on which this SecurityContext has been created.
		* @returns {UaaService} service
		*/
		get service() {
			return super.service;
		}
		/**
		* @deprecated Use the constructor to set the Service instance.
		* @param {UaaService} service
		*/
		set service(service) {
			super.service = service;
		}
		/**
		* The Token instance from which this SecurityContext has ben created.
		* @returns {UaaToken} token
		*/
		get token() {
			return super.token;
		}
		/**
		* @deprecated Use the constructor to set the Token instance.
		* @param {UaaToken} token
		*/
		set token(token) {
			super.token = token;
		}
	};
	module.exports = UaaSecurityContext$2;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/cache/ResponseReplica.js
var require_ResponseReplica = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/cache/ResponseReplica.js"(exports, module) {
	var ResponseReplica$1 = class {
		cache;
		key;
		request;
		data;
		lastRefresh;
		expirationTime;
		pendingRequest;
		constructor(cache$1, key$1, request$1) {
			Object.assign(this, {
				cache: cache$1,
				key: key$1,
				request: request$1
			});
			this.data = null;
			this.expirationTime = cache$1.expirationTime;
		}
		/**
		* Returns the remaining time until expiration.
		* @returns time until expiration or 0 if no data available or data expired
		*/
		get remainingTime() {
			if (!this.hasData || this.lastRefresh == null) return 0;
			const elapsedTime = Date.now() - this.lastRefresh;
			return Math.max(0, this.expirationTime - elapsedTime);
		}
		/** Returns whether the replica already has response data. **/
		hasData() {
			return this.data != null;
		}
		/** Returns whether the replica is expired. **/
		isExpired() {
			return this.remainingTime <= 0;
		}
		/**
		* Returns if the replica is considered stale given the refresh period. Stale replicas should be refreshed but may still be used before expiration.
		* @param refreshPeriod time period (in ms) before expiration time in which the replica should count as stale (but not yet as expired)
		* @returns true if the replica is already expired or will expire within the given refresh period.
		*/
		isStale(refreshPeriod) {
			return this.expired || this.remainingTime <= refreshPeriod;
		}
		/**
		* Triggers a refresh of this replica. Multiple calls will still result in only one refresh at a time.
		* @param {string} correlationId 
		*/
		refresh(correlationId) {
			this.pendingRequest ??= this.#fetchResponse(correlationId);
			return this.pendingRequest;
		}
		/** Fetches new data from the request. */
		async #fetchResponse(correlationId) {
			try {
				this.data = await this.request(correlationId);
			} finally {
				this.pendingRequest = null;
			}
			this.lastRefresh = Date.now();
		}
	};
	module.exports = ResponseReplica$1;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/cache/ResponseCache.js
var require_ResponseCache = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/cache/ResponseCache.js"(exports, module) {
	const ResponseReplica = require_ResponseReplica();
	const ConfigurationError$4 = require_ConfigurationError();
	const { getLogger: getLogger$5 } = require_logging();
	const LOG$5 = getLogger$5("ResponseCache.js");
	/**
	* Caches responses from an endpoint with different request parameters that are eagerly refreshed in the background
	* when accessed shortly before expiration.
	*/
	var ResponseCache$1 = class ResponseCache$1 {
		static get DEFAULT_EXPIRATION_TIME() {
			return 30 * 60 * 1e3;
		}
		static get DEFAULT_REFRESH_PERIOD() {
			return 15 * 60 * 1e3;
		}
		/** @type {Map<string,ResponseReplica>} */
		cache;
		endpointName;
		expirationTime;
		refreshPeriod;
		constructor({ expirationTime = ResponseCache$1.DEFAULT_EXPIRATION_TIME, refreshPeriod = ResponseCache$1.DEFAULT_REFRESH_PERIOD, endpointName = "response" } = {}) {
			if (expirationTime < 0) throw new ConfigurationError$4("ResponseCache expirationTime must be >=0.");
			if (refreshPeriod < 0 || refreshPeriod > expirationTime) throw new ConfigurationError$4("ResponseCache refreshPeriod must be between 0 and <expirationTime>.");
			this.cache = new Map();
			this.endpointName = endpointName;
			this.expirationTime = expirationTime;
			this.refreshPeriod = refreshPeriod;
		}
		/**
		* Returns an up-to-date response associated with the given key. If there is no replica yet for the key, caches a new replica under this key that
		* uses the given request callback to fetch its responses.
		* @param key cache key of response
		* @param buildRequest callback that constructs a request function for fetching new responses if no replica exists yet for the key. The request function
		*  has to throw an Error with a statusCode and statusText if it fails to fetch the data.
		*/
		async getOrRequest(key$1, buildRequest, { correlationId }) {
			const replica = this.cache.get(key$1) || this.#createReplica(key$1, buildRequest());
			if (!replica.hasData() || replica.isExpired()) {
				LOG$5.debug(`Awaiting ${this.endpointName} refresh because replica for key=${key$1} has ${replica.hasData() ? "expired" : "no"} data.)`);
				await replica.refresh(correlationId);
			} else if (replica.isStale(this.refreshPeriod)) {
				LOG$5.debug(`Asynchronous ${this.endpointName} refresh scheduled because replica for key=${key$1} is stale (remaining time = ${replica.remainingTime}ms < ${replica.refreshPeriod}ms = refresh period).`);
				replica.refresh(correlationId).catch(() => {});
			}
			return replica.data;
		}
		#createReplica(key$1, request$1) {
			const replica = new ResponseReplica(this, key$1, request$1);
			this.cache.set(key$1, replica);
			return replica;
		}
	};
	module.exports = ResponseCache$1;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/util/fetch.js
var require_fetch = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/util/fetch.js"(exports, module) {
	const https$1 = __require("https");
	const http$1 = __require("http");
	const zlib = __require("zlib");
	const url = __require("url");
	/**
	* Select the appropriate request module based on protocol
	* @param {string} protocol
	* @returns {module}
	*/
	function selectRequestModule(protocol) {
		switch (protocol) {
			case "https:": return https$1;
			case "http:": return http$1;
			default: throw new Error(`Unsupported protocol: ${protocol}`);
		}
	}
	var FetchError = class extends Error {
		constructor(message, error$1) {
			super(message);
			Error.captureStackTrace(this, this.constructor);
			this.code = this.errno = error$1?.code;
			this.erroredSysCall = error$1?.syscall;
		}
		get name() {
			return this.constructor.name;
		}
	};
	var Response$1 = class {
		#response;
		#request;
		constructor(response, request$1) {
			this.#response = response;
			this.#request = request$1;
		}
		async #getZip() {
			const response = this.#response;
			return new Promise((resolve, reject) => {
				const gunzip = zlib.createGunzip();
				response.pipe(gunzip);
				const data = [];
				gunzip.on("data", function(chunk) {
					data.push(chunk.toString());
				});
				gunzip.on("end", function() {
					resolve(data.join(""));
				});
				gunzip.on("error", (error$1) => {
					reject(new FetchError(`request to ${this.requestUrl} failed, reason: ${error$1.message}`, error$1));
				});
			});
		}
		get requestUrl() {
			const req = this.#request;
			return req.protocol + "//" + req.host + req.path;
		}
		async #getText() {
			const response = this.#response;
			if (response.headers["content-encoding"] === "gzip") return this.#getZip();
			return new Promise((resolve, reject) => {
				const data = [];
				response.setEncoding("utf8");
				response.on("data", function(chunk) {
					data.push(chunk);
				});
				response.on("end", function() {
					resolve(data.join(""));
				});
				response.on("error", (error$1) => {
					reject(new FetchError(`request to ${this.requestUrl} failed, reason: ${error$1.message}`, error$1));
				});
			});
		}
		async json() {
			return JSON.parse(await this.#getText());
		}
		async text() {
			return this.#getText();
		}
		get ok() {
			return this.status >= 200 && this.status < 300;
		}
		get status() {
			return this.#response.statusCode;
		}
		get headers() {
			const headers = new Map();
			for (const [key$1, value] of Object.entries(this.#response.headers)) headers.set(key$1, value);
			return headers;
		}
	};
	/**
	* A simple fetch implementation with basic functionality using node's https module.
	* This implementation has the same API as node-fetch but with limited functionality.
	* @param {string|URL} inputUrl
	* @param {https.RequestOptions} options
	* @returns {Response}
	* @throws {FetchError}
	*/
	async function xssec_fetch(inputUrl, options = {}) {
		importDefaultOptions(options);
		importDefaultHeaders(options);
		importBodyOptions(options);
		const requestModule = selectRequestModule(new url.URL(inputUrl).protocol);
		return new Promise(function(resolve, reject) {
			const req = requestModule.request(inputUrl, options, (response) => {
				resolve(new Response$1(response, req));
			});
			req.on("error", (error$1) => {
				reject(new FetchError(`request to ${url} failed, reason: ${error$1.message}`, error$1));
			});
			req.on("timeout", () => {
				req.destroy();
				reject(new FetchError(`request to ${url} timed out.`, { code: "ETIMEDOUT" }));
			});
			if (options.data) req.write(options.data);
			req.end();
		});
	}
	function importDefaultOptions(options) {
		options.method ??= "GET";
	}
	function importBodyOptions(options) {
		if (options.body) {
			const method$1 = options.method.toUpperCase();
			if (method$1 !== "GET" && method$1 !== "HEAD") {
				if (options.json) {
					options.data = JSON.stringify(options.body);
					options.headers["Content-Type"] = "application/json;charset=UTF-8";
				} else {
					options.data = options.body.toString();
					options.headers["Content-Type"] = "application/x-www-form-urlencoded;charset=UTF-8";
				}
				options.headers["Content-Length"] = Buffer.byteLength(options.data);
				delete options.body;
			} else throw new Error("Request with GET/HEAD method cannot have body");
		}
	}
	function importDefaultHeaders(options) {
		if (options.headers == null) options.headers = {};
		options.headers["Accept-Encoding"] = "gzip,deflate";
		if (!options.headers["Accept"] && !options.headers["accept"]) options.headers["Accept"] = "*/*";
	}
	module.exports = xssec_fetch;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/network/RetryError.js
var require_RetryError = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/error/network/RetryError.js"(exports, module) {
	const RequestError$1 = require_RequestError();
	/**
	* An error that occurs when a request times out because the server did not send a response within the specified timeout interval.
	*/
	var RetryError$1 = class extends RequestError$1 {
		constructor(url$3, request$1, originalError, message = `HTTP request [${request$1.name}] to ${url$3} was not successful after ${originalError.length} attempts.`) {
			super(url$3, request$1, originalError, message);
			this.name = "RetryError";
		}
		get retryErrors() {
			return this.originalError;
		}
	};
	module.exports = RetryError$1;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/util/util.js
var require_util = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/util/util.js"(exports, module) {
	const { X509Certificate } = __require("crypto");
	const InvalidClientCertificateError = require_InvalidClientCertificateError();
	const { PEM_HEADER, PEM_FOOTER, CLIENT_CERTIFICATE_HEADER: CLIENT_CERTIFICATE_HEADER$1 } = require_constants();
	module.exports = {
		escapeStringForRegex(s$1) {
			return String(s$1).replace(/[\\^$*+?.()|[\]{}]/g, "\\$&");
		},
		createCacheKey(parts = {}) {
			return Object.entries(parts).filter(([value]) => value != null).map(([key$1, value]) => `${key$1}=${value}`).join("|");
		},
		parsePemCertificate(pem) {
			pem = pem.replaceAll("\\n", "\n");
			if (!pem.startsWith(PEM_HEADER)) pem = `${PEM_HEADER}\n${pem}`;
			if (!pem.endsWith(PEM_FOOTER)) pem = `${pem}\n${PEM_FOOTER}`;
			try {
				return new X509Certificate(pem);
			} catch (error$1) {
				throw new InvalidClientCertificateError(pem, error$1);
			}
		},
		shrinkRequestOptionsForLog(request$1) {
			const maskedRequest = { ...request$1 };
			maskedRequest.headers = { ...request$1.headers };
			if (maskedRequest.agent) maskedRequest.agent = "<agent>";
			if (maskedRequest.headers?.[CLIENT_CERTIFICATE_HEADER$1]) maskedRequest.headers[CLIENT_CERTIFICATE_HEADER$1] = "<clientCertificatePem>";
			return maskedRequest;
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/util/jsonRequest.js
var require_jsonRequest = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/util/jsonRequest.js"(exports, module) {
	const fetch$1 = require_fetch();
	const { getLogger: getLogger$4 } = require_logging();
	const RequestError = require_RequestError();
	const RetryError = require_RetryError();
	const ResponseError$2 = require_ResponseError();
	const TimeoutError = require_TimeoutError();
	const { CORRELATIONID_HEADER_VCAP, DEFAULT_TIMEOUT: DEFAULT_TIMEOUT$1, MAX_TIMEOUT: MAX_TIMEOUT$1, USER_AGENT } = require_constants();
	const { shrinkRequestOptionsForLog } = require_util();
	const LOG$4 = getLogger$4("request.js");
	/**
	* Sleep for the given number of milliseconds
	* @param {number} ms - milliseconds to sleep
	* @returns {Promise<void>}
	*/
	const sleep = (ms$2) => new Promise((resolve) => {
		setTimeout(() => {
			resolve();
		}, ms$2);
	});
	/**
	* Calculate delay for retry based on attempt number and retry configuration
	* @param {number} attempt - the current attempt number (0-based)
	* @param {Object} retryConfig - retry configuration
	* @returns {number} - delay in milliseconds
	*/
	function calculateDelay(attempt, retryConfig) {
		if (retryConfig.strategy === "exponential") {
			const delay = retryConfig.initialDelay * Math.pow(retryConfig.factor, attempt);
			return Math.min(delay, retryConfig.maxDelay);
		}
		return retryConfig.initialDelay;
	}
	function isRetryableError(e) {
		if (e instanceof ResponseError$2) {
			if (e.statusCode >= 500 && e.statusCode <= 600 || e.statusCode == 429 || e.statusCode == 408) return true;
		} else if (e instanceof RequestError) return true;
		return false;
	}
	/**
	* Execute a fetch request with retry logic
	* @param {string} url - the URL to fetch
	* @param {Object} request - fetch request options
	* @param {Object} options - additional options
	* @param {string} options.requestName - name of the request for logging
	* @param {string} options.correlationId - correlation ID for tracing
	* @param {Object} retryConfig - retry configuration
	* @returns {Promise<Response>} - fetch response
	*/
	async function fetchWithRetry(url$3, request$1, options) {
		const { requestName, correlationId } = options;
		const retryConfig = request$1.retry;
		const retryErrors = [];
		const requestWithName = {
			...request$1,
			name: requestName
		};
		for (let attempt = 0; attempt <= retryConfig.retries; attempt++) try {
			if (attempt > 0) LOG$4.info(`Retry attempt ${attempt}/${retryConfig.retries} for [${requestName}] to ${url$3}`, { correlationId });
			return await fetchWithoutRetry(url$3, request$1, options);
		} catch (e) {
			if (!isRetryableError(e)) throw e;
			retryErrors.push(e);
			if (attempt >= retryConfig.retries) break;
			const delay = calculateDelay(attempt, retryConfig);
			LOG$4.debug(`Waiting ${delay}ms before next retry`, { correlationId });
			await sleep(delay);
		}
		const error$1 = new RetryError(url$3, requestWithName, retryErrors);
		LOG$4.error(error$1.message, { correlationId });
		throw error$1;
	}
	async function fetchWithoutRetry(url$3, request$1, { requestName, correlationId, extractHeaders }) {
		if (correlationId) request$1.headers[CORRELATIONID_HEADER_VCAP] = correlationId;
		LOG$4.debug(`HTTP request [${requestName}] to ${url$3} with options`, {
			correlationId,
			...shrinkRequestOptionsForLog(request$1)
		});
		let response;
		try {
			response = await fetch$1(url$3, request$1);
		} catch (e) {
			const requestWithName = {
				...request$1,
				name: requestName
			};
			const error$1 = e.code === "ETIMEDOUT" ? new TimeoutError(url$3, requestWithName, e) : new RequestError(url$3, requestWithName, e);
			LOG$4.error(error$1.message, { correlationId });
			throw error$1;
		}
		if (!response.ok) {
			const responseText = await response.text();
			const error$1 = new ResponseError$2(url$3, {
				...request$1,
				name: requestName
			}, response.status, responseText);
			LOG$4.error(error$1.message, { correlationId });
			throw error$1;
		}
		const json$1 = await response.json();
		LOG$4.debug(`HTTP response [${requestName}]:`, {
			correlationId,
			...json$1
		});
		if (extractHeaders != null) json$1[extractHeaders] = response.headers;
		return json$1;
	}
	async function jsonRequest$3(url$3, request$1, options = {}) {
		Object.assign(request$1, {
			redirect: "error",
			follow: 0,
			timeout: Math.min(MAX_TIMEOUT$1, request$1.timeout ?? DEFAULT_TIMEOUT$1)
		});
		request$1.headers ??= {};
		Object.assign(request$1.headers, {
			Accept: "application/json",
			"User-Agent": USER_AGENT
		});
		if (request$1.retry) return fetchWithRetry(url$3, request$1, options);
		else return fetchWithoutRetry(url$3, request$1, options);
	}
	module.exports = { jsonRequest: jsonRequest$3 };
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/service/Service.js
var require_Service = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/service/Service.js"(exports, module) {
	const { Agent } = __require("node:https");
	const ResponseCache = require_ResponseCache();
	const { ConfigurationError: ConfigurationError$3, ExpiredTokenError, InvalidCredentialsError, MissingKidError: MissingKidError$2, NotYetValidTokenError, WrongAudienceError: WrongAudienceError$2 } = require_error();
	const { jsonRequest: jsonRequest$2 } = require_jsonRequest();
	const { createCacheKey: createCacheKey$2 } = require_util();
	const { DEFAULT_JWT_BEARER_FETCH_TIMEOUT, DEFAULT_TIMEOUT, GRANTTYPE_CLIENTCREDENTIALS, GRANTTYPE_JWTBEARER, GRANTTYPE_PASSWORD, MAX_TIMEOUT } = require_constants();
	/**
	* @typedef {import('../token/Token')} Token
	* @typedef {import('../context/SecurityContext')} SecurityContext
	* @typedef {import('../jwks/Jwks')} Jwks
	* @typedef {import('../error/validation/ValidationError')} ValidationError
	* @typedef {import('../util/Types').ServiceCredentials} ServiceCredentials
	* @typedef {import('../util/Types').ServiceConfig} ServiceConfig
	* @typedef {import('../util/Types').SecurityContextConfig} SecurityContextConfig
	* @typedef {import('../util/Types').TokenFetchOptions} TokenFetchOptions
	* @typedef {import('../util/Types').TokenFetchResponse} TokenFetchResponse
	* @typedef {import('../util/Types').GrantType} GrantType
	*/
	var Service$3 = class Service$3 {
		static #sharedJwksCaches = {};
		static #oidcCache;
		static DEFAULT_RETRY_CONFIG = {
			strategy: "exponential",
			retries: 3,
			initialDelay: 500,
			factor: 3,
			maxDelay: 4e3
		};
		/** @type {ServiceCredentials} */
		credentials;
		/** @type {ServiceConfig} */
		config;
		endpoints;
		/**
		*
		* @param {ServiceCredentials} credentials
		* @param {ServiceConfig} [serviceConfiguration={}]
		*/
		constructor(credentials, serviceConfiguration = {}) {
			if (credentials == null) throw new ConfigurationError$3("Service requires service credentials.");
			this.credentials = { ...credentials };
			this.config = Service$3.buildServiceConfiguration(serviceConfiguration);
			Service$3.#oidcCache ??= new ResponseCache({ endpointName: "OIDC configuration" });
			this.endpoints = {
				...this.endpoints,
				...serviceConfiguration.endpoints || {}
			};
			this.jwksCache = this.config.validation.jwks.shared ? this.#getSharedJwksCache(this.config) : new ResponseCache({
				...this.config.validation.jwks,
				endpointName: "JWKS"
			});
		}
		/**
		* @internal
		* Gets the OIDC cache shared by all Service instances.
		*
		* @returns {import("../cache/ResponseCache")} The OIDC cache.
		*/
		get oidcCache() {
			return Service$3.#oidcCache;
		}
		/**
		* @internal
		* Sets the OIDC cache shared by all Service instances.
		*/
		set oidcCache(cache$1) {
			Service$3.#oidcCache = cache$1;
		}
		#getSharedJwksCache() {
			Service$3.#sharedJwksCaches[this.constructor.name] ??= new ResponseCache({
				...this.config.validation.jwks,
				endpointName: "JWKS"
			});
			return Service$3.#sharedJwksCaches[this.constructor.name];
		}
		/**
		* Checks if this service is the recipient of the given token.
		* @param {Token} token
		* @returns {Boolean}
		*/
		acceptsTokenAudience(token) {
			this.validateCredentials("validate token audience", "clientid");
			return token.audiences?.includes(this.credentials.clientid);
		}
		/**
		* Called internally to validate the credentials to have the necessary properties before performing a specific action, e.g. token fetch.
		*
		* @internal
		* @param {string} action description of action for which the credentials are being validated.
		* @param {...string} mandatoryProperties mandatory properties that must be present in the credentials.
		* @throws {InvalidCredentialsError} if any of the mandatory properties are missing in the credentials.
		*/
		validateCredentials(action, ...mandatoryProperties) {
			const missingProperties = mandatoryProperties.filter((p) => !this.credentials[p]);
			if (missingProperties.length > 0) throw new InvalidCredentialsError(`${this.constructor.name} is missing the properties ${missingProperties} inside its credentials for: ${action}.`);
		}
		/**
		* Checks if the given token is valid under the given contextConfig.
		* @param {Token} token
		* @param {SecurityContextConfig} contextConfig
		* @throws {ValidationError} if the token is not valid or could not be validated
		*/
		async validateToken(token, contextConfig) {
			if (token.expired) throw new ExpiredTokenError(token);
			if (token.notYetValid) throw new NotYetValidTokenError(token);
			if (!this.acceptsTokenAudience(token)) throw new WrongAudienceError$2(token, this);
			await this.validateTokenSignature(token, contextConfig);
		}
		/**
		* Checks if the given token's signature is valid under the given contextConfig.
		* @param {Token} token
		* @param {SecurityContextConfig} contextConfig
		* @returns {Promise<void>} resolves when token signature is valid, otherwise error is thrown
		* @throws {ValidationError} if the token signature is not valid or could not be validated
		*/
		async validateTokenSignature(token, contextConfig) {
			if (!token.header.kid) throw new MissingKidError$2(token.header.kid, `Token header contained no kid.`);
			const jwks = await this.getJwks(token, contextConfig);
			const jwk = jwks.get(token.header.kid);
			jwk.validateSignature(token);
		}
		/**
		* @param {object} [requestOptions]
		* @param {string} [requestOptions.correlationId]
		*/
		async getOpenIDConfiguration({ correlationId } = {}) {
			this.validateCredentials("fetch OIDC configuration", "url");
			const cacheKey = createCacheKey$2({ url: this.credentials.url });
			const buildRequest = () => {
				return (correlationId$1) => this.fetchOpenIDConfiguration(correlationId$1);
			};
			return this.oidcCache.getOrRequest(cacheKey, buildRequest, { correlationId });
		}
		/**
		* @param {object} [requestOptions]
		* @param {string} [requestOptions.correlationId]
		*/
		async fetchOpenIDConfiguration({ correlationId } = {}) {
			this.validateCredentials("fetch OIDC configuration", "url");
			const oidcUrl = new URL(this.endpoints.oidc_info, this.credentials.url);
			const request$1 = this.buildRequest({ method: "GET" });
			return jsonRequest$2(oidcUrl, request$1, {
				requestName: `${this.constructor.name}.fetchOpenIDConfiguration`,
				correlationId
			});
		}
		/**
		* Fetches a token from this service with this service's client credentials.
		* @param {TokenFetchOptions} options
		* @returns {Promise<TokenFetchResponse>} response
		*/
		async fetchClientCredentialsToken(options = {}) {
			const grant_type = GRANTTYPE_CLIENTCREDENTIALS;
			const tokenUrl = await this.getTokenUrl(grant_type, options);
			const request$1 = this.buildTokenRequest(grant_type, options);
			return jsonRequest$2(tokenUrl, request$1, {
				requestName: `${this.constructor.name}.fetchClientCredentialsToken`,
				correlationId: options.correlationId
			});
		}
		/**
		* Fetches a user token from this service with the given username and password.
		* @param {String} username
		* @param {String} password
		* @param {TokenFetchOptions} options
		* @returns {Promise<TokenFetchResponse>} response
		*/
		async fetchPasswordToken(username, password, options = {}) {
			const grant_type = GRANTTYPE_PASSWORD;
			const tokenUrl = await this.getTokenUrl(grant_type, options);
			const request$1 = this.buildTokenRequest(grant_type, options);
			request$1.body.append("username", username);
			request$1.body.append("password", password);
			return jsonRequest$2(tokenUrl, request$1, {
				requestName: `${this.constructor.name}.fetchPasswordToken`,
				correlationId: options.correlationId
			});
		}
		/**
		* Fetches a JWT bearer token from this service with the given user token as assertion.
		* @param {TokenFetchOptions} options - default timeout is 10 seconds as JWT bearer can be slow
		* @returns {Promise<TokenFetchResponse>} response
		*/
		async fetchJwtBearerToken(assertion, options = {}) {
			const grant_type = GRANTTYPE_JWTBEARER;
			const tokenUrl = await this.getTokenUrl(grant_type, options);
			options.timeout ??= DEFAULT_JWT_BEARER_FETCH_TIMEOUT;
			const request$1 = this.buildTokenRequest(grant_type, options);
			request$1.body.append("assertion", assertion);
			return jsonRequest$2(tokenUrl, request$1, {
				requestName: `${this.constructor.name}.fetchJwtBearerToken`,
				correlationId: options.correlationId
			});
		}
		/**
		* Builds a request for this service based on the service configuration and the given request options.
		* For example, the request will use the timeout value from the service configuration if not overridden in the request options.
		*
		* @internal
		* @param {import("node:https").RequestOptions} [requestOptions] - options for the request
		*/
		buildRequest(requestOptions) {
			return {
				timeout: this.config.requests.timeout,
				retry: this.config.requests.retry,
				...requestOptions
			};
		}
		/**
		* Builds a token request for this service with the given grant_type and options.
		*
		* @param {String} grant_type
		* @param {TokenFetchOptions} options
		*/
		buildTokenRequest(grant_type, options) {
			const request$1 = this.buildRequest({
				method: "POST",
				body: new URLSearchParams({ grant_type })
			});
			this.addClientAuthentication(request$1, options);
			if (options.timeout) request$1.timeout = options.timeout;
			if (options.token_format) request$1.body.append("token_format", options.token_format);
			return request$1;
		}
		/**
		* Prepares the given request to use this service's client credentials for authentication.
		* Adds clientid and either clientsecret or an mTLS agent based on client certificate, depending on the type of credentials.
		* @param {RequestInit} request
		* @param {URLSearchParams} request.body
		* @param {TokenFetchOptions} options
		*/
		addClientAuthentication(request$1, options = {}) {
			this.validateCredentials("fetch token", "clientid");
			request$1.body.append("client_id", this.credentials.clientid);
			if (this.credentials.clientsecret) request$1.body.append("client_secret", this.credentials.clientsecret);
			else if (this.credentials.key && this.credentials.certificate) request$1.agent = new Agent({
				key: this.credentials.key,
				cert: this.credentials.certificate
			});
			else throw new InvalidCredentialsError("Service credentials contain neither a client secret nor certificate based authentication information.");
		}
		/**
		* Updates the certificate and key in the service credentials for authentication of subsequent requests.
		* @param {String} cert PEM-encoded client certificate
		* @param {String} key PEM-encoded client key
		* @returns {void}
		*/
		setCertificateAndKey(cert, key$1) {
			this.credentials.certificate = cert;
			this.credentials.key = key$1;
		}
		/**
		* Builds the configuration of this service based on the provided configuration and default values.
		* @param {ServiceConfig} config
		*/
		static buildServiceConfiguration(config$2) {
			config$2.endpoints ??= {};
			config$2.endpoints.oidc_info ??= "/.well-known/openid-configuration";
			config$2.validation ??= {};
			config$2.validation.jwks ??= {};
			config$2.validation.jwks.shared ??= false;
			config$2.validation.jwks.expirationTime ??= ResponseCache.DEFAULT_EXPIRATION_TIME;
			config$2.validation.jwks.refreshPeriod ??= ResponseCache.DEFAULT_REFRESH_PERIOD;
			config$2.requests ??= {};
			config$2.requests.timeout = Math.min(MAX_TIMEOUT, config$2.requests.timeout ?? DEFAULT_TIMEOUT);
			if (config$2.requests.retry) if (config$2.requests.retry === true) config$2.requests.retry = { ...Service$3.DEFAULT_RETRY_CONFIG };
			else config$2.requests.retry = {
				...Service$3.DEFAULT_RETRY_CONFIG,
				...config$2.requests.retry
			};
			return config$2;
		}
		/**
		* Creates a new {@link SecurityContext} from this service with the given token.
		* @abstract
		* @param {String|Token} token as JWT or Token object
		* @param {SecurityContextConfig} contextConfig
		* @returns {Promise<SecurityContext>} securityContext
		*/
		async createSecurityContext(token, contextConfig = {}) {
			throw new ConfigurationError$3("This abstract function MUST be called on a service-specific implementation.");
		}
		/**
		* Retrieves the JWKS (JSON Web Key Set) for the given token and context configuration.
		*
		* @param {string} token the token for which to retrieve the JWKS.
		* @param {SecurityContextConfig} contextConfig the context configuration object.
		* @returns {Promise<Jwks>} A promise that resolves to the JWKS (JSON Web Key Set) object.
		* @throws {Error} If an error occurs while retrieving the JWKS.
		*/
		async getJwks(token, contextConfig) {
			throw new ConfigurationError$3("This abstract function MUST be called on a service-specific implementation.");
		}
		/**
		* Determines the URL that can be used for fetching tokens of given grant_type from this service.
		* @abstract
		* @param {GrantType} grant_type
		* @param {Object} options
		* @param {String} options.correlationId
		* @returns {Promise<URL>} URL of the service's token endpoint
		*/
		async getTokenUrl(grant_type, options = {}) {
			throw new ConfigurationError$3("This abstract function MUST be called on a service-specific implementation.");
		}
	};
	module.exports = Service$3;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/token/IdentityServiceToken.js
var require_IdentityServiceToken = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/token/IdentityServiceToken.js"(exports, module) {
	const Token$2 = require_Token();
	var IdentityServiceToken$2 = class extends Token$2 {
		get appTid() {
			return this.payload.app_tid ?? this.payload.zone_uuid;
		}
		/**
		* Returns the Identity Service APIs consumed by the caller (based on the token's 'ias_apis' claim).
		* @returns {string[]} The consumed APIs or [] if the caller does not consume any APIs.
		*/
		get consumedApis() {
			return this.payload.ias_apis || [];
		}
		get customIssuer() {
			return this.payload.ias_iss ? this.payload.iss : null;
		}
		get issuer() {
			return this.payload.ias_iss || this.payload.iss;
		}
		/**
		* Returns the SCIM id of the user.
		* @returns {string} The SCIM id or undefined if the token does not contain a SCIM id, e.g. because it is a technical user token.
		*/
		get scimId() {
			return this.payload.scim_id;
		}
		getAppTID() {
			return this.appTid;
		}
		getCustomIssuer() {
			return this.customIssuer;
		}
		getZoneId() {
			return this.appTid;
		}
	};
	module.exports = IdentityServiceToken$2;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/jwks/Jwk.js
var require_Jwk = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/jwks/Jwk.js"(exports, module) {
	const crypto = __require("crypto");
	const UnsupportedAlgorithmError = require_UnsupportedAlgorithmError();
	const InvalidTokenSignatureError = require_InvalidTokenSignatureError();
	/**
	* @typedef {import("../token/Token")} Token
	*/
	const availableHashes = crypto.getHashes();
	var Jwk$2 = class Jwk$2 {
		key;
		pubKey;
		nodeAlg;
		/**
		* Creates a JWK based on a jwk-formatted public key
		* @param {Object} key key information in jwk format
		*/
		constructor(key$1) {
			this.key = key$1;
			this.pubKey = crypto.createPublicKey({
				key: key$1,
				format: "jwk"
			});
		}
		/**
		* Creates a JWK based on a PEM-formatted public key
		* @param {String} pem public key in PEM format
		* @returns Jwk
		*/
		static fromPEM(pem) {
			const cleanedUpPem = Jwk$2.cleanUpPemKey(pem);
			const pubKey = crypto.createPublicKey({
				key: cleanedUpPem,
				format: "pem"
			});
			const jwk = pubKey.export({ format: "jwk" });
			return new Jwk$2(jwk);
		}
		/**
		* Validates if the token was signed with the private key that belongs to this public key.
		* @param {Token} token 
		* @throws ValidationError when signature is invalid
		*/
		validateSignature(token) {
			const nodeAlg = Jwk$2.mapAlgToNodeAlg(token.header.alg);
			if (!availableHashes.includes(nodeAlg)) throw new UnsupportedAlgorithmError(token, token.header.alg);
			const [header, payload, signature] = token.jwt.split(".");
			const verifier = crypto.createVerify(nodeAlg);
			verifier.update(`${header}.${payload}`);
			const signatureValid = verifier.verify(this.pubKey, signature, "base64");
			if (!signatureValid) throw new InvalidTokenSignatureError(token);
		}
		static mapAlgToNodeAlg(alg) {
			switch (alg?.toUpperCase()) {
				case "RS256": return "RSA-SHA256";
				case "RS384": return "RSA-SHA384";
				case "RS512": return "RSA-SHA512";
				default: return null;
			}
		}
		static cleanUpPemKey(pem = "") {
			if (!pem.includes("KEY-----\n")) pem = pem.replace("KEY-----", "KEY-----\n");
			if (!pem.includes("\n-----END")) pem = pem.replace("-----END", "\n-----END");
			return pem;
		}
	};
	module.exports = Jwk$2;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/jwks/Jwks.js
var require_Jwks = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/jwks/Jwks.js"(exports, module) {
	const Jwk$1 = require_Jwk();
	const MissingKidError$1 = require_MissingKidError();
	var Jwks$2 = class {
		constructor(keys$2 = []) {
			this.keys = Object.create(null);
			for (const k of keys$2) this.keys[k.kid] = new Jwk$1(k);
		}
		/**
		* Retrieves the JWK (JSON Web Key) associated with the specified key ID (kid).
		* @param {string} kid - The key ID (kid) of the JWK to retrieve.
		* @returns {Jwk} - The JWK associated with the specified key ID.
		* @throws {MissingKidError} - If the JWKS does not contain a key for the specified key ID.
		*/
		get(kid) {
			const jwk = this.keys[kid];
			if (!jwk) throw new MissingKidError$1(kid, `JWKS does not contain a key for kid=${kid}`);
			return jwk;
		}
	};
	module.exports = Jwks$2;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/service/IdentityService.js
var require_IdentityService = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/service/IdentityService.js"(exports, module) {
	/**
	* @typedef {import("crypto").X509Certificate} X509Certificate
	*/
	const Service$2 = require_Service();
	const SecurityContext$4 = require_SecurityContext();
	const IdentityServiceSecurityContext$1 = require_IdentityServiceSecurityContext();
	const IdentityServiceToken$1 = require_IdentityServiceToken();
	const Jwks$1 = require_Jwks();
	const { MissingClientCertificateError, MissingIssuerError, InvalidIssuerError, UntrustedIssuerError, X5tError, ConfigurationError: ConfigurationError$2, ResponseError: ResponseError$1, WrongAudienceError: WrongAudienceError$1 } = require_error();
	const util = require_util();
	const { createCacheKey: createCacheKey$1, escapeStringForRegex } = require_util();
	const { jsonRequest: jsonRequest$1 } = require_jsonRequest();
	const { APP_TID_HEADER, AZP_HEADER, CLIENT_CERTIFICATE_HEADER, CLIENTID_HEADER, HTTPS_SCHEME: HTTPS_SCHEME$1, SERVICE_PLAN_HEADER, X5T_CNF_CLAIM } = require_constants();
	/**
	* @typedef {import('../util/Types').ServiceCredentials} ServiceCredentials
	* @typedef {import('../util/Types').IdentityServiceCredentials} IdentityServiceCredentials
	* @typedef {import('../util/Types').ServiceConfig} ServiceConfig
	* @typedef {import('../util/Types').IdentityServiceConfig} IdentityServiceConfig * 
	* @typedef {import('../util/Types').SecurityContextConfig} SecurityContextConfig * 
	* @typedef {import('../util/Types').TokenFetchOptions} TokenFetchOptions
	* @typedef {import('../util/Types').IdentityServiceTokenFetchOptions} IdentityServiceTokenFetchOptions
	* @typedef {import('../util/Types').TokenFetchResponse} TokenFetchResponse
	* @typedef {import('../util/Types').IdTokenFetchResponse} IdTokenFetchResponse
	* @typedef {import('../util/Types').RefreshableTokenFetchResponse} RefreshableTokenFetchResponse
	*/
	/**
	* This {@link Service} class is constructed from SAP Identity Service credentials to provide an API with selected functionality against that service instance, e.g. token validation and token fetches.
	*/
	var IdentityService$4 = class IdentityService$4 extends Service$2 {
		/**
		* @param {ServiceCredentials & IdentityServiceCredentials} credentials 
		* @param {ServiceConfig | IdentityServiceConfig} [serviceConfiguration={}]
		*/
		constructor(credentials, serviceConfiguration) {
			super(credentials, serviceConfiguration);
		}
		/**
		* @override
		* @param {String|IdentityServiceToken} token token as JWT or IdentityServiceToken object
		* @param {SecurityContextConfig} contextConfig 
		* @returns {Promise<IdentityServiceSecurityContext>}
		*/
		async createSecurityContext(token, contextConfig = {}) {
			if (typeof token === "string") token = new IdentityServiceToken$1(token);
			SecurityContext$4.buildContextConfig(contextConfig);
			const iasToken = new IdentityServiceToken$1(token.jwt, {
				header: token.header,
				payload: token.payload
			});
			if (contextConfig.skipValidation !== true) {
				if (this.#proofTokenCheckRequired(token) || this.hasX5tEnabled()) if (contextConfig.clientCertificatePem == null) throw new MissingClientCertificateError();
				else contextConfig.clientCertificate = util.parsePemCertificate(contextConfig.clientCertificatePem);
				await this.validateToken(iasToken, contextConfig);
			}
			const ctx = new IdentityServiceSecurityContext$1(this, iasToken, contextConfig);
			for (let extension$1 of this.config.context?.extensions || []) await extension$1.extendSecurityContext(ctx);
			return ctx;
		}
		/**
		* @override
		* @param {IdentityServiceToken} token 
		* @param {SecurityContextConfig} contextConfig 
		*/
		async validateToken(token, contextConfig) {
			if (this.hasX5tEnabled()) IdentityService$4.validateTokenOwnership(token, contextConfig.clientCertificate);
			await super.validateToken(token, contextConfig);
		}
		/**
		* Retrieves the JWKS (JSON Web Key Set) for the given token and context configuration.
		* 
		* @param {string} token - The token for which to retrieve the JWKS.
		* @param {SecurityContextConfig} contextConfig - The context configuration object.
		* @returns {Promise<Jwks>} - A promise that resolves to the JWKS (JSON Web Key Set) object.
		* @throws {WrongAudienceError} - if the online validation in the JWKS endpoint of the Identity Service instance responds with a 400 status code, indicating that the token should not be accepted by this service.
		* @throws {Error} - If an error occurs while retrieving the JWKS.
		*/
		async getJwks(token, contextConfig) {
			this.validateCredentials("fetch JWKS", "clientid", "url");
			const issuerUrl = IdentityService$4.getSafeUrlFromTokenIssuer(token, this.credentials.domains);
			const jwksParams = {
				clientid: this.credentials.clientid,
				app_tid: token.appTid,
				azp: token.azp
			};
			const keyParts = {
				url: issuerUrl,
				...jwksParams
			};
			const proofTokenCheck = this.#proofTokenCheckRequired(token);
			if (proofTokenCheck) {
				keyParts.certSub = contextConfig.clientCertificate?.subject;
				jwksParams.clientCertificatePem = contextConfig.clientCertificatePem?.replaceAll("\\n", "").replaceAll("\n", "");
			}
			const cacheKey = createCacheKey$1(keyParts);
			const buildJwksRequest = () => {
				const issuerService = issuerUrl === this.credentials.url ? this : new IdentityService$4({
					url: issuerUrl,
					clientid: this.credentials.clientid
				});
				const extractHeaders = proofTokenCheck ? "headers" : null;
				return async (correlationId) => {
					const jwksResponse = await issuerService.fetchJwks(jwksParams, {
						correlationId,
						extractHeaders
					});
					return {
						jwks: new Jwks$1(jwksResponse.keys),
						servicePlans: proofTokenCheck ? jwksResponse.headers.get(SERVICE_PLAN_HEADER)?.split(",").map((plan) => plan.replaceAll("\"", "")) : null
					};
				};
			};
			let cachedResponse;
			try {
				cachedResponse = await this.jwksCache.getOrRequest(cacheKey, buildJwksRequest, { correlationId: contextConfig.correlationId });
			} catch (error$1) {
				if (error$1 instanceof ResponseError$1 && error$1.responseCode === 400 && error$1.request.name === `${this.constructor.name}.fetchJwks`)
 /**
				* Online validation in JWKS endpoint may have negative result for the provided header / query parameters.
				* In this case, the response will have status 400 and should result in a WrongAudienceError instead of a (subclass of) NetworkError.
				*/
				throw new WrongAudienceError$1(token, this, `The online validation in the JWKS endpoint of the Identity Service instance responded with 400: '${error$1.responseText}'. This indicates that the token should not be accepted by this service.`);
				throw error$1;
			}
			const { jwks, servicePlans } = cachedResponse;
			if (proofTokenCheck) contextConfig.servicePlans = servicePlans;
			return jwks;
		}
		async fetchJwks({ clientid, app_tid, azp, clientCertificatePem }, { correlationId, extractHeaders }) {
			const openIDConfiguration = await this.getOpenIDConfiguration(correlationId);
			const jwksUrl = openIDConfiguration.jwks_uri;
			const request$1 = this.buildRequest({
				method: "GET",
				headers: { [CLIENTID_HEADER]: clientid }
			});
			if (app_tid != null) request$1.headers[APP_TID_HEADER] = app_tid;
			if (azp != null) request$1.headers[AZP_HEADER] = azp;
			if (clientCertificatePem != null) request$1.headers[CLIENT_CERTIFICATE_HEADER] = clientCertificatePem;
			return jsonRequest$1(jwksUrl, request$1, {
				requestName: `${this.constructor.name}.fetchJwks`,
				correlationId,
				extractHeaders
			});
		}
		/**
		* Fetches a token from this service with this service's client credentials.
		* @param {TokenFetchOptions & IdentityServiceTokenFetchOptions} options
		* @returns {Promise<TokenFetchResponse>}
		*/
		async fetchClientCredentialsToken(options = {}) {
			return super.fetchClientCredentialsToken(options);
		}
		/**
		* Fetches a user token from this service with the given username and password.
		* @param {String} username
		* @param {String} password
		* @param {TokenFetchOptions & IdentityServiceTokenFetchOptions} options      
		* @returns {Promise<TokenFetchResponse & IdTokenFetchResponse & RefreshableTokenFetchResponse>}
		*/
		async fetchPasswordToken(username, password, options = {}) {
			return super.fetchPasswordToken(username, password, options);
		}
		/**
		* Fetches a JWT bearer token from this service with the given user token as assertion.
		* @param {String} assertion JWT bearer token used as assertion   
		* @param {TokenFetchOptions & IdentityServiceTokenFetchOptions} options      
		* @returns {Promise<TokenFetchResponse & IdTokenFetchResponse & RefreshableTokenFetchResponse>}
		*/
		async fetchJwtBearerToken(assertion, options = {}) {
			return super.fetchJwtBearerToken(assertion, options);
		}
		/** @override */
		buildTokenRequest(grant_type, options) {
			const request$1 = super.buildTokenRequest(grant_type, options);
			if (options.resource) [options.resource].flatMap((r) => r).forEach((resource) => request$1.body.append("resource", resource));
			return request$1;
		}
		/**
		* Prepares the given formData and fetch options to use this service's client credentials for authentication.
		* Adds clientid, app_tid and either clientsecret or an mTLS agent based on client certificate, depending on the type of credentials.
		* @param {RequestInit} request 
		* @param {URLSearchParams} request.body
		* @param {TokenFetchOptions} options
		* @override
		*/
		addClientAuthentication(request$1, options = {}) {
			super.addClientAuthentication(request$1, options);
			const app_tid = options.app_tid ?? this.credentials.app_tid;
			if (app_tid != null) request$1.body.append("app_tid", app_tid);
		}
		/**
		* @override
		* @inheritdoc
		*/
		async getTokenUrl(grant_type, options = {}) {
			const { correlationId } = options;
			const openidConfiguration = await this.getOpenIDConfiguration({ correlationId });
			if (!openidConfiguration.grant_types_supported.includes(grant_type)) throw new ConfigurationError$2(`This Identity Service instance does not support grant type ${grant_type} according to its openid-configuration.`);
			return new URL(openidConfiguration.token_endpoint);
		}
		/** 
		* Returns whether proof token validation has been enabled via the service's configuration.
		* @returns {Boolean}
		*/
		hasProofTokenEnabled() {
			return this.config.validation?.proofToken?.enabled;
		}
		/** 
		* Returns whether x5t proof of token ownership validation has been enabled via the service's configuration.
		* @returns {Boolean}
		*/
		hasX5tEnabled() {
			return this.config.validation?.x5t?.enabled;
		}
		/**
		* Returns whether a proof token check has to be done for the given token.
		* The decision depends on the type of token.
		* Tokens with claim ias_api are App2App tokens for which a proof token check must not be done, even when enabled via the configuration.
		* @param {IdentityServiceToken} token 
		*/
		#proofTokenCheckRequired(token) {
			return this.hasProofTokenEnabled() && token.payload.ias_apis == null;
		}
		/**
		* Returns an issuer URL based on the issuer of the token if it can be succesfully validated against a list of trusted domains.
		* @param {IdentityServiceToken} token token from which issuer is extracted
		* @param {Array<string>} trustedDomains a list of trusted domains
		* @returns {String} URL of issuer if its domain is either a trusted domain or a subdomain of a trusted domain
		* @throws {UntrustedIssuerError} if issuer is empty, not trusted or not a valid URL
		*/
		static getSafeUrlFromTokenIssuer = function(token, trustedDomains = []) {
			const issuer = token?.issuer;
			if (!issuer) throw new MissingIssuerError(token);
			const issuerUrl = issuer.startsWith(HTTPS_SCHEME$1) ? issuer : `${HTTPS_SCHEME$1}${issuer}`;
			try {
				new URL(issuerUrl);
			} catch (e) {
				throw new InvalidIssuerError(token, e);
			}
			const issuerDomain = issuerUrl.substring(HTTPS_SCHEME$1.length);
			for (let d$1 of trustedDomains) {
				const validSubdomainPattern = `^[a-zA-Z0-9-]{1,63}\\.${escapeStringForRegex(d$1)}$`;
				if (issuerDomain === d$1 || issuerDomain.match(new RegExp(validSubdomainPattern))) return issuerUrl;
			}
			throw new UntrustedIssuerError(token);
		};
		/**
		* Validates that the client owning the given certificate is the owner of the token.
		* The validation is based on proof-of-posession via certificate binding of tokens as described in {@link https://datatracker.ietf.org/doc/html/rfc8705 RFC 8705}.
		* The validation is succesful if the token contains an base64url-encoded x5t thumbprint under claim {@link CNF_X5T_CLAIM cnf.x5t#S256} that matches the given certificate.
		* The client certificate against which the validation is performed, is typically extracted from the {@link FWD_CLIENT_CERT_HEADER x-forwarded-client-cert} request header where it is put by BTP after TLS termination.
		* @param {IdentityServiceToken} token 
		* @param {X509Certificate} cert client certificate parsed as X509Certificate
		*/
		static validateTokenOwnership(token, cert) {
			const tokenX5t = token.payload.cnf?.[X5T_CNF_CLAIM];
			if (!tokenX5t) throw new X5tError(token, cert, "X5t validation failed because x5t thumbprint could not be found in token.");
			let certificateX5t;
			try {
				certificateX5t = Buffer.from(cert.fingerprint256.replaceAll(":", ""), "hex").toString("base64url");
			} catch (e) {
				throw new X5tError(token, cert, "x5t validation failed because x5t thumbprint could not be calculated from client certificate.");
			}
			if (tokenX5t !== certificateX5t) throw new X5tError(token, cert, "x5t thumbprint did not match the thumbprint of the provided client certificate.");
		}
	};
	module.exports = IdentityService$4;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/token/XsuaaToken.js
var require_XsuaaToken = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/token/XsuaaToken.js"(exports, module) {
	const Token$1 = require_Token();
	var XsuaaToken$4 = class extends Token$1 {
		get azAttributes() {
			return this.payload.az_attr;
		}
		get extAttributes() {
			return this.payload.ext_attr;
		}
		get logonName() {
			return this.payload.user_name;
		}
		get scopes() {
			return this.payload.scope ?? [];
		}
		get serviceInstanceId() {
			return this.payload.ext_attr?.serviceinstanceid;
		}
		get subAccountId() {
			return this.payload.ext_attr?.subaccountid || this.zid;
		}
		get userId() {
			return super.userId || this.payload.sub;
		}
		get xsUserAttributes() {
			return this.payload.ext_cxt?.["xs.user.attributes"] ?? this.payload["xs.user.attributes"];
		}
		get xsSystemAttributes() {
			return this.payload.ext_cxt?.["xs.system.attributes"] ?? this.payload["xs.system.attributes"];
		}
		get zid() {
			return this.payload.zid;
		}
		getXsUserAttribute(name$2) {
			return this.xsUserAttributes?.[name$2];
		}
		getAppTID() {
			return this.zid;
		}
		getCustomIssuer() {
			return this.issuer;
		}
		getZoneId() {
			return this.zid;
		}
	};
	module.exports = XsuaaToken$4;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/service/XsuaaService.js
var require_XsuaaService = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/service/XsuaaService.js"(exports, module) {
	const Service$1 = require_Service();
	const SecurityContext$3 = require_SecurityContext();
	const XsuaaSecurityContext$1 = require_XsuaaSecurityContext();
	const XsuaaToken$3 = require_XsuaaToken();
	const Jwks = require_Jwks();
	const { jsonRequest } = require_jsonRequest();
	const { HTTPS_SCHEME, ZID_QUERY_PARAMETER, ZID_HEADER } = require_constants();
	const { createCacheKey } = require_util();
	const { ResponseError, WrongAudienceError } = require_error();
	/**
	* @typedef {import('../util/Types').ServiceCredentials} ServiceCredentials
	* @typedef {import('../util/Types').XsuaaServiceCredentials} XsuaaServiceCredentials
	* @typedef {import('../util/Types').ServiceConfig} ServiceConfig
	* @typedef {import('../util/Types').SecurityContextConfig} SecurityContextConfig
	* @typedef {import('../util/Types').TokenFetchOptions} TokenFetchOptions
	* @typedef {import('../util/Types').XsuaaTokenFetchOptions} XsuaaTokenFetchOptions
	* @typedef {import('../util/Types').TokenFetchResponse} TokenFetchResponse
	* @typedef {import('../util/Types').RefreshableTokenFetchResponse} RefreshableTokenFetchResponse
	* @typedef {import('../util/Types').GrantType} GrantType
	*/
	/**
	* New SAP BTP applications should start with SAP Identity Services instead of XSUAA! See README for details.\
	* This {@link Service} class is constructed from XSUAA credentials to provide an API with selected functionality against that XSUAA service instance, e.g. token validation and token fetches.
	*/
	var XsuaaService$6 = class extends Service$1 {
		#jwksBaseUrl;
		/**
		* @param {ServiceCredentials & XsuaaServiceCredentials} credentials 
		* @param {ServiceConfig} [serviceConfig={}] 
		*/
		constructor(credentials, serviceConfig) {
			serviceConfig ??= {};
			serviceConfig.endpoints ??= {};
			serviceConfig.endpoints.oidc_info ??= "/.well-known/openid-configuration";
			serviceConfig.endpoints.jwks ??= "/token_keys";
			serviceConfig.endpoints.token ??= "/oauth/token";
			super(credentials, serviceConfig);
		}
		/**
		* @overrides
		* @inheritdoc
		*/
		acceptsTokenAudience(token) {
			this.validateCredentials("validate token audience", "clientid", "xsappname");
			if (!(token instanceof XsuaaToken$3)) token = new XsuaaToken$3(null, {
				header: token.header,
				payload: token.payload
			});
			let audiencesToConsider;
			if (token.audiences?.length > 0) audiencesToConsider = [...token.audiences];
			else if (token.scopes) audiencesToConsider = [...token.scopes];
			else audiencesToConsider = [];
			if (token.payload.cid) audiencesToConsider.push(token.payload.cid);
			return audiencesToConsider.some((a) => a === this.credentials.clientid || a.startsWith(`${this.credentials.clientid}.`)) || audiencesToConsider.some((a) => a === this.credentials.xsappname || a.startsWith(`${this.credentials.xsappname}.`)) || this.credentials.clientid.includes("!b") && audiencesToConsider.some((a) => a.endsWith(`|${this.credentials.xsappname}`));
		}
		/**
		* @override
		* @param {String|XsuaaToken} token as JWT or XsuaaToken object
		* @param {SecurityContextConfig} contextConfig 
		* @returns {Promise<XsuaaSecurityContext}
		*/
		async createSecurityContext(token, contextConfig = {}) {
			if (typeof token === "string") token = new XsuaaToken$3(token);
			SecurityContext$3.buildContextConfig(contextConfig);
			const xsuaaToken = new XsuaaToken$3(token.jwt, {
				header: token.header,
				payload: token.payload
			});
			if (contextConfig.skipValidation !== true) await this.validateToken(xsuaaToken, contextConfig);
			const ctx = new XsuaaSecurityContext$1(this, xsuaaToken, contextConfig);
			for (let extension$1 of this.config.context?.extensions || []) await extension$1.extendSecurityContext(ctx);
			return ctx;
		}
		async getJwks(token, contextConfig) {
			const jwksParams = { zid: token.zid };
			const keyParts = {
				url: this.jwksBaseUrl,
				...jwksParams
			};
			const cacheKey = createCacheKey(keyParts);
			const buildJwksRequest = () => {
				return async (correlationId) => {
					const jwksResponse = await this.fetchJwks({
						...jwksParams,
						correlationId
					});
					return new Jwks(jwksResponse.keys);
				};
			};
			let jwks;
			try {
				jwks = await this.jwksCache.getOrRequest(cacheKey, buildJwksRequest, { correlationId: contextConfig.correlationId });
			} catch (error$1) {
				if (error$1 instanceof ResponseError && error$1.responseCode === 400)
 /**
				* Online validation in JWKS endpoint may have negative result for the provided header / query parameters.
				* In this case, the response will have status 400 and should result in a WrongAudienceError instead of a (subclass of) NetworkError.
				*/
				throw new WrongAudienceError(token, this, `The online validation in the JWKS endpoint of the XSUAA server responded with 400: '${error$1.responseText}'. This indicates that the token should not be accepted by this service.`);
				throw error$1;
			}
			return jwks;
		}
		/**
		* @internal
		* Returns the base URL (https protocol + uaadomain from the credentials) that can be used for JWKS fetches.
		* @returns {String} base URL for JWKS fetches
		*/
		get jwksBaseUrl() {
			if (!this.#jwksBaseUrl) {
				this.validateCredentials("fetch JWKS", "uaadomain");
				const { uaadomain } = this.credentials;
				if (uaadomain.startsWith(HTTPS_SCHEME)) this.#jwksBaseUrl = uaadomain;
				else this.#jwksBaseUrl = `${HTTPS_SCHEME}${uaadomain}`;
			}
			return this.#jwksBaseUrl;
		}
		async fetchJwks(jwksParams, correlationId) {
			const jwksUrl = new URL(this.jwksBaseUrl + this.endpoints.jwks);
			if (jwksParams.zid) jwksUrl.searchParams.append(ZID_QUERY_PARAMETER, jwksParams.zid);
			const request$1 = this.buildRequest({ method: "GET" });
			return jsonRequest(jwksUrl, request$1, {
				requestName: `${this.constructor.name}.fetchJwks`,
				correlationId
			});
		}
		/**
		* Fetches a token from this service with this service's client credentials.
		* @param {TokenFetchOptions & XsuaaTokenFetchOptions} options
		* @returns {Promise<TokenFetchResponse>} response
		*/
		async fetchClientCredentialsToken(options = {}) {
			return super.fetchClientCredentialsToken(options);
		}
		/**
		* Fetches a user token from this service with the given username and password.
		* @param {String} username
		* @param {String} password
		* @param {TokenFetchOptions & XsuaaTokenFetchOptions} options
		* @returns {Promise<TokenFetchResponse & RefreshableTokenFetchResponse>} response
		*/
		async fetchPasswordToken(username, password, options = {}) {
			return super.fetchPasswordToken(username, password, options);
		}
		/**
		* Fetches a JWT bearer token from this service with the given user token as assertion.
		* @param {String} assertion JWT bearer token used as assertion   
		* @param {TokenFetchOptions & XsuaaTokenFetchOptions} options
		* @returns {Promise<TokenFetchResponse & RefreshableTokenFetchResponse>} response
		*/
		async fetchJwtBearerToken(assertion, options = {}) {
			return super.fetchJwtBearerToken(assertion, options);
		}
		/** @override */
		buildTokenRequest(grant_type, options) {
			const request$1 = super.buildTokenRequest(grant_type, options);
			if (options.scope) request$1.body.append("scope", options.scope);
			if (options.authorities) request$1.body.append("authorities", JSON.stringify({ az_attr: options.authorities }));
			if (options.zid) {
				request$1.headers ??= {};
				request$1.headers[ZID_HEADER] = options.zid;
			}
			return request$1;
		}
		/**
		* Determines the URL that can be used for fetching tokens from this service, optionally adjusted for a tenant in the same subaccount.
		* @override
		* @inheritdoc
		* @param {GrantType} grant_type
		* @param {String} options.tenant
		*/
		async getTokenUrl(grant_type, options = {}) {
			const { tenant } = options;
			let baseUrl;
			if (tenant) {
				this.validateCredentials("build token fetch URL for custom tenant subdomain", "uaadomain");
				const uaaDomain = this.credentials.certificate ? this.credentials.uaadomain.replace("authentication.", "authentication.cert.") : this.credentials.uaadomain;
				baseUrl = `${HTTPS_SCHEME}${tenant}.${uaaDomain}`;
			} else if (this.credentials.certificate) {
				this.validateCredentials("fetch token via certificate authentication", "certurl");
				baseUrl = this.credentials.certurl;
			} else {
				this.validateCredentials("fetch token via client secret authentication", "url");
				baseUrl = this.credentials.url;
			}
			return new URL(this.endpoints.token, baseUrl);
		}
	};
	module.exports = XsuaaService$6;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/token/XsaToken.js
var require_XsaToken = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/token/XsaToken.js"(exports, module) {
	const XsuaaToken$2 = require_XsuaaToken();
	var XsaToken$2 = class extends XsuaaToken$2 {};
	module.exports = XsaToken$2;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/service/XsaService.js
var require_XsaService = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/service/XsaService.js"(exports, module) {
	const SecurityContext$2 = require_SecurityContext();
	const XsaSecurityContext$1 = require_XsaSecurityContext();
	const XsaToken$1 = require_XsaToken();
	const Jwk = require_Jwk();
	const MissingKidError = require_MissingKidError();
	const MissingVerificationKeyError = require_MissingVerificationKeyError();
	const { getLogger: getLogger$3 } = require_logging();
	const XsuaaService$5 = require_XsuaaService();
	const LOG$3 = getLogger$3("XsaService.js");
	/**
	* @typedef {import('../util/Types').ServiceCredentials} ServiceCredentials
	* @typedef {import('../util/Types').XsaServiceCredentials} XsaServiceCredentials
	* @typedef {import('../util/Types').ServiceConfig} ServiceConfig
	* @typedef {import('../util/Types').SecurityContextConfig} SecurityContextConfig
	* @typedef {import('../util/Types').TokenFetchOptions} TokenFetchOptions
	* @typedef {import('../util/Types').TokenFetchResponse} TokenFetchResponse
	* @typedef {import('../util/Types').RefreshableTokenFetchResponse} RefreshableTokenFetchResponse
	* @typedef {import('../util/Types').GrantType} GrantType
	*/
	/**
	* New SAP BTP applications should start with SAP Identity Services instead of XSA! See README for details.\
	* This {@link Service} class is constructed from XSA credentials to provide an API with selected functionality against that XSA service instance, e.g. token validation and token fetches.
	*/
	var XsaService$3 = class extends XsuaaService$5 {
		/**
		* @param {ServiceCredentials & XsaServiceCredentials} credentials 
		* @param {ServiceConfig} [serviceConfig={}]
		*/
		constructor(credentials, serviceConfig) {
			super(credentials, serviceConfig);
		}
		/**
		* @override
		* @param {String|XsaToken} token token as JWT or XsaToken object
		* @param {SecurityContextConfig} contextConfig 
		* @returns {Promise<XsaSecurityContext>}
		*/
		async createSecurityContext(token, contextConfig = {}) {
			if (typeof token === "string") token = new XsaToken$1(token);
			SecurityContext$2.buildContextConfig(contextConfig);
			const xsaToken = new XsaToken$1(token.jwt, {
				header: token.header,
				payload: token.payload
			});
			if (contextConfig.skipValidation !== true) await this.validateToken(xsaToken, contextConfig);
			const ctx = new XsaSecurityContext$1(this, xsaToken, contextConfig);
			for (let extension$1 of this.config.context?.extensions || []) await extension$1.extendSecurityContext(ctx);
			return ctx;
		}
		async validateTokenSignature(token, contextConfig) {
			const pemKeyFromConfig = this.credentials.verificationkey;
			if (!token.header.jku || !token.header.kid || token.header.kid == "legacy-token-key") {
				LOG$3.info("Token header contained no JKU or KID or the KID was 'legacy-token-key'");
				return this.#validateTokenSignatureWithFallback(token, pemKeyFromConfig);
			}
			try {
				await super.validateTokenSignature(token, contextConfig);
			} catch (error$1) {
				if (error$1 instanceof MissingKidError) {
					LOG$3.info("JWKS did not contain kid.");
					return this.#validateTokenSignatureWithFallback(token, pemKeyFromConfig);
				} else throw error$1;
			}
		}
		#validateTokenSignatureWithFallback(token, pemKeyFromConfig) {
			if (!pemKeyFromConfig) throw new MissingVerificationKeyError();
			else {
				LOG$3.info("Validating token signature with verificationkey from service configuration.");
				return Jwk.fromPEM(pemKeyFromConfig).validateSignature(token);
			}
		}
		/**
		* Fetches a token from this service with this service's client credentials.
		* @param {TokenFetchOptions} options
		* @returns {Promise<TokenFetchResponse>} response
		*/
		async fetchClientCredentialsToken(options = {}) {
			return super.fetchClientCredentialsToken(options);
		}
		/**
		* Fetches a user token from this service with the given username and password.
		* @param {String} username
		* @param {String} password
		* @param {TokenFetchOptions} options
		* @returns {Promise<TokenFetchResponse & RefreshableTokenFetchResponse>} response
		*/
		async fetchPasswordToken(username, password, options = {}) {
			return super.fetchPasswordToken(username, password, options);
		}
		/**
		* Fetches a JWT bearer token from this service with the given user token as assertion.
		* @param {String} assertion JWT bearer token used as assertion   
		* @param {TokenFetchOptions} options
		* @returns {Promise<TokenFetchResponse & RefreshableTokenFetchResponse>} response
		*/
		async fetchJwtBearerToken(assertion, options = {}) {
			return super.fetchJwtBearerToken(assertion, options);
		}
		/**
		* Determines the URL that can be used for fetching tokens from this service.
		* @param {GrantType} grant_type
		*/
		async getTokenUrl(grant_type) {
			let baseUrl;
			if (this.credentials.certificate) {
				this.validateCredentials("fetch token via certificate authentication", "certurl");
				baseUrl = this.credentials.certurl;
			} else {
				this.validateCredentials("fetch token via client secret authentication", "url");
				baseUrl = this.credentials.url;
			}
			return new URL(this.endpoints.token, baseUrl);
		}
		/**
		* @override
		* @inheritdoc
		*/
		get jwksBaseUrl() {
			this.validateCredentials("fetch JWKS", "url");
			return this.credentials.url;
		}
	};
	module.exports = XsaService$3;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/token/UaaToken.js
var require_UaaToken = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/token/UaaToken.js"(exports, module) {
	const XsuaaToken$1 = require_XsuaaToken();
	var UaaToken$2 = class extends XsuaaToken$1 {};
	module.exports = UaaToken$2;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/service/UaaService.js
var require_UaaService = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/service/UaaService.js"(exports, module) {
	const SecurityContext$1 = require_SecurityContext();
	const UaaSecurityContext$1 = require_UaaSecurityContext();
	const UaaToken$1 = require_UaaToken();
	const XsuaaService$4 = require_XsuaaService();
	/**
	* @typedef {import('../util/Types').ServiceCredentials} ServiceCredentials
	* @typedef {import('../util/Types').UaaServiceCredentials} UaaServiceCredentials
	* @typedef {import('../util/Types').ServiceConfig} ServiceConfig
	* @typedef {import('../util/Types').SecurityContextConfig} SecurityContextConfig
	*/
	/**
	* New SAP BTP applications should start with SAP Identity Services instead of CF UAA! See README for details.\
	* This {@link Service} class is constructed from CF UAA credentials to provide an API with selected functionality against that UAA service instance, e.g. token validation and token fetches.
	*/
	var UaaService$3 = class extends XsuaaService$4 {
		/**
		* @param {ServiceCredentials | UaaServiceCredentials} credentials 
		* @param {ServiceConfig} [serviceConfig={}]
		*/
		constructor(credentials, serviceConfig) {
			super(credentials, serviceConfig);
		}
		/**
		* @override
		* @param {String|UaaToken} token token as JWT or UaaToken object
		* @param {SecurityContextConfig} contextConfig 
		* @returns {Promise<UaaSecurityContext>}
		*/
		async createSecurityContext(token, contextConfig = {}) {
			if (typeof token === "string") token = new UaaToken$1(token);
			SecurityContext$1.buildContextConfig(contextConfig);
			const uaaToken = new UaaToken$1(token.jwt, {
				header: token.header,
				payload: token.payload
			});
			if (contextConfig.skipValidation !== true) await this.validateToken(uaaToken, contextConfig);
			const ctx = new UaaSecurityContext$1(this, uaaToken, contextConfig);
			for (let extension$1 of this.config.context?.extensions || []) await extension$1.extendSecurityContext(ctx);
			return ctx;
		}
		/**
		* @overrides
		* @inheritdoc
		*/
		acceptsTokenAudience(token) {
			this.validateCredentials("validate token audience", "clientid");
			if (!(token instanceof UaaToken$1)) token = new UaaToken$1(null, {
				header: token.header,
				payload: token.payload
			});
			const tokenAudiences = token.audiences?.length > 0 ? token.audiences : token.scopes ?? [];
			if (token.payload.cid) tokenAudiences.push(token.payload.cid);
			return tokenAudiences.some((a) => a === this.credentials.clientid || a.startsWith(`${this.credentials.clientid}.`));
		}
	};
	module.exports = UaaService$3;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/passport/XssecPassportStrategy.js
var require_XssecPassportStrategy = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/passport/XssecPassportStrategy.js"(exports, module) {
	const createSecurityContext$4 = require_createSecurityContext();
	const ConfigurationError$1 = require_ConfigurationError();
	const ValidationError$1 = require_ValidationError();
	const { getLogger: getLogger$2 } = require_logging();
	/**
	* @typedef {import("../service/Service")} Service
	* @typedef {import("../token/Token")} Token
	*/
	const LOG$2 = getLogger$2("XssecPassportStrategy.js");
	var XssecPassportStrategy$1 = class XssecPassportStrategy$1 {
		/** @type {Service|Service[]} service(s) against which incoming JWTs are authenticated */
		services;
		/** @type {string|Symbol} the property on the req object where the SecurityContext is placed after authentication. */
		reqProperty;
		/**
		* Creates a new XssecPassportStrategy that uses the provided service(s) to create security contexts for incoming requests.
		* @param {Service|Service[]} services 
		* @param {string|Symbol} [reqProperty="securityContext"] the property (Default: "securityContext") on the req object where the SecurityContext is placed after authentication.
		*/
		constructor(services, reqProperty = "securityContext") {
			this.name = "JWT";
			this.services = services;
			this.reqProperty = reqProperty;
		}
		async authenticate(req, passportOptions = {}) {
			try {
				const securityContext = await createSecurityContext$4(this.services, { req });
				if (passportOptions.scope) {
					if (!(typeof securityContext.checkScope === "function")) return this.error(new ConfigurationError$1("XssecPassportStrategy was configured with scope but the authentication was performed via a Service whose SecurityContext does not support checkLocalScope."));
					const hasScope = [passportOptions.scope].flatMap((s$1) => s$1).some((s$1) => securityContext.checkLocalScope(s$1));
					if (!hasScope) return this.fail("Token is missing required scope.", 403);
				}
				const passportUser = XssecPassportStrategy$1.#buildPassportUser(securityContext.token);
				req[this.reqProperty] = securityContext;
				req.tokenInfo = securityContext.token;
				return this.success(passportUser, securityContext);
			} catch (error$1) {
				req.xssecError = error$1;
				if (error$1 instanceof ValidationError$1) {
					LOG$2.debug("ValidationError:", error$1);
					return this.fail(401);
				} else return this.error(error$1);
			}
		}
		/**
		* @param {Token} token 
		*/
		static #buildPassportUser(token) {
			return {
				id: token.logonName || token.userName,
				name: {
					givenName: token.givenName,
					familyName: token.familyName
				},
				emails: [{ value: token.email }]
			};
		}
	};
	module.exports = XssecPassportStrategy$1;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/v3/createService.js
var require_createService = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/v3/createService.js"(exports, module) {
	const IdentityService$3 = require_IdentityService();
	const XsuaaService$3 = require_XsuaaService();
	const XsaService$2 = require_XsaService();
	const UaaService$2 = require_UaaService();
	module.exports = createServiceFromCredentials$1;
	/** Heuristic function for creating the correct service instance based on credentials. */
	function createServiceFromCredentials$1(credentials, serviceConfiguration) {
		if (credentials.xsappname && credentials.uaadomain) return new XsuaaService$3(credentials, serviceConfiguration);
		else if (credentials.xsappname && credentials.uaadomain == null) return new XsaService$2(credentials, serviceConfiguration);
		else if (credentials.xsappname == null && credentials.uaadomain) return new UaaService$2(credentials, serviceConfiguration);
		else return new IdentityService$3(credentials, serviceConfiguration);
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/v3/createSecurityContextV3.js
var require_createSecurityContextV3 = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/v3/createSecurityContextV3.js"(exports, module) {
	const createSecurityContext$3 = require_createSecurityContext();
	const ConfigurationError = require_ConfigurationError();
	const { getLogger: getLogger$1 } = require_logging();
	const XsuaaService$2 = require_XsuaaService();
	const IdentityService$2 = require_IdentityService();
	const UaaService$1 = require_IdentityService();
	const createServiceFromCredentials = require_createService();
	const ValidationError = require_ValidationError();
	const XsaService$1 = require_XsaService();
	/**
	* @typedef {import("../context/SecurityContext")} SecurityContext
	* @typedef {import("../token/Token")} Token
	* @typedef {import("../util/Types").SecurityContextConfig} SecurityContextConfig
	* @typedef {import("../util/Types").ServiceConfig} ServiceConfig
	*/
	const LOG$1 = getLogger$1("createSecurityContextV3.js");
	/**
	* @callback createSecurityContextV3Callback
	* @param {Error} error
	* @param {SecurityContext} xssec3SecurityContext
	* @param {Token} xssec3TokenInfo
	*/
	/**
	* 
	* @param {String} jwt 
	* @param {Object} configParameter 
	* @param {boolean|createSecurityContextV3Callback} forceType 
	* @param {createSecurityContextV3Callback} cb 
	*/
	async function createSecurityContextV3(jwt, configParameter, forceType, cb) {
		if (typeof forceType === "function") {
			cb = forceType;
			forceType = null;
		}
		if (cb == null || typeof cb !== "function") throw new ConfigurationError("The callback parameter must be a function.");
		let securityContext;
		try {
			if (configParameter == null) throw new ConfigurationError("The configParameter parameter must not be null or undefined.");
			else if (jwt == null) throw new ConfigurationError("The jwt parameter must not be null or undefined.");
			const contextConfig = buildContextConfig(configParameter, jwt);
			const serviceConfig = buildServiceConfig(configParameter);
			const services = buildServices(contextConfig.credentials, forceType, serviceConfig);
			securityContext = await createSecurityContext$3(services, contextConfig);
		} catch (error$1) {
			if (error$1 instanceof ValidationError) return cb(error$1, null, {
				isValid: () => false,
				getErrorObject: () => error$1
			});
			return cb(error$1);
		}
		return cb(null, securityContext, securityContext.token);
	}
	/**
	* Build new contextConfig structure based on old configParameter structure, which can have options potentially located inside credentials
	* @param {Object} configParameter 
	* @param {String} jwt 
	* @returns {SecurityContextConfig}
	*/
	function buildContextConfig(configParameter, jwt) {
		const contextConfig = configParameter.credentials ? configParameter : { credentials: configParameter };
		contextConfig.jwt = jwt;
		contextConfig.correlationId ??= contextConfig.credentials.correlationId;
		contextConfig.clientCertificatePem ??= contextConfig.x509Certificate ?? contextConfig.credentials.x509Certificate;
		return contextConfig;
	}
	/**
	* Build new serviceConfig structure based on old configParameter structure
	* @param {Object} configParameter 
	* @returns {ServiceConfig}
	*/
	function buildServiceConfig(configParameter) {
		const serviceConfig = {};
		serviceConfig.endpoints ??= configParameter.endpoints || {};
		serviceConfig.validation ??= configParameter.validation || {};
		serviceConfig.validation.x5t ??= {};
		serviceConfig.validation.x5t.enabled ??= configParameter.x5tValidation;
		serviceConfig.validation.jwks ??= configParameter.jwksCache || {};
		serviceConfig.validation.jwks.shared = true;
		if (configParameter.disableCache) LOG$1.warn(`The 'disableCache' option to disable the JWKS cache is not supported by the v3 compatibility package. The cache is always enabled.`);
		return serviceConfig;
	}
	/**
	* Build service objects based on credentials and forceType
	* @param {Array} credentials 
	* @param {boolean} forceType 
	* @param {ServiceConfig} serviceConfig 
	* @returns {Service[]}
	*/
	function buildServices(credentials, forceType, serviceConfig) {
		const credentialsArray = Array.isArray(credentials) ? credentials : [credentials];
		insertXsAppnameFromEnv(credentialsArray);
		if (forceType) LOG$1.info(`forceType === ${forceType}. Creating ${forceType} service(s) from credentials.`);
		switch (forceType) {
			case "XSUAA": return credentialsArray.map((c) => new XsuaaService$2(c, serviceConfig));
			case "XSA": return credentialsArray.map((c) => new XsaService$1(c, serviceConfig));
			case "IAS": return credentialsArray.map((c) => new IdentityService$2(c, serviceConfig));
			case "UAA": return credentialsArray.map((c) => new UaaService$1(c, serviceConfig));
			case null:
			case void 0:
			default: return credentialsArray.map((c) => createServiceFromCredentials(c, serviceConfig));
		}
	}
	/**
	* Backward-compatible filling of xsappname in credentials with environment variable XSAPPNAME if present.
	* @param {Array} credentials 
	*/
	function insertXsAppnameFromEnv(credentials) {
		if (process.env.XSAPPNAME) for (const c of credentials) c.xsappname = process.env.XSAPPNAME;
	}
	module.exports = createSecurityContextV3;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/v3/requestsV3.js
var require_requestsV3 = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/v3/requestsV3.js"(exports, module) {
	const IdentityService$1 = require_IdentityService();
	const XsuaaService$1 = require_XsuaaService();
	async function requestClientCredentialsToken(subdomain, config$2, additionalAttributes, zoneId, cb) {
		if (typeof zoneId === "function") {
			cb = zoneId;
			zoneId = null;
		}
		const credentials = config$2.credentials ?? config$2;
		const service = config$2.type?.toUpperCase() === "IAS" ? new IdentityService$1(credentials) : new XsuaaService$1(credentials);
		const options = {
			authorities: additionalAttributes,
			correlationId: config$2.correlationId,
			resource: config$2.resource,
			scope: config$2.scopes,
			tenant: subdomain,
			timeout: config$2.timeout,
			app_tid: zoneId
		};
		try {
			const response = await service.fetchClientCredentialsToken(options);
			return cb(null, response.access_token, response);
		} catch (e) {
			return cb(e);
		}
	}
	async function requestPasswordUserToken(subdomain, config$2, additionalAttributes, cb) {
		const credentials = config$2.credentials ?? config$2;
		const service = config$2.type?.toUpperCase() === "IAS" ? new IdentityService$1(credentials) : new XsuaaService$1(credentials);
		const options = {
			authorities: additionalAttributes,
			correlationId: config$2.correlationId,
			resource: config$2.resource,
			scope: config$2.scopes,
			tenant: subdomain,
			timeout: config$2.timeout
		};
		try {
			const response = await service.fetchPasswordToken(config$2.username, config$2.password, options);
			return cb(null, config$2.type?.toUpperCase() === "IAS" ? response.id_token : response.access_token, response);
		} catch (e) {
			return cb(e);
		}
	}
	async function requestUserToken(appToken, config$2, additionalAttributes, scopes, subdomain, zoneId, cb) {
		if (typeof zoneId === "function") {
			cb = zoneId;
			zoneId = null;
		}
		const credentials = config$2.credentials ?? config$2;
		const service = config$2.type?.toUpperCase() === "IAS" ? new IdentityService$1(credentials) : new XsuaaService$1(credentials);
		const options = {
			authorities: additionalAttributes,
			correlationId: config$2.correlationId,
			resource: config$2.resource,
			scope: scopes ?? config$2.scopes,
			tenant: subdomain,
			timeout: config$2.timeout,
			app_tid: zoneId,
			zid: zoneId
		};
		try {
			const response = await service.fetchJwtBearerToken(appToken, options);
			return cb(null, config$2.type?.toUpperCase() === "IAS" ? response.id_token : response.access_token, response);
		} catch (e) {
			return cb(e);
		}
	}
	module.exports = {
		requestClientCredentialsToken,
		requestPasswordUserToken,
		requestUserToken
	};
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/v3/constantsV3.js
var require_constantsV3 = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/v3/constantsV3.js"(exports) {
	Object.defineProperty(exports, "XSAPPNAMEPREFIX", {
		value: "$XSAPPNAME.",
		enumerable: true,
		writable: false,
		configurable: false
	});
	Object.defineProperty(exports, "SYSTEM", {
		value: "System",
		enumerable: true,
		writable: false,
		configurable: false
	});
	Object.defineProperty(exports, "JOBSCHEDULER", {
		value: "JobScheduler",
		enumerable: true,
		writable: false,
		configurable: false
	});
	Object.defineProperty(exports, "HDB", {
		value: "HDB",
		enumerable: true,
		writable: false,
		configurable: false
	});
	Object.defineProperty(exports, "GRANTTYPE_AUTHCODE", {
		value: "authorization_code",
		enumerable: true,
		writable: false,
		configurable: false
	});
	Object.defineProperty(exports, "GRANTTYPE_PASSWORD", {
		value: "password",
		enumerable: true,
		writable: false,
		configurable: false
	});
	Object.defineProperty(exports, "GRANTTYPE_CLIENTCREDENTIAL", {
		value: "client_credentials",
		enumerable: true,
		writable: false,
		configurable: false
	});
	Object.defineProperty(exports, "GRANTTYPE_USERTOKEN", {
		value: "user_token",
		enumerable: true,
		writable: false,
		configurable: false
	});
	Object.defineProperty(exports, "GRANTTYPE_SAML2BEARER", {
		value: "urn:ietf:params:oauth:grant-type:saml2-bearer",
		enumerable: true,
		writable: false,
		configurable: false
	});
	Object.defineProperty(exports, "TYPE_USER_TOKEN", {
		value: 0,
		enumerable: true,
		writable: false,
		configurable: false
	});
	Object.defineProperty(exports, "TYPE_CLIENT_CREDENTIALS_TOKEN", {
		value: 1,
		enumerable: true,
		writable: false,
		configurable: false
	});
	Object.defineProperty(exports, "USER_AGENT", {
		value: "nodejs-xssec-3",
		enumerable: true,
		writable: false,
		configurable: false
	});
	Object.defineProperty(exports, "FWD_CLIENT_CERT_HEADER", {
		value: "x-forwarded-client-cert",
		enumerable: true,
		writable: false,
		configurable: false
	});
	Object.defineProperty(exports, "CNF_X5T_CLAIM", {
		value: "x5t#S256",
		enumerable: true,
		writable: false,
		configurable: false
	});
	Object.defineProperty(exports, "PEM_HEADER", {
		value: "-----BEGIN CERTIFICATE-----",
		enumerable: true,
		writable: false,
		configurable: false
	});
	Object.defineProperty(exports, "PEM_FOOTER", {
		value: "-----END CERTIFICATE-----",
		enumerable: true,
		writable: false,
		configurable: false
	});
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/v3/XssecPassportStrategyV3.js
var require_XssecPassportStrategyV3 = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/v3/XssecPassportStrategyV3.js"(exports, module) {
	const createSecurityContext$2 = require_createSecurityContextV3();
	const { getLogger } = require_logging();
	const { FWD_CLIENT_CERT_HEADER } = require_constantsV3();
	const LOG = getLogger("XssecPassportStrategyV3.js");
	function JWTStrategy$1(options, forceType) {
		this.options = options;
		this.name = "JWT";
		this._forceType = forceType;
	}
	function SimpleError(errorStr) {
		const errobj = new Error(errorStr);
		this.getErrorObject = function() {
			return errobj;
		};
	}
	JWTStrategy$1.prototype.authenticate = function(req, passportOptions) {
		var authorization = req.headers.authorization;
		const authParams = passportOptions;
		if (!authorization) {
			LOG.debug("Missing Authorization header");
			req.tokenInfo = new SimpleError("Missing Authorization header");
			return this.fail(401);
		}
		var parts = authorization.split(" ");
		if (parts.length < 2) {
			LOG.debug("Invalid Authorization header format");
			req.tokenInfo = new SimpleError("Invalid Authorization header format");
			return this.fail(400);
		}
		var scheme = parts[0];
		var token = parts[1];
		if (scheme.toLowerCase() !== "bearer") {
			LOG.debug("Authorization header is not a Bearer token");
			req.tokenInfo = new SimpleError("Authorization header is not a Bearer token");
			return this.fail(401);
		}
		const correlationId = req.headers["x-correlationid"] || req.headers["x-vcap-request-id"];
		const x509Certificate = req.headers[FWD_CLIENT_CERT_HEADER];
		try {
			function callback(err, ctx, tokenInfo) {
				req.tokenInfo = tokenInfo;
				if (err) {
					if (!req.tokenInfo) req.tokenInfo = new SimpleError(err.toString());
					return err.statuscode ? self$1.fail(err.statuscode, err) : self$1.error(err);
				}
				if (authParams && authParams.scope) {
					var scopes = Array.isArray(authParams.scope) ? authParams.scope : [authParams.scope];
					for (var scope of scopes) if (!ctx.checkScope(self$1.options.xsappname + "." + scope)) return self$1.fail(403);
				}
				var jwtLogonName = ctx.getLogonName();
				var jwtGivenName = ctx.getGivenName();
				var jwtFamilyName = ctx.getFamilyName();
				var jwtEmail = ctx.getEmail();
				var user = !jwtLogonName ? {} : {
					id: jwtLogonName,
					name: {
						givenName: jwtGivenName,
						familyName: jwtFamilyName
					},
					emails: [{ value: jwtEmail }]
				};
				self$1.success(user, ctx);
			}
			var self$1 = this;
			var paramA = this._forceType ? this._forceType : callback;
			var paramB = this._forceType ? callback : void 0;
			const config$2 = {
				...passportOptions,
				credentials: this.options,
				correlationId
			};
			if (x509Certificate) config$2.x509Certificate = x509Certificate;
			createSecurityContext$2(token, config$2, paramA, paramB);
		} catch (err) {
			LOG.error("JWT verification error: ", err);
			this.error(err);
		}
	};
	/**
	* Necessary for backwards compatibility: up to version 4.0.4, the JWTStrategy was not exported directly but as a property called JWTStrategy in the export
	*/
	JWTStrategy$1.JWTStrategy = JWTStrategy$1;
	module.exports = JWTStrategy$1;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/v3/index.js
var require_v3 = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/v3/index.js"(exports, module) {
	const createSecurityContext$1 = require_createSecurityContextV3();
	const requests = require_requestsV3();
	const constants$1 = require_constantsV3();
	const TokenInfo = require_Token();
	const JWTStrategy = require_XssecPassportStrategyV3();
	module.exports = {
		createSecurityContext: createSecurityContext$1,
		requests,
		constants: constants$1,
		TokenInfo,
		JWTStrategy
	};
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/util/Types.js
var require_Types = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/util/Types.js"(exports, module) {
	/** @typedef {import('crypto').X509Certificate} X509Certificate */
	/**
	* @typedef {object} ServiceCredentials
	* @property {string} clientid
	* @property {string} url
	* @property {string} [certificate] PEM-encoded client certificate
	* @property {string} [key] PEM-encoded client key
	* @property {string} [clientsecret] to be used as alternative authentication method to mTLS-based authentication. Must be defined when `certificate` is NOT defined.
	*/
	/**
	* @typedef {object} IdentityServiceCredentials
	* @property {string} app_tid tenant
	*/
	/**
	* @typedef {object} XsuaaServiceCredentials
	* @property {string} xsappname
	* @property {string} uaadomain domain of service
	* @property {string} [certurl] URL to fetch tokens based on mTLS. Must be defined when `certificate` is defined.
	*/
	/**
	* @typedef {object} XsaServiceCredentials
	* @property {string} xsappname
	* @property {string} [certurl] URL to fetch tokens based on mTLS. Must be defined when `certificate` is defined.
	*/
	/**
	* @typedef {object} UaaServiceCredentials
	* @property {string} uaadomain domain of service
	*/
	/**
	* @typedef {object} ServiceConfig
	* @property {object} [endpoints] key/value object whose entries override default endpoints of service
	* @property {object} [validation] configures different kinds of validation
	* @property {object} [validation.jwks] JWKS cache configuration
	* @property {boolean} [validation.jwks.shared=false] if true, shares the JWKS cache with the first instance of the same Service type that was created with this flag set to true, otherwise creates a new JWKS cache for each instance
	* @property {number} [validation.jwks.expirationTime=1800000] time in *ms* since last refresh until a JWK counts as expired which requires a synchronous refresh on the next validation using this JWK
	* @property {number} [validation.jwks.refreshPeriod=900000] time in *ms* since last refresh until a JWK counts as stale which triggers an asynchronous refresh in the background on the next validation using this JWK
	* @property {object} [requests] default configuration for requests against this Service
	* @property {number} [requests.timeout=2000] request timeout in ms 
	*/
	/**
	* @typedef {object} IdentityServiceConfig
	* @property {object} [validation] configures different kinds of validation
	* @property {object} [validation.x5t] configures x5t validation
	* @property {boolean} [validation.x5t.enabled=false] enables x5t validation
	* @property {object} [validation.proofToken] configures proof token validation
	* @property {boolean} [validation.proofToken.enabled=false] enables proof token validation
	* @property {Array} [extensions] list of security context extensions that implement a context => Promise\<void\> function called extendSecurityContext
	*/
	/**
	* @typedef {object} SecurityContextConfig
	* @property {string} [jwt] jwt token used to build the context
	* @property {string} [clientCertificatePem] client certificate in PEM format
	* @property {X509Certificate} [clientCertificate] parsed client certificate which will be automatically created from clientCertificatePem
	* @property {string} [correlationId] correlation id that will be sent along with external requests
	* @property {Request} [req] request object from which the jwt and additional information, such as a correlation id and the forwarded client certificate, will be extracted if not provided directly
	* @property {boolean} [skipValidation=false] if true, the SecurityContext is created without validating the token. Caution! This flag MUST NOT BE ENABLED, except for testing or when the token has already been validated before, e.g. in DwC contexts.
	*/
	/** 
	* @typedef {object} TokenFetchOptions
	* @property {string} [correlationId] correlationId to correlate log entries with the request
	* @property {number} [timeout] request timeout in ms 
	* @property {"jwt"|"opaque"} [token_format] "jwt" or "opaque" (Default: "jwt")
	*/
	/** 
	* @typedef {object} IdentityServiceTokenFetchOptions
	* @property {string} [app_tid] can be used to override the app_tid from credentials for this token fetch
	* @property {string|string[]} [resource] name (or array of names) of API dependency to another application that shall be consumed with this token in the format urn:sap:identity:application:provider:name:<dependencyName>
	*/
	/** 
	* @typedef {object} XsuaaTokenFetchOptions
	* @property {string[]} [scope] requested scope of token
	* @property {string} [tenant] (aka subdomain) the subdomain of a tenant on the same subaccount from which to fetch a token. Note that this parameter does NOT accept a tenant ID. To pass a zone ID, use the zid parameter instead.
	* @property {string} [zid] the zone id from which to fetch a token
	* @property {object} [authorities] additional authorities that can be freely chosen during token fetch that will be put into the token under az_attr claim (see https://github.com/cloudfoundry/uaa/blob/24c0c23fa36d7c604e365e1be4df658d55dcb211/docs/UAA-APIs.rst#support-for-additional-authorization-attributes)
	*/
	/**
	* @typedef {"client_credentials"|"password"|"urn:ietf:params:oauth:grant-type:jwt-bearer"} GrantType
	*/
	/**
	* @typedef {object} TokenFetchResponse
	* @property {string} access_token access token as JWT
	* @property {number} expires_in number of seconds until the access token expires
	* @property {string} token_type
	*/
	/**
	* @typedef {object} IdTokenFetchResponse
	* @property {string} id_token - ID token as JWT
	*/
	/**
	* @typedef {object} RefreshableTokenFetchResponse
	* @property {string} refresh_token
	*/
	/** @typedef {TokenFetchResponse & IdTokenFetchResponse & RefreshableTokenFetchResponse} IdentityServicePasswordTokenFetchResponse */
	/** @typedef {TokenFetchResponse & IdTokenFetchResponse & RefreshableTokenFetchResponse} IdentityServiceJwtBearerTokenFetchResponse */
	/**
	* @typedef {object} JwtHeader
	* @property {string} [kid]
	* @property {string} [alg]
	*/
	/**
	* @typedef {object} JwtPayload
	* Standard claims https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.
	* @property {string} [iss]
	* @property {string} [sub]
	* @property {string | string[]} [aud]
	* @property {number} [exp]
	* @property {number} [nbf]
	* @property {number} [iat]
	* @property {string} [jti]
	*/
	module.exports = {};
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/context/SecurityContextSymbol.js
var require_SecurityContextSymbol = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/context/SecurityContextSymbol.js"(exports, module) {
	/**
	* The symbol which should be used as location on the req object for the SecurityContext after authentication.
	* The middleware of IdentityServiceAuthProvider from @sap/ams expects to find it there to create an Authorization object 
	* from the SecurityContext for privilege checks.
	*/
	const SECURITY_CONTEXT$1 = Symbol("XSSEC_SECURITY_CONTEXT");
	module.exports = SECURITY_CONTEXT$1;
} });

//#endregion
//#region node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/index.js
var require_src = __commonJS({ "node_modules/.pnpm/@sap+xssec@4.6.0/node_modules/@sap/xssec/src/index.js"(exports, module) {
	const createSecurityContext = require_createSecurityContext();
	const SecurityContext = require_SecurityContext();
	const IdentityServiceSecurityContext = require_IdentityServiceSecurityContext();
	const XsuaaSecurityContext = require_XsuaaSecurityContext();
	const XsaSecurityContext = require_XsaSecurityContext();
	const UaaSecurityContext = require_UaaSecurityContext();
	const Service = require_Service();
	const IdentityService = require_IdentityService();
	const XsuaaService = require_XsuaaService();
	const XsaService = require_XsaService();
	const UaaService = require_UaaService();
	const XssecPassportStrategy = require_XssecPassportStrategy();
	const Token = require_Token();
	const IdentityServiceToken = require_IdentityServiceToken();
	const XsuaaToken = require_XsuaaToken();
	const XsaToken = require_XsaToken();
	const UaaToken = require_UaaToken();
	const errors = require_error();
	const constants = require_constants();
	const v3 = require_v3();
	const Types = require_Types();
	const SECURITY_CONTEXT = require_SecurityContextSymbol();
	module.exports = {
		createSecurityContext,
		SecurityContext,
		IdentityServiceSecurityContext,
		XsuaaSecurityContext,
		XsaSecurityContext,
		UaaSecurityContext,
		Service,
		IdentityService,
		XsuaaService,
		XsaService,
		UaaService,
		XssecPassportStrategy,
		Token,
		IdentityServiceToken,
		XsuaaToken,
		XsaToken,
		UaaToken,
		errors,
		constants,
		v3,
		Types,
		SECURITY_CONTEXT
	};
} });
/**
* @typedef {import("express").Request & { [SECURITY_CONTEXT]: SecurityContext }} AuthenticatedRequest
* @typedef {import("express").Request & { [SECURITY_CONTEXT]: IdentityServiceSecurityContext }} IdentityServiceRequest
* @typedef {import("express").Request & { [SECURITY_CONTEXT]: XsuaaSecurityContext }} XsuaaRequest
* @typedef {import("express").Request & { [SECURITY_CONTEXT]: XsaSecurityContext }} XsaRequest
* @typedef {import("express").Request & { [SECURITY_CONTEXT]: UaaSecurityContext }} UaaRequest
*/
//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/environment-accessor/xsuaa.js
var require_xsuaa = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/environment-accessor/xsuaa.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getXsuaaServiceCredentials = getXsuaaServiceCredentials;
	exports.clearXsuaaServices = clearXsuaaServices;
	exports.getXsuaaService = getXsuaaService;
	const xssec_1$1 = require_src();
	const service_credentials_1 = require_service_credentials();
	/**
	* @internal
	* Takes a decoded JWT and uses the client_id and audience claims to determine the XSUAA service instance
	* that issued the JWT. Returns the credentials if a match is found, otherwise throws an error.
	* If no decoded JWT is specified, then returns the first existing XSUAA credential service plan "application".
	* @param token - Either an encoded or decoded JWT.
	* @returns The credentials for a match, otherwise `null`.
	*/
	function getXsuaaServiceCredentials(token) {
		const credentials = (0, service_credentials_1.getServiceCredentials)("xsuaa", token);
		if (!credentials) throw new Error(token ? "Could not find XSUAA service binding matching the token." : "Could not find XSUAA service binding.");
		return credentials;
	}
	const xsuaaServices = {};
	/**
	* @internal
	* Clears the cache of XSUAA services.
	* Should only be used for testing purposes.
	*/
	function clearXsuaaServices() {
		Object.keys(xsuaaServices).forEach((key$1) => delete xsuaaServices[key$1]);
	}
	/**
	* @internal
	* @param options - Options on how to configure the XSUAA service.
	* @param options.disableCache - Value to enable or disable JWKS cache in xssec library. Defaults to false.
	* @param options.jwt - Either a JWT payload or an encoded JWT. Will be ignored if `credentials` are provided. If not provided, the first XSUAA service binding is used.
	* @param options.credentials - Xsuaa service credentials. If not provided, the credentials are fetched based on the JWT
	* @returns An instance of the xsuaa service that the application is bound to.
	*/
	function getXsuaaService(options) {
		const credentials = options?.credentials || getXsuaaServiceCredentials(options?.jwt);
		const disableCache = !!options?.disableCache;
		const serviceConfig = disableCache ? { validation: { jwks: {
			expirationTime: 0,
			refreshPeriod: 0
		} } } : void 0;
		const cacheKey = `${credentials.clientid}:${disableCache}`;
		if (!xsuaaServices[cacheKey]) xsuaaServices[cacheKey] = new xssec_1$1.XsuaaService(credentials, serviceConfig);
		return xsuaaServices[cacheKey];
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/environment-accessor/index.js
var require_environment_accessor = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/environment-accessor/index.js"(exports) {
	var __createBinding$9 = exports && exports.__createBinding || (Object.create ? function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc$1 = Object.getOwnPropertyDescriptor(m$1, k);
		if (!desc$1 || ("get" in desc$1 ? !m$1.__esModule : desc$1.writable || desc$1.configurable)) desc$1 = {
			enumerable: true,
			get: function() {
				return m$1[k];
			}
		};
		Object.defineProperty(o, k2, desc$1);
	} : function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		o[k2] = m$1[k];
	});
	var __exportStar$7 = exports && exports.__exportStar || function(m$1, exports$1) {
		for (var p in m$1) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports$1, p)) __createBinding$9(exports$1, m$1, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar$7(require_destination$2(), exports);
	__exportStar$7(require_service_bindings(), exports);
	__exportStar$7(require_environment_accessor_types(), exports);
	__exportStar$7(require_service_credentials(), exports);
	__exportStar$7(require_xsuaa(), exports);
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/jwt/binding.js
var require_binding = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/jwt/binding.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.decodeOrMakeJwt = decodeOrMakeJwt;
	exports.getTenantIdFromBinding = getTenantIdFromBinding;
	const environment_accessor_1$7 = require_environment_accessor();
	const jwt_1$14 = require_jwt$1();
	/**
	* This method either decodes the given JWT or tries to retrieve the tenant from a service binding (XSUAA, IAS or destination) as `zid`.
	* @param options - Options passed to register the destination containing the JWT.
	* @returns The decoded JWT or a dummy JWT containing the tenant identifier (zid).
	* @internal
	*/
	function decodeOrMakeJwt(jwt) {
		if (jwt) {
			const decodedJwt = typeof jwt === "string" ? (0, jwt_1$14.decodeJwt)(jwt) : jwt;
			if ((0, jwt_1$14.getTenantId)(decodedJwt)) return decodedJwt;
		}
		const providerTenantId = getTenantIdFromBinding();
		if (providerTenantId) return { zid: providerTenantId };
	}
	/**
	* @internal
	* @returns The tenant identifier from the XSUAA, identity or destination service binding.
	*/
	function getTenantIdFromBinding() {
		return (0, environment_accessor_1$7.getServiceCredentials)("xsuaa")?.tenantid || (0, environment_accessor_1$7.getServiceCredentials)("identity")?.app_tid || (0, environment_accessor_1$7.getServiceCredentials)("destination")?.tenantid;
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/jwt/verify.js
var require_verify = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/jwt/verify.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.verifyJwt = verifyJwt;
	const xssec_1 = require_src();
	const util_1$25 = require_dist$4();
	const environment_accessor_1$6 = require_environment_accessor();
	/**
	* Verifies the given JWT and returns the decoded payload.
	* @param jwt - JWT to be verified
	* @param options - Options to control certain aspects of JWT verification behavior.
	* @returns A Promise to the decoded and verified JWT.
	* @internal
	*/
	async function verifyJwt(jwt, options) {
		const disableCache = !{
			...defaultVerifyJwtOptions,
			...options
		}.cacheVerificationKeys;
		const xsuaaService = (0, environment_accessor_1$6.getXsuaaService)({
			disableCache,
			jwt
		});
		const { token } = await (0, xssec_1.createSecurityContext)(xsuaaService, { jwt }).catch((e) => {
			throw new util_1$25.ErrorWithCause("Failed to verify JWT.", e);
		});
		return token.payload;
	}
	const defaultVerifyJwtOptions = { cacheVerificationKeys: true };
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/jwt/index.js
var require_jwt = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/jwt/index.js"(exports) {
	var __createBinding$8 = exports && exports.__createBinding || (Object.create ? function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc$1 = Object.getOwnPropertyDescriptor(m$1, k);
		if (!desc$1 || ("get" in desc$1 ? !m$1.__esModule : desc$1.writable || desc$1.configurable)) desc$1 = {
			enumerable: true,
			get: function() {
				return m$1[k];
			}
		};
		Object.defineProperty(o, k2, desc$1);
	} : function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		o[k2] = m$1[k];
	});
	var __exportStar$6 = exports && exports.__exportStar || function(m$1, exports$1) {
		for (var p in m$1) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports$1, p)) __createBinding$8(exports$1, m$1, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar$6(require_binding(), exports);
	__exportStar$6(require_jwt$1(), exports);
	__exportStar$6(require_verify(), exports);
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/client-credentials-token-cache.js
var require_client_credentials_token_cache = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/client-credentials-token-cache.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.clientCredentialsTokenCache = void 0;
	exports.getCacheKey = getCacheKey;
	const util_1$24 = require_dist$4();
	const cache_1$2 = require_cache$1();
	const logger$21 = (0, util_1$24.createLogger)({
		package: "connectivity",
		messageContext: "client-credentials-token-cache"
	});
	const ClientCredentialsTokenCache = (cache$1) => ({
		getToken: (tenantId, clientId) => cache$1.get(getCacheKey(tenantId, clientId)),
		cacheToken: (tenantId, clientId, token) => {
			cache$1.set(getCacheKey(tenantId, clientId), {
				entry: token,
				expires: token.expires_in ? Date.now() + token.expires_in * 1e3 : void 0
			});
		},
		clear: () => {
			cache$1.clear();
		},
		getCacheInstance: () => cache$1
	});
	/** *
	* @internal
	* @param tenantId - The ID of the tenant to cache the token for.
	* @param clientId - ClientId to fetch the token
	* @returns the token
	*/
	function getCacheKey(tenantId, clientId) {
		if (!tenantId) {
			logger$21.warn("Cannot create cache key for client credentials token cache. The given tenant ID is undefined.");
			return;
		}
		if (!clientId) {
			logger$21.warn("Cannot create cache key for client credentials token cache. The given client ID is undefined.");
			return;
		}
		return [tenantId, clientId].join(":");
	}
	/**
	* @internal
	*/
	exports.clientCredentialsTokenCache = ClientCredentialsTokenCache(new cache_1$2.Cache(
		5 * 60 * 1e3
		/* 5 minutes in ms */
));
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+resilience@4.0.2/node_modules/@sap-cloud-sdk/resilience/dist/timeout.js
var require_timeout = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+resilience@4.0.2/node_modules/@sap-cloud-sdk/resilience/dist/timeout.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.timeout = timeout;
	const util_1$23 = require_dist$4();
	const defaultTimeout = 1e4;
	const logger$20 = (0, util_1$23.createLogger)({
		package: "resilience",
		messageContext: "timeout"
	});
	/**
	* Helper method to build a timeout middleware.
	* @param timeoutValue - Timeout in milliseconds. Default value is 10000.
	* @returns The middleware adding a timeout to the function.
	*/
	function timeout(timeoutValue = defaultTimeout) {
		if (timeoutValue <= 0) throw new Error("Timeout must be greater than 0.");
		if (timeoutValue < 10) logger$20.warn(`The timeout of ${timeoutValue} ms is too low. Make sure this is not intentional.`);
		return function(options) {
			const message = `Request to URL: ${options.context.uri} ran into a timeout after ${timeoutValue}ms.`;
			return (arg) => wrapInTimeout(options.fn(arg), timeoutValue, message);
		};
	}
	/**
	* Creates a promise for a timeout race.
	* @internal
	* @param timeoutValue - Value for the timeout in milliseconds.
	* message: string - Error message thrown when timeout is exceeded.
	* @returns A promise which times out after the given time and the node timeout instance to clear the timeout if not needed anymore.
	*/
	function getTimeoutPromise(timeoutValue, message) {
		let timeoutNode;
		const promise = new Promise((resolve, reject) => {
			timeoutNode = setTimeout(() => reject(new Error(message)), timeoutValue);
		});
		return [promise, timeoutNode];
	}
	/**
	* @param promise - Promise
	* @param timeoutValue - Value for the timeout in milliseconds.
	* @internal
	*/
	async function wrapInTimeout(promise, timeoutValue, message) {
		const [timeoutPromise, timeoutInstance] = getTimeoutPromise(timeoutValue, message);
		const withClearTimeout = promise.finally(() => {
			clearTimeout(timeoutInstance);
		});
		return Promise.race([withClearTimeout, timeoutPromise]);
	}
} });

//#endregion
//#region node_modules/.pnpm/retry@0.13.1/node_modules/retry/lib/retry_operation.js
var require_retry_operation = __commonJS({ "node_modules/.pnpm/retry@0.13.1/node_modules/retry/lib/retry_operation.js"(exports, module) {
	function RetryOperation$1(timeouts, options) {
		if (typeof options === "boolean") options = { forever: options };
		this._originalTimeouts = JSON.parse(JSON.stringify(timeouts));
		this._timeouts = timeouts;
		this._options = options || {};
		this._maxRetryTime = options && options.maxRetryTime || Infinity;
		this._fn = null;
		this._errors = [];
		this._attempts = 1;
		this._operationTimeout = null;
		this._operationTimeoutCb = null;
		this._timeout = null;
		this._operationStart = null;
		this._timer = null;
		if (this._options.forever) this._cachedTimeouts = this._timeouts.slice(0);
	}
	module.exports = RetryOperation$1;
	RetryOperation$1.prototype.reset = function() {
		this._attempts = 1;
		this._timeouts = this._originalTimeouts.slice(0);
	};
	RetryOperation$1.prototype.stop = function() {
		if (this._timeout) clearTimeout(this._timeout);
		if (this._timer) clearTimeout(this._timer);
		this._timeouts = [];
		this._cachedTimeouts = null;
	};
	RetryOperation$1.prototype.retry = function(err) {
		if (this._timeout) clearTimeout(this._timeout);
		if (!err) return false;
		var currentTime = new Date().getTime();
		if (err && currentTime - this._operationStart >= this._maxRetryTime) {
			this._errors.push(err);
			this._errors.unshift(new Error("RetryOperation timeout occurred"));
			return false;
		}
		this._errors.push(err);
		var timeout$1 = this._timeouts.shift();
		if (timeout$1 === void 0) if (this._cachedTimeouts) {
			this._errors.splice(0, this._errors.length - 1);
			timeout$1 = this._cachedTimeouts.slice(-1);
		} else return false;
		var self$1 = this;
		this._timer = setTimeout(function() {
			self$1._attempts++;
			if (self$1._operationTimeoutCb) {
				self$1._timeout = setTimeout(function() {
					self$1._operationTimeoutCb(self$1._attempts);
				}, self$1._operationTimeout);
				if (self$1._options.unref) self$1._timeout.unref();
			}
			self$1._fn(self$1._attempts);
		}, timeout$1);
		if (this._options.unref) this._timer.unref();
		return true;
	};
	RetryOperation$1.prototype.attempt = function(fn, timeoutOps) {
		this._fn = fn;
		if (timeoutOps) {
			if (timeoutOps.timeout) this._operationTimeout = timeoutOps.timeout;
			if (timeoutOps.cb) this._operationTimeoutCb = timeoutOps.cb;
		}
		var self$1 = this;
		if (this._operationTimeoutCb) this._timeout = setTimeout(function() {
			self$1._operationTimeoutCb();
		}, self$1._operationTimeout);
		this._operationStart = new Date().getTime();
		this._fn(this._attempts);
	};
	RetryOperation$1.prototype.try = function(fn) {
		console.log("Using RetryOperation.try() is deprecated");
		this.attempt(fn);
	};
	RetryOperation$1.prototype.start = function(fn) {
		console.log("Using RetryOperation.start() is deprecated");
		this.attempt(fn);
	};
	RetryOperation$1.prototype.start = RetryOperation$1.prototype.try;
	RetryOperation$1.prototype.errors = function() {
		return this._errors;
	};
	RetryOperation$1.prototype.attempts = function() {
		return this._attempts;
	};
	RetryOperation$1.prototype.mainError = function() {
		if (this._errors.length === 0) return null;
		var counts = {};
		var mainError = null;
		var mainErrorCount = 0;
		for (var i = 0; i < this._errors.length; i++) {
			var error$1 = this._errors[i];
			var message = error$1.message;
			var count = (counts[message] || 0) + 1;
			counts[message] = count;
			if (count >= mainErrorCount) {
				mainError = error$1;
				mainErrorCount = count;
			}
		}
		return mainError;
	};
} });

//#endregion
//#region node_modules/.pnpm/retry@0.13.1/node_modules/retry/lib/retry.js
var require_retry$2 = __commonJS({ "node_modules/.pnpm/retry@0.13.1/node_modules/retry/lib/retry.js"(exports) {
	var RetryOperation = require_retry_operation();
	exports.operation = function(options) {
		var timeouts = exports.timeouts(options);
		return new RetryOperation(timeouts, {
			forever: options && (options.forever || options.retries === Infinity),
			unref: options && options.unref,
			maxRetryTime: options && options.maxRetryTime
		});
	};
	exports.timeouts = function(options) {
		if (options instanceof Array) return [].concat(options);
		var opts = {
			retries: 10,
			factor: 2,
			minTimeout: 1 * 1e3,
			maxTimeout: Infinity,
			randomize: false
		};
		for (var key$1 in options) opts[key$1] = options[key$1];
		if (opts.minTimeout > opts.maxTimeout) throw new Error("minTimeout is greater than maxTimeout");
		var timeouts = [];
		for (var i = 0; i < opts.retries; i++) timeouts.push(this.createTimeout(i, opts));
		if (options && options.forever && !timeouts.length) timeouts.push(this.createTimeout(i, opts));
		timeouts.sort(function(a, b) {
			return a - b;
		});
		return timeouts;
	};
	exports.createTimeout = function(attempt, opts) {
		var random$1 = opts.randomize ? Math.random() + 1 : 1;
		var timeout$1 = Math.round(random$1 * Math.max(opts.minTimeout, 1) * Math.pow(opts.factor, attempt));
		timeout$1 = Math.min(timeout$1, opts.maxTimeout);
		return timeout$1;
	};
	exports.wrap = function(obj, options, methods) {
		if (options instanceof Array) {
			methods = options;
			options = null;
		}
		if (!methods) {
			methods = [];
			for (var key$1 in obj) if (typeof obj[key$1] === "function") methods.push(key$1);
		}
		for (var i = 0; i < methods.length; i++) {
			var method$1 = methods[i];
			var original = obj[method$1];
			obj[method$1] = function retryWrapper(original$1) {
				var op = exports.operation(options);
				var args = Array.prototype.slice.call(arguments, 1);
				var callback = args.pop();
				args.push(function(err) {
					if (op.retry(err)) return;
					if (err) arguments[0] = op.mainError();
					callback.apply(this, arguments);
				});
				op.attempt(function() {
					original$1.apply(obj, args);
				});
			}.bind(obj, original);
			obj[method$1].options = options;
		}
	};
} });

//#endregion
//#region node_modules/.pnpm/retry@0.13.1/node_modules/retry/index.js
var require_retry$1 = __commonJS({ "node_modules/.pnpm/retry@0.13.1/node_modules/retry/index.js"(exports, module) {
	module.exports = require_retry$2();
} });

//#endregion
//#region node_modules/.pnpm/async-retry@1.3.3/node_modules/async-retry/lib/index.js
var require_lib = __commonJS({ "node_modules/.pnpm/async-retry@1.3.3/node_modules/async-retry/lib/index.js"(exports, module) {
	var retrier = require_retry$1();
	function retry$1(fn, opts) {
		function run$1(resolve, reject) {
			var options = opts || {};
			var op;
			if (!("randomize" in options)) options.randomize = true;
			op = retrier.operation(options);
			function bail(err) {
				reject(err || new Error("Aborted"));
			}
			function onError$1(err, num) {
				if (err.bail) {
					bail(err);
					return;
				}
				if (!op.retry(err)) reject(op.mainError());
				else if (options.onRetry) options.onRetry(err, num);
			}
			function runAttempt(num) {
				var val;
				try {
					val = fn(bail, num);
				} catch (err) {
					onError$1(err, num);
					return;
				}
				Promise.resolve(val).then(resolve).catch(function catchIt(err) {
					onError$1(err, num);
				});
			}
			op.attempt(runAttempt);
		}
		return new Promise(run$1);
	}
	module.exports = retry$1;
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+resilience@4.0.2/node_modules/@sap-cloud-sdk/resilience/dist/retry.js
var require_retry = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+resilience@4.0.2/node_modules/@sap-cloud-sdk/resilience/dist/retry.js"(exports) {
	var __createBinding$7 = exports && exports.__createBinding || (Object.create ? function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc$1 = Object.getOwnPropertyDescriptor(m$1, k);
		if (!desc$1 || ("get" in desc$1 ? !m$1.__esModule : desc$1.writable || desc$1.configurable)) desc$1 = {
			enumerable: true,
			get: function() {
				return m$1[k];
			}
		};
		Object.defineProperty(o, k2, desc$1);
	} : function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		o[k2] = m$1[k];
	});
	var __setModuleDefault$1 = exports && exports.__setModuleDefault || (Object.create ? function(o, v$1) {
		Object.defineProperty(o, "default", {
			enumerable: true,
			value: v$1
		});
	} : function(o, v$1) {
		o["default"] = v$1;
	});
	var __importStar$1 = exports && exports.__importStar || function() {
		var ownKeys$2 = function(o) {
			ownKeys$2 = Object.getOwnPropertyNames || function(o$1) {
				var ar = [];
				for (var k in o$1) if (Object.prototype.hasOwnProperty.call(o$1, k)) ar[ar.length] = k;
				return ar;
			};
			return ownKeys$2(o);
		};
		return function(mod) {
			if (mod && mod.__esModule) return mod;
			var result = {};
			if (mod != null) {
				for (var k = ownKeys$2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding$7(result, mod, k[i]);
			}
			__setModuleDefault$1(result, mod);
			return result;
		};
	}();
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.retry = retry;
	const util_1$22 = require_dist$4();
	const asyncRetry = __importStar$1(require_lib());
	const logger$19 = (0, util_1$22.createLogger)({
		package: "resilience",
		messageContext: "retry"
	});
	const defaultRetries = 3;
	/**
	* Helper method to build a retry middleware.
	* @param retries - Number of retry attempts. Default value is 3.
	* @returns The middleware adding a retry to the function.
	*/
	function retry(retries = defaultRetries) {
		if (retries < 0) throw new Error("Number of retries must be greater or equal to 0.");
		return function(options) {
			return (arg) => asyncRetry.default(async (bail) => {
				try {
					return await options.fn(arg);
				} catch (error$1) {
					const status = error$1?.response?.status;
					if (!status) logger$19.debug("HTTP request failed but error did not contain a response status field as expected. Rethrowing error.");
					else if (status.toString().startsWith("4")) {
						bail(new util_1$22.ErrorWithCause(`Request failed with status code ${status}`, error$1));
						return void 0;
					}
					throw error$1;
				}
			}, { retries });
		};
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+resilience@4.0.2/node_modules/@sap-cloud-sdk/resilience/dist/middleware.js
var require_middleware = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+resilience@4.0.2/node_modules/@sap-cloud-sdk/resilience/dist/middleware.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.executeWithMiddleware = executeWithMiddleware;
	/**
	* Helper function to join a list of middlewares given an initial input.
	* @param middlewares - Middlewares to be layered around the function.
	* @param context - Context for the middleware execution.
	* @param fn - Function around which the middlewares are added.
	* @returns Function with middlewares layered around it.
	* @internal
	*/
	function executeWithMiddleware(middlewares, { fn, context, fnArgument }) {
		if (!middlewares?.length) return fn(fnArgument);
		const initial = {
			context,
			fn
		};
		const functionWithMiddlewares = addMiddlewaresToInitialFunction(middlewares, initial);
		return functionWithMiddlewares(fnArgument);
	}
	/**
	* This functions adds the middlewares to the initial functions.
	* You start with a function (axios request function) and add a timeout, circuit-breaker etc..
	* The result is new a function containing a timeout, circuit-breaker etc..
	* Note that the actual function is not executed.
	* @param middlewares - Middlewares added to the function. Added from right to function.
	* @param initial - Initial function and context.
	* @returns The function with the middlewares added.
	*/
	function addMiddlewaresToInitialFunction(middlewares, initial) {
		const { context } = initial;
		const functionWithMiddlewares = middlewares.reduceRight((prev, curr) => ({
			fn: curr(prev),
			context
		}), initial);
		return functionWithMiddlewares.fn;
	}
} });

//#endregion
//#region node_modules/.pnpm/opossum@8.4.0/node_modules/opossum/lib/status.js
var require_status = __commonJS({ "node_modules/.pnpm/opossum@8.4.0/node_modules/opossum/lib/status.js"(exports, module) {
	const WINDOW = Symbol("window");
	const BUCKETS = Symbol("buckets");
	const TIMEOUT = Symbol("timeout");
	const PERCENTILES = Symbol("percentiles");
	const BUCKET_INTERVAL = Symbol("bucket-interval");
	const SNAPSHOT_INTERVAL = Symbol("snapshot-interval");
	const ROTATE_EVENT_NAME = Symbol("rotate-event-name");
	const EventEmitter$1 = __require("events").EventEmitter;
	/**
	* Tracks execution status for a given {@link CircuitBreaker}.
	* A Status instance is created for every {@link CircuitBreaker}
	* and does not typically need to be created by a user.
	*
	* A Status instance will listen for all events on the {@link CircuitBreaker}
	* and track them in a rolling statistical window. The window duration is
	* determined by the `rollingCountTimeout` option provided to the
	* {@link CircuitBreaker}. The window consists of an array of Objects,
	* each representing the counts for a {@link CircuitBreaker}'s events.
	*
	* The array's length is determined by the {@link CircuitBreaker}'s
	* `rollingCountBuckets` option. The duration of each slice of the window
	* is determined by dividing the `rollingCountTimeout` by
	* `rollingCountBuckets`.
	*
	* @class Status
	* @extends EventEmitter
	* @param {Object} options for the status window
	* @param {Number} options.rollingCountBuckets number of buckets in the window
	* @param {Number} options.rollingCountTimeout the duration of the window
	* @param {Boolean} options.rollingPercentilesEnabled whether to calculate
	* percentiles
	* @param {Object} options.stats object of previous stats
	* @example
	* // Creates a 1 second window consisting of ten time slices,
	* // each 100ms long.
	* const circuit = circuitBreaker(fs.readFile,
	*  { rollingCountBuckets: 10, rollingCountTimeout: 1000});
	*
	* // get the cumulative statistics for the last second
	* circuit.status.stats;
	*
	* // get the array of 10, 1 second time slices for the last second
	* circuit.status.window;
	* @fires Status#snapshot
	* @see CircuitBreaker#status
	*/
	var Status$1 = class extends EventEmitter$1 {
		constructor(options) {
			super();
			this[BUCKETS] = options.rollingCountBuckets || 10;
			this[TIMEOUT] = options.rollingCountTimeout || 1e4;
			this[WINDOW] = new Array(this[BUCKETS]);
			this[PERCENTILES] = [
				0,
				.25,
				.5,
				.75,
				.9,
				.95,
				.99,
				.995,
				1
			];
			this[ROTATE_EVENT_NAME] = "rotate";
			this.rollingPercentilesEnabled = options.rollingPercentilesEnabled !== false;
			this.enableSnapshots = options.enableSnapshots !== false;
			this.rotateBucketController = options.rotateBucketController;
			this.rotateBucket = nextBucket(this[WINDOW]);
			for (let i = 0; i < this[BUCKETS]; i++) this[WINDOW][i] = bucket();
			const bucketInterval = Math.floor(this[TIMEOUT] / this[BUCKETS]);
			if (this.rotateBucketController) this.startListeneningForRotateEvent();
			else {
				this[BUCKET_INTERVAL] = setInterval(this.rotateBucket, bucketInterval);
				if (typeof this[BUCKET_INTERVAL].unref === "function") this[BUCKET_INTERVAL].unref();
			}
			/**
			* Emitted at each time-slice. Listeners for this
			* event will receive a cumulative snapshot of the current status window.
			* @event Status#snapshot
			* @type {Object}
			*/
			if (this.enableSnapshots) {
				this[SNAPSHOT_INTERVAL] = setInterval((_) => this.emit("snapshot", this.stats), bucketInterval);
				if (typeof this[SNAPSHOT_INTERVAL].unref === "function") this[SNAPSHOT_INTERVAL].unref();
			}
			if (options.stats) this[WINDOW][0] = {
				...bucket(),
				...options.stats
			};
		}
		/**
		* Get the cumulative stats for the current window
		* @type {Object}
		*/
		get stats() {
			const totals = this[WINDOW].reduce((acc, val) => {
				if (!val) return acc;
				Object.keys(acc).forEach((key$1) => {
					if (key$1 !== "latencyTimes" && key$1 !== "percentiles") acc[key$1] += val[key$1] || 0;
				});
				if (this.rollingPercentilesEnabled) {
					if (val.latencyTimes) acc.latencyTimes = acc.latencyTimes.concat(val.latencyTimes);
				}
				return acc;
			}, bucket());
			if (this.rollingPercentilesEnabled) {
				totals.latencyTimes.sort((a, b) => a - b);
				if (totals.latencyTimes.length) totals.latencyMean = totals.latencyTimes.reduce((a, b) => a + b, 0) / totals.latencyTimes.length;
				else totals.latencyMean = 0;
				this[PERCENTILES].forEach((percentile) => {
					totals.percentiles[percentile] = calculatePercentile(percentile, totals.latencyTimes);
				});
			} else {
				totals.latencyMean = -1;
				this[PERCENTILES].forEach((percentile) => {
					totals.percentiles[percentile] = -1;
				});
			}
			return totals;
		}
		/**
		* Gets the stats window as an array of time-sliced objects.
		* @type {Array}
		*/
		get window() {
			return this[WINDOW].slice();
		}
		increment(property, latencyRunTime) {
			this[WINDOW][0][property]++;
			if (property === "successes" || property === "failures" || property === "timeouts") this[WINDOW][0].latencyTimes.push(latencyRunTime || 0);
		}
		open() {
			this[WINDOW][0].isCircuitBreakerOpen = true;
		}
		close() {
			this[WINDOW][0].isCircuitBreakerOpen = false;
		}
		shutdown() {
			this.removeAllListeners();
			if (this.rotateBucketController === void 0) clearInterval(this[BUCKET_INTERVAL]);
			else this.removeRotateBucketControllerListener();
			if (this.enableSnapshots) clearInterval(this[SNAPSHOT_INTERVAL]);
		}
		removeRotateBucketControllerListener() {
			if (this.rotateBucketController) this.rotateBucketController.removeListener(this[ROTATE_EVENT_NAME], this.rotateBucket);
		}
		startListeneningForRotateEvent() {
			if (this.rotateBucketController && this.rotateBucketController.listenerCount(this[ROTATE_EVENT_NAME], this.rotateBucket) === 0) this.rotateBucketController.on(this[ROTATE_EVENT_NAME], this.rotateBucket);
		}
	};
	const nextBucket = (window$1) => (_) => {
		window$1.pop();
		window$1.unshift(bucket());
	};
	const bucket = (_) => ({
		failures: 0,
		fallbacks: 0,
		successes: 0,
		rejects: 0,
		fires: 0,
		timeouts: 0,
		cacheHits: 0,
		cacheMisses: 0,
		coalesceCacheHits: 0,
		coalesceCacheMisses: 0,
		semaphoreRejections: 0,
		percentiles: {},
		latencyTimes: []
	});
	function calculatePercentile(percentile, arr) {
		if (percentile === 0) return arr[0] || 0;
		const idx = Math.ceil(percentile * arr.length);
		return arr[idx - 1] || 0;
	}
	module.exports = exports = Status$1;
} });

//#endregion
//#region node_modules/.pnpm/opossum@8.4.0/node_modules/opossum/lib/semaphore.js
var require_semaphore = __commonJS({ "node_modules/.pnpm/opossum@8.4.0/node_modules/opossum/lib/semaphore.js"(exports, module) {
	module.exports = exports = semaphore;
	function semaphore(count) {
		const resolvers$1 = [];
		let counter = count;
		const sem = {
			take,
			release,
			test: test$1
		};
		Object.defineProperty(sem, "count", {
			get: (_) => counter,
			enumerable: true
		});
		return sem;
		function take(timeout$1) {
			if (counter > 0) {
				--counter;
				return Promise.resolve(release);
			}
			return new Promise((resolve, reject) => {
				resolvers$1.push((_) => {
					--counter;
					resolve(release);
				});
				if (timeout$1) setTimeout((_) => {
					resolvers$1.shift();
					const err = new Error(`Timed out after ${timeout$1}ms`);
					err.code = "ETIMEDOUT";
					reject(err);
				}, timeout$1);
			});
		}
		function release() {
			counter++;
			if (resolvers$1.length > 0) resolvers$1.shift()();
		}
		function test$1() {
			if (counter < 1) return false;
			return take() && true;
		}
	}
} });

//#endregion
//#region node_modules/.pnpm/opossum@8.4.0/node_modules/opossum/lib/cache.js
var require_cache = __commonJS({ "node_modules/.pnpm/opossum@8.4.0/node_modules/opossum/lib/cache.js"(exports, module) {
	/**
	* Simple in-memory cache implementation
	* @class MemoryCache
	* @property {Map} cache Cache map
	*/
	var MemoryCache$1 = class {
		constructor(maxEntries) {
			this.cache = new Map();
			this.maxEntries = maxEntries ?? 2 ** 24 - 1;
		}
		/**
		* Get cache value by key
		* @param {string} key Cache key
		* @return {any} Response from cache
		*/
		get(key$1) {
			const cached = this.cache.get(key$1);
			if (cached) {
				if (cached.expiresAt > Date.now() || cached.expiresAt === 0) return cached.value;
				this.cache.delete(key$1);
			}
			return void 0;
		}
		/**
		* Set cache key with value and ttl
		* @param {string} key Cache key
		* @param {any} value Value to cache
		* @param {number} ttl Time to live in milliseconds
		* @return {void}
		*/
		set(key$1, value, ttl) {
			if (this.cache.size === this.maxEntries && this.get(key$1) === void 0) this.cache.delete(this.cache.keys().next().value);
			this.cache.set(key$1, {
				expiresAt: ttl,
				value
			});
		}
		/**
		* Delete cache key
		* @param {string} key Cache key
		* @return {void}
		*/
		delete(key$1) {
			this.cache.delete(key$1);
		}
		/**
		* Clear cache
		* @returns {void}
		*/
		flush() {
			this.cache.clear();
		}
	};
	module.exports = exports = MemoryCache$1;
} });

//#endregion
//#region node_modules/.pnpm/opossum@8.4.0/node_modules/opossum/lib/circuit.js
var require_circuit = __commonJS({ "node_modules/.pnpm/opossum@8.4.0/node_modules/opossum/lib/circuit.js"(exports, module) {
	const EventEmitter = __require("events");
	const Status = require_status();
	const Semaphore = require_semaphore();
	const MemoryCache = require_cache();
	const STATE = Symbol("state");
	const OPEN = Symbol("open");
	const CLOSED = Symbol("closed");
	const HALF_OPEN = Symbol("half-open");
	const PENDING_CLOSE = Symbol("pending-close");
	const SHUTDOWN = Symbol("shutdown");
	const FALLBACK_FUNCTION = Symbol("fallback");
	const STATUS = Symbol("status");
	const NAME = Symbol("name");
	const GROUP = Symbol("group");
	const ENABLED = Symbol("Enabled");
	const WARMING_UP = Symbol("warming-up");
	const VOLUME_THRESHOLD = Symbol("volume-threshold");
	const OUR_ERROR = Symbol("our-error");
	const RESET_TIMEOUT = Symbol("reset-timeout");
	const WARMUP_TIMEOUT = Symbol("warmup-timeout");
	const LAST_TIMER_AT = Symbol("last-timer-at");
	const deprecation = `options.maxFailures is deprecated. \
Please use options.errorThresholdPercentage`;
	/**
	* Constructs a {@link CircuitBreaker}.
	*
	* @class CircuitBreaker
	* @extends EventEmitter
	* @param {Function} action The action to fire for this {@link CircuitBreaker}
	* @param {Object} options Options for the {@link CircuitBreaker}
	* @param {Status} options.status A {@link Status} object that might
	*   have pre-prime stats
	* @param {Number} options.timeout The time in milliseconds that action should
	* be allowed to execute before timing out. Timeout can be disabled by setting
	* this to `false`. Default 10000 (10 seconds)
	* @param {Number} options.maxFailures (Deprecated) The number of times the
	* circuit can fail before opening. Default 10.
	* @param {Number} options.resetTimeout The time in milliseconds to wait before
	* setting the breaker to `halfOpen` state, and trying the action again.
	* Default: 30000 (30 seconds)
	* @param {Number} options.rollingCountTimeout Sets the duration of the
	* statistical rolling window, in milliseconds. This is how long Opossum keeps
	* metrics for the circuit breaker to use and for publishing. Default: 10000
	* @param {Number} options.rollingCountBuckets Sets the number of buckets the
	* rolling statistical window is divided into. So, if
	* options.rollingCountTimeout is 10000, and options.rollingCountBuckets is 10,
	* then the statistical window will be 1000/1 second snapshots in the
	* statistical window. Default: 10
	* @param {String} options.name the circuit name to use when reporting stats.
	* Default: the name of the function this circuit controls.
	* @param {boolean} options.rollingPercentilesEnabled This property indicates
	* whether execution latencies should be tracked and calculated as percentiles.
	* If they are disabled, all summary statistics (mean, percentiles) are
	* returned as -1. Default: true
	* @param {Number} options.capacity the number of concurrent requests allowed.
	* If the number currently executing function calls is equal to
	* options.capacity, further calls to `fire()` are rejected until at least one
	* of the current requests completes. Default: `Number.MAX_SAFE_INTEGER`.
	* @param {Number} options.errorThresholdPercentage the error percentage at
	* which to open the circuit and start short-circuiting requests to fallback.
	* Default: 50
	* @param {boolean} options.enabled whether this circuit is enabled upon
	* construction. Default: true
	* @param {boolean} options.allowWarmUp determines whether to allow failures
	* without opening the circuit during a brief warmup period (this is the
	* `rollingCountTimeout` property). Default: false
	* This can help in situations where no matter what your
	* `errorThresholdPercentage` is, if the first execution times out or fails,
	* the circuit immediately opens.
	* @param {Number} options.volumeThreshold the minimum number of requests within
	* the rolling statistical window that must exist before the circuit breaker
	* can open. This is similar to `options.allowWarmUp` in that no matter how many
	* failures there are, if the number of requests within the statistical window
	* does not exceed this threshold, the circuit will remain closed. Default: 0
	* @param {Function} options.errorFilter an optional function that will be
	* called when the circuit's function fails (returns a rejected Promise). If
	* this function returns truthy, the circuit's failPure statistics will not be
	* incremented. This is useful, for example, when you don't want HTTP 404 to
	* trip the circuit, but still want to handle it as a failure case.
	* @param {boolean} options.cache whether the return value of the first
	* successful execution of the circuit's function will be cached. Once a value
	* has been cached that value will be returned for every subsequent execution:
	* the cache can be cleared using `clearCache`. (The metrics `cacheHit` and
	* `cacheMiss` reflect cache activity.) Default: false
	* @param {Number} options.cacheTTL the time to live for the cache
	* in milliseconds. Set 0 for infinity cache. Default: 0 (no TTL)
	* @param {Number} options.cacheSize the max amount of entries in the internal
	* cache. Only used when cacheTransport is not defined.
	* Default: max size of JS map (2^24).
	* @param {Function} options.cacheGetKey function that returns the key to use
	* when caching the result of the circuit's fire.
	* Better to use custom one, because `JSON.stringify` is not good
	* from performance perspective.
	* Default: `(...args) => JSON.stringify(args)`
	* @param {CacheTransport} options.cacheTransport custom cache transport
	* should implement `get`, `set` and `flush` methods.
	* @param {boolean} options.coalesce  If true, this provides coalescing of
	* requests to this breaker, in other words: the promise will be cached.
	* Only one action (with same cache key) is executed at a time, and the other
	* pending actions wait for the result. Performance will improve when rapidly
	* firing the circuitbreaker with the same request, especially on a slower
	* action (e.g. multiple end-users fetching same data from remote).
	* Will use internal cache only. Can be used in combination with options.cache.
	* The metrics `coalesceCacheHit` and `coalesceCacheMiss` are available.
	* Default: false
	* @param {Number} options.coalesceTTL the time to live for the coalescing
	* in milliseconds. Set 0 for infinity cache. Default: same as options.timeout
	* @param {Number} options.coalesceSize the max amount of entries in the
	* coalescing cache. Default: max size of JS map (2^24).
	* @param {string[]} options.coalesceResetOn when to reset the coalesce cache.
	* Options: `error`, `success`, `timeout`. Default: not set, reset using TTL.
	* @param {AbortController} options.abortController this allows Opossum to
	* signal upon timeout and properly abort your on going requests instead of
	* leaving it in the background
	* @param {boolean} options.enableSnapshots whether to enable the rolling
	* stats snapshots that opossum emits at the bucketInterval. Disable this
	* as an optimization if you don't listen to the 'snapshot' event to reduce
	* the number of timers opossum initiates.
	* @param {EventEmitter} options.rotateBucketController if you have multiple
	* breakers in your app, the number of timers across breakers can get costly.
	* This option allows you to provide an EventEmitter that rotates the buckets
	* so you can have one global timer in your app. Make sure that you are
	* emitting a 'rotate' event from this EventEmitter
	* @param {boolean} options.autoRenewAbortController Automatically recreates
	* the instance of AbortController whenever the circuit transitions to
	* 'halfOpen' or 'closed' state. This ensures that new requests are not
	* impacted by previous signals that were triggered when the circuit was 'open'.
	* Default: false
	*
	*
	* @fires CircuitBreaker#halfOpen
	* @fires CircuitBreaker#close
	* @fires CircuitBreaker#open
	* @fires CircuitBreaker#fire
	* @fires CircuitBreaker#cacheHit
	* @fires CircuitBreaker#cacheMiss
	* @fires CircuitBreaker#coalesceCacheHit
	* @fires CircuitBreaker#coalesceCacheMiss
	* @fires CircuitBreaker#reject
	* @fires CircuitBreaker#timeout
	* @fires CircuitBreaker#success
	* @fires CircuitBreaker#semaphoreLocked
	* @fires CircuitBreaker#healthCheckFailed
	* @fires CircuitBreaker#fallback
	* @fires CircuitBreaker#failure
	*/
	var CircuitBreaker = class CircuitBreaker extends EventEmitter {
		/**
		* Returns true if the provided error was generated here. It will be false
		* if the error came from the action itself.
		* @param {Error} error The Error to check.
		* @returns {Boolean} true if the error was generated here
		*/
		static isOurError(error$1) {
			return !!error$1[OUR_ERROR];
		}
		/**
		* Create a new Status object,
		* helpful when you need to prime a breaker with stats
		* @param {Object} options -
		* @param {Number} options.rollingCountBuckets number of buckets in the window
		* @param {Number} options.rollingCountTimeout the duration of the window
		* @param {Boolean} options.rollingPercentilesEnabled whether to calculate
		* @param {Object} options.stats user supplied stats
		* @returns {Status} a new {@link Status} object
		*/
		static newStatus(options) {
			return new Status(options);
		}
		constructor(action, options = {}) {
			super();
			this.options = options;
			this.options.timeout = options.timeout ?? 1e4;
			this.options.resetTimeout = options.resetTimeout ?? 3e4;
			this.options.errorThresholdPercentage = options.errorThresholdPercentage ?? 50;
			this.options.rollingCountTimeout = options.rollingCountTimeout ?? 1e4;
			this.options.rollingCountBuckets = options.rollingCountBuckets ?? 10;
			this.options.rollingPercentilesEnabled = options.rollingPercentilesEnabled !== false;
			this.options.capacity = Number.isInteger(options.capacity) ? options.capacity : Number.MAX_SAFE_INTEGER;
			this.options.errorFilter = options.errorFilter || ((_) => false);
			this.options.cacheTTL = options.cacheTTL ?? 0;
			this.options.cacheGetKey = options.cacheGetKey ?? ((...args) => JSON.stringify(args));
			this.options.enableSnapshots = options.enableSnapshots !== false;
			this.options.rotateBucketController = options.rotateBucketController;
			this.options.coalesce = !!options.coalesce;
			this.options.coalesceTTL = options.coalesceTTL ?? this.options.timeout;
			this.options.coalesceResetOn = options.coalesceResetOn?.filter((o) => [
				"error",
				"success",
				"timeout"
			].includes(o)) || [];
			if (this.options.cache) {
				if (this.options.cacheTransport === void 0) this.options.cacheTransport = new MemoryCache(options.cacheSize);
				else if (typeof this.options.cacheTransport !== "object" || !this.options.cacheTransport.get || !this.options.cacheTransport.set || !this.options.cacheTransport.flush) throw new TypeError("options.cacheTransport should be an object with `get`, `set` and `flush` methods");
			}
			if (this.options.coalesce) this.options.coalesceCache = new MemoryCache(options.coalesceSize);
			this.semaphore = new Semaphore(this.options.capacity);
			if (!action) throw new TypeError("No action provided. Cannot construct a CircuitBreaker without an invocable action.");
			if (options.autoRenewAbortController && !options.abortController) options.abortController = new AbortController();
			if (options.abortController && typeof options.abortController.abort !== "function") throw new TypeError("AbortController does not contain `abort()` method");
			this[VOLUME_THRESHOLD] = Number.isInteger(options.volumeThreshold) ? options.volumeThreshold : 0;
			this[WARMING_UP] = options.allowWarmUp === true;
			if (this.options.status) if (this.options.status instanceof Status) this[STATUS] = this.options.status;
			else this[STATUS] = new Status({ stats: this.options.status });
			else this[STATUS] = new Status(this.options);
			this[STATE] = CLOSED;
			if (options.state) {
				this[ENABLED] = options.state.enabled !== false;
				this[WARMING_UP] = options.state.warmUp || this[WARMING_UP];
				this[CLOSED] = options.state.closed !== false;
				this[HALF_OPEN] = this[PENDING_CLOSE] = options.state.halfOpen || false;
				this[OPEN] = !this[CLOSED] && !this[HALF_OPEN];
				this[SHUTDOWN] = options.state.shutdown || false;
			} else {
				this[PENDING_CLOSE] = false;
				this[ENABLED] = options.enabled !== false;
			}
			this[FALLBACK_FUNCTION] = null;
			this[NAME] = options.name || action.name || nextName();
			this[GROUP] = options.group || this[NAME];
			if (this[WARMING_UP]) {
				const timer = this[WARMUP_TIMEOUT] = setTimeout((_) => this[WARMING_UP] = false, this.options.rollingCountTimeout);
				if (typeof timer.unref === "function") timer.unref();
			}
			if (typeof action !== "function") this.action = (_) => Promise.resolve(action);
			else this.action = action;
			if (options.maxFailures) console.error(deprecation);
			const increment = (property) => (result, runTime) => this[STATUS].increment(property, runTime);
			this.on("success", increment("successes"));
			this.on("failure", increment("failures"));
			this.on("fallback", increment("fallbacks"));
			this.on("timeout", increment("timeouts"));
			this.on("fire", increment("fires"));
			this.on("reject", increment("rejects"));
			this.on("cacheHit", increment("cacheHits"));
			this.on("cacheMiss", increment("cacheMisses"));
			this.on("coalesceCacheHit", increment("coalesceCacheHits"));
			this.on("coalesceCacheMiss", increment("coalesceCacheMisses"));
			this.on("open", (_) => this[STATUS].open());
			this.on("close", (_) => this[STATUS].close());
			this.on("semaphoreLocked", increment("semaphoreRejections"));
			/**
			* @param {CircuitBreaker} circuit This current circuit
			* @returns {function(): void} A bound reset callback
			* @private
			*/
			function _startTimer(circuit) {
				circuit[LAST_TIMER_AT] = Date.now();
				return (_) => {
					const timer = circuit[RESET_TIMEOUT] = setTimeout(() => {
						_halfOpen(circuit);
					}, circuit.options.resetTimeout);
					if (typeof timer.unref === "function") timer.unref();
				};
			}
			/**
			* Sets the circuit breaker to half open
			* @private
			* @param {CircuitBreaker} circuit The current circuit breaker
			* @returns {void}
			*/
			function _halfOpen(circuit) {
				circuit[STATE] = HALF_OPEN;
				circuit[PENDING_CLOSE] = true;
				circuit._renewAbortControllerIfNeeded();
				/**
				* Emitted after `options.resetTimeout` has elapsed, allowing for
				* a single attempt to call the service again. If that attempt is
				* successful, the circuit will be closed. Otherwise it remains open.
				*
				* @event CircuitBreaker#halfOpen
				* @type {Number} how long the circuit remained open
				*/
				circuit.emit("halfOpen", circuit.options.resetTimeout);
			}
			this.on("open", _startTimer(this));
			this.on("success", (_) => {
				if (this.halfOpen) this.close();
			});
			if (this[SHUTDOWN]) {
				this[STATE] = SHUTDOWN;
				this.shutdown();
			} else if (this[CLOSED]) this.close();
			else if (this[OPEN]) if (this.options.state.lastTimerAt !== void 0 && Date.now() - this.options.state.lastTimerAt > this.options.resetTimeout) _halfOpen(this);
			else this.open();
			else if (this[HALF_OPEN]) this[STATE] = HALF_OPEN;
		}
		/**
		* Renews the abort controller if needed
		* @private
		* @returns {void}
		*/
		_renewAbortControllerIfNeeded() {
			if (this.options.autoRenewAbortController && this.options.abortController && this.options.abortController.signal.aborted) this.options.abortController = new AbortController();
		}
		/**
		* Closes the breaker, allowing the action to execute again
		* @fires CircuitBreaker#close
		* @returns {void}
		*/
		close() {
			if (this[STATE] !== CLOSED) {
				if (this[RESET_TIMEOUT]) clearTimeout(this[RESET_TIMEOUT]);
				this[STATE] = CLOSED;
				this[PENDING_CLOSE] = false;
				this._renewAbortControllerIfNeeded();
				/**
				* Emitted when the breaker is reset allowing the action to execute again
				* @event CircuitBreaker#close
				*/
				this.emit("close");
			}
		}
		/**
		* Opens the breaker. Each time the breaker is fired while the circuit is
		* opened, a failed Promise is returned, or if any fallback function
		* has been provided, it is invoked.
		*
		* If the breaker is already open this call does nothing.
		* @fires CircuitBreaker#open
		* @returns {void}
		*/
		open() {
			if (this[STATE] !== OPEN) {
				this[STATE] = OPEN;
				this[PENDING_CLOSE] = false;
				/**
				* Emitted when the breaker opens because the action has
				* failure percentage greater than `options.errorThresholdPercentage`.
				* @event CircuitBreaker#open
				*/
				this.emit("open");
			}
		}
		/**
		* Shuts down this circuit breaker. All subsequent calls to the
		* circuit will fail, returning a rejected promise.
		* @returns {void}
		*/
		shutdown() {
			/**
			* Emitted when the circuit breaker has been shut down.
			* @event CircuitBreaker#shutdown
			*/
			this.emit("shutdown");
			this.disable();
			this.removeAllListeners();
			if (this[RESET_TIMEOUT]) clearTimeout(this[RESET_TIMEOUT]);
			if (this[WARMUP_TIMEOUT]) clearTimeout(this[WARMUP_TIMEOUT]);
			this.status.shutdown();
			this[STATE] = SHUTDOWN;
			this.clearCache();
		}
		/**
		* Determines if the circuit has been shutdown.
		* @type {Boolean}
		*/
		get isShutdown() {
			return this[STATE] === SHUTDOWN;
		}
		/**
		* Gets the name of this circuit
		* @type {String}
		*/
		get name() {
			return this[NAME];
		}
		/**
		* Gets the name of this circuit group
		* @type {String}
		*/
		get group() {
			return this[GROUP];
		}
		/**
		* Gets whether this circuit is in the `pendingClosed` state
		* @type {Boolean}
		*/
		get pendingClose() {
			return this[PENDING_CLOSE];
		}
		/**
		* True if the circuit is currently closed. False otherwise.
		* @type {Boolean}
		*/
		get closed() {
			return this[STATE] === CLOSED;
		}
		/**
		* True if the circuit is currently opened. False otherwise.
		* @type {Boolean}
		*/
		get opened() {
			return this[STATE] === OPEN;
		}
		/**
		* True if the circuit is currently half opened. False otherwise.
		* @type {Boolean}
		*/
		get halfOpen() {
			return this[STATE] === HALF_OPEN;
		}
		/**
		* The current {@link Status} of this {@link CircuitBreaker}
		* @type {Status}
		*/
		get status() {
			return this[STATUS];
		}
		/**
		* Get the current stats for the circuit.
		* @see Status#stats
		* @type {Object}
		*/
		get stats() {
			return this[STATUS].stats;
		}
		toJSON() {
			return {
				state: {
					name: this.name,
					enabled: this.enabled,
					closed: this.closed,
					open: this.opened,
					halfOpen: this.halfOpen,
					warmUp: this.warmUp,
					shutdown: this.isShutdown,
					lastTimerAt: this[LAST_TIMER_AT]
				},
				status: this.status.stats
			};
		}
		/**
		* Gets whether the circuit is enabled or not
		* @type {Boolean}
		*/
		get enabled() {
			return this[ENABLED];
		}
		/**
		* Gets whether the circuit is currently in warm up phase
		* @type {Boolean}
		*/
		get warmUp() {
			return this[WARMING_UP];
		}
		/**
		* Gets the volume threshold for this circuit
		* @type {Boolean}
		*/
		get volumeThreshold() {
			return this[VOLUME_THRESHOLD];
		}
		/**
		* Provide a fallback function for this {@link CircuitBreaker}. This
		* function will be executed when the circuit is `fire`d and fails.
		* It will always be preceded by a `failure` event, and `breaker.fire` returns
		* a rejected Promise.
		* @param {Function | CircuitBreaker} func the fallback function to execute
		* when the breaker has opened or when a timeout or error occurs.
		* @return {CircuitBreaker} this
		*/
		fallback(func) {
			let fb = func;
			if (func instanceof CircuitBreaker) fb = (...args) => func.fire(...args);
			this[FALLBACK_FUNCTION] = fb;
			return this;
		}
		/**
		* Execute the action for this circuit. If the action fails or times out, the
		* returned promise will be rejected. If the action succeeds, the promise will
		* resolve with the resolved value from action. If a fallback function was
		* provided, it will be invoked in the event of any failure or timeout.
		*
		* Any parameters passed to this function will be proxied to the circuit
		* function.
		*
		* @return {Promise<any>} promise resolves with the circuit function's return
		* value on success or is rejected on failure of the action. Use isOurError()
		* to determine if a rejection was a result of the circuit breaker or the
		* action.
		*
		* @fires CircuitBreaker#failure
		* @fires CircuitBreaker#fallback
		* @fires CircuitBreaker#fire
		* @fires CircuitBreaker#reject
		* @fires CircuitBreaker#success
		* @fires CircuitBreaker#timeout
		* @fires CircuitBreaker#semaphoreLocked
		*/
		fire(...args) {
			return this.call(this.action, ...args);
		}
		/**
		* Execute the action for this circuit using `context` as `this`.
		* If the action fails or times out, the
		* returned promise will be rejected. If the action succeeds, the promise will
		* resolve with the resolved value from action. If a fallback function was
		* provided, it will be invoked in the event of any failure or timeout.
		*
		* Any parameters in addition to `context will be passed to the
		* circuit function.
		*
		* @param {any} context the `this` context used for function execution
		* @param {any} rest the arguments passed to the action
		*
		* @return {Promise<any>} promise resolves with the circuit function's return
		* value on success or is rejected on failure of the action.
		*
		* @fires CircuitBreaker#failure
		* @fires CircuitBreaker#fallback
		* @fires CircuitBreaker#fire
		* @fires CircuitBreaker#reject
		* @fires CircuitBreaker#success
		* @fires CircuitBreaker#timeout
		* @fires CircuitBreaker#semaphoreLocked
		*/
		call(context, ...rest) {
			if (this.isShutdown) {
				const err = buildError("The circuit has been shutdown.", "ESHUTDOWN");
				return Promise.reject(err);
			}
			const args = rest.slice();
			/**
			* Emitted when the circuit breaker action is executed
			* @event CircuitBreaker#fire
			* @type {any} the arguments passed to the fired function
			*/
			this.emit("fire", args);
			if (!this[ENABLED]) {
				const result = this.action.apply(context, args);
				return typeof result.then === "function" ? result : Promise.resolve(result);
			}
			const cacheKey = this.options.cache || this.options.coalesce ? this.options.cacheGetKey.apply(this, rest) : "";
			if (this.options.cache) {
				const cached = this.options.cacheTransport.get(cacheKey);
				if (cached) {
					/**
					* Emitted when the circuit breaker is using the cache
					* and finds a value.
					* @event CircuitBreaker#cacheHit
					*/
					this.emit("cacheHit");
					return cached;
				}
				/**
				* Emitted when the circuit breaker does not find a value in
				* the cache, but the cache option is enabled.
				* @event CircuitBreaker#cacheMiss
				*/
				this.emit("cacheMiss");
			}
			if (this.options.coalesce) {
				const cachedCall = this.options.coalesceCache.get(cacheKey);
				if (cachedCall) {
					/**
					* Emitted when the circuit breaker is using coalesce cache
					* and finds a cached promise.
					* @event CircuitBreaker#coalesceCacheHit
					*/
					this.emit("coalesceCacheHit");
					return cachedCall;
				}
				/**
				* Emitted when the circuit breaker does not find a value in
				* coalesce cache, but the coalesce option is enabled.
				* @event CircuitBreaker#coalesceCacheMiss
				*/
				this.emit("coalesceCacheMiss");
			}
			if (!this.closed && !this.pendingClose) {
				/**
				* Emitted when the circuit breaker is open and failing fast
				* @event CircuitBreaker#reject
				* @type {Error}
				*/
				const error$1 = buildError("Breaker is open", "EOPENBREAKER");
				this.emit("reject", error$1);
				return fallback(this, error$1, args) || Promise.reject(error$1);
			}
			this[PENDING_CLOSE] = false;
			let timeout$1;
			let timeoutError = false;
			const call$2 = new Promise((resolve, reject) => {
				const latencyStartTime = Date.now();
				if (this.semaphore.test()) {
					if (this.options.timeout) timeout$1 = setTimeout(() => {
						timeoutError = true;
						const error$1 = buildError(`Timed out after ${this.options.timeout}ms`, "ETIMEDOUT");
						const latency = Date.now() - latencyStartTime;
						this.semaphore.release();
						/**
						* Emitted when the circuit breaker action takes longer than
						* `options.timeout`
						* @event CircuitBreaker#timeout
						* @type {Error}
						*/
						this.emit("timeout", error$1, latency, args);
						handleError(error$1, this, timeout$1, args, latency, resolve, reject);
						resetCoalesce(this, cacheKey, "timeout");
						if (this.options.abortController) this.options.abortController.abort();
					}, this.options.timeout);
					try {
						const result = this.action.apply(context, args);
						const promise = typeof result.then === "function" ? result : Promise.resolve(result);
						promise.then((result$1) => {
							if (!timeoutError) {
								clearTimeout(timeout$1);
								/**
								* Emitted when the circuit breaker action succeeds
								* @event CircuitBreaker#success
								* @type {any} the return value from the circuit
								*/
								this.emit("success", result$1, Date.now() - latencyStartTime);
								resetCoalesce(this, cacheKey, "success");
								this.semaphore.release();
								resolve(result$1);
								if (this.options.cache) this.options.cacheTransport.set(cacheKey, promise, this.options.cacheTTL > 0 ? Date.now() + this.options.cacheTTL : 0);
							}
						}).catch((error$1) => {
							if (!timeoutError) {
								this.semaphore.release();
								const latencyEndTime = Date.now() - latencyStartTime;
								handleError(error$1, this, timeout$1, args, latencyEndTime, resolve, reject);
								resetCoalesce(this, cacheKey, "error");
							}
						});
					} catch (error$1) {
						this.semaphore.release();
						const latency = Date.now() - latencyStartTime;
						handleError(error$1, this, timeout$1, args, latency, resolve, reject);
						resetCoalesce(this, cacheKey, "error");
					}
				} else {
					const latency = Date.now() - latencyStartTime;
					const err = buildError("Semaphore locked", "ESEMLOCKED");
					/**
					* Emitted when the rate limit has been reached and there
					* are no more locks to be obtained.
					* @event CircuitBreaker#semaphoreLocked
					* @type {Error}
					*/
					this.emit("semaphoreLocked", err, latency);
					handleError(err, this, timeout$1, args, latency, resolve, reject);
					resetCoalesce(this, cacheKey);
				}
			});
			if (this.options.coalesce) this.options.coalesceCache.set(cacheKey, call$2, this.options.coalesceTTL > 0 ? Date.now() + this.options.coalesceTTL : 0);
			return call$2;
		}
		/**
		* Clears the cache of this {@link CircuitBreaker}
		* @returns {void}
		*/
		clearCache() {
			if (this.options.cache) this.options.cacheTransport.flush();
			if (this.options.coalesceCache) this.options.coalesceCache.flush();
		}
		/**
		* Provide a health check function to be called periodically. The function
		* should return a Promise. If the promise is rejected the circuit will open.
		* This is in addition to the existing circuit behavior as defined by
		* `options.errorThresholdPercentage` in the constructor. For example, if the
		* health check function provided here always returns a resolved promise, the
		* circuit can still trip and open if there are failures exceeding the
		* configured threshold. The health check function is executed within the
		* circuit breaker's execution context, so `this` within the function is the
		* circuit breaker itself.
		*
		* @param {Function} func a health check function which returns a promise.
		* @param {Number} [interval] the amount of time between calls to the health
		* check function. Default: 5000 (5 seconds)
		*
		* @returns {void}
		*
		* @fires CircuitBreaker#healthCheckFailed
		* @throws {TypeError} if `interval` is supplied but not a number
		*/
		healthCheck(func, interval) {
			interval = interval || 5e3;
			if (typeof func !== "function") throw new TypeError("Health check function must be a function");
			if (isNaN(interval)) throw new TypeError("Health check interval must be a number");
			const check = (_) => {
				func.apply(this).catch((e) => {
					/**
					* Emitted with the user-supplied health check function
					* returns a rejected promise.
					* @event CircuitBreaker#healthCheckFailed
					* @type {Error}
					*/
					this.emit("healthCheckFailed", e);
					this.open();
				});
			};
			const timer = setInterval(check, interval);
			if (typeof timer.unref === "function") timer.unref();
			check();
		}
		/**
		* Enables this circuit. If the circuit is the  disabled
		* state, it will be re-enabled. If not, this is essentially
		* a noop.
		* @returns {void}
		*/
		enable() {
			this[ENABLED] = true;
			this.status.startListeneningForRotateEvent();
		}
		/**
		* Disables this circuit, causing all calls to the circuit's function
		* to be executed without circuit or fallback protection.
		* @returns {void}
		*/
		disable() {
			this[ENABLED] = false;
			this.status.removeRotateBucketControllerListener();
		}
		/**
		* Retrieves the current AbortSignal from the abortController, if available.
		* This signal can be used to monitor ongoing requests.
		* @returns {AbortSignal|undefined} The AbortSignal if present,
		* otherwise undefined.
		*/
		getSignal() {
			if (this.options.abortController && this.options.abortController.signal) return this.options.abortController.signal;
			return void 0;
		}
		/**
		* Retrieves the current AbortController instance.
		* This controller can be used to manually abort ongoing requests or create
		* a new signal.
		* @returns {AbortController|undefined} The AbortController if present,
		* otherwise undefined.
		*/
		getAbortController() {
			return this.options.abortController;
		}
	};
	function handleError(error$1, circuit, timeout$1, args, latency, resolve, reject) {
		clearTimeout(timeout$1);
		if (circuit.options.errorFilter(error$1, ...args)) circuit.emit("success", error$1, latency);
		else {
			fail(circuit, error$1, args, latency);
			const fb = fallback(circuit, error$1, args);
			if (fb) return resolve(fb);
		}
		reject(error$1);
	}
	function fallback(circuit, err, args) {
		if (circuit[FALLBACK_FUNCTION]) try {
			const result = circuit[FALLBACK_FUNCTION].apply(circuit[FALLBACK_FUNCTION], [...args, err]);
			/**
			* Emitted when the circuit breaker executes a fallback function
			* @event CircuitBreaker#fallback
			* @type {any} the return value of the fallback function
			*/
			circuit.emit("fallback", result, err);
			if (result instanceof Promise) return result;
			return Promise.resolve(result);
		} catch (e) {
			return Promise.reject(e);
		}
	}
	function fail(circuit, err, args, latency) {
		/**
		* Emitted when the circuit breaker action fails
		* @event CircuitBreaker#failure
		* @type {Error}
		*/
		circuit.emit("failure", err, latency, args);
		if (circuit.warmUp) return;
		const stats = circuit.stats;
		if (stats.fires < circuit.volumeThreshold && !circuit.halfOpen) return;
		const errorRate = stats.failures / stats.fires * 100;
		if (errorRate > circuit.options.errorThresholdPercentage || circuit.halfOpen) circuit.open();
	}
	function resetCoalesce(circuit, cacheKey, event) {
		/**
		* Reset coalesce cache for this cacheKey, depending on
		* options.coalesceResetOn set.
		* @param {@link CircuitBreaker} circuit what circuit is to be cleared
		* @param {string} cacheKey cache key to clear.
		* @param {string} event optional, can be `error`, `success`, `timeout`
		* @returns {void}
		*/
		if (!event || circuit.options.coalesceResetOn.includes(event)) circuit.options.coalesceCache?.delete(cacheKey);
	}
	function buildError(msg, code) {
		const error$1 = new Error(msg);
		error$1.code = code;
		error$1[OUR_ERROR] = true;
		return error$1;
	}
	const nextName = () => "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
		const r = Math.random() * 16 | 0;
		const v$1 = c === "x" ? r : r & 3 | 8;
		return v$1.toString(16);
	});
	module.exports = exports = CircuitBreaker;
} });

//#endregion
//#region node_modules/.pnpm/opossum@8.4.0/node_modules/opossum/index.js
var require_opossum = __commonJS({ "node_modules/.pnpm/opossum@8.4.0/node_modules/opossum/index.js"(exports, module) {
	module.exports = exports = require_circuit();
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+resilience@4.0.2/node_modules/@sap-cloud-sdk/resilience/dist/circuit-breaker.js
var require_circuit_breaker = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+resilience@4.0.2/node_modules/@sap-cloud-sdk/resilience/dist/circuit-breaker.js"(exports) {
	var __importDefault$4 = exports && exports.__importDefault || function(mod) {
		return mod && mod.__esModule ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.circuitBreakerDefaultOptions = exports.circuitBreakers = void 0;
	exports.circuitBreaker = circuitBreaker;
	const opossum_1 = __importDefault$4(require_opossum());
	/**
	* Map of all existing circuit breakers.
	* Entries are added in a lazy way.
	* TODO:
	*  The value type here should be CircuitBreaker, but this would make the Opossum types part of our public API.
	*  This happens although it is marked as internal, because transpilation includes internal.
	*  Adding CircuitBreaker will break transpilation on generation.
	* @internal
	*/
	exports.circuitBreakers = {};
	/**
	* @internal
	*/
	exports.circuitBreakerDefaultOptions = {
		timeout: false,
		errorThresholdPercentage: 50,
		volumeThreshold: 10,
		resetTimeout: 3e4,
		cache: false
	};
	function httpErrorFilter(error$1) {
		return !!error$1.response?.status && error$1.response.status.toString().startsWith("4");
	}
	function circuitBreakerKeyBuilder({ uri, tenantId = "tenant_id" }) {
		return `${uri}::${tenantId}`;
	}
	/**
	* Helper method to build a circuit breaker middleware.
	* @returns The middleware adding a circuit breaker to the function.
	*/
	function circuitBreaker() {
		return circuitBreakerGeneric(circuitBreakerKeyBuilder, httpErrorFilter);
	}
	function circuitBreakerGeneric(keyBuilder, errorFilter) {
		return (options) => (fnArgument) => getCircuitBreaker(keyBuilder(options.context), errorFilter).fire(options.fn, fnArgument);
	}
	function getCircuitBreaker(key$1, errorFilter) {
		if (!exports.circuitBreakers[key$1]) exports.circuitBreakers[key$1] = new opossum_1.default(executeFunction, {
			...exports.circuitBreakerDefaultOptions,
			errorFilter
		});
		return exports.circuitBreakers[key$1];
	}
	function executeFunction(fn, ...parameters) {
		return fn(...parameters);
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+resilience@4.0.2/node_modules/@sap-cloud-sdk/resilience/dist/resilience.js
var require_resilience = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+resilience@4.0.2/node_modules/@sap-cloud-sdk/resilience/dist/resilience.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.resilience = resilience;
	const timeout_1$1 = require_timeout();
	const retry_1$1 = require_retry();
	const circuit_breaker_1$1 = require_circuit_breaker();
	const defaultResilienceOptions = {
		retry: false,
		timeout: true,
		circuitBreaker: true
	};
	/**
	* Return the resilience middleware functions as an array.
	* By default, timeout and circuit breaker are enabled and retry is disabled.
	* This behavior can be overridden by adjusting the resilience options {@link ResilienceOptions}.
	* @param options - Resilience Options.
	* @returns Array of middleware functions.
	*/
	function resilience(options) {
		const resilienceOption = {
			...defaultResilienceOptions,
			...options
		};
		const middlewares = [];
		if (typeof resilienceOption.retry === "number") middlewares.push((0, retry_1$1.retry)(resilienceOption.retry));
		else if (resilienceOption.retry) middlewares.push((0, retry_1$1.retry)());
		if (resilienceOption.circuitBreaker) middlewares.push((0, circuit_breaker_1$1.circuitBreaker)());
		if (typeof resilienceOption.timeout === "number") middlewares.push((0, timeout_1$1.timeout)(resilienceOption.timeout));
		else if (resilienceOption.timeout) middlewares.push((0, timeout_1$1.timeout)());
		return middlewares;
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+resilience@4.0.2/node_modules/@sap-cloud-sdk/resilience/dist/internal.js
var require_internal$5 = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+resilience@4.0.2/node_modules/@sap-cloud-sdk/resilience/dist/internal.js"(exports) {
	var __createBinding$6 = exports && exports.__createBinding || (Object.create ? function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc$1 = Object.getOwnPropertyDescriptor(m$1, k);
		if (!desc$1 || ("get" in desc$1 ? !m$1.__esModule : desc$1.writable || desc$1.configurable)) desc$1 = {
			enumerable: true,
			get: function() {
				return m$1[k];
			}
		};
		Object.defineProperty(o, k2, desc$1);
	} : function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		o[k2] = m$1[k];
	});
	var __exportStar$5 = exports && exports.__exportStar || function(m$1, exports$1) {
		for (var p in m$1) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports$1, p)) __createBinding$6(exports$1, m$1, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar$5(require_timeout(), exports);
	__exportStar$5(require_retry(), exports);
	__exportStar$5(require_middleware(), exports);
	__exportStar$5(require_circuit_breaker(), exports);
	__exportStar$5(require_resilience(), exports);
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+resilience@4.0.2/node_modules/@sap-cloud-sdk/resilience/internal.js
var require_internal$4 = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+resilience@4.0.2/node_modules/@sap-cloud-sdk/resilience/internal.js"(exports) {
	function __export$2(m$1) {
		for (const p in m$1) if (!exports.hasOwnProperty(p)) exports[p] = m$1[p];
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	* @packageDocumentation
	* @experimental The internal module is related to sdk-metadata types which are used only internally.
	*/
	__export$2(require_internal$5());
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+resilience@4.0.2/node_modules/@sap-cloud-sdk/resilience/dist/index.js
var require_dist$3 = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+resilience@4.0.2/node_modules/@sap-cloud-sdk/resilience/dist/index.js"(exports) {
	/**
	* [[include:resilience/README.md]]
	* @packageDocumentation
	* @module @sap-cloud-sdk/resilience
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.resilience = exports.circuitBreaker = exports.retry = exports.timeout = void 0;
	var timeout_1 = require_timeout();
	Object.defineProperty(exports, "timeout", {
		enumerable: true,
		get: function() {
			return timeout_1.timeout;
		}
	});
	var retry_1 = require_retry();
	Object.defineProperty(exports, "retry", {
		enumerable: true,
		get: function() {
			return retry_1.retry;
		}
	});
	var circuit_breaker_1 = require_circuit_breaker();
	Object.defineProperty(exports, "circuitBreaker", {
		enumerable: true,
		get: function() {
			return circuit_breaker_1.circuitBreaker;
		}
	});
	var resilience_1$2 = require_resilience();
	Object.defineProperty(exports, "resilience", {
		enumerable: true,
		get: function() {
			return resilience_1$2.resilience;
		}
	});
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/xsuaa-service.js
var require_xsuaa_service = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/xsuaa-service.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getClientCredentialsToken = getClientCredentialsToken;
	exports.getUserToken = getUserToken;
	const internal_1$4 = require_internal$4();
	const resilience_1$1 = require_dist$3();
	const environment_accessor_1$5 = require_environment_accessor();
	const jwt_1$13 = require_jwt();
	/**
	* Make a client credentials request against the XSUAA service.
	* @param service - Service as it is defined in the environment variable.
	* @param jwt - User JWT or object containing the `iss` property.
	* @returns Client credentials token.
	*/
	async function getClientCredentialsToken(service, jwt) {
		const decodedJwt = jwt ? (0, jwt_1$13.decodeJwt)(jwt) : {};
		const fnArgument = {
			subdomain: (0, jwt_1$13.getSubdomain)(decodedJwt),
			zoneId: (0, jwt_1$13.getTenantId)(decodedJwt),
			serviceCredentials: (0, environment_accessor_1$5.resolveServiceBinding)(service).credentials
		};
		const xssecPromise = function(arg) {
			const xsuaaService = (0, environment_accessor_1$5.getXsuaaService)({ credentials: arg.serviceCredentials });
			return xsuaaService.fetchClientCredentialsToken({
				tenant: arg.zoneId ? void 0 : arg.subdomain,
				zid: arg.zoneId
			});
		};
		return (0, internal_1$4.executeWithMiddleware)((0, resilience_1$1.resilience)(), {
			fn: xssecPromise,
			fnArgument,
			context: {
				uri: fnArgument.serviceCredentials.url,
				tenantId: fnArgument.zoneId ?? fnArgument.serviceCredentials.tenantid
			}
		}).catch((err) => {
			throw new Error(`Could not fetch client credentials token for service of type ${(0, environment_accessor_1$5.resolveServiceBinding)(service).label}: ${err.message}`);
		});
	}
	/**
	* Make a user token request against the XSUAA service.
	* @param service - Service as it is defined in the environment variable.
	* @param userJwt - User JWT.
	* @returns User token.
	*/
	function getUserToken(service, userJwt) {
		const decodedUserJwt = (0, jwt_1$13.decodeJwt)(userJwt);
		const fnArgument = {
			subdomain: (0, jwt_1$13.getSubdomain)(decodedUserJwt),
			zoneId: (0, jwt_1$13.getTenantId)(decodedUserJwt),
			serviceCredentials: service.credentials,
			userJwt
		};
		const xssecPromise = function(arg) {
			const xsuaaService = (0, environment_accessor_1$5.getXsuaaService)({ credentials: arg.serviceCredentials });
			return xsuaaService.fetchJwtBearerToken(arg.userJwt, {
				tenant: arg.zoneId ? void 0 : arg.subdomain,
				zid: arg.zoneId
			}).then((token) => token.access_token);
		};
		return (0, internal_1$4.executeWithMiddleware)((0, resilience_1$1.resilience)(), {
			fn: xssecPromise,
			fnArgument,
			context: {
				uri: service.credentials.url,
				tenantId: fnArgument.zoneId ?? service.credentials.tenantid
			}
		}).catch((err) => {
			throw new Error(`Could not fetch JWT bearer token for service of type ${service.label}: ${err.message}`);
		});
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/token-accessor.js
var require_token_accessor = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/token-accessor.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.serviceToken = serviceToken;
	exports.jwtBearerToken = jwtBearerToken;
	const util_1$21 = require_dist$4();
	const jwt_1$12 = require_jwt();
	const client_credentials_token_cache_1 = require_client_credentials_token_cache();
	const environment_accessor_1$4 = require_environment_accessor();
	const xsuaa_service_1 = require_xsuaa_service();
	/**
	* Returns an access token that can be used to call the given service. The token is fetched via a client credentials grant with the credentials of the given service.
	* If multiple instances of the provided service exist, the first instance will be selected.
	* When a JWT is passed, the tenant of the JWT will be used when performing the grant.
	* When no JWT is passed, the grant will be performed using the provider tenant.
	*
	* Throws an error if there is no instance of the given service type or the XSUAA service, or if the request to the XSUAA service fails.
	* @param service - The type of the service or an instance of {@link Service}.
	* @param options - Options to influence caching behavior (see {@link CachingOptions}) and a JWT. By default, caching and usage of a circuit breaker are enabled.
	* @returns Access token.
	*/
	async function serviceToken(service, options) {
		const opts = {
			useCache: true,
			enableCircuitBreaker: true,
			...options
		};
		const serviceBinding = (0, environment_accessor_1$4.resolveServiceBinding)(service);
		const serviceCredentials$1 = serviceBinding.credentials;
		const tenantForCaching = options?.jwt ? (0, jwt_1$12.getTenantId)(options.jwt) || (0, jwt_1$12.getSubdomain)(options.jwt) : (0, jwt_1$12.getTenantIdFromBinding)() || (0, jwt_1$12.getDefaultTenantId)();
		if (opts.useCache) {
			const cachedToken = client_credentials_token_cache_1.clientCredentialsTokenCache.getToken(tenantForCaching, serviceCredentials$1.clientid);
			if (cachedToken) return cachedToken.access_token;
		}
		try {
			const token = await (0, xsuaa_service_1.getClientCredentialsToken)(serviceBinding, options?.jwt);
			if (opts.useCache) client_credentials_token_cache_1.clientCredentialsTokenCache.cacheToken(tenantForCaching, serviceCredentials$1.clientid, token);
			return token.access_token;
		} catch (err) {
			throw new util_1$21.ErrorWithCause(`Could not fetch client credentials token for service of type "${serviceBinding.label}".`, err);
		}
	}
	/**
	* Returns a JWT bearer token that can be used to call the given service.
	* The token is fetched via a JWT bearer token grant using the user token + client credentials.
	*
	* Throws an error if there is no instance of the given service type or the XSUAA service, or if the request to the XSUAA service fails.
	* @param jwt - The JWT of the user for whom the access token should be fetched.
	* @param service - The type of the service or an instance of {@link Service}.
	* @returns A JWT bearer token.
	*/
	async function jwtBearerToken(jwt, service) {
		const resolvedService = (0, environment_accessor_1$4.resolveServiceBinding)(service);
		return (0, xsuaa_service_1.getUserToken)(resolvedService, jwt);
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/identity-service.js
var require_identity_service = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/identity-service.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.exchangeToken = exchangeToken;
	exports.shouldExchangeToken = shouldExchangeToken;
	const jwt_1$11 = require_jwt();
	const token_accessor_1$5 = require_token_accessor();
	/**
	* @internal
	* Make a token exchange from IAS token to XSUAA token.
	* @param options - Configuration for how to retrieve destinations from the destination service.
	* @returns Exchanged token.
	*/
	async function exchangeToken(jwt) {
		return (0, token_accessor_1$5.jwtBearerToken)(jwt, "xsuaa");
	}
	/**
	* @internal
	* Checks whether the IAS token to XSUAA token exchange should be applied.
	* @param options - Configuration for how to retrieve destinations from the destination service.
	* @returns A boolean value, that indicates whether the token exchange should be applied.
	*/
	function shouldExchangeToken(options) {
		return options.iasToXsuaaTokenExchange === true && !!options.jwt && !(0, jwt_1$11.isXsuaaToken)((0, jwt_1$11.decodeJwt)(options.jwt));
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/destination-accessor-types.js
var require_destination_accessor_types = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/destination-accessor-types.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.isDestinationFetchOptions = isDestinationFetchOptions;
	/**
	* Type guard to find if object is DestinationFetchOptions.
	* @param destination - Destination to be checked
	* @returns boolean
	* @internal
	*/
	function isDestinationFetchOptions(destination) {
		return destination.destinationName !== void 0;
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/destination.js
var require_destination$1 = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/destination.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.sanitizeDestination = sanitizeDestination;
	exports.parseDestination = parseDestination;
	exports.getAdditionalHeadersAndQueryParameters = getAdditionalHeadersAndQueryParameters;
	exports.getAdditionalHeaders = getAdditionalHeaders;
	exports.getAdditionalQueryParameters = getAdditionalQueryParameters;
	exports.getDestinationConfig = getDestinationConfig;
	exports.toDestinationNameUrl = toDestinationNameUrl;
	exports.parseCertificate = parseCertificate;
	exports.isDestinationConfiguration = isDestinationConfiguration;
	exports.isDestinationJson = isDestinationJson;
	exports.noDestinationErrorMessage = noDestinationErrorMessage;
	const destination_accessor_types_1$1 = require_destination_accessor_types();
	/**
	* Takes an existing or a parsed destination and returns an SDK compatible destination object.
	* @param destination - An object that adheres to the {@link Destination} interface.
	* @returns An SDK compatible destination object.
	*/
	function sanitizeDestination(destination) {
		let parsedDestination = parseAuthTokens(destination);
		parsedDestination = parseCertificates(parsedDestination);
		parsedDestination = setDefaultAuthenticationFallback(parsedDestination);
		parsedDestination = setTrustAll(parsedDestination);
		parsedDestination = setForwardAuthToken(parsedDestination);
		parsedDestination = setOriginalProperties(parsedDestination);
		return parsedDestination;
	}
	/**
	* Takes a JSON object returned by any of the calls to the destination service and returns an SDK compatible destination object.
	* This function only accepts destination configurations of type 'HTTP' and will error if no 'URL' is given.
	* @param destinationJson - A JSON object returned by the destination service.
	* @returns An SDK compatible destination object.
	* @internal
	*/
	function parseDestination(destinationJson) {
		const destinationConfig = getDestinationConfig(destinationJson);
		const destination = Object.entries(destinationConfig).reduce((dest, [originalKey, value]) => {
			if (originalKey in configMapping) dest[configMapping[originalKey]] = value;
			return dest;
		}, {
			originalProperties: destinationJson,
			authTokens: destinationJson["authTokens"] || [],
			certificates: destinationJson["certificates"] || []
		});
		const additionalHeadersAndQueryParameters = getAdditionalHeadersAndQueryParameters(destinationConfig);
		return sanitizeDestination({
			...destination,
			...additionalHeadersAndQueryParameters
		});
	}
	/**
	* Get either additional headers or query parameters from a destination, depending on the given prefix.
	* @param destinationConfig - Original destination config that could include additional headers or query parameters.
	* @param originalKeyPrefix - This is what the additional header and query keys start with, when specified in the original destination config.
	* @returns An object with either the headers or query parameters and their values, depending on the `originalKeyPrefix`.
	*/
	function getAdditionalProperties(destinationConfig, originalKeyPrefix) {
		const relevantConfigEntries = Object.entries(destinationConfig).filter(([key$1]) => key$1.startsWith(originalKeyPrefix));
		return relevantConfigEntries.reduce((additionalProperties, [originalKey, value]) => {
			const headerKey = originalKey.replace(originalKeyPrefix, "");
			additionalProperties[headerKey] = value;
			return additionalProperties;
		}, {});
	}
	/**
	* @internal
	* Get additional headers and/or query parameters from a destination.
	* Destinations can specify additional headers and/or query parameters, that should be added to every request against the given destination.
	* They are specified in the following format:
	* `URL.headers.<header-name>` or `URL.queries.<query-parameter-name>`
	* @param destinationConfig - Original destination config that could include additional headers or query parameters.
	* @returns An object with either the headers or query parameters and their values, depending on the `originalKeyPrefix`.
	*/
	function getAdditionalHeadersAndQueryParameters(destinationConfig) {
		const additionalProperties = {};
		const additionalHeaders = getAdditionalHeaders(destinationConfig).headers;
		if (additionalHeaders && Object.keys(additionalHeaders).length) additionalProperties["headers"] = additionalHeaders;
		const additionalQueryParameters = getAdditionalQueryParameters(destinationConfig).queryParameters;
		if (additionalQueryParameters && Object.keys(additionalQueryParameters).length) additionalProperties["queryParameters"] = additionalQueryParameters;
		return additionalProperties;
	}
	/**
	* @internal
	* Get additional headers from a destination.
	* Destinations can specify additional headers, that should be added to every request against the given destination.
	* They are specified in the following format:
	* `URL.headers.<header-name>`
	* @param destinationConfig - Original destination config that could include additional headers.
	* @returns An object with either the headers or query parameters and their values, depending on the `originalKeyPrefix`.
	*/
	function getAdditionalHeaders(destinationConfig) {
		const additionalHeaders = getAdditionalProperties(destinationConfig, "URL.headers.");
		const additionalProperties = {};
		if (Object.keys(additionalHeaders).length) additionalProperties["headers"] = additionalHeaders;
		return additionalProperties;
	}
	/**
	* @internal
	* Get additional query parameters from a destination.
	* Destinations can specify additional query parameters, that should be added to every request against the given destination.
	* They are specified in the following format:
	* `URL.queries.<query-parameter-name>`
	* @param destinationConfig - Original destination config that could include additional headers or query parameters.
	* @returns An object with either the headers or query parameters and their values, depending on the `originalKeyPrefix`.
	*/
	function getAdditionalQueryParameters(destinationConfig) {
		const additionalQueryParameters = getAdditionalProperties(destinationConfig, "URL.queries.");
		const additionalProperties = {};
		if (Object.keys(additionalQueryParameters).length) additionalProperties["queryParameters"] = additionalQueryParameters;
		return additionalProperties;
	}
	/**
	* @internal
	*/
	function getDestinationConfig(destinationJson) {
		return isDestinationJson(destinationJson) ? destinationJson.destinationConfiguration : destinationJson;
	}
	/**
	* Transform destination to string containing destination information.
	* @param destination - Either destination object or destinationName and Jwt.
	* @returns String containing information on the destination.
	*/
	function toDestinationNameUrl(destination) {
		if ((0, destination_accessor_types_1$1.isDestinationFetchOptions)(destination)) return `name: ${destination.destinationName}`;
		const text = ["name", "url"].filter((key$1) => destination[key$1]).map((key$1) => `${key$1}: ${destination[key$1]}`);
		return text.length > 0 ? text.join(",") : "Destination does not have a 'name' or 'url' property.";
	}
	function setOriginalProperties(destination) {
		const originalProperties = destination.originalProperties ? destination.originalProperties : destination;
		return {
			...destination,
			originalProperties
		};
	}
	function setDefaultAuthenticationFallback(destination) {
		return destination.authentication ? destination : {
			...destination,
			authentication: getAuthenticationType(destination)
		};
	}
	/**
	* Transforms the upper case properties of the destination service response to lower case.
	* @internal
	* @param certificate - Response from the certificate endpoint of the destination service.
	* @returns The parsed Destination Certificate with lower case properties.
	*/
	function parseCertificate(certificate) {
		return {
			name: certificate.Name || certificate.name,
			content: certificate.Content || certificate.content,
			type: certificate.Type || certificate.type
		};
	}
	function parseCertificates(destination) {
		return {
			...destination,
			certificates: (destination.certificates || []).map((certificate) => parseCertificate(certificate))
		};
	}
	function parseAuthToken(authToken) {
		return {
			type: authToken.type,
			value: authToken.value,
			expiresIn: authToken.expires_in,
			error: "error" in authToken ? authToken.error : null,
			http_header: authToken.http_header
		};
	}
	function parseAuthTokens(destination) {
		return {
			...destination,
			authTokens: (destination.authTokens || []).map((token) => parseAuthToken(token))
		};
	}
	function setTrustAll(destination) {
		return {
			...destination,
			isTrustingAllCertificates: parseTrustAll(destination.isTrustingAllCertificates)
		};
	}
	function parseTrustAll(isTrustingAllCertificates) {
		if (typeof isTrustingAllCertificates === "string") return isTrustingAllCertificates.toLowerCase() === "true";
		return !!isTrustingAllCertificates;
	}
	function getAuthenticationType(destination) {
		return destination.authentication || destination.username && destination.password ? "BasicAuthentication" : "NoAuthentication";
	}
	function setForwardAuthToken(destination) {
		const forwardAuthToken = destination.originalProperties?.forwardAuthToken ?? destination.originalProperties?.["HTML5.ForwardAuthToken"] ?? destination.forwardAuthToken;
		return {
			...destination,
			forwardAuthToken: forwardAuthToken === "true" || forwardAuthToken === true
		};
	}
	/**
	* @internal
	*/
	function isDestinationConfiguration(destination) {
		return destination.URL !== void 0;
	}
	/**
	* @internal
	*/
	function isDestinationJson(destination) {
		return Object.keys(destination).includes("destinationConfiguration");
	}
	const configMapping = {
		URL: "url",
		Name: "name",
		User: "username",
		Password: "password",
		ProxyType: "proxyType",
		"sap-client": "sapClient",
		Authentication: "authentication",
		TrustAll: "isTrustingAllCertificates",
		Type: "type",
		tokenServiceURL: "tokenServiceUrl",
		clientId: "clientId",
		clientSecret: "clientSecret",
		tokenServiceUser: "tokenServiceUser",
		tokenServicePassword: "tokenServicePassword",
		CloudConnectorLocationId: "cloudConnectorLocationId",
		certificates: "certificates",
		KeyStoreLocation: "keyStoreName",
		KeyStorePassword: "keyStorePassword",
		SystemUser: "systemUser",
		"x_user_token.jwks": "jwks",
		"x_user_token.jwks_uri": "jwksUri",
		"HTML5.ForwardAuthToken": "forwardAuthToken",
		forwardAuthToken: "forwardAuthToken"
	};
	/**
	* @internal
	*/
	function noDestinationErrorMessage(destination) {
		return (0, destination_accessor_types_1$1.isDestinationFetchOptions)(destination) ? `Could not find a destination with name "${destination.destinationName}"! Unable to execute request.` : "Could not find a destination to execute request against and no destination name has been provided (this should never happen)!";
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/protocol.js
var require_protocol = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/protocol.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getProtocol = getProtocol;
	const protocols = {
		http: "http",
		https: "https",
		socks: "socks"
	};
	/**
	* @internal
	* Get {@link Protocol} from its string representation.
	* @param protocol - Protocol as string, either 'http'/'https' or 'http:'/'https:'.
	* @returns Either the matching protocol or undefined.
	*/
	function getProtocol(protocol) {
		return protocol.endsWith(":") ? getProtocol(protocol.slice(0, -1)) : protocols[protocol];
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/authorization-header.js
var require_authorization_header = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/authorization-header.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getAuthHeader = getAuthHeader;
	exports.basicHeader = basicHeader;
	exports.buildAuthorizationHeaders = buildAuthorizationHeaders;
	const util_1$20 = require_dist$4();
	const destination_1$3 = require_destination$1();
	const logger$18 = (0, util_1$20.createLogger)({
		package: "connectivity",
		messageContext: "authorization-header"
	});
	/**
	* @internal
	* Get an authentication header from given custom headers.
	* @param authenticationType - The authentication type of a destination
	* @param customHeaders - Custom headers.
	* @returns An authentication header.
	*/
	function getAuthHeader(authenticationType, customHeaders) {
		if (authenticationType === "PrincipalPropagation") {
			const principalPropagationHeader = (0, util_1$20.pickValueIgnoreCase)(customHeaders, "SAP-Connectivity-Authentication");
			if (principalPropagationHeader) return { "SAP-Connectivity-Authentication": principalPropagationHeader };
		}
		const authorizationHeader = (0, util_1$20.pickValueIgnoreCase)(customHeaders, "authorization");
		if (authorizationHeader) return { authorization: authorizationHeader };
	}
	function headerFromTokens(authenticationType, authTokens) {
		if (!authTokens || !authTokens.length) throw Error(`\`AuthenticationType\` is "${authenticationType}", but no auth tokens could be fetched from the destination service.`);
		const usableTokens = authTokens.filter((token) => !token.error);
		if (!usableTokens.length) throw Error([
			"The destination tried to provide authorization tokens but failed in all cases. This is most likely due to misconfiguration.",
			"Original error messages:",
			...authTokens.map((token) => token.error)
		].join(util_1$20.unixEOL));
		const authToken = usableTokens[0];
		return { authorization: authToken.http_header.value };
	}
	function headerFromBasicAuthDestination(destination) {
		if ((0, util_1$20.isNullish)(destination.username) || (0, util_1$20.isNullish)(destination.password)) throw Error("AuthenticationType is \"BasicAuthentication\", but \"username\" and / or \"password\" are missing!");
		return { authorization: basicHeader(destination.username, destination.password) };
	}
	/**
	* @internal
	* @param username - The username
	* @param password - The password
	* @returns basic header as string
	*/
	function basicHeader(username, password) {
		return "Basic " + (0, util_1$20.encodeBase64)(`${username}:${password}`);
	}
	function headerForPrincipalPropagation(destination) {
		const principalPropagationHeader = destination?.proxyConfiguration?.headers?.["SAP-Connectivity-Authentication"];
		if (!principalPropagationHeader) throw Error("Principal propagation was selected in destination, but no SAP-Connectivity-Authentication bearer header was added by connectivity service.");
		return { "SAP-Connectivity-Authentication": principalPropagationHeader };
	}
	function getProxyRelatedAuthHeaders(destination) {
		const authHeader = destination?.proxyConfiguration?.headers?.["Proxy-Authorization"];
		if (authHeader) return { "Proxy-Authorization": authHeader };
	}
	async function getAuthenticationRelatedHeaders(destination) {
		const destinationAuthHeaders = getAuthHeader(destination.authentication, destination.headers);
		logger$18.debug(`Getting authentication related headers for authentication type: ${destination.authentication}`);
		if (destinationAuthHeaders) {
			logger$18.debug("Authentication header from 'destination.headers' used.");
			return destinationAuthHeaders;
		}
		switch (destination.authentication) {
			case null:
			case void 0:
				logger$18.warn("No authentication type is specified on the destination. Assuming \"NoAuthentication\".");
				return;
			case "NoAuthentication": return;
			case "ClientCertificateAuthentication": return;
			case "SAMLAssertion":
			case "OAuth2SAMLBearerAssertion":
			case "OAuth2UserTokenExchange":
			case "OAuth2JWTBearer":
			case "OAuth2ClientCredentials":
			case "OAuth2Password":
			case "OAuth2RefreshToken": {
				const header = headerFromTokens(destination.authentication, destination.authTokens);
				if (destination.authentication === "SAMLAssertion") {
					logger$18.warn("Destination authentication flow is 'SamlAssertion' and the auth header contains the SAML assertion. In most cases you want to translate the assertion to a Bearer token using the 'OAuth2SAMLBearerAssertion' flow.");
					return {
						...header,
						"x-sap-security-session": "create"
					};
				}
				return header;
			}
			case "BasicAuthentication": return headerFromBasicAuthDestination(destination);
			case "PrincipalPropagation": return headerForPrincipalPropagation(destination);
			default: throw Error(`The destination used "${destination.authentication}" as authentication type which is not supported by the SAP Cloud SDK.`);
		}
	}
	/**
	* @param destination - Destination from which headers are build
	* @param customAuthHeader - Additional custom headers
	* @returns authorization - headers build from destination
	* @internal
	*/
	async function buildAuthorizationHeaders(destination) {
		const sanitizedDestination = (0, destination_1$3.sanitizeDestination)(destination);
		return {
			...await getAuthenticationRelatedHeaders(sanitizedDestination),
			...getProxyRelatedAuthHeaders(sanitizedDestination)
		};
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/get-protocol.js
var require_get_protocol = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/get-protocol.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getProtocolOrDefault = getProtocolOrDefault;
	const util_1$19 = require_dist$4();
	const protocol_1$1 = require_protocol();
	const logger$17 = (0, util_1$19.createLogger)({
		package: "connectivity",
		messageContext: "get-protocol"
	});
	/**
	* Extracts the http protocol from the destination URL. The default value is http if no protocol is given.
	* @param destination - URL of this destination is parsed
	* @throws Error in case a unsupported protocol is given in the destination URL like rfc://example.com.
	* @returns The protocol, either https or http.
	* @internal
	*/
	function getProtocolOrDefault(destination) {
		const urlParts = destination.url.toLowerCase()?.split("://");
		if (!urlParts || urlParts.length === 1) {
			logger$17.warn(`URL of the provided destination (${destination.url}) has no protocol specified! Assuming HTTPS.`);
			return "https";
		}
		const protocol = (0, protocol_1$1.getProtocol)(urlParts[0]);
		if (!protocol) throw new Error(`Protocol of the provided destination (${destination.url}) is not supported! Currently only HTTP and HTTPS are supported.`);
		return protocol;
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/destination-service-types.js
var require_destination_service_types = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/destination-service-types.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.assertHttpDestination = assertHttpDestination;
	exports.isHttpDestination = isHttpDestination;
	/**
	* Assertion that the Destination is a HttpDestination.
	* This method comes in handy when you retrieved a destination from the destination service and need to check if it is a HttpDestination.
	* @param destination - Destination or HttpDestination.
	*/
	function assertHttpDestination(destination) {
		if (!isHttpDestination(destination)) throw new Error(destination.url ? `The 'type' property is  ${destination.type} instead of  HTTP for destination '${destination.name}' which is mandatory if you use it as an 'HTTP destination` : `The 'url' property is not set for destination ${destination.name} which is mandatory if you use it as an 'HTTP destination`);
	}
	/**
	* Type guard to find if object is a Destination.
	* @param destination - Destination to be checked.
	* @returns Boolean.
	*/
	function isHttpDestination(destination) {
		return !!destination && !!destination.url && (!destination.type || destination.type === "HTTP");
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/http-proxy-util.js
var require_http_proxy_util = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/http-proxy-util.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.proxyStrategy = proxyStrategy;
	exports.parseProxyEnv = parseProxyEnv;
	exports.addProxyConfigurationInternet = addProxyConfigurationInternet;
	exports.getProxyConfig = getProxyConfig;
	const node_url_1 = __require("node:url");
	const util_1$18 = require_dist$4();
	const protocol_1 = require_protocol();
	const authorization_header_1$2 = require_authorization_header();
	const get_protocol_1$1 = require_get_protocol();
	const destination_service_types_1$4 = require_destination_service_types();
	const logger$16 = (0, util_1$18.createLogger)({
		package: "connectivity",
		messageContext: "proxy-util"
	});
	/**
	* @internal
	* Determines the proxy strategy. If the 'no_proxy' env variable is set, the `ProxyConfiguration` in the destination is omitted.
	* For the 'on-premise' and 'internet' proxy strategies the connectivity service or environment variables are checked to fill the `ProxyConfiguration`.
	* @param destination - Destination to derive the proxy strategy from.
	* @returns The proxy strategy for the given destination.
	*/
	function proxyStrategy(destination) {
		if (destination.proxyType === "OnPremise") {
			logger$16.debug("OnPrem destination proxy settings from connectivity service will be used.");
			return "on-premise";
		}
		if (destination.proxyType === "PrivateLink") {
			logger$16.debug("PrivateLink destination proxy settings will be used. This is not supported in local/CI/CD environments.");
			return "private-link";
		}
		if ((0, destination_service_types_1$4.isHttpDestination)(destination)) {
			const destinationProtocol = (0, get_protocol_1$1.getProtocolOrDefault)(destination);
			return getProxyStrategyFromProxyEnvValue(destinationProtocol, destination.url);
		}
		return "no-proxy";
	}
	function getProxyStrategyFromProxyEnvValue(protocol, destinationUrl) {
		if (!getProxyEnvValue(protocol)) {
			logger$16.debug(`Could not find proxy settings for ${protocol} in the environment variables - no proxy used.`);
			return "no-proxy";
		}
		if (getNoProxyEnvValue().includes(destinationUrl)) {
			logger$16.debug(`Destination URL ${destinationUrl} is in no_proxy list: ${getNoProxyEnvValue()} - no proxy used.`);
			return "no-proxy";
		}
		if (getProxyEnvValue(protocol)) {
			logger$16.debug(`Proxy settings for ${protocol} are found in environment variables.`);
			return "internet";
		}
		return "no-proxy";
	}
	function getProxyEnvValue(protocol) {
		const proxyEnvKey = protocol + "_proxy";
		const proxyEnvValue = process.env[proxyEnvKey.toLowerCase()] || process.env[proxyEnvKey.toUpperCase()];
		logger$16.debug(`Tried to read ${proxyEnvKey.toLowerCase()} or ${proxyEnvKey.toUpperCase()} from the environment variables. Value is ${proxyEnvValue}.`);
		return proxyEnvValue || void 0;
	}
	function getNoProxyEnvValue() {
		const noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;
		if (!noProxyEnv) return [];
		const split = noProxyEnv.split(",").map((s$1) => s$1.trim());
		if (split.find((s$1) => s$1.includes("*"))) logger$16.warn(`The no_proxy env contains a wildcard ${noProxyEnv}, which is currently not supported`);
		return split;
	}
	function getPort(url$3) {
		if (url$3.port) return parseInt(url$3.port);
		return url$3.protocol === "https:" ? 443 : 80;
	}
	function getOriginalProtocol(href) {
		const test$1 = href.match(/^[\w.-]+:\/\//);
		return test$1 ? test$1[0].slice(0, -2) : void 0;
	}
	function sanitizeUrl(href) {
		const protocol = getOriginalProtocol(href);
		if (!protocol) {
			logger$16.debug("No protocol specified, using \"http:\".");
			return `http://${href}`;
		}
		return href;
	}
	function validateUrl(url$3) {
		if (url$3.protocol !== "http:" && url$3.protocol !== "https:") throw new Error(`Unsupported protocol "${url$3.protocol}".`);
		if (url$3.protocol === "https:") logger$16.debug("Using protocol \"https:\" to connect to a proxy. This is unusual but possible.");
		if (url$3.username && !url$3.password) throw new Error("Password missing.");
	}
	/**
	* Parses the environment variable for the web proxy and extracts the values considering defaults like http for the protocol and 80 or 443 for the port.
	* The general pattern to be parsed is `protocol://user:password@host:port`, where everything besides the host is optional.
	* Special characters in the user and password need to be percent encoded.
	* @param proxyEnvValue - Environment variable which is parsed.
	* @returns Configuration with default values or `undefined` if the parsing failed.
	*/
	function parseProxyEnv(proxyEnvValue) {
		const href = sanitizeUrl(proxyEnvValue);
		try {
			const url$3 = new node_url_1.URL(href);
			validateUrl(url$3);
			const proxyConfig = {
				host: url$3.hostname,
				protocol: (0, protocol_1.getProtocol)(url$3.protocol),
				port: getPort(url$3)
			};
			if (url$3.username && url$3.password) proxyConfig.headers = { "Proxy-Authorization": (0, authorization_header_1$2.basicHeader)(decodeURIComponent(url$3.username), decodeURIComponent(url$3.password)) };
			if (proxyConfig) {
				const loggableConfig = {
					...proxyConfig,
					headers: (0, util_1$18.sanitizeRecord)(proxyConfig.headers || {}, "Authorization header present. Not logged for security reasons.")
				};
				logger$16.debug(`Used Proxy Configuration: ${JSON.stringify(loggableConfig, null, 2)}.`);
			}
			return proxyConfig;
		} catch (err) {
			logger$16.warn(`Could not parse proxy configuration from environment variable. Reason: ${err.message}`);
			return void 0;
		}
	}
	/**
	* Adds the proxy configuration to a destination based on web proxies defined in environment variables. See {@link ProxyConfiguration} and {@link proxyStrategy} for details.
	* @param destination - to which the proxy configuration is added.
	* @returns Destination containing the configuration for web proxy.
	* @internal
	*/
	function addProxyConfigurationInternet(destination) {
		const proxyEnvValue = getProxyEnvValue((0, get_protocol_1$1.getProtocolOrDefault)(destination));
		if (proxyEnvValue) return {
			...destination,
			proxyConfiguration: parseProxyEnv(proxyEnvValue) || destination.proxyConfiguration
		};
		logger$16.warn("Attempt to get proxy config from environment variables failed. At this point this should not happen - no proxy used.");
		return { ...destination };
	}
	/**
	* Picks the the proxy config properties.
	* Note, that the protocol ('http' or 'https') is not related to the destinations' target system protocol and in most cases 'http'.
	* @param destination - Destination containing the proxy configuration.
	* @returns Reduced proxy configuration.
	* @internal
	*/
	function getProxyConfig(destination) {
		if (destination.proxyConfiguration) {
			const { host, protocol, port } = destination.proxyConfiguration;
			return {
				host,
				protocol,
				port
			};
		}
		return false;
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/forward-auth-token.js
var require_forward_auth_token = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/forward-auth-token.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.setForwardedAuthTokenIfNeeded = setForwardedAuthTokenIfNeeded;
	const util_1$17 = require_dist$4();
	const jwt_1$10 = require_jwt();
	const logger$15 = (0, util_1$17.createLogger)({
		package: "connectivity",
		messageContext: "forward-auth-token"
	});
	/**
	* Transform a token to the format given by the destination service.
	* @param token - Token to transform.
	* @returns The transformed token.
	*/
	function buildDestinationAuthToken(token) {
		const decodedJwt = (0, jwt_1$10.decodeJwt)(token);
		return [{
			value: token,
			expiresIn: decodedJwt.exp?.toString(),
			error: null,
			http_header: {
				key: "Authorization",
				value: `Bearer ${token}`
			},
			type: "Bearer"
		}];
	}
	function validateToken(token) {
		if (!token) logger$15.warn("Option 'forwardAuthToken' was set on destination but no token was provided to forward. This is most likely unintended and will lead to an authorization error on request execution.");
		return !!token;
	}
	/**
	* @internal
	* Set forwarded auth token, if needed.
	* @param destination - Destination to set the token on, if needed.
	* @param token - Token to forward, if needed.
	*/
	function setForwardedAuthTokenIfNeeded(destination, token) {
		if (destination.forwardAuthToken) {
			if (validateToken(token)) {
				logger$15.debug("Option 'forwardAuthToken' enabled on destination. Using the given token for the destination.");
				destination.authTokens = buildDestinationAuthToken(token);
			}
		}
		return destination;
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/destination-from-env.js
var require_destination_from_env = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/destination-from-env.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getDestinationsFromEnv = getDestinationsFromEnv;
	exports.getDestinationFromEnvByName = getDestinationFromEnvByName;
	exports.getDestinationsEnvVariable = getDestinationsEnvVariable;
	exports.searchEnvVariablesForDestination = searchEnvVariablesForDestination;
	exports.validateNameAvailable = validateNameAvailable;
	exports.setDestinationsInEnv = setDestinationsInEnv;
	const util_1$16 = require_dist$4();
	const destination_1$2 = require_destination$1();
	const http_proxy_util_1$4 = require_http_proxy_util();
	const destination_service_types_1$3 = require_destination_service_types();
	const forward_auth_token_1$3 = require_forward_auth_token();
	const logger$14 = (0, util_1$16.createLogger)({
		package: "connectivity",
		messageContext: "env-destination-accessor"
	});
	/**
	* Get all destinations from the environment variable "destinations".
	* This is discouraged for productive use! Use {@link useOrFetchDestination} for fetching destinations from the Cloud Foundry destination service.
	*
	* @returns A list of destinations
	* @internal
	*/
	function getDestinationsFromEnv() {
		const destinationsEnv = getDestinationsEnvVariable();
		logger$14.debug(`The value for the destination environment variable is: ${destinationsEnv}`);
		if (destinationsEnv) {
			let destinations;
			try {
				destinations = JSON.parse(destinationsEnv);
			} catch (err) {
				throw new util_1$16.ErrorWithCause("Error in parsing the destinations from the environment variable.", err);
			}
			validateDestinations(destinations);
			return destinations.map((destination) => (0, destination_1$2.isDestinationConfiguration)(destination) ? (0, destination_1$2.parseDestination)(destination) : (0, destination_1$2.sanitizeDestination)(destination));
		}
		return [];
	}
	/**
	* @internal
	* Get a destination from the environment variables by name. If there are multiple destinations with the same name the first one will be used.
	* This is discouraged for productive use! Use destination-accessor/useOrFetchDestination for fetching destinations
	* from the Cloud Foundry destination service.
	* @param name - Name of the destination
	* @returns The requested destination if existent, otherwise `null`.
	*/
	function getDestinationFromEnvByName(name$2) {
		const matchingDestinations = getDestinationsFromEnv().filter((dest) => dest.name === name$2);
		if (!matchingDestinations.length) return null;
		if (matchingDestinations.length > 1) logger$14.warn(`The 'destinations' env variable contains multiple destinations with the name '${name$2}'. Only the first entry will be considered.`);
		return matchingDestinations[0];
	}
	/**
	* @internal
	*/
	function getDestinationsEnvVariable() {
		return process.env["destinations"];
	}
	function validateDestinations(destinations) {
		destinations.forEach((destination) => {
			if (typeof destination.name === "undefined" && typeof destination.Name === "undefined") logger$14.warn("Destination from 'destinations' env variable is missing 'name' or 'Name' property.");
		});
	}
	/**
	* @internal
	*/
	function searchEnvVariablesForDestination(options) {
		logger$14.debug("Attempting to retrieve destination from environment variable.");
		if (getDestinationsEnvVariable()) try {
			const destination = getDestinationFromEnvByName(options.destinationName);
			if (destination) {
				logger$14.info(`Successfully retrieved destination '${options.destinationName}' from environment variable.`);
				(0, forward_auth_token_1$3.setForwardedAuthTokenIfNeeded)(destination, options.jwt);
				return (0, destination_service_types_1$3.isHttpDestination)(destination) && ["internet", "private-link"].includes((0, http_proxy_util_1$4.proxyStrategy)(destination)) ? (0, http_proxy_util_1$4.addProxyConfigurationInternet)(destination) : destination;
			}
		} catch (error$1) {
			logger$14.error(`Error in reading the given destinations from the environment variable ${error$1.message}.`);
		}
		logger$14.debug("No environment variable set.");
		return null;
	}
	/**
	* @internal
	*/
	function validateNameAvailable(destinationName, existingNames) {
		if (existingNames.has(destinationName)) throw new Error(`Parsing destinations failed, destination with name "${destinationName}" already exists in the "destinations" environment variables.`);
	}
	/**
	* @internal
	*/
	function setDestinationsInEnv(destinations) {
		process.env.destinations = JSON.stringify(destinations);
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/service-binding-to-destination.js
var require_service_binding_to_destination = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/service-binding-to-destination.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.serviceToDestinationTransformers = void 0;
	exports.transformServiceBindingToDestination = transformServiceBindingToDestination;
	exports.transformServiceBindingToClientCredentialsDestination = transformServiceBindingToClientCredentialsDestination;
	const token_accessor_1$4 = require_token_accessor();
	const jwt_1$9 = require_jwt();
	/**
	* @internal
	*/
	exports.serviceToDestinationTransformers = {
		"business-logging": businessLoggingBindingToDestination,
		"s4-hana-cloud": xfS4hanaCloudBindingToDestination,
		destination: destinationBindingToDestination,
		"saas-registry": saasRegistryBindingToDestination,
		workflow: workflowBindingToDestination,
		"service-manager": serviceManagerBindingToDestination,
		xsuaa: xsuaaToDestination,
		aicore: aicoreToDestination
	};
	/**
	* Convenience function to create a destination from the provided service binding.
	* If a JWT is provided as part of options, the tenant in the JWT is used for client credentials grant, else the provider tenant is used, wherever applicable.
	* Supported service types are:
	* - business-logging (OAuth2ClientCredentials)
	* - destination (OAuth2ClientCredentials)
	* - s4-hana-cloud (BasicAuthentication)
	* - saas-registry (OAuth2ClientCredentials)
	* - workflow (OAuth2ClientCredentials)
	* - service-manager (OAuth2ClientCredentials)
	* - xsuaa (OAuth2ClientCredentials)
	* - aicore (OAuth2ClientCredentials)
	* Throws an error if the provided service binding is not supported.
	* @param serviceBinding - The service binding to transform.
	* @param options - Options used for fetching the destination.
	* @returns A promise returning the transformed destination on success.
	*/
	async function transformServiceBindingToDestination(serviceBinding, options) {
		if (exports.serviceToDestinationTransformers[serviceBinding.label]) return exports.serviceToDestinationTransformers[serviceBinding.label](serviceBinding, options);
		throw new Error(`The provided service binding of type ${serviceBinding.label} is not supported out of the box for destination transformation.`);
	}
	/**
	* Convenience function to create a destination from the provided service binding.
	* Transforms a service binding to a destination of type OAuth2ClientCredentials.
	* If a JWT is provided as part of the options, the tenant in the JWT is used for the client credentials grant, else the provider tenant is used, wherever applicable.
	* @param service - The service binding to transform.
	* @param options - Options used to transform the service binding.
	* @returns A promise returning the transformed destination on success.
	*/
	async function transformServiceBindingToClientCredentialsDestination(service, options) {
		const token = await (0, token_accessor_1$4.serviceToken)(service, options);
		return buildClientCredentialsDestination(token, options?.url ?? service.url, service.name);
	}
	async function aicoreToDestination(service, options) {
		const token = await (0, token_accessor_1$4.serviceToken)(service, options);
		return buildClientCredentialsDestination(token, service.credentials.serviceurls.AI_API_URL, service.name);
	}
	async function xsuaaToDestination(service, options) {
		const token = await (0, token_accessor_1$4.serviceToken)(service, options);
		return buildClientCredentialsDestination(token, service.credentials.apiurl, service.name);
	}
	async function serviceManagerBindingToDestination(service, options) {
		const token = await (0, token_accessor_1$4.serviceToken)(service, options);
		return buildClientCredentialsDestination(token, service.credentials.sm_url, service.name);
	}
	async function destinationBindingToDestination(service, options) {
		const token = await (0, token_accessor_1$4.serviceToken)(service, options);
		return buildClientCredentialsDestination(token, service.credentials.uri, service.name);
	}
	async function saasRegistryBindingToDestination(service, options) {
		const token = await (0, token_accessor_1$4.serviceToken)(service, options);
		return buildClientCredentialsDestination(token, service.credentials["saas_registry_url"], service.name);
	}
	async function businessLoggingBindingToDestination(service, options) {
		const transformedService = {
			...service,
			credentials: { ...service.credentials.uaa }
		};
		const token = await (0, token_accessor_1$4.serviceToken)(transformedService, options);
		return buildClientCredentialsDestination(token, service.credentials.writeUrl, service.name);
	}
	async function workflowBindingToDestination(service, options) {
		const transformedService = {
			...service,
			credentials: { ...service.credentials.uaa }
		};
		const token = await (0, token_accessor_1$4.serviceToken)(transformedService, options);
		return buildClientCredentialsDestination(token, service.credentials.endpoints.workflow_odata_url, service.name);
	}
	async function xfS4hanaCloudBindingToDestination(service) {
		return {
			url: service.credentials.URL,
			authentication: "BasicAuthentication",
			username: service.credentials.User,
			password: service.credentials.Password
		};
	}
	function buildClientCredentialsDestination(token, url$3, name$2) {
		const expirationTime = (0, jwt_1$9.decodeJwt)(token).exp;
		const expiresIn = expirationTime ? Math.floor((expirationTime * 1e3 - Date.now()) / 1e3).toString(10) : void 0;
		return {
			url: url$3,
			name: name$2,
			authentication: "OAuth2ClientCredentials",
			authTokens: [{
				value: token,
				type: "bearer",
				expiresIn,
				http_header: {
					key: "Authorization",
					value: `Bearer ${token}`
				},
				error: null
			}]
		};
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/destination-from-vcap.js
var require_destination_from_vcap = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/destination-from-vcap.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getDestinationFromServiceBinding = getDestinationFromServiceBinding;
	exports.searchServiceBindingForDestination = searchServiceBindingForDestination;
	const util_1$15 = require_dist$4();
	const jwt_1$8 = require_jwt();
	const environment_accessor_1$3 = require_environment_accessor();
	const http_proxy_util_1$3 = require_http_proxy_util();
	const destination_service_types_1$2 = require_destination_service_types();
	const service_binding_to_destination_1 = require_service_binding_to_destination();
	const forward_auth_token_1$2 = require_forward_auth_token();
	const logger$13 = (0, util_1$15.createLogger)({
		package: "connectivity",
		messageContext: "destination-accessor-vcap"
	});
	/**
	* Tries to build a destination from a service binding with the given name.
	* Throws an error if no services are bound at all, no service with the given name can be found, or the service type is not supported.
	* The last error can be circumvent by using the second parameter to provide a custom function that transforms a service binding to a destination.
	* @param options - Options to customize the behavior of this function.
	* @returns A destination.
	*/
	async function getDestinationFromServiceBinding(options) {
		const decodedJwt = options.iss ? { iss: options.iss } : options.jwt ? (0, jwt_1$8.decodeJwt)(options.jwt) : void 0;
		const retrievalOptions = {
			...options,
			jwt: decodedJwt
		};
		const destination = await retrieveDestination(retrievalOptions);
		const destWithProxy = destination && (0, destination_service_types_1$2.isHttpDestination)(destination) && ["internet", "private-link"].includes((0, http_proxy_util_1$3.proxyStrategy)(destination)) ? (0, http_proxy_util_1$3.addProxyConfigurationInternet)(destination) : destination;
		if (destWithProxy) (0, forward_auth_token_1$2.setForwardedAuthTokenIfNeeded)(destWithProxy, options.jwt);
		return destWithProxy;
	}
	async function retrieveDestination({ useCache, jwt, destinationName, serviceBindingTransformFn }) {
		const service = (0, environment_accessor_1$3.getServiceBindingByInstanceName)(destinationName);
		const destination = await (serviceBindingTransformFn || transform)(service, {
			useCache,
			jwt
		});
		return {
			name: destinationName,
			...destination
		};
	}
	async function transform(service, options) {
		if (!service_binding_to_destination_1.serviceToDestinationTransformers[service.label]) throw serviceTypeNotSupportedError(service);
		return service_binding_to_destination_1.serviceToDestinationTransformers[service.label](service, options);
	}
	function serviceTypeNotSupportedError(service) {
		return Error(`The service "${service.name}" is of type "${service.label}" which is not supported! Consider providing your own transformation function when calling \`getDestinationFromServiceBinding()\`, like this:
  destinationServiceForBinding(yourServiceName, { serviceBindingToDestination: yourTransformationFunction });`);
	}
	/**
	* @internal
	*/
	async function searchServiceBindingForDestination(options) {
		logger$13.debug("Attempting to retrieve destination from service binding.");
		try {
			const destination = await getDestinationFromServiceBinding(options);
			logger$13.info("Successfully retrieved destination from service binding.");
			return destination;
		} catch (error$1) {
			logger$13.debug(`Could not retrieve destination from service binding. If you are not using SAP Extension Factory, this information probably does not concern you. ${error$1.message}`);
		}
		return null;
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/connectivity-service.js
var require_connectivity_service = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/connectivity-service.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.addProxyConfigurationOnPrem = addProxyConfigurationOnPrem;
	exports.httpProxyHostAndPort = httpProxyHostAndPort;
	exports.socksProxyHostAndPort = socksProxyHostAndPort;
	const util_1$14 = require_dist$4();
	const environment_accessor_1$2 = require_environment_accessor();
	const token_accessor_1$3 = require_token_accessor();
	const logger$12 = (0, util_1$14.createLogger)({
		package: "connectivity",
		messageContext: "connectivity-service"
	});
	/**
	* @internal
	* @param destination - Destination which is extended
	* @param subscriberToken - The user and service token
	* @returns Destination containing the proxy config
	*/
	async function addProxyConfigurationOnPrem(destination, subscriberToken) {
		if (destination.type === "MAIL") return {
			...destination,
			proxyConfiguration: await socksProxyHostAndPort(subscriberToken?.userJwt.decoded)
		};
		const proxyConfiguration = {
			...httpProxyHostAndPort(),
			headers: { ...await proxyHeaders(destination.authentication, subscriberToken) }
		};
		return {
			...destination,
			proxyConfiguration
		};
	}
	/**
	* @internal
	* @returns Proxy host and port
	*/
	function httpProxyHostAndPort() {
		const service = readConnectivityServiceBinding();
		return {
			host: service.credentials.onpremise_proxy_host,
			port: service.credentials.onpremise_proxy_http_port || service.credentials.onpremise_proxy_port,
			protocol: "http"
		};
	}
	/**
	* @internal
	* @param userJwt - The user JWT
	* @returns Socks Proxy Configuration
	*/
	async function socksProxyHostAndPort(userJwt) {
		const service = readConnectivityServiceBinding();
		const connectivityServiceToken = await (0, token_accessor_1$3.serviceToken)(service, { jwt: userJwt });
		return {
			host: service.credentials.onpremise_proxy_host,
			port: parseInt(service.credentials.onpremise_socks5_proxy_port),
			protocol: "socks",
			"proxy-authorization": connectivityServiceToken
		};
	}
	function readConnectivityServiceBinding() {
		const serviceBindings = (0, environment_accessor_1$2.getServiceBindings)("connectivity");
		if (!serviceBindings.length) throw new Error("No binding to a connectivity service found! Please make sure to bind an instance of the connectivity service to your app if you want to connect to on-premise destinations.");
		return serviceBindings[0];
	}
	async function proxyHeaders(authenticationType, subscriberToken) {
		const proxyAuthHeader = await proxyAuthorizationHeader(subscriberToken?.serviceJwt.encoded);
		const sapConnectivityHeader = sapConnectivityAuthenticationHeader(authenticationType, subscriberToken?.userJwt.encoded);
		return {
			...proxyAuthHeader,
			...sapConnectivityHeader
		};
	}
	async function proxyAuthorizationHeader(jwt) {
		try {
			const connServiceBinding = readConnectivityServiceBinding();
			const token = await (0, token_accessor_1$3.serviceToken)(connServiceBinding, { jwt });
			return { "Proxy-Authorization": `Bearer ${token}` };
		} catch (error$1) {
			throw new util_1$14.ErrorWithCause("Failed to add proxy authorization header - client credentials grant failed!", error$1);
		}
	}
	function sapConnectivityAuthenticationHeader(authenticationType, jwt) {
		if (authenticationType === "PrincipalPropagation") {
			if (jwt) return { "SAP-Connectivity-Authentication": `Bearer ${jwt}` };
			throw new Error(`Unable to create "SAP-Connectivity-Authentication" header: no JWT found on the current request.
     Connecting to on-premise systems via principle propagation is not possible.`);
		}
		if (authenticationType === "BasicAuthentication") logger$12.warn("You are connecting to an On-Premise system using basic authentication. For productive usage Principal propagation is recommended.");
		return {};
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/tenant.js
var require_tenant = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/tenant.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.isIdenticalTenant = isIdenticalTenant;
	const jwt_1$7 = require_jwt();
	/**
	* Compare two decoded JWTs based on their `tenantId`s.
	* @param userTokenPayload - User JWT payload.
	* @param providerTokenPayload - Provider JWT payload.
	* @returns Whether the tenant is identical.
	* @internal
	*/
	function isIdenticalTenant(userTokenPayload, providerTokenPayload) {
		return (0, jwt_1$7.getTenantId)(userTokenPayload) === (0, jwt_1$7.getTenantId)(providerTokenPayload);
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/async-cache.js
var require_async_cache = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/async-cache.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.AsyncCache = void 0;
	const cache_1$1 = require_cache$1();
	/**
	* @internal
	* Async wrapper around Cache<T>.
	*/
	var AsyncCache = class {
		constructor(defaultValidityTime = 0) {
			this.cache = new cache_1$1.Cache(defaultValidityTime);
		}
		/**
		* Specifies whether an entry with a given key is defined in cache.
		* @param key - The entry's key.
		* @returns A boolean value that indicates whether the entry exists in cache.
		*/
		async hasKey(key$1) {
			return this.cache.hasKey(key$1);
		}
		/**
		* Getter of cached entries.
		* @param key - The key of the entry to retrieve.
		* @returns The corresponding entry to the provided key if it is still valid, returns `undefined` otherwise.
		*/
		async get(key$1) {
			return this.cache.get(key$1);
		}
		/**
		* Setter of entries in cache.
		* @param key - The entry's key.
		* @param item - The entry to cache.
		* @returns A promise to oid.
		*/
		async set(key$1, item) {
			return this.cache.set(key$1, item);
		}
		/**
		* Clear all cached items.
		* @returns A promise to void.
		*/
		async clear() {
			return this.cache.clear();
		}
	};
	exports.AsyncCache = AsyncCache;
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/destination-cache.js
var require_destination_cache = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/destination-cache.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.destinationCache = exports.DestinationCache = exports.DefaultDestinationCache = void 0;
	exports.getDestinationCacheKey = getDestinationCacheKey;
	exports.setDestinationCache = setDestinationCache;
	exports.getDefaultIsolationStrategy = getDefaultIsolationStrategy;
	const util_1$13 = require_dist$4();
	const jwt_1$6 = require_jwt();
	const async_cache_1$1 = require_async_cache();
	const logger$11 = (0, util_1$13.createLogger)({
		package: "connectivity",
		messageContext: "destination-cache"
	});
	/**
	* @internal
	* This wrapper class wraps methods of {@link Cache} class as asynchronous methods.
	*/
	var DefaultDestinationCache = class extends async_cache_1$1.AsyncCache {
		constructor(defaultValidityTime = 0) {
			super(defaultValidityTime);
		}
	};
	exports.DefaultDestinationCache = DefaultDestinationCache;
	/**
	* DestinationCache constructor.
	* @param cache - Cache object which is used in DestinationCache
	* @returns A destination cache object.
	* @internal
	*/
	const DestinationCache = (cache$1 = new DefaultDestinationCache(3e5)) => ({
		retrieveDestinationFromCache: async (token, name$2, isolation) => cache$1.get(getDestinationCacheKey(token, name$2, isolation)),
		cacheRetrievedDestination: async (token, destination, isolation) => {
			cacheRetrievedDestination(token, destination, isolation, cache$1);
		},
		cacheRetrievedDestinations: async (token, retrievedDestinations, isolation) => {
			retrievedDestinations.subaccount.forEach((dest) => cacheRetrievedDestination(token, dest, isolation, cache$1));
			retrievedDestinations.instance.forEach((dest) => cacheRetrievedDestination(token, dest, isolation, cache$1));
		},
		clear: async () => {
			cache$1.clear();
		},
		getCacheInstance: () => cache$1
	});
	exports.DestinationCache = DestinationCache;
	/**
	* Retrieve the token to use for tenant identification.
	*
	* For subscriber:
	* If `iss` or XSUAA user JWT was passed, this is the `serviceJwt`.
	* If a custom user JWT was passed, this is used.
	*
	* For provider: always use the token as passed.
	* @param token - Either the subscriber JWTs or one provider JWT.
	* @returns The decoded JWT to use for tenant identification.
	*/
	function getJwtForTenant$1(token) {
		return token?.serviceJwt?.decoded || token;
	}
	/**
	* Retrieve the token to use for user identification.
	*
	* For subscriber:
	* If a user token was passed, this is used.
	* If only `iss` was passed try to get the user from the service token.
	*
	* For provider: always use the token as passed.
	* @param token - Either the subscriber JWTs or one provider JWT.
	* @returns The decoded JWT to use for user identification.
	*/
	function getJwtForUser$1(token) {
		return token?.userJwt?.decoded || token;
	}
	/**
	* Calculates a cache key based on the JWT and destination name for the given isolation strategy.
	* Cache keys for strategies are non-overlapping, i.e. using a cache key for strategy {@link 'tenant'}
	* will not result in a cache hit for a destination that has been cached with strategy {@link 'tenant-user'}.
	* @param decodedJwt - The decoded JWT of the current request.
	* @param destinationName - The name of the destination.
	* @param isolationStrategy - The strategy used to isolate cache entries.
	* @returns The cache key.
	* @internal
	*/
	function getDestinationCacheKey(token, destinationName, isolationStrategy$1 = "tenant-user") {
		if (isolationStrategy$1 === "tenant") return getTenantCacheKey(destinationName, (0, jwt_1$6.getTenantId)(getJwtForTenant$1(token)));
		if (isolationStrategy$1 === "tenant-user") return getTenantUserCacheKey(destinationName, (0, jwt_1$6.getTenantId)(getJwtForTenant$1(token)), (0, jwt_1$6.userId)(getJwtForUser$1(token)));
		logger$11.warn(`Could not build destination cache key. Isolation strategy '${isolationStrategy$1}' is not supported.`);
	}
	function getTenantCacheKey(destinationName, tenant) {
		if (tenant) return `${tenant}::${destinationName}`;
		logger$11.warn("Could not build destination cache key. Isolation strategy 'tenant' is used, but tenant ID is undefined in JWT.");
	}
	function getTenantUserCacheKey(destinationName, tenant, user) {
		if (tenant && user) return `${user}:${tenant}:${destinationName}`;
		logger$11.warn("Could not build destination cache key. Isolation strategy 'tenant-user' is used, but tenant id or user id is undefined in JWT.");
	}
	async function cacheRetrievedDestination(token, destination, isolation, cache$1) {
		if (!destination.name) throw new Error("The destination name is undefined.");
		const key$1 = getDestinationCacheKey(token, destination.name, isolation);
		const expiresIn = (0, util_1$13.first)(destination.authTokens || [])?.expiresIn;
		const expirationTime = expiresIn ? Date.now() + parseInt(expiresIn) * 1e3 : void 0;
		cache$1.set(key$1, {
			entry: destination,
			expires: expirationTime
		});
	}
	/**
	* Sets the custom destination cache instance.
	* Call this method with an instance of {@link DestinationCacheInterface} to override the default cache instance set by the SDK.
	*
	* NOTE: This function should be called at the beginning before any calls to either {@link getDestination} or {@link @sap-cloud-sdk/http-client!executeHttpRequest}.
	* @param cache - An instance of {@link DestinationCacheInterface}.
	*/
	function setDestinationCache(cache$1) {
		exports.destinationCache = (0, exports.DestinationCache)(cache$1);
	}
	/**
	* @internal
	*/
	exports.destinationCache = (0, exports.DestinationCache)();
	/**
	* Determine the default isolation strategy if not given as option.
	* @param jwt - JWT to determine the default isolation strategy
	* @returns The isolation strategy based on the JWT. If no JWT is given it defaults to tenant isolation.
	* @internal
	*/
	function getDefaultIsolationStrategy(jwt) {
		return jwt && (0, jwt_1$6.userId)(jwt) ? "tenant-user" : "tenant";
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/destination-selection-strategies.js
var require_destination_selection_strategies = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/destination-selection-strategies.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.DestinationSelectionStrategies = void 0;
	exports.alwaysProvider = alwaysProvider;
	exports.alwaysSubscriber = alwaysSubscriber;
	exports.subscriberFirst = subscriberFirst;
	const util_1$12 = require_dist$4();
	const logger$10 = (0, util_1$12.createLogger)({
		package: "connectivity",
		messageContext: "destination-selection-strategies"
	});
	/**
	* Constraints the selection to provider destinations.
	* @param allDestinations - Retrieved destinations.
	* @param destinationName - Name of the destination to retrieve.
	* @returns The destination to retrieve, returns `null`, if no matched provider destination is found.
	*/
	function alwaysProvider(allDestinations, destinationName) {
		return findDestination(allDestinations.provider, destinationName) || null;
	}
	/**
	* Constraints the selection to subscriber destinations.
	* @param allDestinations - Retrieved destinations.
	* @param destinationName - Name of the destination to retrieve.
	* @returns The destination to retrieve, returns `null`, if no matched subscriber destination is found.
	*/
	function alwaysSubscriber(allDestinations, destinationName) {
		return findDestination(allDestinations.subscriber, destinationName) || null;
	}
	/**
	* Prioritizes the selection of subscriber destinations.
	* @param allDestinations - Retrieved destinations.
	* @param destinationName - Name of the destination to retrieve.
	* @returns The destination to retrieve, returns `null` if no matched destination is found.
	*/
	function subscriberFirst(allDestinations, destinationName) {
		return findDestination(allDestinations.subscriber, destinationName) || findDestination(allDestinations.provider, destinationName) || null;
	}
	/**
	* Selector of destination selection strategies. See {@link alwaysProvider}, {@link alwaysSubscriber} and {@link subscriberFirst} for more information available selection strategies.
	*/
	exports.DestinationSelectionStrategies = {
		alwaysProvider,
		alwaysSubscriber,
		subscriberFirst
	};
	function findDestination(destinations, destinationName) {
		const isRequestedDestination = (destination) => destination.name === destinationName;
		const instanceDest = destinations.instance.find(isRequestedDestination);
		const subAccountDest = destinations.subaccount.find(isRequestedDestination);
		if (instanceDest && subAccountDest) logger$10.warn(`Found destinations named '${destinationName}' for both, the destination service instance and subaccount. Using instance destination.`);
		return instanceDest || subAccountDest;
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/http-agent/agent-config.js
var require_agent_config = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/http-agent/agent-config.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/register-destination-cache.js
var require_register_destination_cache = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/register-destination-cache.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.registerDestinationCache = exports.RegisterDestinationCache = void 0;
	const promises_1$1 = __require("fs/promises");
	const crypto_1 = __require("crypto");
	const util_1$11 = require_dist$4();
	const async_cache_1 = require_async_cache();
	const destination_cache_1$3 = require_destination_cache();
	const logger$9 = (0, util_1$11.createLogger)("register-destination-cache");
	var DefaultMtlsCache = class extends async_cache_1.AsyncCache {
		constructor(defaultValidityTime = 3e5) {
			super(defaultValidityTime);
		}
	};
	/**
	* @internal
	*/
	const MtlsCache = (mtlsCache = new DefaultMtlsCache()) => {
		const that = {
			useMtlsCache: false,
			retrieveMtlsOptionsFromCache: async () => mtlsCache.get("mtlsOptions"),
			cacheMtlsOptions: async () => {
				const getCert = (0, promises_1$1.readFile)(process.env.CF_INSTANCE_CERT, "utf8");
				const getKey = (0, promises_1$1.readFile)(process.env.CF_INSTANCE_KEY, "utf8");
				const [cert, key$1] = await Promise.all([getCert, getKey]);
				mtlsCache.set("mtlsOptions", {
					entry: {
						cert,
						key: key$1
					},
					expires: getCertExpirationDate(cert)
				});
			},
			getMtlsOptions: async () => {
				let mtlsOptions = await that.retrieveMtlsOptionsFromCache();
				if (!mtlsOptions) {
					await that.cacheMtlsOptions();
					mtlsOptions = await that.retrieveMtlsOptionsFromCache();
					if (!mtlsOptions) logger$9.warn("Neither the previous nor the current mtls certificate is valid anymore.");
				}
				return mtlsOptions || {};
			},
			clear: async () => mtlsCache.clear(),
			getCacheInstance: () => mtlsCache
		};
		return that;
	};
	function getCertExpirationDate(cert) {
		return Number(new crypto_1.X509Certificate(cert).validTo);
	}
	/**
	* @internal
	*/
	const RegisterDestinationCache = () => ({
		destination: (0, destination_cache_1$3.DestinationCache)(new destination_cache_1$3.DefaultDestinationCache(0)),
		mtls: MtlsCache()
	});
	exports.RegisterDestinationCache = RegisterDestinationCache;
	/**
	* @internal
	*/
	exports.registerDestinationCache = (0, exports.RegisterDestinationCache)();
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/http-agent/http-agent.js
var require_http_agent$1 = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/http-agent/http-agent.js"(exports) {
	var __importDefault$3 = exports && exports.__importDefault || function(mod) {
		return mod && mod.__esModule ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getAgentConfig = getAgentConfig;
	exports.urlAndAgent = urlAndAgent;
	const promises_1 = __require("fs/promises");
	const http_1 = __importDefault$3(__require("http"));
	const https_1 = __importDefault$3(__require("https"));
	const util_1$10 = require_dist$4();
	const get_protocol_1 = require_get_protocol();
	const http_proxy_util_1$2 = require_http_proxy_util();
	const register_destination_cache_1$1 = require_register_destination_cache();
	const logger$8 = (0, util_1$10.createLogger)({
		package: "connectivity",
		messageContext: "http-agent"
	});
	/**
	* Returns a promise of the http or https-agent config depending on the destination URL.
	* If the destination contains a proxy configuration, the agent will be a proxy-agent.
	* If not it will be the default http-agent coming from node.
	* @param destination - Determining which kind of configuration is returned.
	* @returns A promise of the HTTP or HTTPS agent configuration.
	*/
	async function getAgentConfig(destination) {
		const certificateOptions = {
			...getTrustStoreOptions(destination),
			...getKeyStoreOptions(destination),
			...await getMtlsOptions(destination)
		};
		return createAgent(destination, certificateOptions);
	}
	/**
	* @internal
	* The http agents (proxy and default) use node tls for trust handling. This method creates the options with the 'ca' or 'rejectUnauthorized' option.
	* https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options
	* @param destination - Destination object
	* @returns Options, which can be used later the http client.
	*/
	function getTrustStoreOptions(destination) {
		if ((0, get_protocol_1.getProtocolOrDefault)(destination) === "http") {
			if (destination.isTrustingAllCertificates) logger$8.warn("\"isTrustingAllCertificates\" is not available for HTTP.");
			if (destination.trustStoreCertificate) logger$8.warn("\"trustStore\" is not available for HTTP.");
			return {};
		}
		if (destination.isTrustingAllCertificates && destination.trustStoreCertificate) logger$8.warn(`Destination ${destination.name} contains the 'trustAll' and 'trustStoreLocation' property which is a redundant setup.`);
		if (destination.isTrustingAllCertificates) {
			logger$8.warn("\"isTrustingAllCertificates\" property in the provided destination is set to \"true\". This is highly discouraged in production.");
			return { rejectUnauthorized: !destination.isTrustingAllCertificates };
		}
		if (destination.trustStoreCertificate) {
			const decoded = Buffer.from(destination.trustStoreCertificate.content, "base64").toString("utf8");
			return {
				rejectUnauthorized: true,
				ca: [decoded]
			};
		}
		return { rejectUnauthorized: true };
	}
	/**
	* @internal
	* The http agent uses node tls for the certificate handling. This method creates the options with the pfx and passphrase or key, cert and passphrase, depending on the format of the certificate.
	* https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options
	* @param destination - Destination object.
	* @returns Options, which can be used later by tls.createSecureContext() e.g. pfx and passphrase or an empty object, if the protocol is not 'https:' or no client information are in the definition.
	*/
	function getKeyStoreOptions(destination) {
		if (destination.authentication === "ClientCertificateAuthentication" && !mtlsIsEnabled(destination) && destination.keyStoreName) {
			const certificate = selectCertificate(destination);
			validateFormat(certificate);
			logger$8.debug(`Certificate with name "${certificate.name}" selected.`);
			if (!destination.keyStorePassword) logger$8.debug(`Destination '${destination.name}' does not have a keystore password.`);
			const certBuffer = Buffer.from(certificate.content, "base64");
			if (getFormat(certificate) === "pem") return {
				cert: certBuffer,
				key: certBuffer,
				passphrase: destination.keyStorePassword
			};
			return {
				pfx: certBuffer,
				passphrase: destination.keyStorePassword
			};
		}
		return {};
	}
	async function getMtlsOptions(destination) {
		if (destination.mtls && !(process.env.CF_INSTANCE_CERT && process.env.CF_INSTANCE_KEY)) logger$8.warn(`Destination ${destination.name ? destination.name : ""} has mTLS enabled, but the required Cloud Foundry environment variables (CF_INSTANCE_CERT and CF_INSTANCE_KEY) are not defined. Note that 'inferMtls' only works on Cloud Foundry.`);
		if (mtlsIsEnabled(destination)) {
			if (register_destination_cache_1$1.registerDestinationCache.mtls.useMtlsCache) return register_destination_cache_1$1.registerDestinationCache.mtls.getMtlsOptions();
			const getCert = (0, promises_1.readFile)(process.env.CF_INSTANCE_CERT, "utf8");
			const getKey = (0, promises_1.readFile)(process.env.CF_INSTANCE_KEY, "utf8");
			const [cert, key$1] = await Promise.all([getCert, getKey]);
			return {
				cert,
				key: key$1
			};
		}
		return {};
	}
	function mtlsIsEnabled(destination) {
		return destination.mtls && process.env.CF_INSTANCE_CERT && process.env.CF_INSTANCE_KEY;
	}
	const supportedCertificateFormats = [
		"p12",
		"pfx",
		"pem"
	];
	function isSupportedFormat(format$14) {
		return !!format$14 && supportedCertificateFormats.includes(format$14);
	}
	function selectCertificate(destination) {
		const certificate = destination.certificates.find((c) => c.name === destination.keyStoreName);
		if (!certificate) throw Error(`No certificate with name ${destination.keyStoreName} could be found on the destination!`);
		return certificate;
	}
	function getFormat(certificate) {
		return (0, util_1$10.last)(certificate.name.split("."));
	}
	function validateFormat(certificate) {
		const format$14 = getFormat(certificate);
		if (!isSupportedFormat(format$14)) throw Error(`The format of the provided certificate '${certificate.name}' is not supported. Supported formats are: ${supportedCertificateFormats.join(", ")}. ${format$14 && ["jks", "keystore"].includes(format$14) ? "You can convert Java Keystores (.jks, .keystore) into PKCS#12 keystores using the JVM's keytool CLI: keytool -importkeystore -srckeystore your-keystore.jks -destkeystore your-keystore.p12 -deststoretype pkcs12" : ""}`);
	}
	/**
	* @internal
	* See https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener for details on the possible options
	*/
	function createAgent(destination, options) {
		return (0, get_protocol_1.getProtocolOrDefault)(destination) === "https" ? { httpsAgent: new https_1.default.Agent(options) } : { httpAgent: new http_1.default.Agent(options) };
	}
	/**
	* Builds part of the request config containing the URL and if needed proxy agents or normal http agents.
	* Considers the `no_proxy` environment variable together with the `targetUri`.
	* @internal
	* @param targetUri - Used as baseURL in request config.
	* @returns HttpRequestConfig containing baseUrl and http(s) agents.
	*/
	async function urlAndAgent(targetUri) {
		let destination = {
			url: targetUri,
			proxyType: "Internet"
		};
		if ((0, http_proxy_util_1$2.proxyStrategy)(destination) === "internet") destination = (0, http_proxy_util_1$2.addProxyConfigurationInternet)(destination);
		return {
			baseURL: destination.url,
			...await getAgentConfig(destination),
			proxy: (0, http_proxy_util_1$2.getProxyConfig)(destination)
		};
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/http-agent/index.js
var require_http_agent = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/http-agent/index.js"(exports) {
	var __createBinding$5 = exports && exports.__createBinding || (Object.create ? function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc$1 = Object.getOwnPropertyDescriptor(m$1, k);
		if (!desc$1 || ("get" in desc$1 ? !m$1.__esModule : desc$1.writable || desc$1.configurable)) desc$1 = {
			enumerable: true,
			get: function() {
				return m$1[k];
			}
		};
		Object.defineProperty(o, k2, desc$1);
	} : function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		o[k2] = m$1[k];
	});
	var __exportStar$4 = exports && exports.__exportStar || function(m$1, exports$1) {
		for (var p in m$1) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports$1, p)) __createBinding$5(exports$1, m$1, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar$4(require_agent_config(), exports);
	__exportStar$4(require_http_agent$1(), exports);
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/destination-service-cache.js
var require_destination_service_cache = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/destination-service-cache.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.destinationServiceCache = void 0;
	const cache_1 = require_cache$1();
	const destination_cache_1$2 = require_destination_cache();
	const DestinationServiceCache = (cache$1) => ({
		retrieveDestinationsFromCache: (targetUrl, decodedJwt) => cache$1.get((0, destination_cache_1$2.getDestinationCacheKey)(decodedJwt, targetUrl, "tenant")),
		cacheRetrievedDestinations: (destinationServiceUri, decodedJwt, destinations) => {
			const key$1 = (0, destination_cache_1$2.getDestinationCacheKey)(decodedJwt, destinationServiceUri, "tenant");
			cache$1.set(key$1, { entry: destinations });
		},
		clear: () => {
			cache$1.clear();
		},
		getCacheInstance: () => cache$1
	});
	/**
	* @internal
	*/
	exports.destinationServiceCache = DestinationServiceCache(new cache_1.Cache(3e5));
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/destination-service.js
var require_destination_service = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/destination-service.js"(exports) {
	var __importDefault$2 = exports && exports.__importDefault || function(mod) {
		return mod && mod.__esModule ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.fetchDestinations = fetchDestinations;
	exports.fetchDestinationWithoutTokenRetrieval = fetchDestinationWithoutTokenRetrieval;
	exports.fetchCertificate = fetchCertificate;
	exports.fetchDestinationWithTokenRetrieval = fetchDestinationWithTokenRetrieval;
	const util_1$9 = require_dist$4();
	const axios_1$2 = __importDefault$2(require_axios());
	const internal_1$3 = require_internal$4();
	const resilience_1 = require_dist$3();
	const async_retry_1 = __importDefault$2(require_lib());
	const jwt_1$5 = require_jwt();
	const http_agent_1$1 = require_http_agent();
	const authorization_header_1$1 = require_authorization_header();
	const destination_1$1 = require_destination$1();
	const destination_service_cache_1 = require_destination_service_cache();
	const logger$7 = (0, util_1$9.createLogger)({
		package: "connectivity",
		messageContext: "destination-service"
	});
	/**
	* @internal
	* Fetch either subaccount or instance destinations (no token retrieval).
	* @param destinationServiceUri - The URI of the destination service
	* @param serviceToken - The service token for the destination service.
	* @param type - Either 'instance' or 'subaccount', depending on what destinations should be fetched.
	* @param options - Options to use for retrieving destinations.
	* @returns A promise resolving to a list of destinations of the requested type.
	*/
	async function fetchDestinations(destinationServiceUri, serviceToken$1, type, options) {
		const targetUri = `${(0, util_1$9.removeTrailingSlashes)(destinationServiceUri)}/destination-configuration/v1/${type}Destinations`;
		if (options?.useCache) {
			const destinationsFromCache = destination_service_cache_1.destinationServiceCache.retrieveDestinationsFromCache(targetUri, (0, jwt_1$5.decodeJwt)(serviceToken$1));
			if (destinationsFromCache) {
				logger$7.debug(`Destinations retrieved from cache. There were ${destinationsFromCache.length} destinations returned from the cache.`);
				return destinationsFromCache;
			}
		}
		const headers = (0, jwt_1$5.wrapJwtInHeader)(serviceToken$1).headers;
		return callDestinationEndpoint({
			uri: targetUri,
			tenantId: getTenantIdFromTokens(serviceToken$1)
		}, headers).then((response) => {
			const destinations = response.data.map((destination) => (0, destination_1$1.parseDestination)(destination));
			if (options?.useCache) destination_service_cache_1.destinationServiceCache.cacheRetrievedDestinations(targetUri, (0, jwt_1$5.decodeJwt)(serviceToken$1), destinations);
			return destinations;
		}).catch((error$1) => {
			throw new util_1$9.ErrorWithCause(`Failed to fetch ${type} destinations.${errorMessageFromResponse(error$1)}`, error$1);
		});
	}
	/**
	* @internal
	* Fetch a destination from the destination find API (`/destinations`) and skip the automatic token retrieval.
	* @param destinationName - Name of the destination.
	* @param destinationServiceUri - The URI of the destination service.
	* @param serviceToken - The service token for the destination service.
	* @returns A promise resolving to the requested destination.
	*/
	async function fetchDestinationWithoutTokenRetrieval(destinationName, destinationServiceUri, serviceToken$1) {
		const targetUri = `${(0, util_1$9.removeTrailingSlashes)(destinationServiceUri)}/destination-configuration/v1/destinations/${destinationName}?$skipTokenRetrieval=true`;
		try {
			const response = await callDestinationEndpoint({
				uri: targetUri,
				tenantId: getTenantIdFromTokens(serviceToken$1)
			}, { Authorization: `Bearer ${serviceToken$1}` });
			const destination = (0, destination_1$1.parseDestination)(response.data.destinationConfiguration);
			return {
				instance: response.data.owner?.InstanceId ? [destination] : [],
				subaccount: !response.data.owner?.InstanceId && response.data.owner?.SubaccountId ? [destination] : []
			};
		} catch (err) {
			if (err.response?.status === 404 && err.response?.data?.ErrorMessage === "Configuration with the specified name was not found") return {
				instance: [],
				subaccount: []
			};
			throw new util_1$9.ErrorWithCause(`Failed to fetch destination.${errorMessageFromResponse(err)}`, err);
		}
	}
	/**
	* Fetches a certificate from the subaccount and destination instance for a given a name.
	* Subaccount is tried first.
	* @param destinationServiceUri - The URI of the destination service
	* @param token - The access token for destination service.
	* @param certificateName - Name of the Certificate to be fetched
	* @returns A Promise resolving to the destination
	* @internal
	*/
	async function fetchCertificate(destinationServiceUri, token, certificateName) {
		const filetype = certificateName.split(".")[1];
		if (filetype.toLowerCase() !== "pem") {
			logger$7.warn(`The provided truststore ${certificateName} is not in 'pem' format which is currently the only supported format. Truststore is ignored.`);
			return;
		}
		const accountUri = `${(0, util_1$9.removeTrailingSlashes)(destinationServiceUri)}/destination-configuration/v1/subaccountCertificates/${certificateName}`;
		const instanceUri = `${(0, util_1$9.removeTrailingSlashes)(destinationServiceUri)}/destination-configuration/v1/instanceCertificates/${certificateName}`;
		const header = (0, jwt_1$5.wrapJwtInHeader)(token).headers;
		try {
			const response = await callCertificateEndpoint({
				uri: accountUri,
				tenantId: getTenantIdFromTokens(token)
			}, header).catch(() => callCertificateEndpoint({
				uri: instanceUri,
				tenantId: getTenantIdFromTokens(token)
			}, header));
			return (0, destination_1$1.parseCertificate)(response.data);
		} catch (err) {
			logger$7.warn(`Failed to fetch truststore certificate ${certificateName} - Continuing without certificate. This may cause failing requests`, err);
		}
	}
	function getTenantIdFromTokens(token) {
		let tenant;
		if (typeof token === "string") tenant = (0, jwt_1$5.getTenantId)(token);
		else tenant = token.exchangeTenant || (0, jwt_1$5.getTenantId)(token.exchangeHeaderJwt) || (0, jwt_1$5.getTenantId)(token.authHeaderJwt);
		if (!tenant) throw new Error("Could not obtain tenant identifier from JWT.");
		return tenant;
	}
	/**
	* @internal
	* Fetches a specific destination including authorization tokens from the given URI.
	* For destinations with authenticationType `OAuth2SAMLBearerAssertion`, this call will trigger the `OAuth2SAMLBearer` flow against the target destination.
	* @param destinationServiceUri - The URI of the destination service
	* @param token - The access token or `AuthAndExchangeTokens` if you want to include other token headers for e.g. `OAuth2UserTokenExchange`.
	* @param options - Options to use for retrieving destinations.
	* @returns A promise resolving to the destination.
	*/
	async function fetchDestinationWithTokenRetrieval(destinationServiceUri, token, options) {
		const targetUri = `${(0, util_1$9.removeTrailingSlashes)(destinationServiceUri)}/destination-configuration/v1/destinations/${options.destinationName}`;
		token = typeof token === "string" ? { authHeaderJwt: token } : token;
		let authHeader = (0, jwt_1$5.wrapJwtInHeader)(token.authHeaderJwt).headers;
		authHeader = token.exchangeHeaderJwt ? {
			...authHeader,
			"X-user-token": token.exchangeHeaderJwt
		} : authHeader;
		authHeader = token.exchangeTenant ? {
			...authHeader,
			"X-tenant": token.exchangeTenant
		} : authHeader;
		authHeader = token.refreshToken ? {
			...authHeader,
			"X-refresh-token": token.refreshToken
		} : authHeader;
		return callDestinationEndpoint({
			uri: targetUri,
			tenantId: getTenantIdFromTokens(token)
		}, authHeader, options).then((response) => {
			const destination = (0, destination_1$1.parseDestination)(response.data);
			return destination;
		}).catch((error$1) => {
			throw new util_1$9.ErrorWithCause(`Failed to fetch destination ${options.destinationName}.${errorMessageFromResponse(error$1)}`, error$1);
		});
	}
	function errorMessageFromResponse(error$1) {
		return (0, util_1$9.propertyExists)(error$1, "response", "data", "ErrorMessage") ? ` ${error$1.response.data.ErrorMessage}` : "";
	}
	function retryDestination(destinationName) {
		return (options) => (arg) => {
			let retryCount = 1;
			return (0, async_retry_1.default)(async (bail) => {
				try {
					const destination = await options.fn(arg);
					if (retryCount < 3) {
						retryCount++;
						await (0, authorization_header_1$1.buildAuthorizationHeaders)((0, destination_1$1.parseDestination)(destination.data));
					}
					return destination;
				} catch (error$1) {
					const status = error$1?.response?.status;
					if (status.toString().startsWith("4")) {
						bail(new util_1$9.ErrorWithCause(`Request failed with status code ${status}`, error$1));
						return void 0;
					}
					throw error$1;
				}
			}, {
				retries: 3,
				onRetry: (err) => logger$7.warn(`Failed to retrieve destination ${destinationName} - doing a retry. Original Error ${err.message}`)
			});
		};
	}
	async function callCertificateEndpoint(context, headers) {
		if (!context.uri.includes("Certificates")) throw new Error(`callCertificateEndpoint was called with illegal argument: ${context.uri}. URL must be certificate endpoint of destination service.`);
		return callDestinationService(context, headers);
	}
	async function callDestinationEndpoint(context, headers, options) {
		if (!context.uri.match(/[instance|subaccount]Destinations|v1\/destinations/)) throw new Error(`callDestinationEndpoint was called with illegal argument: ${context.uri}. URL must be destination(s) endpoint of destination service.`);
		return callDestinationService(context, headers, options);
	}
	async function callDestinationService(context, headers, options) {
		const { destinationName, retry: retry$2 } = options || {};
		const requestConfig = {
			...await (0, http_agent_1$1.urlAndAgent)(context.uri),
			method: "get",
			headers
		};
		const resilienceMiddleware = (0, resilience_1.resilience)();
		if (destinationName && retry$2) resilienceMiddleware.unshift(retryDestination(destinationName));
		return (0, internal_1$3.executeWithMiddleware)(resilienceMiddleware, {
			context,
			fnArgument: requestConfig,
			fn: (config$2) => axios_1$2.default.request(config$2)
		});
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/get-provider-token.js
var require_get_provider_token = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/get-provider-token.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getProviderServiceToken = getProviderServiceToken;
	const jwt_1$4 = require_jwt();
	const token_accessor_1$2 = require_token_accessor();
	/**
	* @internal
	*/
	async function getProviderServiceToken(options) {
		const { jwt,...optionsWithoutJwt } = options;
		const encoded = await (0, token_accessor_1$2.serviceToken)("destination", optionsWithoutJwt);
		return {
			encoded,
			decoded: (0, jwt_1$4.decodeJwt)(encoded)
		};
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/get-subscriber-token.js
var require_get_subscriber_token = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/get-subscriber-token.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.isSubscriberToken = isSubscriberToken;
	exports.getSubscriberToken = getSubscriberToken;
	exports.getRequiredSubscriberToken = getRequiredSubscriberToken;
	exports.hasTokens = hasTokens;
	exports.getJwtForTenant = getJwtForTenant;
	exports.getJwtForUser = getJwtForUser;
	const util_1$8 = require_dist$4();
	const jwt_1$3 = require_jwt();
	const token_accessor_1$1 = require_token_accessor();
	const subdomain_replacer_1 = require_subdomain_replacer();
	const logger$6 = (0, util_1$8.createLogger)({
		package: "connectivity",
		messageContext: "destination-accessor-service"
	});
	/**
	* @internal
	* @param token - The token to check
	* @returns Whether the given token is a subscriber token.
	*/
	function isSubscriberToken(token) {
		return token.userJwt || token.serviceJwt;
	}
	/**
	* @internal
	*/
	async function getSubscriberToken(options) {
		const isXsuaaJwt = !!options.jwt && (0, jwt_1$3.isXsuaaToken)((0, jwt_1$3.decodeJwt)(options.jwt));
		const userJwt = await retrieveUserToken(options, isXsuaaJwt);
		const serviceJwt = await retrieveServiceToken(options, userJwt?.decoded);
		return {
			userJwt,
			serviceJwt
		};
	}
	async function retrieveUserToken(options, isXsuaaJwt) {
		if (options.jwt) {
			if (!options.iss && isXsuaaJwt) await (0, jwt_1$3.verifyJwt)(options.jwt, options);
			return (0, jwt_1$3.getJwtPair)(options.jwt);
		}
	}
	async function retrieveServiceToken(options, decodedUserJwt) {
		const jwt = getJwtForServiceToken(options.iss, decodedUserJwt);
		if (jwt) try {
			return (0, jwt_1$3.getJwtPair)(await (0, token_accessor_1$1.serviceToken)("destination", {
				...options,
				jwt
			}));
		} catch (err) {
			logger$6.warn(`Failed to fetch subscriber service token for destination. This is only relevant if you are using subscriber destinations. Failure caused by: ${err.message}`);
		}
	}
	function getJwtForServiceToken(iss, decodedUserJwt) {
		if (iss) {
			logger$6.debug("Using `iss` option instead of a full JWT to fetch a destination. No validation is performed.");
			return { ext_attr: { zdn: (0, subdomain_replacer_1.getIssuerSubdomain)({ iss }) } };
		}
		if (decodedUserJwt?.zid || decodedUserJwt?.app_tid) return decodedUserJwt;
	}
	/**
	* @internal
	* Get a subscriber token pair with required fields. Checks that at least one of the tokens exists and sets defaults if needed.
	* @returns The decoded subscriber tokens.
	*/
	function getRequiredSubscriberToken(token) {
		if (token) {
			const { userJwt, serviceJwt } = token;
			const requiredToken = {
				userJwt: userJwt || serviceJwt,
				serviceJwt: serviceJwt || userJwt
			};
			if (isRequired(requiredToken)) return requiredToken;
		}
		throw new Error("Could not get subscriber token: Token value is undefined.");
	}
	/**
	* Type guard to check whether a token has both `userJwt` and `serviceJwt` defined.
	* @param token - Token to check.
	* @returns Whether both tokens are defined.
	*/
	function isRequired(token) {
		return !!(token?.userJwt && token.serviceJwt);
	}
	/**
	* @internal
	* Check whether the subscriber token has one of the tokens set
	* @param token - Subscriber token pair to check
	* @returns True if at least one of the tokens exist.
	*/
	function hasTokens(token) {
		return !!token?.userJwt || !!token?.serviceJwt;
	}
	/**
	* @internal
	* Retrieve the token to use for tenant identification.
	*
	* If `iss` or XSUAA user JWT was passed, this is the `serviceJwt`.
	* If a custom user JWT was passed, this is used.
	* @param token - The subscriber token for service and user.
	* @returns The decoded JWT to use for tenant identification.
	*/
	function getJwtForTenant(token) {
		return token.serviceJwt;
	}
	/**
	* @internal
	* Retrieve the token to use for user identification.
	*
	* If a user token was passed, this is used.
	* If only `iss` was passed try to get the user from the service token.
	* @param token - The subscriber token for service and user.
	* @returns The decoded JWT to use for user identification.
	*/
	function getJwtForUser(token) {
		return token.userJwt;
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/destination-from-service.js
var require_destination_from_service = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/destination-from-service.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.DestinationFromServiceRetriever = void 0;
	exports.getDestinationFromDestinationService = getDestinationFromDestinationService;
	const util_1$7 = require_dist$4();
	const connectivity_service_1 = require_connectivity_service();
	const environment_accessor_1$1 = require_environment_accessor();
	const identity_service_1$1 = require_identity_service();
	const jwt_1$2 = require_jwt();
	const tenant_1 = require_tenant();
	const token_accessor_1 = require_token_accessor();
	const destination_cache_1$1 = require_destination_cache();
	const destination_selection_strategies_1 = require_destination_selection_strategies();
	const destination_service_1$1 = require_destination_service();
	const destination_service_types_1$1 = require_destination_service_types();
	const get_provider_token_1$1 = require_get_provider_token();
	const get_subscriber_token_1$1 = require_get_subscriber_token();
	const http_proxy_util_1$1 = require_http_proxy_util();
	const forward_auth_token_1$1 = require_forward_auth_token();
	const logger$5 = (0, util_1$7.createLogger)({
		package: "connectivity",
		messageContext: "destination-accessor-service"
	});
	const emptyDestinationByType = {
		instance: [],
		subaccount: []
	};
	/**
	* Retrieves a destination with the given name from the Cloud Foundry destination service.
	* Returns `null`, if no destination can be found.
	* Requires the following service bindings: destination, XSUAA
	* By default, selects subscriber over provider and instance over subaccount destinations.
	* @param options - Configuration for how to retrieve destinations from the destination service.
	* @returns A promise returning the requested destination on success.
	*/
	async function getDestinationFromDestinationService(options) {
		logger$5.debug("Attempting to retrieve destination from destination service.");
		return DestinationFromServiceRetriever.getDestinationFromDestinationService(options);
	}
	/**
	* @internal
	*/
	var DestinationFromServiceRetriever = class DestinationFromServiceRetriever {
		static async getDestinationFromDestinationService(options) {
			if ((0, identity_service_1$1.shouldExchangeToken)(options) && options.jwt) options.jwt = await (0, identity_service_1$1.exchangeToken)(options.jwt);
			const subscriberToken = await (0, get_subscriber_token_1$1.getSubscriberToken)(options);
			const providerToken = await (0, get_provider_token_1$1.getProviderServiceToken)(options);
			const da = new DestinationFromServiceRetriever(options, subscriberToken, providerToken);
			const destinationResult = await da.searchDestinationWithSelectionStrategyAndCache();
			if (!destinationResult) return null;
			let { destination } = destinationResult;
			(0, forward_auth_token_1$1.setForwardedAuthTokenIfNeeded)(destination, options.jwt);
			if (destinationResult.fromCache) return da.addProxyConfiguration(destination);
			if (!destination.forwardAuthToken) {
				if (destination.authentication === "OAuth2UserTokenExchange" || destination.authentication === "OAuth2JWTBearer" || destination.authentication === "SAMLAssertion" || destination.authentication === "OAuth2SAMLBearerAssertion" && !da.usesSystemUser(destination)) destination = await da.fetchDestinationWithUserExchangeFlows(destinationResult);
				if (destination.authentication === "PrincipalPropagation") {
					if (!this.isUserJwt(da.subscriberToken)) DestinationFromServiceRetriever.throwUserTokenMissing(destination);
				}
				if (destination.authentication === "OAuth2Password" || destination.authentication === "ClientCertificateAuthentication" || destination.authentication === "OAuth2ClientCredentials" || da.usesSystemUser(destination)) destination = await da.fetchDestinationWithNonUserExchangeFlows(destinationResult);
				if (destination.authentication === "OAuth2RefreshToken") destination = await da.fetchDestinationWithRefreshTokenFlow(destinationResult);
			}
			const withTrustStore = await da.addTrustStoreConfiguration(destination, destinationResult.origin);
			await da.updateDestinationCache(withTrustStore, destinationResult.origin);
			return da.addProxyConfiguration(withTrustStore);
		}
		static throwUserTokenMissing(destination) {
			throw Error(`No user token (JWT) has been provided. This is strictly necessary for '${destination.authentication}'.`);
		}
		static checkDestinationForCustomJwt(destination) {
			if (!destination.jwks && !destination.jwksUri) throw new Error("Failed to verify the JWT with no JKU! Destination must have `x_user_token.jwks` or `x_user_token.jwks_uri` property.");
		}
		static isUserJwt(token) {
			return !!token?.userJwt;
		}
		constructor(options, subscriberToken, providerServiceToken) {
			this.subscriberToken = subscriberToken;
			this.providerServiceToken = providerServiceToken;
			const defaultOptions = {
				isolationStrategy: (0, destination_cache_1$1.getDefaultIsolationStrategy)(subscriberToken?.userJwt?.decoded),
				selectionStrategy: destination_selection_strategies_1.subscriberFirst,
				useCache: true
			};
			this.options = {
				...defaultOptions,
				...options
			};
		}
		async searchDestinationWithSelectionStrategyAndCache() {
			let destinationSearchResult;
			if (this.isSubscriberNeeded()) destinationSearchResult = await this.searchSubscriberAccountForDestination();
			if (this.isProviderNeeded(destinationSearchResult)) destinationSearchResult = await this.searchProviderAccountForDestination();
			if (destinationSearchResult) if (destinationSearchResult.fromCache) logger$5.debug(`Successfully retrieved destination from destination service cache for ${destinationSearchResult.origin} destinations.`);
			else logger$5.debug("Successfully retrieved destination from destination service.");
			else logger$5.debug("Could not retrieve destination from destination service.");
			return destinationSearchResult;
		}
		getExchangeTenant(destination) {
			if (destination.authentication !== "OAuth2ClientCredentials") return void 0;
			if (destination.originalProperties?.["tokenServiceURLType"] !== "Common") return void 0;
			const subdomainSubscriber = (0, jwt_1$2.getSubdomain)(this.subscriberToken?.serviceJwt?.decoded) || (0, jwt_1$2.getSubdomain)(this.subscriberToken?.userJwt?.decoded);
			const subdomainProvider = (0, jwt_1$2.getSubdomain)(this.providerServiceToken?.decoded);
			return subdomainSubscriber || subdomainProvider || void 0;
		}
		async getAuthTokenForOAuth2ClientCredentials(destinationResult) {
			const { destination, origin: origin$1 } = destinationResult;
			const exchangeTenant = this.getExchangeTenant(destination);
			const authHeaderJwt = origin$1 === "provider" ? this.providerServiceToken.encoded : this.subscriberToken?.serviceJwt?.encoded;
			if (!authHeaderJwt) throw Error("Could not retrieve service token for the destination service.");
			return {
				authHeaderJwt,
				exchangeTenant
			};
		}
		usesSystemUser(destination) {
			if (destination.systemUser && destination.authentication === "OAuth2SAMLBearerAssertion") {
				logger$5.debug(`System user found on destination: "${destination.name}". 
The property SystemUser has been deprecated. 
It is highly recommended that you stop using it.
Possible alternatives for such technical user authentication are BasicAuthentication, OAuth2ClientCredentials, or ClientCertificateAuthentication`);
				return true;
			}
			return false;
		}
		async getAuthTokenForOAuth2UserBasedTokenExchanges(destinationResult) {
			const { destination, origin: origin$1 } = destinationResult;
			const { destinationName } = this.options;
			if (!DestinationFromServiceRetriever.isUserJwt(this.subscriberToken)) throw DestinationFromServiceRetriever.throwUserTokenMissing(destination);
			const isXsuaaUserJwt = (0, jwt_1$2.isXsuaaToken)(this.subscriberToken.userJwt.decoded);
			if (!isXsuaaUserJwt) DestinationFromServiceRetriever.checkDestinationForCustomJwt(destination);
			if (isXsuaaUserJwt && (0, tenant_1.isIdenticalTenant)(this.subscriberToken.userJwt.decoded, this.providerServiceToken.decoded)) {
				logger$5.debug(`UserExchange flow started without user exchange token for destination ${destinationName} of the provider account.`);
				return { authHeaderJwt: await (0, token_accessor_1.jwtBearerToken)(this.subscriberToken.userJwt.encoded, getDestinationService()) };
			}
			const serviceJwt = origin$1 === "provider" ? this.providerServiceToken : this.subscriberToken.serviceJwt;
			logger$5.debug(`UserExchange flow started for destination ${destinationName} of the ${origin$1} account.`);
			return {
				authHeaderJwt: serviceJwt.encoded,
				exchangeHeaderJwt: this.subscriberToken.userJwt.encoded
			};
		}
		async getAuthTokenForOAuth2RefreshToken(destinationResult) {
			const { destination, origin: origin$1 } = destinationResult;
			const { refreshToken } = this.options;
			if (!refreshToken) throw Error(`No refresh token has been provided. This is strictly necessary for '${destination.authentication}'.`);
			const clientGrant = origin$1 === "provider" ? this.providerServiceToken.encoded : this.subscriberToken.serviceJwt.encoded;
			return {
				authHeaderJwt: clientGrant,
				refreshToken
			};
		}
		/**
		* @internal
		* This method calls the 'find destination by name' endpoint of the destination service using a client credentials grant.
		* For the find by name endpoint, the destination service will take care of OAuth flows and include the token in the destination.
		* @param destinationResult - Result of the getDestinations call for which the exchange flow is triggered.
		* @returns Destination containing the auth token.
		*/
		async fetchDestinationWithNonUserExchangeFlows(destinationResult) {
			const token = await this.getAuthTokenForOAuth2ClientCredentials(destinationResult);
			return (0, destination_service_1$1.fetchDestinationWithTokenRetrieval)((0, environment_accessor_1$1.getDestinationServiceCredentials)().uri, token, this.options);
		}
		async fetchDestinationWithUserExchangeFlows(destinationResult) {
			const token = await this.getAuthTokenForOAuth2UserBasedTokenExchanges(destinationResult);
			return (0, destination_service_1$1.fetchDestinationWithTokenRetrieval)((0, environment_accessor_1$1.getDestinationServiceCredentials)().uri, token, this.options);
		}
		async fetchDestinationWithRefreshTokenFlow(destinationResult) {
			const token = await this.getAuthTokenForOAuth2RefreshToken(destinationResult);
			return (0, destination_service_1$1.fetchDestinationWithTokenRetrieval)((0, environment_accessor_1$1.getDestinationServiceCredentials)().uri, token, this.options);
		}
		async addProxyConfiguration(destination) {
			switch ((0, http_proxy_util_1$1.proxyStrategy)(destination)) {
				case "on-premise": return (0, connectivity_service_1.addProxyConfigurationOnPrem)(destination, (0, get_subscriber_token_1$1.hasTokens)(this.subscriberToken) ? (0, get_subscriber_token_1$1.getRequiredSubscriberToken)(this.subscriberToken) : void 0);
				case "internet":
				case "private-link":
					(0, destination_service_types_1$1.assertHttpDestination)(destination);
					return (0, http_proxy_util_1$1.addProxyConfigurationInternet)(destination);
				case "no-proxy": return destination;
				default: throw new Error("Illegal argument: No valid proxy configuration found in the destination input to be added.");
			}
		}
		async updateDestinationCache(destination, destinationOrigin) {
			if (!this.options.useCache) return destination;
			await destination_cache_1$1.destinationCache.cacheRetrievedDestination(destinationOrigin === "subscriber" ? (0, get_subscriber_token_1$1.getRequiredSubscriberToken)(this.subscriberToken) : this.providerServiceToken.decoded, destination, this.options.isolationStrategy);
		}
		async getProviderDestinationService() {
			const providerDestination = await (0, destination_service_1$1.fetchDestinationWithoutTokenRetrieval)(this.options.destinationName, (0, environment_accessor_1$1.getDestinationServiceCredentials)().uri, this.providerServiceToken.encoded);
			const destination = this.options.selectionStrategy({
				subscriber: emptyDestinationByType,
				provider: providerDestination
			}, this.options.destinationName);
			if (destination) return {
				destination,
				fromCache: false,
				origin: "provider"
			};
		}
		async getProviderDestinationCache() {
			const destination = await destination_cache_1$1.destinationCache.retrieveDestinationFromCache(this.providerServiceToken.decoded, this.options.destinationName, this.options.isolationStrategy);
			if (destination) return {
				destination,
				fromCache: true,
				origin: "provider"
			};
		}
		async getSubscriberDestinationService() {
			if (!this.subscriberToken?.serviceJwt) throw new Error("Try to get destinations from subscriber account but service JWT was not set.");
			const subscriberDestination = await (0, destination_service_1$1.fetchDestinationWithoutTokenRetrieval)(this.options.destinationName, (0, environment_accessor_1$1.getDestinationServiceCredentials)().uri, this.subscriberToken.serviceJwt.encoded);
			const destination = this.options.selectionStrategy({
				subscriber: subscriberDestination,
				provider: emptyDestinationByType
			}, this.options.destinationName);
			if (destination) return {
				destination,
				fromCache: false,
				origin: "subscriber"
			};
		}
		async getSubscriberDestinationCache() {
			const destination = await destination_cache_1$1.destinationCache.retrieveDestinationFromCache((0, get_subscriber_token_1$1.getRequiredSubscriberToken)(this.subscriberToken), this.options.destinationName, this.options.isolationStrategy);
			if (destination) return {
				destination,
				fromCache: true,
				origin: "subscriber"
			};
		}
		isProviderNeeded(resultFromSubscriber) {
			if (this.options.selectionStrategy.toString() === destination_selection_strategies_1.alwaysSubscriber.toString()) return false;
			if (this.options.selectionStrategy.toString() === destination_selection_strategies_1.subscriberFirst.toString() && resultFromSubscriber) return false;
			return true;
		}
		isSubscriberNeeded() {
			if (!this.subscriberToken?.serviceJwt) return false;
			return this.options.selectionStrategy.toString() !== destination_selection_strategies_1.alwaysProvider.toString();
		}
		async searchProviderAccountForDestination() {
			return this.options.useCache && await this.getProviderDestinationCache() || this.getProviderDestinationService();
		}
		async searchSubscriberAccountForDestination() {
			return this.options.useCache && await this.getSubscriberDestinationCache() || this.getSubscriberDestinationService();
		}
		async addTrustStoreConfiguration(destination, origin$1) {
			if (destination.originalProperties?.TrustStoreLocation) {
				const trustStoreCertificate = await (0, destination_service_1$1.fetchCertificate)((0, environment_accessor_1$1.getDestinationServiceCredentials)().uri, origin$1 === "provider" ? this.providerServiceToken.encoded : this.subscriberToken.serviceJwt.encoded, destination.originalProperties.TrustStoreLocation);
				destination.trustStoreCertificate = trustStoreCertificate;
			}
			return destination;
		}
	};
	exports.DestinationFromServiceRetriever = DestinationFromServiceRetriever;
	function getDestinationService() {
		const destinationService = (0, environment_accessor_1$1.getServiceBinding)("destination");
		if (!destinationService) throw Error("No binding to a destination service found.");
		return destinationService;
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/destination-from-registration.js
var require_destination_from_registration = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/destination-from-registration.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.registerDestination = registerDestination;
	exports.searchRegisteredDestination = searchRegisteredDestination;
	const util_1$6 = require_dist$4();
	const jwt_1$1 = require_jwt();
	const destination_cache_1 = require_destination_cache();
	const destination_service_types_1 = require_destination_service_types();
	const http_proxy_util_1 = require_http_proxy_util();
	const register_destination_cache_1 = require_register_destination_cache();
	const forward_auth_token_1 = require_forward_auth_token();
	const logger$4 = (0, util_1$6.createLogger)({
		package: "connectivity",
		messageContext: "register-destination"
	});
	/**
	* Registers a destination in a cache for later usage.
	*
	* If a destination with the same key is already in the cache, it is replaced.
	* The key is built using the `getDestinationCacheKey` method.
	* @param destination - A destination to add to the `destinations` cache.
	* @param options - Options how to cache the destination.
	*/
	async function registerDestination(destination, options) {
		if (!destination.name) throw Error("Registering destinations requires a destination name.");
		destination.mtls = !!options?.inferMtls;
		if (options?.useMtlsCache) {
			register_destination_cache_1.registerDestinationCache.mtls.useMtlsCache = true;
			await register_destination_cache_1.registerDestinationCache.mtls.cacheMtlsOptions();
		}
		await register_destination_cache_1.registerDestinationCache.destination.cacheRetrievedDestination(getJwtForCaching(options), destination, isolationStrategy(options));
	}
	function getJwtForCaching(options) {
		const jwt = (0, jwt_1$1.decodeOrMakeJwt)(options?.jwt);
		if (!(0, jwt_1$1.getTenantId)(jwt)) {
			if (options?.jwt) throw Error("Could not determine tenant from JWT nor XSUAA, identity or destination service binding. Destination is registered without tenant information.");
			else logger$4.debug("Could not determine tenant from XSUAA, identity or destination service binding. Destination is registered without tenant information.");
			return { zid: jwt_1$1.defaultTenantId };
		}
		return jwt;
	}
	/**
	* @internal
	* @param options - The options for searching the cache
	* @returns Destination - the destination from cache
	*/
	async function searchRegisteredDestination(options) {
		const destination = await register_destination_cache_1.registerDestinationCache.destination.retrieveDestinationFromCache(getJwtForCaching(options), options.destinationName, isolationStrategy(options));
		if (!destination) {
			logger$4.debug(`Could not retrieve '${options.destinationName}' from registered destinations.`);
			return null;
		}
		logger$4.info(`Successfully retrieved destination '${options.destinationName}' from registered destinations.`);
		(0, forward_auth_token_1.setForwardedAuthTokenIfNeeded)(destination, options.jwt);
		return (0, destination_service_types_1.isHttpDestination)(destination) && ["internet", "private-link"].includes((0, http_proxy_util_1.proxyStrategy)(destination)) ? (0, http_proxy_util_1.addProxyConfigurationInternet)(destination) : destination;
	}
	/**
	* If an explicit isolation strategy is given by the user this is used. If not the isolation strategy is determined in the following way:
	* If a JWT is given and it contains a user_id the isolation is 'TenantUser'. If no JWT is given or it does not contain a user the isolation is 'Tenant'.
	* @param options - Options passed to register the destination containing the jwt.
	* @returns The isolation strategy.
	*/
	function isolationStrategy(options) {
		if (options?.isolationStrategy) return options.isolationStrategy;
		const decoded = options?.jwt ? (0, jwt_1$1.decodeJwt)(options.jwt) : void 0;
		return (0, destination_cache_1.getDefaultIsolationStrategy)(decoded);
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/destination-accessor.js
var require_destination_accessor = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/destination-accessor.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.useOrFetchDestination = useOrFetchDestination;
	exports.resolveDestination = resolveDestination;
	exports.getDestination = getDestination;
	exports.getAllDestinationsFromDestinationService = getAllDestinationsFromDestinationService;
	const util_1$5 = require_dist$4();
	const identity_service_1 = require_identity_service();
	const environment_accessor_1 = require_environment_accessor();
	const jwt_1 = require_jwt();
	const destination_1 = require_destination$1();
	const destination_from_env_1 = require_destination_from_env();
	const destination_from_vcap_1 = require_destination_from_vcap();
	const destination_from_service_1 = require_destination_from_service();
	const destination_accessor_types_1 = require_destination_accessor_types();
	const destination_from_registration_1 = require_destination_from_registration();
	const get_subscriber_token_1 = require_get_subscriber_token();
	const get_provider_token_1 = require_get_provider_token();
	const destination_service_1 = require_destination_service();
	const logger$3 = (0, util_1$5.createLogger)({
		package: "connectivity",
		messageContext: "destination-accessor"
	});
	/**
	* Returns the parameter if it is a destination, calls {@link getDestination} otherwise (which will try to fetch the destination
	* from the Cloud Foundry destination service).
	*
	* Fetching a destination requires:
	* - A binding to exactly one XSUAA service instance with service plan "application".
	* - A binding to a destination service instance.
	*
	* If either of the prerequisites is not met or one of the services returns an error, this function will either throw an error or return a promise that rejects.
	* @param destination - A destination or the necessary parameters to fetch one.
	* @returns A promise resolving to the requested destination on success.
	*/
	async function useOrFetchDestination(destination) {
		return (0, destination_accessor_types_1.isDestinationFetchOptions)(destination) ? getDestination(destination) : (0, destination_1.sanitizeDestination)(destination);
	}
	/**
	* Resolve a destination by the following steps:
	* 1. Call [[useOrFetchDestination]]
	* 2. Throw an error, when the resulting destination from the previous step is falsy
	* 3. Return the checked destination.
	* @param destination - A destination or the necessary parameters to fetch one.
	* @returns A promise resolving to the requested destination on success.
	* @internal
	*/
	async function resolveDestination(destination) {
		const resolvedDestination = await useOrFetchDestination(destination).catch((error$1) => {
			throw new util_1$5.ErrorWithCause("Failed to load destination.", error$1);
		});
		if (!resolvedDestination) throw Error(`Failed to resolve the destination '${(0, destination_1.toDestinationNameUrl)(destination)}'.`);
		return resolvedDestination;
	}
	/**
	* Builds a destination from one of three sources (in the given order):
	* - from the environment variable "destinations".
	* - from service bindings.
	* - from the destination service.
	*
	* If you want to get a destination only from a specific source, use the corresponding function directly
	* (`getDestinationFromEnvByName`, `getDestinationFromServiceBinding`, `getDestinationFromDestinationService`).
	* @param options - The options to retrieve the destination.
	* @returns A promise returning the requested destination on success.
	*/
	async function getDestination(options) {
		const destination = (0, destination_from_env_1.searchEnvVariablesForDestination)(options) || await (0, destination_from_registration_1.searchRegisteredDestination)(options) || await (0, destination_from_vcap_1.searchServiceBindingForDestination)(options) || await (0, destination_from_service_1.getDestinationFromDestinationService)(options);
		return destination;
	}
	/**
	* Creates comprehensive log messages from a destinations array and their origin.
	* @param origin - Origin of the destination.
	* @param destinations - Array of destinations.
	* @returns Logs of the retrieval of destinations.
	*/
	function createDestinationFetchLogs(origin$1, destinations) {
		return destinations.reduce((prevLogMessages, currentDestination) => prevLogMessages + `Retrieving ${origin$1} destination: ${currentDestination.name}.\n`, "");
	}
	/**
	* Fetches all destinations from the destination service which match the token.
	* With a subscriber token it fetches all subscriber destinations, otherwise all provider destinations.
	* @param options - The {@link AllDestinationOptions | options} to fetch all destinations.
	* @returns A promise of an array of all destinations without authTokens from the destination service, on success.
	*/
	async function getAllDestinationsFromDestinationService(options = {}) {
		options = {
			...options,
			useCache: options.useCache ?? true
		};
		logger$3.debug("Attempting to retrieve all destinations from destination service.");
		if ((0, identity_service_1.shouldExchangeToken)(options) && options.jwt) options.jwt = await (0, identity_service_1.exchangeToken)(options.jwt);
		const token = (await (0, get_subscriber_token_1.getSubscriberToken)(options))?.serviceJwt || await (0, get_provider_token_1.getProviderServiceToken)(options);
		const destinationServiceUri = (0, environment_accessor_1.getDestinationServiceCredentials)().uri;
		const subdomain = (0, jwt_1.getSubdomain)(token.decoded);
		logger$3.debug(`Retrieving all destinations for account: "${subdomain}" from destination service.`);
		const [instance, subaccount] = await Promise.all([(0, destination_service_1.fetchDestinations)(destinationServiceUri, token.encoded, "instance", options), (0, destination_service_1.fetchDestinations)(destinationServiceUri, token.encoded, "subaccount", options)]);
		const loggerMessage = createDestinationFetchLogs("instance", instance) + createDestinationFetchLogs("subaccount", subaccount);
		logger$3.debug(loggerMessage);
		const allDestinations = [...instance, ...subaccount];
		if (allDestinations?.length) logger$3.debug(`Successfully retrieved all destinations for account: "${subdomain}" from destination service.`);
		else {
			logger$3.debug("Didn't receive any destinations from destination service.");
			return [];
		}
		const allDestinationsWithoutToken = allDestinations.map((destination) => {
			delete destination.authTokens;
			return destination;
		});
		return allDestinationsWithoutToken;
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/index.js
var require_destination = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/destination/index.js"(exports) {
	var __createBinding$4 = exports && exports.__createBinding || (Object.create ? function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc$1 = Object.getOwnPropertyDescriptor(m$1, k);
		if (!desc$1 || ("get" in desc$1 ? !m$1.__esModule : desc$1.writable || desc$1.configurable)) desc$1 = {
			enumerable: true,
			get: function() {
				return m$1[k];
			}
		};
		Object.defineProperty(o, k2, desc$1);
	} : function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		o[k2] = m$1[k];
	});
	var __exportStar$3 = exports && exports.__exportStar || function(m$1, exports$1) {
		for (var p in m$1) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports$1, p)) __createBinding$4(exports$1, m$1, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar$3(require_destination_accessor(), exports);
	__exportStar$3(require_destination_accessor_types(), exports);
	__exportStar$3(require_destination_cache(), exports);
	__exportStar$3(require_destination_from_env(), exports);
	__exportStar$3(require_destination_from_service(), exports);
	__exportStar$3(require_destination_from_registration(), exports);
	__exportStar$3(require_destination_from_vcap(), exports);
	__exportStar$3(require_destination_selection_strategies(), exports);
	__exportStar$3(require_destination_service_cache(), exports);
	__exportStar$3(require_destination_service_types(), exports);
	__exportStar$3(require_destination_service(), exports);
	__exportStar$3(require_destination$1(), exports);
	__exportStar$3(require_forward_auth_token(), exports);
	__exportStar$3(require_get_subscriber_token(), exports);
	__exportStar$3(require_get_provider_token(), exports);
	__exportStar$3(require_http_proxy_util(), exports);
	__exportStar$3(require_service_binding_to_destination(), exports);
	__exportStar$3(require_register_destination_cache(), exports);
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/connectivity-service-types.js
var require_connectivity_service_types = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/connectivity-service-types.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/header-builder-for-destination.js
var require_header_builder_for_destination = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/header-builder-for-destination.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.buildHeadersForDestination = buildHeadersForDestination;
	const util_1$4 = require_dist$4();
	const authorization_header_1 = require_authorization_header();
	/**
	* Build a request header object, that contains authentication headers and SAP specific headers like 'sap-client', from a given destination.
	* @param destination - The given destination that contains e.g., authentication and SAP client information.
	* @returns A request header object, built from the given destination.
	*/
	async function buildHeadersForDestination(destination) {
		const authHeaders = await (0, authorization_header_1.buildAuthorizationHeaders)(destination);
		const sapHeaders = getSapHeaders(destination);
		return (0, util_1$4.mergeIgnoreCase)(destination.headers, {
			...authHeaders,
			...sapHeaders
		});
	}
	function getSapHeaders(destination) {
		const defaultHeaders = (0, util_1$4.pickNonNullish)({
			"sap-client": destination.sapClient,
			"SAP-Connectivity-SCC-Location_ID": destination.cloudConnectorLocationId
		});
		return (0, util_1$4.mergeLeftIgnoreCase)(defaultHeaders, destination.headers);
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/jsonwebtoken-type.js
var require_jsonwebtoken_type = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/jsonwebtoken-type.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/xsuaa-service-types.js
var require_xsuaa_service_types = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/xsuaa-service-types.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/index.js
var require_scp_cf = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/scp-cf/index.js"(exports) {
	var __createBinding$3 = exports && exports.__createBinding || (Object.create ? function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc$1 = Object.getOwnPropertyDescriptor(m$1, k);
		if (!desc$1 || ("get" in desc$1 ? !m$1.__esModule : desc$1.writable || desc$1.configurable)) desc$1 = {
			enumerable: true,
			get: function() {
				return m$1[k];
			}
		};
		Object.defineProperty(o, k2, desc$1);
	} : function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		o[k2] = m$1[k];
	});
	var __exportStar$2 = exports && exports.__exportStar || function(m$1, exports$1) {
		for (var p in m$1) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports$1, p)) __createBinding$3(exports$1, m$1, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar$2(require_destination(), exports);
	__exportStar$2(require_authorization_header(), exports);
	__exportStar$2(require_cache$1(), exports);
	__exportStar$2(require_client_credentials_token_cache(), exports);
	__exportStar$2(require_connectivity_service(), exports);
	__exportStar$2(require_connectivity_service_types(), exports);
	__exportStar$2(require_environment_accessor(), exports);
	__exportStar$2(require_get_protocol(), exports);
	__exportStar$2(require_header_builder_for_destination(), exports);
	__exportStar$2(require_identity_service(), exports);
	__exportStar$2(require_jsonwebtoken_type(), exports);
	__exportStar$2(require_jwt(), exports);
	__exportStar$2(require_protocol(), exports);
	__exportStar$2(require_subdomain_replacer(), exports);
	__exportStar$2(require_tenant(), exports);
	__exportStar$2(require_token_accessor(), exports);
	__exportStar$2(require_xsuaa_service_types(), exports);
	__exportStar$2(require_xsuaa_service(), exports);
	__exportStar$2(require_async_cache(), exports);
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/index.js
var require_dist$2 = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/index.js"(exports) {
	/**
	* [[include:connectivity/README.md]]
	* @packageDocumentation
	* @module @sap-cloud-sdk/connectivity
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.getAgentConfig = exports.transformServiceBindingToClientCredentialsDestination = exports.getTenantId = exports.getAllDestinationsFromDestinationService = exports.transformServiceBindingToDestination = exports.getDestinationFromServiceBinding = exports.getServiceBinding = exports.setDestinationCache = exports.registerDestination = exports.getUserToken = exports.getClientCredentialsToken = exports.buildHeadersForDestination = exports.DestinationSelectionStrategies = exports.assertHttpDestination = exports.isHttpDestination = exports.serviceToken = exports.jwtBearerToken = exports.retrieveJwt = exports.decodeJwt = exports.parseProxyEnv = exports.subscriberFirst = exports.alwaysSubscriber = exports.alwaysProvider = exports.getDestinationFromDestinationService = exports.useOrFetchDestination = exports.getDestination = exports.sanitizeDestination = exports.toDestinationNameUrl = void 0;
	var scp_cf_1 = require_scp_cf();
	Object.defineProperty(exports, "toDestinationNameUrl", {
		enumerable: true,
		get: function() {
			return scp_cf_1.toDestinationNameUrl;
		}
	});
	Object.defineProperty(exports, "sanitizeDestination", {
		enumerable: true,
		get: function() {
			return scp_cf_1.sanitizeDestination;
		}
	});
	Object.defineProperty(exports, "getDestination", {
		enumerable: true,
		get: function() {
			return scp_cf_1.getDestination;
		}
	});
	Object.defineProperty(exports, "useOrFetchDestination", {
		enumerable: true,
		get: function() {
			return scp_cf_1.useOrFetchDestination;
		}
	});
	Object.defineProperty(exports, "getDestinationFromDestinationService", {
		enumerable: true,
		get: function() {
			return scp_cf_1.getDestinationFromDestinationService;
		}
	});
	Object.defineProperty(exports, "alwaysProvider", {
		enumerable: true,
		get: function() {
			return scp_cf_1.alwaysProvider;
		}
	});
	Object.defineProperty(exports, "alwaysSubscriber", {
		enumerable: true,
		get: function() {
			return scp_cf_1.alwaysSubscriber;
		}
	});
	Object.defineProperty(exports, "subscriberFirst", {
		enumerable: true,
		get: function() {
			return scp_cf_1.subscriberFirst;
		}
	});
	Object.defineProperty(exports, "parseProxyEnv", {
		enumerable: true,
		get: function() {
			return scp_cf_1.parseProxyEnv;
		}
	});
	Object.defineProperty(exports, "decodeJwt", {
		enumerable: true,
		get: function() {
			return scp_cf_1.decodeJwt;
		}
	});
	Object.defineProperty(exports, "retrieveJwt", {
		enumerable: true,
		get: function() {
			return scp_cf_1.retrieveJwt;
		}
	});
	Object.defineProperty(exports, "jwtBearerToken", {
		enumerable: true,
		get: function() {
			return scp_cf_1.jwtBearerToken;
		}
	});
	Object.defineProperty(exports, "serviceToken", {
		enumerable: true,
		get: function() {
			return scp_cf_1.serviceToken;
		}
	});
	Object.defineProperty(exports, "isHttpDestination", {
		enumerable: true,
		get: function() {
			return scp_cf_1.isHttpDestination;
		}
	});
	Object.defineProperty(exports, "assertHttpDestination", {
		enumerable: true,
		get: function() {
			return scp_cf_1.assertHttpDestination;
		}
	});
	Object.defineProperty(exports, "DestinationSelectionStrategies", {
		enumerable: true,
		get: function() {
			return scp_cf_1.DestinationSelectionStrategies;
		}
	});
	Object.defineProperty(exports, "buildHeadersForDestination", {
		enumerable: true,
		get: function() {
			return scp_cf_1.buildHeadersForDestination;
		}
	});
	Object.defineProperty(exports, "getClientCredentialsToken", {
		enumerable: true,
		get: function() {
			return scp_cf_1.getClientCredentialsToken;
		}
	});
	Object.defineProperty(exports, "getUserToken", {
		enumerable: true,
		get: function() {
			return scp_cf_1.getUserToken;
		}
	});
	Object.defineProperty(exports, "registerDestination", {
		enumerable: true,
		get: function() {
			return scp_cf_1.registerDestination;
		}
	});
	Object.defineProperty(exports, "setDestinationCache", {
		enumerable: true,
		get: function() {
			return scp_cf_1.setDestinationCache;
		}
	});
	Object.defineProperty(exports, "getServiceBinding", {
		enumerable: true,
		get: function() {
			return scp_cf_1.getServiceBinding;
		}
	});
	Object.defineProperty(exports, "getDestinationFromServiceBinding", {
		enumerable: true,
		get: function() {
			return scp_cf_1.getDestinationFromServiceBinding;
		}
	});
	Object.defineProperty(exports, "transformServiceBindingToDestination", {
		enumerable: true,
		get: function() {
			return scp_cf_1.transformServiceBindingToDestination;
		}
	});
	Object.defineProperty(exports, "getAllDestinationsFromDestinationService", {
		enumerable: true,
		get: function() {
			return scp_cf_1.getAllDestinationsFromDestinationService;
		}
	});
	Object.defineProperty(exports, "getTenantId", {
		enumerable: true,
		get: function() {
			return scp_cf_1.getTenantId;
		}
	});
	Object.defineProperty(exports, "transformServiceBindingToClientCredentialsDestination", {
		enumerable: true,
		get: function() {
			return scp_cf_1.transformServiceBindingToClientCredentialsDestination;
		}
	});
	var http_agent_1 = require_http_agent();
	Object.defineProperty(exports, "getAgentConfig", {
		enumerable: true,
		get: function() {
			return http_agent_1.getAgentConfig;
		}
	});
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/internal.js
var require_internal$3 = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/dist/internal.js"(exports) {
	var __createBinding$2 = exports && exports.__createBinding || (Object.create ? function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc$1 = Object.getOwnPropertyDescriptor(m$1, k);
		if (!desc$1 || ("get" in desc$1 ? !m$1.__esModule : desc$1.writable || desc$1.configurable)) desc$1 = {
			enumerable: true,
			get: function() {
				return m$1[k];
			}
		};
		Object.defineProperty(o, k2, desc$1);
	} : function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		o[k2] = m$1[k];
	});
	var __exportStar$1 = exports && exports.__exportStar || function(m$1, exports$1) {
		for (var p in m$1) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports$1, p)) __createBinding$2(exports$1, m$1, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar$1(require_http_agent(), exports);
	__exportStar$1(require_scp_cf(), exports);
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/internal.js
var require_internal$2 = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+connectivity@4.0.2/node_modules/@sap-cloud-sdk/connectivity/internal.js"(exports) {
	function __export$1(m$1) {
		for (const p in m$1) if (!exports.hasOwnProperty(p)) exports[p] = m$1[p];
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	* @packageDocumentation
	* @experimental The internal module is related to sdk-metadata types which are used only internally.
	*/
	__export$1(require_internal$3());
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+http-client@4.0.2/node_modules/@sap-cloud-sdk/http-client/dist/csrf-token-middleware.js
var require_csrf_token_middleware = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+http-client@4.0.2/node_modules/@sap-cloud-sdk/http-client/dist/csrf-token-middleware.js"(exports) {
	var __importDefault$1 = exports && exports.__importDefault || function(mod) {
		return mod && mod.__esModule ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.csrf = csrf;
	exports.buildCsrfFetchHeaders = buildCsrfFetchHeaders;
	const util_1$3 = require_dist$4();
	const axios_1$1 = __importDefault$1(require_axios());
	const internal_1$2 = require_internal$4();
	const logger$2 = (0, util_1$3.createLogger)("csrf-middleware");
	/**
	* Middleware for fetching a CSRF token. This middleware is added to all request per default.
	* Use the `fetchCsrfToken` option to disable it.
	* @param options - Options like URL or method to configure the token fetching.
	* @returns The middleware for fetching CSRF tokens.
	*/
	function csrf(options) {
		return (middlewareOptions) => async (requestConfig) => {
			if (!needsCsrfToken(requestConfig)) return middlewareOptions.fn(requestConfig);
			const csrfToken = await makeCsrfRequests(requestConfig, {
				...options,
				...middlewareOptions
			});
			if (csrfToken?.cookie) csrfToken.cookie = requestConfig.headers?.cookie ? [requestConfig.headers?.cookie, csrfToken?.cookie].join(";") : csrfToken?.cookie;
			requestConfig.headers = {
				...requestConfig.headers,
				...csrfToken
			};
			return middlewareOptions.fn(requestConfig);
		};
	}
	function needsCsrfToken(requestConfig) {
		if (requestConfig.method.toLowerCase() === "get") {
			logger$2.debug("Method is GET no CSRF token needed.");
			return false;
		}
		if ((0, util_1$3.pickValueIgnoreCase)(requestConfig.headers, "x-csrf-token")) {
			logger$2.debug("CSRF token header was already provided. Existing token used.");
			return false;
		}
		return true;
	}
	function appendSlash(requestConfig) {
		if (!requestConfig.url) requestConfig.url = "/";
		else if (!requestConfig.url.endsWith("/")) requestConfig.url = `${requestConfig.url}/`;
		return requestConfig;
	}
	function removeSlash(requestConfig) {
		if (requestConfig.url.endsWith("/")) requestConfig.url = (0, util_1$3.removeTrailingSlashes)(requestConfig.url);
		return requestConfig;
	}
	function getCsrfToken(headers) {
		return Object.values((0, util_1$3.pickIgnoreCase)(headers, "x-csrf-token"))[0];
	}
	function getSetCookieHeader(headers) {
		const cookies$1 = Object.values((0, util_1$3.pickIgnoreCase)(headers, "set-cookie"));
		return (0, util_1$3.flatten)(cookies$1).map((cookie) => cookie.split(";")[0]).join(";");
	}
	/**
	* @param headers - Request header information.
	* @returns CSRF related headers.
	* @internal
	*/
	function buildCsrfFetchHeaders(headers) {
		const contentLengthHeaderKey = (0, util_1$3.first)(Object.keys((0, util_1$3.pickIgnoreCase)(headers, "content-length"))) || "content-length";
		return {
			"x-csrf-token": "Fetch",
			...headers,
			[contentLengthHeaderKey]: 0
		};
	}
	async function makeCsrfRequest(requestConfig, options) {
		try {
			const response = await (0, internal_1$2.executeWithMiddleware)(options.middleware, {
				fn: axios_1$1.default.request,
				fnArgument: requestConfig,
				context: options.context
			});
			return findCsrfHeader(response.headers);
		} catch (error$1) {
			if (findCsrfHeader(error$1.response?.headers)) return findCsrfHeader(error$1.response?.headers);
			logger$2.warn(new util_1$3.ErrorWithCause(`Failed to get CSRF token from  URL: ${requestConfig.url}.`, error$1));
		}
	}
	function findCsrfHeader(headers) {
		if (!headers) return;
		const csrfHeader = getCsrfToken(headers);
		if (!csrfHeader) return;
		const cookieHeader = getSetCookieHeader(headers) ? { cookie: getSetCookieHeader(headers) } : {};
		return {
			"x-csrf-token": csrfHeader,
			...cookieHeader
		};
	}
	async function makeCsrfRequests(requestConfig, options) {
		const { data, params, parameterEncoder,...requestConfigWithoutData } = requestConfig;
		const axiosConfig = {
			...requestConfigWithoutData,
			method: options.method || "head",
			url: options.url || requestConfig.url,
			headers: buildCsrfFetchHeaders(requestConfig.headers)
		};
		if (options.url) return makeCsrfRequest(axiosConfig, options);
		return await makeCsrfRequest(appendSlash(axiosConfig), options) ?? await makeCsrfRequest(removeSlash(axiosConfig), options);
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+http-client@4.0.2/node_modules/@sap-cloud-sdk/http-client/dist/http-client-types.js
var require_http_client_types = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+http-client@4.0.2/node_modules/@sap-cloud-sdk/http-client/dist/http-client-types.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.isOriginOptions = isOriginOptions;
	exports.isHttpRequestConfigWithOrigin = isHttpRequestConfigWithOrigin;
	/**
	* Type guard to check whether an object is of type `OriginOptions`.
	* Warn: there can be an edge case that one can define a normal header like the example:
	* {
	*   custom: {
	*     key: 'value'
	*   }
	* }
	* However, this will be treated as `OriginOptions`, as it contains `custom` as a key and an object as the value of the key.
	* This known issue can be handled by switching from `executeHttpClient` to `executeHttpClientWithOrigin`.
	* @param obj - Object to check.
	* @returns `true` if the object is a `OriginOptions` object, `false` otherwise.
	* @internal
	*/
	function isOriginOptions(obj) {
		return !!obj && (typeof obj["requestConfig"] === "object" || typeof obj["custom"] === "object");
	}
	/**
	* @internal
	*/
	function isHttpRequestConfigWithOrigin(requestConfig) {
		return isOriginOptions(requestConfig.headers) || isOriginOptions(requestConfig.params);
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+http-client@4.0.2/node_modules/@sap-cloud-sdk/http-client/dist/http-request-config.js
var require_http_request_config = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+http-client@4.0.2/node_modules/@sap-cloud-sdk/http-client/dist/http-request-config.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.origins = exports.defaultDisallowedKeys = void 0;
	exports.filterCustomRequestConfig = filterCustomRequestConfig;
	exports.mergeOptionsWithPriority = mergeOptionsWithPriority;
	const util_1$2 = require_dist$4();
	const logger$1 = (0, util_1$2.createLogger)({
		package: "http-client",
		messageContext: "http-request-config"
	});
	/**
	* Filter disallowed keys from a given custom request config object.
	* @param customRequestConfig - a given custom request config object to be filtered
	* @param disallowedKeys - A list of keys that are not allowed to be customized.
	* @returns Filtered custom request config object.
	* @internal
	*/
	function filterCustomRequestConfig(customRequestConfig, disallowedKeys = exports.defaultDisallowedKeys) {
		const removedKeys = Object.keys(customRequestConfig).filter((key$1) => disallowedKeys.includes(key$1));
		if (removedKeys.length) logger$1.warn(`The following keys are found in the custom request config that will be removed: ${removedKeys.join(", ")}`);
		return (0, util_1$2.exclude)(disallowedKeys, customRequestConfig);
	}
	/**
	* A list of request config keys that are not allowed to be customized by default.
	*/
	exports.defaultDisallowedKeys = [
		"url",
		"baseURL",
		"data",
		"headers",
		"params"
	];
	/**
	* Merge options from a given {@link OriginOptions}. When reaching conflicts, values with higher priorities are chosen.
	* @param headersOrParams - Given options with origin information.
	* @returns The resulting merged options.
	* @internal
	*/
	function mergeOptionsWithPriority(headersOrParams) {
		if (headersOrParams) return exports.origins.reduce((mergedHeadersOrParams, origin$1) => (0, util_1$2.mergeIgnoreCase)(mergedHeadersOrParams, headersOrParams[origin$1]), {});
	}
	/**
	* @internal
	* All origins ordered from low to high priority.
	*/
	exports.origins = [
		"requestConfig",
		"destination",
		"destinationProperty",
		"custom"
	];
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+http-client@4.0.2/node_modules/@sap-cloud-sdk/http-client/dist/http-client.js
var require_http_client = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+http-client@4.0.2/node_modules/@sap-cloud-sdk/http-client/dist/http-client.js"(exports) {
	var __createBinding$1 = exports && exports.__createBinding || (Object.create ? function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc$1 = Object.getOwnPropertyDescriptor(m$1, k);
		if (!desc$1 || ("get" in desc$1 ? !m$1.__esModule : desc$1.writable || desc$1.configurable)) desc$1 = {
			enumerable: true,
			get: function() {
				return m$1[k];
			}
		};
		Object.defineProperty(o, k2, desc$1);
	} : function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		o[k2] = m$1[k];
	});
	var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v$1) {
		Object.defineProperty(o, "default", {
			enumerable: true,
			value: v$1
		});
	} : function(o, v$1) {
		o["default"] = v$1;
	});
	var __importStar = exports && exports.__importStar || function() {
		var ownKeys$2 = function(o) {
			ownKeys$2 = Object.getOwnPropertyNames || function(o$1) {
				var ar = [];
				for (var k in o$1) if (Object.prototype.hasOwnProperty.call(o$1, k)) ar[ar.length] = k;
				return ar;
			};
			return ownKeys$2(o);
		};
		return function(mod) {
			if (mod && mod.__esModule) return mod;
			var result = {};
			if (mod != null) {
				for (var k = ownKeys$2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding$1(result, mod, k[i]);
			}
			__setModuleDefault(result, mod);
			return result;
		};
	}();
	var __importDefault = exports && exports.__importDefault || function(mod) {
		return mod && mod.__esModule ? mod : { "default": mod };
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.encodeAllParameters = exports.oDataTypedClientParameterEncoder = void 0;
	exports.buildHttpRequest = buildHttpRequest;
	exports.execute = execute;
	exports.buildHttpRequestConfigWithOrigin = buildHttpRequestConfigWithOrigin;
	exports.buildRequestWithMergedHeadersAndQueryParameters = buildRequestWithMergedHeadersAndQueryParameters;
	exports.executeHttpRequest = executeHttpRequest;
	exports.executeHttpRequestWithOrigin = executeHttpRequestWithOrigin;
	exports.getAxiosConfigWithDefaults = getAxiosConfigWithDefaults;
	exports.getAxiosConfigWithDefaultsWithoutMethod = getAxiosConfigWithDefaultsWithoutMethod;
	exports.getDefaultHttpRequestConfigOptions = getDefaultHttpRequestConfigOptions;
	exports.getDefaultHttpRequestOptions = getDefaultHttpRequestOptions;
	const http = __importStar(__require("http"));
	const https = __importStar(__require("https"));
	const connectivity_1$1 = require_dist$2();
	const internal_1$1 = require_internal$2();
	const internal_2$1 = require_internal$4();
	const util_1$1 = require_dist$4();
	const axios_1 = __importDefault(require_axios());
	const http_client_types_1 = require_http_client_types();
	const http_request_config_1$1 = require_http_request_config();
	const csrf_token_middleware_1$1 = require_csrf_token_middleware();
	const logger = (0, util_1$1.createLogger)({
		package: "http-client",
		messageContext: "http-client"
	});
	/**
	* Builds a {@link DestinationHttpRequestConfig} for the given destination.
	* If a destination name (and a JWT) are provided, it will try to resolve the destination.
	* @param destination - A destination or a destination name and a JWT.
	* @returns A {@link DestinationHttpRequestConfig}.
	*/
	async function buildHttpRequest(destination) {
		const resolvedDestination = await (0, internal_1$1.resolveDestination)(destination);
		(0, internal_1$1.assertHttpDestination)(resolvedDestination);
		const headers = await buildHeaders(resolvedDestination);
		return buildDestinationHttpRequestConfig(resolvedDestination, headers);
	}
	/**
	* Takes as parameter a function that expects an {@link HttpRequest} and returns a Promise of {@link HttpResponse}.
	* Returns a function that takes a destination and a request-config (extends {@link HttpRequestConfig}), builds an {@link HttpRequest} from them, and calls
	* the provided execute function.
	*
	* NOTE: If you simply want to execute a request without passing your own execute function, use {@link executeHttpRequest} instead.
	* @param executeFn - A function that can execute an {@link HttpRequestConfig}.
	* @returns A function expecting destination and a request.
	* @internal
	*/
	function execute(executeFn) {
		return async function(destination, requestConfig, options) {
			const resolvedDestination = await (0, internal_1$1.resolveDestination)(destination);
			(0, internal_1$1.assertHttpDestination)(resolvedDestination);
			const destinationRequestConfig = await buildHttpRequest(resolvedDestination);
			logCustomHeadersWarning(requestConfig.headers);
			const request$1 = await buildRequestWithMergedHeadersAndQueryParameters(requestConfig, resolvedDestination, destinationRequestConfig, destination.jwt);
			if (options?.fetchCsrfToken) requestConfig.middleware = [...requestConfig.middleware || [], (0, csrf_token_middleware_1$1.csrf)()];
			return (0, internal_2$1.executeWithMiddleware)(requestConfig.middleware, {
				fnArgument: request$1,
				fn: (req) => {
					logRequestInformation(request$1);
					return executeFn(req);
				},
				context: {
					jwt: destination.jwt,
					uri: resolvedDestination.url,
					destinationName: resolvedDestination.name ?? void 0,
					tenantId: (0, connectivity_1$1.getTenantId)(destination.jwt)
				}
			});
		};
	}
	/**
	* Build an {@link HttpRequestConfigWithOrigin} from a given {@link HttpRequestConfigWithOrigin} or {@link HttpRequestConfig}
	* @param requestConfig - The given {@link HttpRequestConfigWithOrigin} or {@link HttpRequestConfig}
	* @returns The resulting {@link HttpRequestConfigWithOrigin}
	* @internal
	*/
	function buildHttpRequestConfigWithOrigin(requestConfig) {
		if (!requestConfig) return getDefaultHttpRequestConfigOptions();
		if ((0, http_client_types_1.isHttpRequestConfigWithOrigin)(requestConfig)) return requestConfig;
		return {
			...requestConfig,
			headers: {
				requestConfig: {},
				...requestConfig.headers && { custom: requestConfig.headers }
			},
			params: {
				requestConfig: {},
				...requestConfig.params && { custom: requestConfig.params }
			}
		};
	}
	/**
	* This method does nothing and is only there to indicate that the call was made by a typed OData client and encoding already happened in the client.
	* @param params - Parameters which are returned.
	* @returns The parameters as they are without encoding.
	* @internal
	*/
	const oDataTypedClientParameterEncoder = (params) => params;
	exports.oDataTypedClientParameterEncoder = oDataTypedClientParameterEncoder;
	function encodeQueryParameters(options) {
		const { parameterEncoder, parameters, exclude: exclude$1 } = options;
		return Object.fromEntries(Object.entries(parameters).map(([key$1, value]) => exclude$1.includes(key$1) ? [key$1, value] : [key$1, value ? parameterEncoder(value) : value]));
	}
	function isOdataTypedClientParameterEncoder(parameterEncoder) {
		return parameterEncoder.name === exports.oDataTypedClientParameterEncoder.name;
	}
	function getEncodedParameters(parameters, requestConfig) {
		const { parameterEncoder } = requestConfig;
		if ((0, util_1$1.isNullish)(parameterEncoder)) return encodeQueryParameters({
			parameters,
			parameterEncoder: exports.encodeAllParameters,
			exclude: ["custom"]
		});
		if (isOdataTypedClientParameterEncoder(parameterEncoder)) return encodeQueryParameters({
			parameters,
			parameterEncoder: exports.encodeAllParameters,
			exclude: ["custom", "requestConfig"]
		});
		return encodeQueryParameters({
			parameters,
			parameterEncoder,
			exclude: []
		});
	}
	/**
	* @internal
	* Build a request config from a given request config and a destination.
	* In addition to merging the information from the request config and the destination, it also picks values with higher priority for headers and query parameters.
	* @param requestConfig - Any object representing an HTTP request.
	* @param destination - A resolved {@link Destination} object.
	* @param destinationRequestConfig - A {@link DestinationHttpRequestConfig} object, that is built from a {@link Destination}.
	* @see {@link mergeOptionsWithPriority}
	* @returns A resulting request config.
	*/
	async function buildRequestWithMergedHeadersAndQueryParameters(requestConfig, destination, destinationRequestConfig, jwt) {
		const { paramsOriginOptions, headersOriginOptions, requestConfigBase } = splitRequestConfig(requestConfig);
		const parameters = collectParametersFromAllOrigins(destination, paramsOriginOptions);
		const encodedParameters = getEncodedParameters(parameters, requestConfig);
		const mergedQueryParameter = (0, http_request_config_1$1.mergeOptionsWithPriority)(encodedParameters);
		const mergedHeaders = await getMergedHeaders(destination, destinationRequestConfig.headers, headersOriginOptions, jwt);
		const request$1 = merge(destinationRequestConfig, requestConfigBase);
		request$1.headers = mergedHeaders || {};
		request$1.params = mergedQueryParameter || {};
		return request$1;
	}
	async function getMergedHeaders(destination, headersDestination, headersOriginOptions, jwt) {
		const queryParametersDestinationProperty = (0, internal_1$1.getAdditionalHeaders)(destination.originalProperties || {}).headers;
		headersDestination = destination.forwardAuthToken ? addForwardAuthTokenHeader(headersDestination, jwt) : headersDestination;
		return (0, http_request_config_1$1.mergeOptionsWithPriority)({
			requestConfig: headersOriginOptions?.requestConfig,
			custom: { ...headersOriginOptions?.custom },
			destinationProperty: queryParametersDestinationProperty,
			destination: headersDestination
		});
	}
	function addForwardAuthTokenHeader(headersDestination, jwt) {
		if (jwt) return {
			...headersDestination,
			authorization: `Bearer ${jwt}`
		};
		logger.debug("The `forwardAuthToken` is set, but the JWT is missing. Please provide a valid JWT to enable token forwarding.");
		return headersDestination;
	}
	function collectParametersFromAllOrigins(destination, paramsOriginOptions) {
		const queryParametersDestinationProperty = (0, internal_1$1.getAdditionalQueryParameters)(destination.originalProperties || {}).queryParameters;
		return {
			...paramsOriginOptions,
			destinationProperty: queryParametersDestinationProperty,
			destination: destination.queryParameters
		};
	}
	function splitRequestConfig(requestConfig) {
		const paramsOriginOptions = requestConfig.params;
		const headersOriginOptions = requestConfig.headers;
		return {
			paramsOriginOptions,
			headersOriginOptions,
			requestConfigBase: requestConfig
		};
	}
	function logCustomHeadersWarning(headers) {
		if (!headers) return;
		const customHeaders = headers.custom;
		const requestConfigHeaders = headers.requestConfig;
		if (customHeaders && requestConfigHeaders) {
			const headerKeysToBeOverwritten = Object.keys(customHeaders).filter((customHeaderKey) => Object.keys(requestConfigHeaders).includes(customHeaderKey));
			if (headerKeysToBeOverwritten.length) logger.debug(`The following custom headers will overwrite headers created by the SDK, if they use the same key:\n${headerKeysToBeOverwritten.map((key$1) => `  - "${key$1}"`).join("\n")}
If the parameters from multiple origins use the same key, the priority is 1. Custom, 2. Destination, 3. Internal.`);
		}
	}
	function logRequestInformation(request$1) {
		const basicRequestInfo = `Execute '${request$1.method}' request with target: ${request$1.url}.`;
		if (request$1.headers) {
			const headerText = Object.entries((0, util_1$1.sanitizeRecord)(request$1.headers)).map(([key$1, value]) => `${key$1}:${value}`).join(util_1$1.unixEOL);
			logger.debug(`${basicRequestInfo}${util_1$1.unixEOL}The headers of the request are:${util_1$1.unixEOL}${headerText}`);
		} else logger.debug(basicRequestInfo);
	}
	/**
	* Builds a {@link DestinationHttpRequestConfig} for the given destination, merges it into the given `requestConfig` and executes it (using Axios).
	* @param destination - A destination or a destination name and a JWT.
	* @param requestConfig - Any object representing an HTTP request.
	* @param options - An {@link HttpRequestOptions} of the HTTP request for configuring e.g., CSRF token delegation. By default, the SDK will fetch the CSRF token.
	* @returns A promise resolving to an {@link HttpResponse}.
	*/
	function executeHttpRequest(destination, requestConfig, options) {
		const requestConfigWithOrigin = buildHttpRequestConfigWithOrigin(requestConfig);
		return execute(executeWithAxios)(destination, requestConfigWithOrigin, {
			...getDefaultHttpRequestOptions(),
			...options
		});
	}
	/**
	* Builds a {@link DestinationHttpRequestConfig} for the given destination, merges it into the given {@link HttpRequestConfigWithOrigin}
	* and executes it (using Axios).
	* The {@link HttpRequestConfigWithOrigin} supports defining header options and query parameter options with origins.
	* Equally named headers and query parameters are prioritized in the following order:
	* 1. `custom`
	* 2. Destination related headers/query parameters
	* 3. `requestConfig`.
	* @param destination - A destination or a destination name and a JWT.
	* @param requestConfig - Any object representing an HTTP request.
	* @param options - An {@link HttpRequestOptions} of the HTTP request for configuring e.g., CSRF token delegation. By default, the SDK will fetch the CSRF token.
	* @returns A promise resolving to an {@link HttpResponse}.
	* @see https://sap.github.io/cloud-sdk/docs/js/features/connectivity/query-parameters
	*/
	function executeHttpRequestWithOrigin(destination, requestConfig, options) {
		const requestConfigWithDefaults = requestConfig ?? getDefaultHttpRequestConfigOptions();
		return execute(executeWithAxios)(destination, requestConfigWithDefaults, {
			...getDefaultHttpRequestOptions(),
			...options
		});
	}
	async function buildDestinationHttpRequestConfig(destination, headers) {
		return {
			baseURL: destination.url,
			headers,
			params: destination.queryParameters,
			proxy: (0, internal_1$1.getProxyConfig)(destination),
			...await (0, connectivity_1$1.getAgentConfig)(destination)
		};
	}
	async function buildHeaders(destination) {
		try {
			return await (0, connectivity_1$1.buildHeadersForDestination)(destination);
		} catch (error$1) {
			throw new util_1$1.ErrorWithCause("Failed to build headers.", error$1);
		}
	}
	function merge(destinationRequestConfig, customRequestConfig) {
		return {
			...destinationRequestConfig,
			...customRequestConfig,
			headers: {
				...destinationRequestConfig.headers,
				...customRequestConfig.headers
			}
		};
	}
	function mergeRequestWithAxiosDefaults(request$1) {
		return {
			...getAxiosConfigWithDefaults(),
			...request$1
		};
	}
	function executeWithAxios(request$1) {
		return axios_1.default.request(mergeRequestWithAxiosDefaults(request$1));
	}
	/**
	* Builds an Axios config with default configuration i.e. no_proxy, default http and https agent and GET as request method.
	* @returns RawAxiosRequestConfig with default parameters
	* @internal
	*/
	function getAxiosConfigWithDefaults() {
		return {
			...getAxiosConfigWithDefaultsWithoutMethod(),
			method: "get"
		};
	}
	/**
	* @internal
	*/
	function getAxiosConfigWithDefaultsWithoutMethod() {
		return {
			httpAgent: new http.Agent(),
			httpsAgent: new https.Agent(),
			timeout: 0,
			paramsSerializer: { serialize: (params = {}) => Object.entries(params).map(([key$1, value]) => `${key$1}=${value}`).join("&") }
		};
	}
	/**
	* @internal
	*/
	function getDefaultHttpRequestConfigOptions() {
		return { method: "get" };
	}
	/**
	* @internal
	*/
	function getDefaultHttpRequestOptions() {
		return { fetchCsrfToken: true };
	}
	/**
	* Encoder for encoding all query parameters (key and value) using encodeURIComponent.
	* @param parameter - Parameter to be encoded using encodeURIComponent.
	* @returns Encoded parameter object.
	*/
	const encodeAllParameters = function(parameter) {
		return Object.fromEntries(Object.entries(parameter).map(([key$1, value]) => [encodeURIComponent(key$1), encodeURIComponent(value)]));
	};
	exports.encodeAllParameters = encodeAllParameters;
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+http-client@4.0.2/node_modules/@sap-cloud-sdk/http-client/dist/index.js
var require_dist$1 = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+http-client@4.0.2/node_modules/@sap-cloud-sdk/http-client/dist/index.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.defaultDisallowedKeys = exports.executeHttpRequestWithOrigin = exports.executeHttpRequest = exports.encodeAllParameters = exports.buildHttpRequest = exports.csrf = void 0;
	/**
	* [[include:http-client/README.md]]
	* @packageDocumentation
	* @module @sap-cloud-sdk/http-client
	*/
	var csrf_token_middleware_1 = require_csrf_token_middleware();
	Object.defineProperty(exports, "csrf", {
		enumerable: true,
		get: function() {
			return csrf_token_middleware_1.csrf;
		}
	});
	var http_client_1$1 = require_http_client();
	Object.defineProperty(exports, "buildHttpRequest", {
		enumerable: true,
		get: function() {
			return http_client_1$1.buildHttpRequest;
		}
	});
	Object.defineProperty(exports, "encodeAllParameters", {
		enumerable: true,
		get: function() {
			return http_client_1$1.encodeAllParameters;
		}
	});
	Object.defineProperty(exports, "executeHttpRequest", {
		enumerable: true,
		get: function() {
			return http_client_1$1.executeHttpRequest;
		}
	});
	Object.defineProperty(exports, "executeHttpRequestWithOrigin", {
		enumerable: true,
		get: function() {
			return http_client_1$1.executeHttpRequestWithOrigin;
		}
	});
	var http_request_config_1 = require_http_request_config();
	Object.defineProperty(exports, "defaultDisallowedKeys", {
		enumerable: true,
		get: function() {
			return http_request_config_1.defaultDisallowedKeys;
		}
	});
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+http-client@4.0.2/node_modules/@sap-cloud-sdk/http-client/dist/internal.js
var require_internal$1 = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+http-client@4.0.2/node_modules/@sap-cloud-sdk/http-client/dist/internal.js"(exports) {
	var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		var desc$1 = Object.getOwnPropertyDescriptor(m$1, k);
		if (!desc$1 || ("get" in desc$1 ? !m$1.__esModule : desc$1.writable || desc$1.configurable)) desc$1 = {
			enumerable: true,
			get: function() {
				return m$1[k];
			}
		};
		Object.defineProperty(o, k2, desc$1);
	} : function(o, m$1, k, k2) {
		if (k2 === void 0) k2 = k;
		o[k2] = m$1[k];
	});
	var __exportStar = exports && exports.__exportStar || function(m$1, exports$1) {
		for (var p in m$1) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports$1, p)) __createBinding(exports$1, m$1, p);
	};
	Object.defineProperty(exports, "__esModule", { value: true });
	__exportStar(require_csrf_token_middleware(), exports);
	__exportStar(require_http_client(), exports);
	__exportStar(require_http_client_types(), exports);
	__exportStar(require_http_request_config(), exports);
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+http-client@4.0.2/node_modules/@sap-cloud-sdk/http-client/internal.js
var require_internal = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+http-client@4.0.2/node_modules/@sap-cloud-sdk/http-client/internal.js"(exports) {
	function __export(m$1) {
		for (const p in m$1) if (!exports.hasOwnProperty(p)) exports[p] = m$1[p];
	}
	Object.defineProperty(exports, "__esModule", { value: true });
	/**
	* @packageDocumentation
	* @experimental The internal module is related to sdk-metadata types which are used only internally.
	*/
	__export(require_internal$1());
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+openapi@4.0.2/node_modules/@sap-cloud-sdk/openapi/dist/openapi-request-builder.js
var require_openapi_request_builder = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+openapi@4.0.2/node_modules/@sap-cloud-sdk/openapi/dist/openapi-request-builder.js"(exports) {
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.OpenApiRequestBuilder = void 0;
	const util_1 = require_dist$4();
	const connectivity_1 = require_dist$2();
	const internal_1 = require_internal$2();
	const http_client_1 = require_dist$1();
	const internal_2 = require_internal();
	/**
	* Request builder for OpenAPI requests.
	* @typeParam ResponseT - Type of the response for the request.
	*/
	var OpenApiRequestBuilder = class {
		/**
		* Create an instance of `OpenApiRequestBuilder`.
		* @param method - HTTP method of the request to be built.
		* @param pathPattern - Path for the request containing path parameter references as in the OpenAPI specification.
		* @param parameters - Query parameters and or body to pass to the request.
		* @param basePath - The custom path to be prefixed to the API path pattern.
		*/
		constructor(method$1, pathPattern, parameters, basePath) {
			this.method = method$1;
			this.pathPattern = pathPattern;
			this.parameters = parameters;
			this.basePath = basePath;
			this._fetchCsrfToken = true;
			this.customHeaders = {};
			this.customRequestConfiguration = {};
			this._middlewares = [];
		}
		/**
		* Add custom headers to the request. If a header field with the given name already exists it is overwritten.
		* @param headers - Key-value pairs denoting additional custom headers.
		* @returns The request builder itself, to facilitate method chaining.
		*/
		addCustomHeaders(headers) {
			Object.entries(headers).forEach(([key$1, value]) => {
				this.customHeaders[key$1.toLowerCase()] = value;
			});
			return this;
		}
		/**
		* Add custom request configuration to the request. Typically, this is used when specifying response type for downloading files.
		* If the custom request configuration contains keys in this list {@link @sap-cloud-sdk/http-client!defaultDisallowedKeys}, they will be removed.
		* @param requestConfiguration - Key-value pairs denoting additional custom request configuration options to be set in the request.
		* @returns The request builder itself, to facilitate method chaining.
		*/
		addCustomRequestConfiguration(requestConfiguration) {
			Object.entries(requestConfiguration).forEach(([key$1, value]) => {
				this.customRequestConfiguration[key$1] = value;
			});
			return this;
		}
		/**
		* Skip fetching csrf token for this request, which is typically useful when the csrf token is not required.
		* @returns The request builder itself, to facilitate method chaining.
		*/
		skipCsrfTokenFetching() {
			this._fetchCsrfToken = false;
			return this;
		}
		middleware(first$1, ...rest) {
			this._middlewares = (0, util_1.transformVariadicArgumentToArray)(first$1, rest);
			return this;
		}
		/**
		* Execute request and get a raw {@link @sap-cloud-sdk/http-client!HttpResponse}, including all information about the HTTP response.
		* This especially comes in handy, when you need to access the headers or status code of the response.
		* @param destination - Destination or DestinationFetchOptions to execute the request against.
		* @returns A promise resolving to an {@link @sap-cloud-sdk/http-client!HttpResponse}.
		*/
		async executeRaw(destination) {
			const fetchCsrfToken = this._fetchCsrfToken && [
				"post",
				"put",
				"patch",
				"delete"
			].includes(this.method.toLowerCase());
			const resolvedDestination = await (0, connectivity_1.useOrFetchDestination)(destination);
			if ((0, util_1.isNullish)(destination)) throw Error((0, internal_1.noDestinationErrorMessage)(destination));
			(0, internal_1.assertHttpDestination)(resolvedDestination);
			return (0, http_client_1.executeHttpRequest)(resolvedDestination, await this.requestConfig(), { fetchCsrfToken });
		}
		/**
		* Execute request and get the response data. Use this to conveniently access the data of a service without technical information about the response.
		* @param destination - Destination or DestinationFetchOptions to execute the request against.
		* @returns A promise resolving to the requested return type.
		*/
		async execute(destination) {
			const response = await this.executeRaw(destination);
			if (isAxiosResponse(response)) return response.data;
			throw new Error("Could not access response data. Response was not an axios response.");
		}
		/**
		* Set the custom base path that gets prefixed to the API path parameter before a request.
		* @param basePath - Base path to be set.
		* @returns The request builder itself, to facilitate method chaining.
		*/
		setBasePath(basePath) {
			this.basePath = basePath;
			return this;
		}
		/**
		* Get http request config.
		* @returns Promise of http request config with origin.
		*/
		async requestConfig() {
			const defaultConfig = {
				method: this.method,
				url: this.getPath(),
				headers: this.getHeaders(),
				params: this.getParameters(),
				middleware: this._middlewares,
				data: this.parameters?.body
			};
			return {
				...defaultConfig,
				...(0, internal_2.filterCustomRequestConfig)(this.customRequestConfiguration)
			};
		}
		getHeaders() {
			const options = { requestConfig: this.parameters?.headerParameters || {} };
			if (Object.keys(this.customHeaders).length) return {
				custom: this.customHeaders,
				...options
			};
			return options;
		}
		getParameters() {
			return { requestConfig: this.parameters?.queryParameters || {} };
		}
		getPath() {
			const pathParameters = this.parameters?.pathParameters || {};
			const placeholders = this.pathPattern.match(/{[^/?#{}]+}/g) || [];
			return (this.basePath ? (0, util_1.removeSlashes)(this.basePath) : "") + placeholders.reduce((path$10, placeholder) => {
				const strippedPlaceholder = placeholder.slice(1, -1);
				const parameterValue = pathParameters[strippedPlaceholder];
				return path$10.replace(placeholder, encodeURIComponent(parameterValue));
			}, this.pathPattern);
		}
	};
	exports.OpenApiRequestBuilder = OpenApiRequestBuilder;
	function isAxiosResponse(val) {
		return "data" in val;
	}
} });

//#endregion
//#region node_modules/.pnpm/@sap-cloud-sdk+openapi@4.0.2/node_modules/@sap-cloud-sdk/openapi/dist/index.js
var require_dist = __commonJS({ "node_modules/.pnpm/@sap-cloud-sdk+openapi@4.0.2/node_modules/@sap-cloud-sdk/openapi/dist/index.js"(exports) {
	/**
	* [[include:openapi/README.md]]
	* @packageDocumentation
	* @module @sap-cloud-sdk/openapi
	*/
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.OpenApiRequestBuilder = void 0;
	var openapi_request_builder_1 = require_openapi_request_builder();
	Object.defineProperty(exports, "OpenApiRequestBuilder", {
		enumerable: true,
		get: function() {
			return openapi_request_builder_1.OpenApiRequestBuilder;
		}
	});
} });
var import_dist = __toESM(require_dist(), 1);

//#endregion
//#region src/generated/TMS_v2/files-api.ts
/**
* Representation of the 'FilesApi'.
* This API is part of the 'TMS_v2' service.
*/
const FilesApi = {
	_defaultBasePath: void 0,
	fileUploadV2: (body) => new import_dist.OpenApiRequestBuilder("post", "/files/upload", { body }, FilesApi._defaultBasePath),
	fileDelete: (fileId) => new import_dist.OpenApiRequestBuilder("delete", "/files/{fileId}", { pathParameters: { fileId } }, FilesApi._defaultBasePath)
};

//#endregion
//#region src/generated/TMS_v2/export-upload-api.ts
/**
* Representation of the 'ExportUploadApi'.
* This API is part of the 'TMS_v2' service.
*/
const ExportUploadApi = {
	_defaultBasePath: void 0,
	nodeExportByNameV2: (body) => new import_dist.OpenApiRequestBuilder("post", "/nodes/export", { body }, ExportUploadApi._defaultBasePath),
	nodeUploadByNameV2: (body) => new import_dist.OpenApiRequestBuilder("post", "/nodes/upload", { body }, ExportUploadApi._defaultBasePath)
};

//#endregion
//#region src/ctms.ts
let CTMS_NODE_NAME;
let CTMS_TR_DESCRIPTION;
let CTMS_TR_USER_NAME;
let CTMS_TR_CONTENT_TYPE;
let CTMS_TR_STORAGE_TYPE;
let CTMS_FILE_PATH = "";
let CTMS_ABSOLUTE_FILE_PATH = "";
let DESTINATION = {
	url: "",
	tokenServiceUrl: "",
	clientId: "",
	clientSecret: ""
};
/**
* Set module variables
*/
function setModuleVariables(params, auth, transportRequest) {
	CTMS_NODE_NAME = params.nodeName;
	CTMS_TR_DESCRIPTION = transportRequest.description;
	CTMS_TR_USER_NAME = transportRequest.username;
	CTMS_TR_CONTENT_TYPE = transportRequest.contentType;
	CTMS_TR_STORAGE_TYPE = transportRequest.storageType;
	CTMS_FILE_PATH = params.filePath;
	CTMS_ABSOLUTE_FILE_PATH = join(process$1.env.GITHUB_WORKSPACE || "", params.filePath);
	DESTINATION = {
		url: params.apiUrl || "",
		tokenServiceUrl: auth.tokenServiceUrl || "",
		clientId: auth.clientId || "",
		clientSecret: auth.clientSecret || ""
	};
}
/**
* Handle fetch responses
*/
async function processFetchResponse(response) {
	if (response.ok) return response.json();
	else throw new Error(`HTTP ${response.status} - ${response.statusText}`, { cause: await response.json() });
}
/**
* Validate user/system input
*/
async function validateInput() {
	if (!CTMS_FILE_PATH) throw new Error("FILE PATH cannot be empty");
	if (!DESTINATION.url) throw new Error("API URL cannot be empty");
	if (!DESTINATION.tokenServiceUrl) throw new Error("TOKEN SERVICE URL cannot be empty");
	if (!CTMS_NODE_NAME) throw new Error("NODE NAME cannot be empty");
	if (!CTMS_TR_CONTENT_TYPE) throw new Error("CONTENT TYPE cannot be empty");
	if (!CTMS_TR_STORAGE_TYPE) throw new Error("STORAGE TYPE cannot be empty");
	await access(CTMS_ABSOLUTE_FILE_PATH);
	new URL$1(DESTINATION.url);
	new URL$1(DESTINATION.tokenServiceUrl);
}
/**
* Get OAuth2 authentication token
*/
async function getAuthToken() {
	const { tokenServiceUrl, clientId, clientSecret } = DESTINATION;
	console.info(`Authenticating to: ${tokenServiceUrl}`);
	const encodedAuth = Buffer.from(`${clientId}:${clientSecret}`).toString("base64");
	const payload = new URLSearchParams$1();
	payload.append("grant_type", "client_credentials");
	payload.append("client_id", clientId);
	try {
		const response = await fetch(tokenServiceUrl, {
			method: "POST",
			headers: {
				"Content-type": "application/x-www-form-urlencoded",
				Authorization: `Basic ${encodedAuth}`
			},
			body: payload
		});
		return processFetchResponse(response);
	} catch (err) {
		throw new Error(`Error getting authorization token`, { cause: err });
	}
}
/**
* Upload MTA file to CTMS
*/
async function uploadMtaFile(oauthToken) {
	console.info(`Uploading file: ${CTMS_ABSOLUTE_FILE_PATH}`);
	const blob = new Blob([await readFile(CTMS_ABSOLUTE_FILE_PATH)]);
	const payload = new FormData();
	const fileName = basename(CTMS_ABSOLUTE_FILE_PATH);
	payload.append("namedUser", CTMS_TR_USER_NAME);
	payload.append("file", blob, fileName);
	return FilesApi.fileUploadV2(payload).skipCsrfTokenFetching().addCustomHeaders({ Authorization: `Bearer ${oauthToken}` }).execute(DESTINATION);
}
/**
* Add MTA file to cTMS Transport Node Queue
*/
async function addFileToTransportNodeQueue(fileId, fileName, oauthToken) {
	console.info(`Adding file to the Transport Node Queue: ${CTMS_NODE_NAME}`);
	const payload = {
		nodeName: CTMS_NODE_NAME,
		contentType: CTMS_TR_CONTENT_TYPE,
		storageType: CTMS_TR_STORAGE_TYPE,
		entries: [{ uri: fileId }],
		description: CTMS_TR_DESCRIPTION,
		namedUser: CTMS_TR_USER_NAME
	};
	return ExportUploadApi.nodeUploadByNameV2(payload).skipCsrfTokenFetching().addCustomHeaders({ Authorization: `Bearer ${oauthToken}` }).execute(DESTINATION);
}
/**
* Create a Transport Request in cTMS
*/
async function createTransportRequest() {
	const { access_token } = await getAuthToken();
	const fileInfo = await uploadMtaFile(access_token);
	return addFileToTransportNodeQueue((fileInfo?.fileId || "").toString(), fileInfo?.fileName || "", access_token);
}
/**
* Deploy to Cloud Transport Management Service (cTMS)
*/
async function ctmsDeploy(params, auth, transportRequestParams) {
	setModuleVariables(params, auth, transportRequestParams);
	await validateInput();
	return createTransportRequest();
}
var ctms_default = ctmsDeploy;

//#endregion
//#region src/index.ts
/**
* Main function  to run the action
*/
async function run() {
	try {
		import_core.info("Starting SAP BTP cTMS deployment...");
		const ctmsAuth = {
			tokenServiceUrl: import_core.getInput("CTMS_TOKEN_SERVICE_URL"),
			clientId: import_core.getInput("CTMS_CLIENT_ID"),
			clientSecret: import_core.getInput("CTMS_CLIENT_SECRET")
		};
		const ctmsParams = {
			apiUrl: import_core.getInput("CTMS_API_URL"),
			nodeName: import_core.getInput("CTMS_NODE_NAME"),
			filePath: import_core.getInput("CTMS_FILE_PATH")
		};
		const ctmsTransportRequest = {
			description: import_core.getInput("CTMS_TR_DESCRIPTION"),
			contentType: import_core.getInput("CTMS_TR_CONTENT_TYPE"),
			storageType: import_core.getInput("CTMS_TR_STORAGE_TYPE"),
			username: import_core.getInput("CTMS_TR_USER_NAME")
		};
		import_core.setSecret("CTMS_CLIENT_ID");
		import_core.setSecret("CTMS_CLIENT_SECRET");
		import_core.setSecret("CTMS_TR_USER_NAME");
		const transportRequest = await ctms_default(ctmsParams, ctmsAuth, ctmsTransportRequest);
		const queue = transportRequest.queueEntries[0];
		import_core.info(`Transport Request created: ${transportRequest.transportRequestDescription} (ID ${transportRequest.transportRequestId})`);
		import_core.info(`File ${ctmsParams.filePath} uploaded to Queue ID ${queue.queueId}: ${queue.nodeName} (ID ${queue.nodeId})'`);
		import_core.setOutput("CTMS_NODE_ID", queue.nodeId);
		import_core.setOutput("CTMS_NODE_NAME", queue.nodeName);
		import_core.setOutput("CTMS_QUEUE_ID", queue.queueId);
	} catch (err) {
		import_core.setFailed(`Action failed with error - ${err}`);
	}
}
await run();

//#endregion
//# sourceMappingURL=index.js.map